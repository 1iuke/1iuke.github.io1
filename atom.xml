<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Liu</title>
  
  
  <link href="https://1iuke.github.io/atom.xml" rel="self"/>
  
  <link href="https://1iuke.github.io/"/>
  <updated>2021-08-24T04:22:17.848Z</updated>
  <id>https://1iuke.github.io/</id>
  
  <author>
    <name>刘 可</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跨多刺激学习增强基于SSVEP的BCI的目标识别方法</title>
    <link href="https://1iuke.github.io/2021/08/24/Paper/SSVEP/%E8%B7%A8%E5%A4%9A%E5%88%BA%E6%BF%80%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%A2%9E%E5%BC%BA%E4%BA%86%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84BCI%E7%9A%84%E7%9B%AE%E6%A0%87%E8%AF%86%E5%88%AB%E6%96%B9%E6%B3%95/"/>
    <id>https://1iuke.github.io/2021/08/24/Paper/SSVEP/%E8%B7%A8%E5%A4%9A%E5%88%BA%E6%BF%80%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%A2%9E%E5%BC%BA%E4%BA%86%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84BCI%E7%9A%84%E7%9B%AE%E6%A0%87%E8%AF%86%E5%88%AB%E6%96%B9%E6%B3%95/</id>
    <published>2021-08-24T04:12:31.000Z</published>
    <updated>2021-08-24T04:22:17.848Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总结">0. 总结</h2><p>解决TRCA,CCA校准数据不足时性能急剧下降问题</p><p>利用跨不同刺激的 SSVEP 的先验知识和特性。</p><p>增强性能并节省校准时间。</p><h2 id="研究目标">1. 研究目标</h2><h2 id="研究背景及问题陈述">2. 研究背景及问题陈述</h2><h2 id="研究方法">3. 研究方法</h2><h2 id="结果">4. 结果</h2><h2 id="讨论">5. 讨论</h2><h2 id="笔记">6. 笔记</h2><h2 id="参考文献">参考文献</h2>]]></content>
    
    
    <summary type="html">Learning across Multi-Stimulus Enhances Target Recognition Methods in SSVEP-Based BCIs</summary>
    
    
    
    <category term="论文" scheme="https://1iuke.github.io/categories/%E8%AE%BA%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>IISMC</title>
    <link href="https://1iuke.github.io/2021/08/21/Paper/SSVEP/IISMC/"/>
    <id>https://1iuke.github.io/2021/08/21/Paper/SSVEP/IISMC/</id>
    <published>2021-08-21T12:44:16.000Z</published>
    <updated>2021-08-25T02:53:57.996Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总结">0. 总结</h2><h2 id="研究目标">1. 研究目标</h2><p>研究高速脑机接口，解决训练的费时费力问题</p><h2 id="研究背景及问题陈述">2. 研究背景及问题陈述</h2><p>虽然标准CCA对于SSVEPs的频率检测效率很高，但由于简化的预构建正余弦波几乎没有真实脑电数据中包含的丰富特征，因此识别精度并不令人满意</p><p>The individual template-based CCA (IT-CCA) ：用个体校正模板信号代替正余弦模板</p><p>优化参考信号的方法还有： (性能优于标准CCA)</p><ul><li>MwayCCA</li><li>L1-MCCA</li><li>MsetCCA</li></ul><p>与优化的参考信号相比，个体校正的模板信号可以更好地表征特定subject的 SSVEP,Combined-CCA将个体模板合并到 CCA 中获得了比其他现有的 CCA 更高的性能</p><p>最近最先进的 SSVEP 解码器通过<strong>最大化试验间相关关系</strong>从校准数据中学习空间滤波器，然后计算测试数据和转换后的单个模板之间的相关性</p><ul><li>TRCA</li><li>CORCA</li><li>SSCOR</li></ul><p>以前的研究依赖于<strong>任务相关信息在试验中稳定且相似</strong>的假设，这意味着需要足够数量的训练数据来提取基本特征。费时费力不利于应用。</p><p>独立于Subject的训练方法采用跨Subject迁移学习来提供Subject间的相似性,</p><ul><li>transfer template-based canonical correlation analysis (tt-CCA)</li><li>online transfer template-based CCA (ott-CCA)</li><li>transfer template-based Combined-CCA (Combined-tCCA)</li><li>adaptive transfer variant of Combined-tCCA (Adaptive-C3A)</li></ul><p>这些方法通过对所有源对象的训练数据进行平均来建立迁移模板，并且迁移模板被视为单个模板的替代品</p><p>最近的一项研究通过最大化跨试次和一组受试者的可重复成分来扩展 TRCA，称为组 TRCA (gTRCA)</p><p>gTRCA 利用新Subject和现有Subject之间的相似性来识别刺激</p><p>最近的另一项研究提出了最小二乘变换 (LST)，它将来自几个现有Subject的训练数据转换为适合个人数据并形成对个人数据的补充 。当单个试验次数有限时，LST 可以显着提高 SSVEP 解码性能。</p><p>事实上，固有的受试者内变异性可能会阻碍试验间转移能力。基于迁移知识的Subject间关联性可以减轻Subject内的可变性并减少校准会话的必要性</p><p>本研究提出了一个跨学科辅助框架，通过最大化Subject间和Subject内的相关性来增强 SSVEP 识别的鲁棒性。不仅是特定Subject的信息，更重要的是将Subject间的相似性集成到该方法中，从而进一步提高了提取特征的可分离性。</p><h2 id="研究方法">3. 研究方法</h2><p>IISMC通过最大化Subject间和Subject内的相关性，从自己和其他执行相同任务的Subject中提取特定的Subject信息和类似的任务相关信息。 多个弱分类器是由几个现有的被试建立的，然后通过平均加权整合来构建强分类器。</p><h2 id="结果">4. 结果</h2><p>与最先进的任务相关成分分析（TRCA）相比，性能更强。所需的训练数据更少。</p><h2 id="讨论">5. 讨论</h2><h2 id="笔记">6. 笔记</h2><h2 id="参考文献">参考文献</h2>]]></content>
    
    
    <summary type="html">Cross-Subject Assistance:Inter- and Intra-Subject Maximal Correlation for Enhancing the Performance of SSVEP-Based BCIs</summary>
    
    
    
    <category term="论文" scheme="https://1iuke.github.io/categories/%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="SSVEP" scheme="https://1iuke.github.io/tags/SSVEP/"/>
    
    <category term="CCA" scheme="https://1iuke.github.io/tags/CCA/"/>
    
    <category term="迁移学习" scheme="https://1iuke.github.io/tags/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="TRCA" scheme="https://1iuke.github.io/tags/TRCA/"/>
    
  </entry>
  
  <entry>
    <title>信号检测理论</title>
    <link href="https://1iuke.github.io/2021/06/11/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E4%BF%A1%E5%8F%B7%E6%A3%80%E6%B5%8B%E7%90%86%E8%AE%BA/"/>
    <id>https://1iuke.github.io/2021/06/11/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E4%BF%A1%E5%8F%B7%E6%A3%80%E6%B5%8B%E7%90%86%E8%AE%BA/</id>
    <published>2021-06-11T01:55:52.000Z</published>
    <updated>2021-06-11T02:58:39.447Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="section">1</h2><ul><li><p>概率密度函数pdf</p></li><li><p>累积分布函数cdf</p></li></ul><blockquote><p><strong>累积分布函数</strong>(Cumulative Distribution Function)，又叫分布函数，是<em>概率密度函数]的积分</em>，能完整描述一个实随机变量<em>X</em>的概率分布。</p></blockquote><ul><li>逆累积分布函数icdf</li></ul><blockquote><p>逆累积分布函数里面的"逆"，对应的英文单词是inverse</p><p>所以“逆累积分布函数”的意思其实是“反累积分布函数”</p><p>累积分布：分位点－&gt;概率，</p><p>逆累积分布：概率－&gt;分位点。</p></blockquote><h2 id="section-1">2</h2><ul><li>误差函数erf</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210611101308260.png"></p><ul><li>补余误差函数</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210611101355651.png"></p><ul><li>与标准正态分布函数的关系</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210611101446360.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210611101431797.png"></p><ul><li>逆补余误差函数</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210611105710564.png"></p><ul><li>与逆累积分布函数的关系</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210611105757586.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>脑机接口运动想象信号处理中的分类器组合方法</title>
    <link href="https://1iuke.github.io/2021/06/07/Paper/%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E8%BF%90%E5%8A%A8%E6%83%B3%E8%B1%A1%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E4%B8%AD%E7%9A%84%E5%88%86%E7%B1%BB%E5%99%A8%E7%BB%84%E5%90%88%E6%96%B9%E6%B3%95/"/>
    <id>https://1iuke.github.io/2021/06/07/Paper/%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E8%BF%90%E5%8A%A8%E6%83%B3%E8%B1%A1%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E4%B8%AD%E7%9A%84%E5%88%86%E7%B1%BB%E5%99%A8%E7%BB%84%E5%90%88%E6%96%B9%E6%B3%95/</id>
    <published>2021-06-07T02:59:16.000Z</published>
    <updated>2021-06-07T03:43:50.836Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总结">0. 总结</h2><h2 id="研究目标">1. 研究目标</h2><h2 id="研究背景及问题陈述">2. 研究背景及问题陈述</h2><p>脑信号的变化有不同的来源，表现为脑电波振幅和频率的变化。根据产生的原因，可分为 P300、VEP、SCP 和感觉运动信号，包括脑电波的 mu 和 beta 带以及 ERP 和 MRP</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210607111136797.png"></p><h2 id="研究方法">3. 研究方法</h2><h3 id="频率选择">3.1 频率选择</h3><p>DSLVQ</p><h3 id="特征提取">3.2 特征提取</h3><p>Furrier 变换的一个弱点是无法证明脑电波中高频变化的影响。</p><p>为了解决这个问题，引入了短时傅里叶变换，通过将具有特定长度的窗口应用于时域中的信号，将信号划分为时间段。</p><p>但是使用 STFT 会导致丢失一些关于非常高或非常低的频率的信息。</p><p>由于脑电波是随时间变化的信号并且包含频率和时间信息，所以像小波这样的时频方法更合适。</p><p>小波变换方法的主要优点是提取了有关信号基频的所有信息</p><p>PWT 是离散小波变换 (DWT) [19] 的扩展。</p><p>DWT 中的通用步骤将近似系数分为两部分。分裂后我们得到一个近似系数向量和一个细节系数向量。 两个连续近似之间丢失的信息在细节系数中被捕获。然后下一步包括分裂新的近似系数向量；提取的细节永远不会被重新分析。在相应的小波包情况下，每个细节系数向量也使用与近似向量分裂相同的方法分解为两部分。 这提供了最丰富的分析。</p><h3 id="分类">3.3 分类</h3><p>SVM</p><p>K-NN</p><p>贝叶斯方法</p><p>Parzen Method</p><p>多层感知器 (MLP)</p><h3 id="分类组合">3.4 分类组合</h3><p>有序加权平均OWA是模糊积分方法之一，计算时间少，性能合适，是 BCI 应用中的重要因素。</p><h2 id="结果">4. 结果</h2><figure><img src= "/img/loading.gif" data-lazy-src="/2021/06/07/Paper/%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E8%BF%90%E5%8A%A8%E6%83%B3%E8%B1%A1%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E4%B8%AD%E7%9A%84%E5%88%86%E7%B1%BB%E5%99%A8%E7%BB%84%E5%90%88%E6%96%B9%E6%B3%95/Users/12647/AppData/Roaming/Typora/typora-user-images/image-20210607114324015.png" alt="image-20210607114324015"><figcaption aria-hidden="true">image-20210607114324015</figcaption></figure><h2 id="讨论">5. 讨论</h2><h2 id="笔记">6. 笔记</h2><h2 id="参考文献">参考文献</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="论文" scheme="https://1iuke.github.io/categories/%E8%AE%BA%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>使用典型相关分析检测fMRI中的神经活动</title>
    <link href="https://1iuke.github.io/2021/06/07/Paper/%E4%BD%BF%E7%94%A8%E5%85%B8%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%88%86%E6%9E%90%E6%A3%80%E6%B5%8BfMRI%E4%B8%AD%E7%9A%84%E7%A5%9E%E7%BB%8F%E6%B4%BB%E5%8A%A8/"/>
    <id>https://1iuke.github.io/2021/06/07/Paper/%E4%BD%BF%E7%94%A8%E5%85%B8%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%88%86%E6%9E%90%E6%A3%80%E6%B5%8BfMRI%E4%B8%AD%E7%9A%84%E7%A5%9E%E7%BB%8F%E6%B4%BB%E5%8A%A8/</id>
    <published>2021-06-07T02:38:34.000Z</published>
    <updated>2021-06-07T02:51:20.907Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总结">0. 总结</h2><p>介绍了一种在功能磁共振成像 (fMRI) 数据中检测神经活动的新方法。它基于典型相关分析 (CCA)，是 fMRI 中广泛使用的单变量相关分析的多变量扩展。</p><p>为了检测活动的同质区域，该方法结合了血液动力学响应的子空间建模和空间关系的使用。当使用 t 检验、F 检验和普通相关分析等单变量方法时，fMR 图像中无疑存在的空间相关性被完全忽略。由于这个原因，此类方法对噪声非常敏感，导致难以检测激活和错误激活的重要贡献。</p><p>此外，所提出的 CCA 方法还可以检测激活的大脑区域，不仅基于<strong>相关系数</strong>的阈值化，而且还基于生理参数，例如<strong>时间形状</strong>和血液动力学响应的<strong>延迟</strong>。</p><h2 id="研究目标">1. 研究目标</h2><h2 id="研究背景及问题陈述">2. 研究背景及问题陈述</h2><ol type="1"><li><p>fMRI根据不同区域血氧浓度不同</p></li><li><p>t-test检测确定，已知信号，高斯白噪声效果最好。实际上信号是未知的，也不是高斯分布的白噪声</p></li></ol><h2 id="研究方法">3. 研究方法</h2><ol type="1"><li><p>CCA计算最相关的系数</p></li><li><p>相似度计算<span class="math inline">\(angle \ \ \alpha=arccos \ r^Tr_0/(||r||_2||r_0||_2)\)</span></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210607104904569.png"></p></li><li><p>时间延迟</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210607104930215.png"></p></li></ol><h2 id="结果">4. 结果</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210607105019293.png"></p><p>用三种不同的方法分析了三个图像切片。从顶部开始：t 检验、F 检验和本工作中底行描述的 CCA 方法。</p><p>图例表示 t-、F- 和相关值的颜色映射。与 t 和 F 检验相比，CCA 方法检测没有明显虚假激活的同质活动区域。</p><p>特别是最左侧的切片，其中 CCA 方法清楚地检测到两个不同的活动区域。</p><h2 id="讨论">5. 讨论</h2><h2 id="笔记">6. 笔记</h2><h2 id="参考文献">参考文献</h2>]]></content>
    
    
    <summary type="html">Detection of Neural Activity in Functional MRI Using Canonical Correlation Analysis</summary>
    
    
    
    <category term="论文" scheme="https://1iuke.github.io/categories/%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="CCA" scheme="https://1iuke.github.io/tags/CCA/"/>
    
  </entry>
  
  <entry>
    <title>人机交互中c-VEP脑机接口迁移学习的综合研究</title>
    <link href="https://1iuke.github.io/2021/05/18/Paper/C6%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92%E4%B8%ADc-VEP%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E7%9A%84%E7%BB%BC%E5%90%88%E7%A0%94%E7%A9%B6/"/>
    <id>https://1iuke.github.io/2021/05/18/Paper/C6%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92%E4%B8%ADc-VEP%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E7%9A%84%E7%BB%BC%E5%90%88%E7%A0%94%E7%A9%B6/</id>
    <published>2021-05-18T06:47:01.000Z</published>
    <updated>2021-05-18T07:12:30.612Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总结">0. 总结</h2><h2 id="研究目标">1. 研究目标</h2><p>如何在c-VEP BCI中从源被试转移到目标被试。</p><h2 id="研究背景及问题陈述">2. 研究背景及问题陈述</h2><p>为了减少脑机接口（BCI）的校准时间甚至实现零训练BCI，研究人员一直在研究如何有效地应用迁移学习。</p><h2 id="研究方法">3. 研究方法</h2><p>通常，以两种方式实施BCI中的知识转移：集成或合并(ensemble or pool)。在这项工作中，我们提出了两种不同的转移方法。</p><p>一种是将所有通道的整体信息从源主题传输到目标主题。</p><p>第二种方法是在受试者之间传递相应频道的信息。</p><p>主题转移框架是通过将两种方法与集成或合并相结合而构建的</p><h2 id="结果">4. 结果</h2><p>c-VEP BCI的转移学习可以减少校准时间或在没有足够受试者自身数据的情况下开始识别BCI</p><h2 id="讨论">5. 讨论</h2><h2 id="笔记">6. 笔记</h2><h2 id="参考文献">参考文献</h2>]]></content>
    
    
    <summary type="html">Ensemble or pool:A comprehensive study on transfer learning for c-VEP BCI during interpersonal interaction</summary>
    
    
    
    <category term="论文" scheme="https://1iuke.github.io/categories/%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="c-VEP" scheme="https://1iuke.github.io/tags/c-VEP/"/>
    
    <category term="迁移学习" scheme="https://1iuke.github.io/tags/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>宽带视觉诱发电位:脑计算机接口中的Reconvolution</title>
    <link href="https://1iuke.github.io/2021/05/13/Paper/C5.%E5%AE%BD%E5%B8%A6%E8%A7%86%E8%A7%89%E8%AF%B1%E5%8F%91%E7%94%B5%E4%BD%8D-%E8%84%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84Reconvolution/"/>
    <id>https://1iuke.github.io/2021/05/13/Paper/C5.%E5%AE%BD%E5%B8%A6%E8%A7%86%E8%A7%89%E8%AF%B1%E5%8F%91%E7%94%B5%E4%BD%8D-%E8%84%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84Reconvolution/</id>
    <published>2021-05-13T01:38:26.000Z</published>
    <updated>2021-05-13T07:53:31.035Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总结">0. 总结</h2><h2 id="研究目标">1. 研究目标</h2><h2 id="研究背景及问题陈述">2. 研究背景及问题陈述</h2><h3 id="bci-cycle">1 BCI cycle</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210513101523839.png"></p><h3 id="之前的研究">2 之前的研究</h3><p>1 Bin使用63bit m序列刺激，</p><ul><li>16目标ITR达到92.8bits/min</li><li>32目标ITR达到108bits/min</li></ul><p>2 Once Class Support Vector Machine (OCSVM) 可以更好地估计高维数据的概率分布。</p><p>​ ITR 达到133.6bits/min</p><p>​ 通过实现自适应分类器，ITR提高到144bits/min（迄今为止报告的最高速度）</p><h3 id="本文研究">3 本文研究</h3><p>（1）使用Gold码对基于BBVEP的矩阵拼写器进行验证；</p><p>（2）对用于模板生成和预测的生成模型进行验证；</p><p>（3）对拼写器设计进行优化。</p><h2 id="研究方法">3. 研究方法</h2><p><strong>参加者</strong>：12名大学生</p><p><strong>设备</strong>：24英寸BenQ XL2420T LED monitor ，120Hz刷新率，1920x1080分辨率，时间精确度2ms，白，黑，灰 分别为 185lux,4lux,55lux</p><p>​ 记录64通道数据，数据采样率2048Hz，下采样至360hz。数据经过线性去趋势，公共平均参考和在5 − 48Hz和52 − 100Hz的两个通带进行频谱滤波后进行了预处理。</p><p>​ <a href="http://dx.doi.org/10.17026/%20dans-zth-37cr">处理后的数据</a></p><p><strong>刺激</strong>：使用两组Gold码</p><p><strong>校准</strong>：使用相似性度量</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210513105623709.png"></p><p>流程图</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210513105756887.png"></p><p><strong>模板生成：Reconvolution</strong></p><p>​ 重新卷积是结合反卷积和卷积的模板生成的两步方法。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210513110548018.png"></p><p><strong>首先</strong>，通过分解全部响应来估计对单个闪光的响应（即，<strong>估计步骤</strong>)。</p><p>单通道单次试验的通用分解模型可以写成:</p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210513111002472.png"></p><p>可表示为矩阵形式：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210513111631636.png"></p><p>通过级联将该模型推广到多个单通道单次试验，以形成以下线性回归问题：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210513112405080.png"></p><p>该解决方案可以找到如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210513112442951.png"></p><p>​ <strong>其次</strong>，通过应用估计的单闪光响应（即，<strong>生成步骤</strong>）来生成对（未)看到的比特序列的全响应。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210513133224251.png"></p><p><strong>空间过滤：典型相关分析</strong></p><h2 id="结果">4. 结果</h2><h2 id="讨论">5. 讨论</h2><h2 id="笔记">6. 笔记</h2><h2 id="参考文献">参考文献</h2>]]></content>
    
    
    <summary type="html">Broad-Band Visually Evoked Potentials:Re (con)volution in Brain-Computer Interfacing</summary>
    
    
    
    <category term="论文" scheme="https://1iuke.github.io/categories/%E8%AE%BA%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>基于VEP的脑机接口</title>
    <link href="https://1iuke.github.io/2021/05/12/Paper/C1.%E5%9F%BA%E4%BA%8EVEP%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/"/>
    <id>https://1iuke.github.io/2021/05/12/Paper/C1.%E5%9F%BA%E4%BA%8EVEP%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/</id>
    <published>2021-05-12T01:46:16.000Z</published>
    <updated>2021-05-12T02:28:54.335Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>VEP是由对象视野的感官刺激引起的，反映了大脑中的视觉信息处理机制。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210512095705169.png"></p><p>根据不同的刺激调制方法，基于VEP的脑机接口 可分为三类：</p><ul><li>t-VEP</li><li>f-VEP</li><li>c-VEP</li></ul><h2 id="t-vep">1 t-VEP</h2><p>在t-VEP BCI中，不同目标的闪烁序列相互独立</p><p>通过峰谷值判定目标</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210512095916585.png"></p><p>缺点：信息传输率ITR(&lt;30 bit/min)</p><h2 id="f-vep">2 f-VEP</h2><p>使用不同的频率调制</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210512100607193.png"></p><p>优点：不需训练，系统配置简单，传输率高（30-60 bits/min)</p><h2 id="c-vep">3 c-VEP</h2><p>使用正交的伪随机码调制。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210512100652462.png"></p><h2 id="总结">4. 总结</h2><table><thead><tr class="header"><th>vep</th><th>t-vep</th><th>f-vep</th><th>c-vep</th></tr></thead><tbody><tr class="odd"><td>调制方法</td><td>不同时间</td><td>不同频率</td><td>正交伪随机码</td></tr><tr class="even"><td>ITR(bits/min)</td><td>&lt;30</td><td>30-60</td><td>&gt;100</td></tr><tr class="odd"><td>是否训练</td><td>非必须</td><td>非必须</td><td>必须</td></tr><tr class="even"><td>系统配置</td><td></td><td>简单</td><td></td></tr><tr class="odd"><td>识别准确率</td><td></td><td></td><td>最高</td></tr><tr class="even"><td>应用</td><td></td><td>轮椅控制</td><td>拼写器</td></tr></tbody></table><h2 id="结论">5 结论</h2><p>刺激调制的设计是基于VEP的BCI系统的关键。</p><p>在将来的工作中，可以使用其他刺激调制技术（例如，通信系统中使用的各种多址方法）来提高BCI性能。</p><h2 id="参考文献">参考文献</h2>]]></content>
    
    
    <summary type="html">VEP-Based Brain-Computer Interfaces:Time, Frequency, and Code Modulations</summary>
    
    
    
    <category term="论文" scheme="https://1iuke.github.io/categories/%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="t-VEP" scheme="https://1iuke.github.io/tags/t-VEP/"/>
    
    <category term="f-VEP" scheme="https://1iuke.github.io/tags/f-VEP/"/>
    
    <category term="c-VEP" scheme="https://1iuke.github.io/tags/c-VEP/"/>
    
  </entry>
  
  <entry>
    <title>主成分分析PCA</title>
    <link href="https://1iuke.github.io/2021/04/29/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90PCA/"/>
    <id>https://1iuke.github.io/2021/04/29/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90PCA/</id>
    <published>2021-04-29T08:11:42.000Z</published>
    <updated>2021-04-29T09:42:20.832Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>将n维数据用m维表示（m&lt;n),并且尽可能保留原始数据的信息。</p><p>对于最简单的二维数据，将其降到一维。直观来看，<span class="math inline">\(u_1\)</span> 比 <span class="math inline">\(u_2\)</span> 好。</p><p>降维的标准为：样本点到这个超平面的距离足够近,或者说样本点在这个超平面上的投影能尽可能的分开。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/1042406-20161231162149992-1521335659.png"></p><p>故有两种等价推导（勾股定理）</p><h2 id="推导1基于最小投影距离">推导1：基于最小投影距离</h2><h2 id="推导2基于最大投影方差">推导2：基于最大投影方差</h2><h2 id="算法流程">算法流程：</h2><p>输入：n维样本集D，降到<span class="math inline">\(n&#39;\)</span>维</p><p>输出: 降维后样本集<span class="math inline">\(D&#39;\)</span></p><ol type="1"><li><p>样本中心化</p></li><li><p>计算样本协方差矩阵<span class="math inline">\(XX^T\)</span></p></li><li><p>对<span class="math inline">\(XX^T\)</span>进行特征分解</p></li><li><p>取出<span class="math inline">\(n&#39;\)</span>个特征值对应的特征向量，标准化后组成特征向量矩阵<span class="math inline">\(W\)</span></p></li><li><p>进行变换<span class="math inline">\(y = W^Tx\)</span></p></li></ol><h2 id="pca实例">PCA实例</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs matlab">load hald<br>ingredients<br><span class="hljs-comment">%直接pca</span><br>coeff = pca(ingredients,<span class="hljs-string">&quot;Algorithm&quot;</span>,<span class="hljs-string">&quot;svd&quot;</span>)<br><span class="hljs-comment">%中心化</span><br>ingredients = ingredients-<span class="hljs-built_in">mean</span>(ingredients);<br><span class="hljs-comment">%XX&#x27;</span><br>X = ingredients&#x27;*ingredients;<br><span class="hljs-comment">%SVD分解</span><br>[U,S,V] = svd(X);<br>V<br></code></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210429171234345.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="机器学习" scheme="https://1iuke.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="降维" scheme="https://1iuke.github.io/tags/%E9%99%8D%E7%BB%B4/"/>
    
    <category term="PCA" scheme="https://1iuke.github.io/tags/PCA/"/>
    
  </entry>
  
  <entry>
    <title>线性判别分析LDA</title>
    <link href="https://1iuke.github.io/2021/04/27/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E5%88%A4%E5%88%AB%E5%88%86%E6%9E%90LDA/"/>
    <id>https://1iuke.github.io/2021/04/27/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E5%88%A4%E5%88%AB%E5%88%86%E6%9E%90LDA/</id>
    <published>2021-04-27T02:09:18.000Z</published>
    <updated>2021-04-29T09:42:54.290Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>LDA是一种监督学习的降维技术，也就是说它的数据集的每个样本是有类别输出的。这点和PCA不同。PCA是不考虑样本类别输出的无监督降维技术。LDA的思想可以用一句话概括，就是“<strong>投影后类内方差最小，类间方差最大</strong>”。</p><p>将数据在低维度上进行投影，投影后希望每一种类别数据的投影点尽可能的接近，而不同类别的数据的类别中心之间的距离尽可能的大。</p><p>假设有两类数据 分别为红色和蓝色，如下图所示，这些数据特征是二维的，我们希望将这些数据投影到一维的一条直线，让每一种类别数据的投影点尽可能的接近，而红色和蓝色数据中心之间的距离尽可能的大。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/1042406-20170103121629034-435985945.png"></p><h2 id="lda实例">LDA实例</h2><p>生成三类三维特征的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> mpl_toolkits.mplot3d <span class="hljs-keyword">import</span> Axes3D<br>%matplotlib inline<br><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> make_classification<br>X, y = make_classification(n_samples=<span class="hljs-number">1000</span>, n_features=<span class="hljs-number">3</span>, n_redundant=<span class="hljs-number">0</span>, n_classes=<span class="hljs-number">3</span>, n_informative=<span class="hljs-number">2</span>,n_clusters_per_class=<span class="hljs-number">1</span>,class_sep =<span class="hljs-number">0.5</span>, random_state =<span class="hljs-number">10</span>)<br>fig = plt.figure()<br>ax = Axes3D(fig, rect=[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], elev=<span class="hljs-number">30</span>, azim=<span class="hljs-number">20</span>)<br>ax.scatter(X[:, <span class="hljs-number">0</span>], X[:, <span class="hljs-number">1</span>], X[:, <span class="hljs-number">2</span>],marker=<span class="hljs-string">&#x27;o&#x27;</span>,c=y)<br></code></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/1042406-20181229110134630-26675967.png"></p><p><strong>PCA的结果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.decomposition <span class="hljs-keyword">import</span> PCA<br>pca = PCA(n_components=<span class="hljs-number">2</span>)<br>pca.fit(X)<br><span class="hljs-built_in">print</span> pca.explained_variance_ratio_<br><span class="hljs-built_in">print</span> pca.explained_variance_<br>X_new = pca.transform(X)<br>plt.scatter(X_new[:, <span class="hljs-number">0</span>], X_new[:, <span class="hljs-number">1</span>],marker=<span class="hljs-string">&#x27;o&#x27;</span>,c=y)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/1042406-20181229110149288-773076003.png"></p><p>由于PCA没有利用类别信息，我们可以看到降维后，样本特征和类别的信息关联几乎完全丢失。</p><p><strong>LDA的结果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.discriminant_analysis <span class="hljs-keyword">import</span> LinearDiscriminantAnalysis<br>lda = LinearDiscriminantAnalysis(n_components=<span class="hljs-number">2</span>)<br>lda.fit(X,y)<br>X_new = lda.transform(X)<br>plt.scatter(X_new[:, <span class="hljs-number">0</span>], X_new[:, <span class="hljs-number">1</span>],marker=<span class="hljs-string">&#x27;o&#x27;</span>,c=y)<br>plt.show()<br></code></pre></td></tr></table></figure><p>类别信息之间的关系得以保留。</p><p>　<img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210429173834692.png">　　　</p><p>一般来说，如果数据是有类别标签的，那么优先选择LDA去尝试降维；当然也可以使用PCA做很小幅度的降维去消去噪声，然后再使用LDA降维。如果没有类别标签，那么肯定最先考虑PCA</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="机器学习" scheme="https://1iuke.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="降维" scheme="https://1iuke.github.io/tags/%E9%99%8D%E7%BB%B4/"/>
    
    <category term="LDA" scheme="https://1iuke.github.io/tags/LDA/"/>
    
  </entry>
  
  <entry>
    <title>BCI基础知识</title>
    <link href="https://1iuke.github.io/2021/04/23/BCI/BCI/"/>
    <id>https://1iuke.github.io/2021/04/23/BCI/BCI/</id>
    <published>2021-04-23T07:00:10.000Z</published>
    <updated>2021-04-29T09:44:02.880Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="脑电图eeg">1 脑电图(EEG)</h1><p>脑电图是通过与人的头皮相连的电极记录的脑电势。脑电图显示了这种电活动如何随时间变化，并且提供有关大脑状态的信息。</p><p>脑电图传统上用于医疗目的。用于诊断许多影响大脑状况的电活动模式。例如癫痫，这种病会导致反复的脑癫痫发作。脑电图可以帮助诊断和处理这种情况。脑电图还可帮助分析睡眠障碍患者。通常，它可以用于识别大脑无法正常工作的区域。脑电图也可用于其他领域，例如分析头部受伤，脑瘤或测量昏迷个体的脑功能。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210423154735845.png"></p><p>图a为10s脑电信号。b是该信号的功率谱密度。</p><p>作为医疗分析工具，EEG的缺点是空间分辨率有限，但是时间分辨率很高。EEG设备采样率可以达到5kHz,可以记录毫秒级精度。并且记录头皮脑电，很少有副作用。</p><p>CT和MRI有很高的空间分辨率，通过提供高分辨率图像，可提供有关大脑状态的更精确信息。但是它们没有足够的时间分辨率来跟踪大脑的功能。</p><h2 id="解释脑电信号">1.1 解释脑电信号</h2><p>大脑的EEG测量显示出电活动如何随时间变化。如何解释和操纵该信号取决于脑电图记录的目的。</p><p>例如，分析睡眠阶段时，可以使用EEG。通过分析哪些频段代表该信号。</p><p>一种方法是傅里叶变换(FT)，将时域信号变换到频域。傅里叶变换将无限持续时间的时域信号转换成由无限数量的正弦波组成的连续频谱。</p><p>傅里叶变换FT： <span class="math display">\[F(w) = \int_{-\infty }^{\infty}f(t)e^{-2\pi jwt}dt\]</span> EEG信号由连续的采样点组成。故有离散傅里叶变换DFT <span class="math display">\[X_k =\sum_{j=0}^{N-1}x_je^{-j2\pi ik/N},k\in Z\]</span> DFT的时间效率为<span class="math inline">\(O(N^2)\)</span>，为了提高效率，通常使用FFT(快速傅里叶变换），时间效率<span class="math inline">\(O(NlogN)\)</span>,</p><p>存在各种FFT算法，Cooley–Tukey算法是最受欢迎的算法之一(蝶形运算)</p><h2 id="频域分析">1.2 频域分析</h2><p>频谱信息通常在频域进行分析。在该频谱中，可以看出给定频率或频带在信号中的突出程度。在频谱分析时，通常认为该信号在短时间内不会变化，这个时间段叫做窗(window),通常是几秒钟。频谱的单位是<span class="math inline">\(u^2/Hz\)</span>.<span class="math inline">\(u\)</span>是时间信号的幅度。EEG信号通常是<span class="math inline">\(\mu V\)</span>，所以EEG信号的PSD为<span class="math inline">\(\mu V^2/Hz\)</span>.如上图。</p><p>频谱显示了每个频率的频谱密度，是二维的。可以叠加时间信息作为另一维，叫做光谱图。如图</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210423170819130.png"></p><p>x轴为时间信息，y轴为频率信息，颜色深浅代表某一频率，某一时间的能量信息。红色代表能量大，蓝色代表能量小。上图大部分能量位于40Hz以下。</p><p>分析频率域中的 EEG 信号时假定信号中的感兴趣部分来自时间域信号中的重复峰值。然而，在某些应用中，感兴趣的信息并不在于定期重复的事件，而在于在给定时间发生的事件。对于这些应用，通常进行时域分析。</p><h2 id="国际10-20系统">1.3 国际10-20系统</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210423171739990.png"></p><p>10-20 系统增加了复制实验的可能性。</p><h1 id="脑机接口bci">2 脑机接口(BCI)</h1><p>脑机接口（BCI）是一个在大脑活动和计算设备之间创建接口的系统。脑电图是BCI最广泛使用的大脑信号。其重要原因是皮质突触作用产生电信号，在 10 到 100 毫秒范围内变化 。脑电图和磁脑成像 （MEG） 是唯一广泛可用的技术，具有足够的时间分辨率来跟踪这些快速动态变化。然而，与 EEG 可用的硬件相比，MEG 系统笨重且价格昂贵。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210423172548899.png"></p><p>BCI 是一个连续的反馈循环：EEG 信号中用户的意图转换为命令发送到设备。该设备向用户提供执行命令时的反馈，用户可以自由地专注于新意图。反馈循环在上图中显示。</p><p>EEG信号从放置在头皮的电极处获取，经过数字化后经计算机进行信号处理。提取需要的特征。然而由于<code>记录方法与设备</code>和<code>人体电位时刻</code>改变，所获取的信号有许多噪声。通常进行滤波以提高信噪比（SNR）。 <span class="math display">\[SNR=\frac{P_{signal}}{P_{noise}}\]</span></p><p>P代表功率。然后对滤波后的信号进行特征提取。常用的<strong>特征提取方法</strong>有：<code>测量频带功率</code>，<code>计算功率谱密度（PSD）</code>或<code>查看时频特征</code></p><p>信号经过滤波并提取了相关特征后，对数据进行<code>分类</code>，目的是确定用户的意图。如果检测到意图，则将命令发送到与系统相连的设备，执行想要的操作。设备执行动作时会完成反馈循环，为用户提供反馈。</p><p>机器学习方法是BCI研究中最普遍的<strong>分类方法</strong>，其中<code>线性分类器</code>（例如线性判别分析（LDA）和<code>支持向量机</code>（SVM））是最流行的算法。</p><p>当今的BCI研究反映了<strong>两个主要范例</strong>：<code>诱发电位</code>（EPs）和<code>振荡特征</code>。</p><p>EPs是与事件（例如视觉刺激）锁相的独特波形。</p><p>振荡特征主要围绕频谱分析，例如查看不同频段的功率以确定用户的意图或情感状态。</p><h2 id="evoked-potentials">2.1 Evoked potentials</h2><p>EPs中最常用的有两种：</p><ol type="1"><li>VEPs</li><li>P300</li></ol><p>ERP是所测得的大脑反应，它是特定感觉，认知或运动事件的直接结果。可以根据刺激呈现后其成分出现的等待时间对ERP进行分类。</p><ul><li>具有短时延的ERPs通常在刺激后不到100ms内发生。这些成分是在大脑的感觉刺激处理阶段生成的，它们被称为外源性成分，因为它们是对外部刺激源的直接响应。</li><li>具有长时延的ERPs发生在刺激后大于100ms的时间内，代表了皮质的处理阶段。它们被称为内源性成分，因为它们较少受刺激物的物理特征决定。</li></ul><h3 id="p300">1 P300</h3><p>P300是在决策过程中引发的ERP的成分，因此是内源成分。之所以称为P300，是因为当用EEG记录时，它会在做出决定后在顶叶上产生一个正峰，并有大约300 ms的等待时间，如图所示。该信号存在于每个人身上，并且几乎不需要用户初始化训练，所以比较流行。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210426095950600.png"></p><h3 id="veps">2 VEPs</h3><figure><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210426101222147.png" alt="基于VEPs的BCI"><figcaption aria-hidden="true">基于VEPs的BCI</figcaption></figure><p>VEPs是由感觉刺激引起的，反映了大脑中的视觉信息处理机制。</p><p>视觉刺激与枕叶的视觉皮质有关。</p><p>基于VEPs的BCI可分为三类：</p><h4 id="t-vep">1 t-VEP</h4><p>t-VEP的思想是使闪光序列相互独立，例如，通过强制使闪光序列在时间上严格不重叠。这些短暂的刺激，引起闪烁的VEP（FVEP）。FVEP有200ms短暂时延，因此叫做P2 或 P200信号。</p><p>在t-VEP BCI中，需要时序信息才能进行准确分类。还需要对多个时期（时间段）求平均值，以增强来自固定目标的FVEP并抑制来自非固定目标的FVEP。 由于要求闪烁序列必须相互独立，因此t-VEP BCI通常具有较低的激励速率（&lt;4 Hz），与其他方法相比，吞吐量较低。</p><h4 id="f-vep-ssvep">2 f-VEP / SSVEP</h4><p>在基于SSVEP的BCI中，目标以不同的频率闪烁。注视其中一个目标会产生诱发电位的周期性序列，其频率与目标相同。它会在基频及其谐波中产生响应。 f被认为是一次谐波，2f是第二次谐波，依此类推。频谱分析是基于SSVEP的BCI的最常见分类技术。 SSVEP也与P300相似，因为这两种方法都不需要用户训练。</p><h4 id="c-vep">3 c-VEP</h4><p>基于c-VEP的BCI使用伪随机刺激序列。通过时移单个伪随机码刺激序列为多个目标刺激创建不同的刺激序列。由于刺激序列的这种移动，需要时间信息来执行分类。</p><p>通常使用模板匹配方法进行分类。通过执行训练会话来获得该模板T，在该训练会话中，指示用户注视模板k。获得N个刺激周期数据，平均后得到模板<span class="math inline">\(T\)</span>,通过时移得到<span class="math inline">\(T_i\)</span>,通过计算相关系数执行分类，相关系数最大的即为该类。</p><h2 id="感觉运动节律-smrs">2.2 感觉运动节律 (SMRs)</h2><p>基于感觉运动节律师（SMR）的系统是使用振荡特征的系统的示例。用于BCI的两种主要振荡类型是在7-13 Hz范围内振荡的<span class="math inline">\(\mu\)</span>节律和在13-30 Hz范围内振荡的<span class="math inline">\(β\)</span>节律。 二者都起源于大脑的感觉运动皮层，因此命名为SMR。 感觉运动皮层是结合感觉和运动功能的皮层区域。这些节律的变化可能是感觉刺激，运动行为或精神影像的结果，并可能导致振幅抑制，事件相关的失步（ERD）或振幅增强，事件相关的同步（ERS）。</p><h2 id="bci评估方法">2.3 BCI评估方法</h2><p>为了比较不同BCI系统性能，需要评估方法；</p><h3 id="itr">1 ITR</h3><p><span class="math display">\[B=log_2N+Plog_2P+(1-P)log_2(\frac{1-P}{N-1})\]</span></p><p>B为比特率(bit/symbol),N是目标数，P是分类准确度。 <span class="math display">\[B_t = B \frac{60}{T}\]</span> <span class="math inline">\(B_t\)</span>单位(bits/min),T是检测速度（seconds/symbol）</p><h3 id="pbrpractical-bit-rate">2 PBR(practical bit rate)</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210426104846847.png"></p><p>P是分类准确度</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="脑机接口" scheme="https://1iuke.github.io/categories/%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/"/>
    
    
    <category term="BCI" scheme="https://1iuke.github.io/tags/BCI/"/>
    
  </entry>
  
  <entry>
    <title>An online multi-channel SSVEP-based brain–computer interface using a canonical correlation analysis method</title>
    <link href="https://1iuke.github.io/2021/04/22/Paper/%E5%9F%BA%E4%BA%8E%E5%85%B8%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E7%9A%84%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%A4%9A%E9%80%9A%E9%81%93%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/"/>
    <id>https://1iuke.github.io/2021/04/22/Paper/%E5%9F%BA%E4%BA%8E%E5%85%B8%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E7%9A%84%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%A4%9A%E9%80%9A%E9%81%93%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/</id>
    <published>2021-04-22T07:03:04.000Z</published>
    <updated>2021-08-25T02:53:10.187Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总结">0. 总结</h2><ol type="1"><li>确定了枕区9个电极</li><li>CCA方法优于传统方法,PSDA</li></ol><h2 id="研究目标">1. 研究目标</h2><p>提高ITR</p><h2 id="研究背景及问题陈述">2. 研究背景及问题陈述</h2><p>SSVEP优点：高ITR，高SNR，训练少</p><p>SSVEP的许多特性（例如幅度，分布和可用频率范围）显示出很大的用户差异</p><p>传统的SSVEP检测技术无法识别以谐波频率闪烁的目标</p><h2 id="研究方法">3. 研究方法</h2><h3 id="cca">1 CCA</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210422152632770.png"></p><p>X是N个通道的EEG信号。<span class="math inline">\(Y_f\)</span>为参考信号。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210422153544297.png"></p><p><span class="math inline">\(X,Y_f\)</span>作为CCA输入，输出相关性<span class="math inline">\(\rho\)</span>用来做频率识别</p><h3 id="离线实验">3.2 离线实验</h3><p>基于SSVEP的BCI有三个重要参数：通道位置，窗口长度，谐波数量</p><p>离线实验目的是研究这三个参数对BCI性能的影响</p><p>本实验有 六个目标，闪烁频率分别为13，14，15，16，17，18Hz，LED的亮度有方波调制</p><p>CCA用来指导通道选择和评估离线性能</p><p>频道选择后，保留了九个通道。</p><p>为了将CCA方法与传统的功率谱密度分析（PSDA）方法进行比较，对九通道EEG数据运行了两种方法。</p><p>在PSDA方法中，使用了穷举法来选择优化的双极引线，以最大化激励频率SNR。</p><p>然后将具有最大SNR的频率识别为BCI输出。</p><p>分类准确度用于评估该方法的性能。</p><p>还研究了时间窗长度对分类准确性的影响。</p><h3 id="在线实验">3.2 在线实验</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210422155726189.png"></p><p>六个目标，刺激频率15，12，10，8.6，7.5，6.7Hz，屏幕刷新率60Hz</p><p>一个闪烁周期分别有4 5 6 7 8 9 帧。</p><p>一个闪烁周期中一帧是白的，剩下的是黑的。</p><h2 id="结果">4. 结果</h2><h3 id="通道定位分析">4.1 通道定位分析</h3><p>功率头皮图显示视觉刺激在枕区有强烈反应。<strong>枕区</strong></p><p>这九个通道为 O1,O2,Oz,PO7,PO8,POz,P3,P4,Pz</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210422162532598.png"></p><h3 id="时间窗长度和谐波数">4.2 时间窗长度和谐波数</h3><p>（不同谐波数）识别准确率对比：CCA优于PSDA</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210422163958385.png"></p><p>ANOVA分析，不同窗口长度与不同谐波对准确率的影响。</p><p>与双极导联法相比，CCA提高了10%准确率。</p><p>谐波数没有明显的影响。</p><p>窗口长度有显著影响。窗口长为2s时，能获得所需的识别率</p><h3 id="在线结果">4.3 在线结果</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210422165310528.png"></p><h2 id="讨论">5. 讨论</h2><ol type="1"><li>CCA给出的权重矢量<span class="math inline">\(W_x\)</span>将<span class="math inline">\(ρ\)</span>最大化，可以提供一种空间模式，该模式可以改善组合后的EEG信号的SNR。</li><li>所提出的系统具有低的主体间可变性。</li><li>可以使用谐波频率作为刺激</li></ol><h2 id="笔记">6. 笔记</h2><h2 id="参考文献">参考文献</h2>]]></content>
    
    
    <summary type="html">基于典型相关分析方法的基于SSVEP的在线多通道脑机接口</summary>
    
    
    
    <category term="论文" scheme="https://1iuke.github.io/categories/%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="SSVEP" scheme="https://1iuke.github.io/tags/SSVEP/"/>
    
    <category term="CCA" scheme="https://1iuke.github.io/tags/CCA/"/>
    
  </entry>
  
  <entry>
    <title>A Novel c-VEP BCI Paradigm for Increasing the Number of Stimulus T argets Based on Grouping Modulation With Different Codes</title>
    <link href="https://1iuke.github.io/2021/04/15/Paper/C3.A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes/"/>
    <id>https://1iuke.github.io/2021/04/15/Paper/C3.A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes/</id>
    <published>2021-04-15T07:19:13.000Z</published>
    <updated>2021-05-13T01:51:38.759Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总结">0. 总结</h2><p>通过分组进一步提高了target数</p><h2 id="研究目标">1. 研究目标</h2><p>提高c-VEP的ITR</p><h2 id="研究背景及问题陈述">2. 研究背景及问题陈述</h2><p>EEG由于非侵入性收到关注</p><p>基于VEP的BCI可以检测枕区和顶叶的信号。</p><blockquote><p>现有c-VEP BCI 系统中，有两种<code>目标调制方法</code>：</p></blockquote><table><thead><tr class="header"><th>比较</th><th style="text-align: left;">一个源伪随机码和他的循环移位码</th><th>不同的伪随机码</th></tr></thead><tbody><tr class="odd"><td>相同点</td><td style="text-align: left;">都将目标打包成一组呈现</td><td></td></tr><tr class="even"><td>优点</td><td style="text-align: left;">只需要训练一个目标（参考目标），创建模板训练时间短</td><td>目标数不受编码长度限制</td></tr><tr class="odd"><td>缺点</td><td style="text-align: left;">可用目标数受到编码长度的影响</td><td>需要为每个目标创建模板，训练时间长</td></tr></tbody></table><p>对于64bit码长，时间延迟为2bit，只能循环移位31次，只能编码32个target</p><blockquote><p>目标数目是影响BCI性能的一个重要参数。</p></blockquote><ol type="1"><li>一个高性能BCI通常以大量target</li><li>一些复杂应用(单词输入器)需要大量target</li></ol><blockquote><p>对<span class="math inline">\(f-VEP\)</span>,有许多方法提高目标数，</p></blockquote><ol type="1"><li>frequency and phase mixed coding</li><li>dual-frequency stimulation</li><li>multiple frequencies sequential coding</li></ol><blockquote><p>对于c-VEP,本文提出了一个 <code>分组分码调制方法</code>,所有刺激目标被打包为几个组中，并且每个组用不同的伪随机码和循环移位码调制。每组只需训练一个目标，大大减少训练时间。</p></blockquote><p>本文将48个target分为三组，结果显示本范式有助于<code>提高target数量和ITR</code></p><h2 id="研究方法">3. 研究方法</h2><h3 id="目标调制">3.1 目标调制</h3><p>视觉刺激器如下：</p><p>每组16个刺激为灰色，周围20个互补的非目标刺激。采用<code>等效邻域原则</code>.</p><p><strong>这些非目标刺激的目的是确保目标刺激在左，右，上，下和对角线的方向上具有相等的邻居</strong></p><p>分组是target增多，使用第一种方法训练较少训练时间</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210416111052828.png"></p><p>为了更好区分不同编码，<code>编码之间应正交或近似正交。</code></p><p>三组需要三个伪随机码，每组一个。拥有良好的自相关性，每组16个目标近似正交</p><p>不同原始码互相关，不同组之间近似正交</p><p>任何满足正交性要求的编码都可用作调制源码（例如：Golden codes)</p><blockquote><p><strong>编码选择</strong></p></blockquote><p><code>伪随机M序列</code>具有良好的自相关特性，这使得可以创建相同M序列的一组循环移位。因此，一组循环移位序列表现出良好的互相关特性，并且可以用于调制单个刺激组。</p><p>然而，不同的M序列不能保证良好的互相关性,不能用于调节多组刺激。</p><p>本文采用一对<code>Golay互补序列</code>和 <code>几乎完美自相关序列(APA)</code>作为三组刺激的源调制编码。他们有优秀的自相关和互相关性。原则上确保了由三个调制码及其循环移位码激励的不同目标的刺激信号之间的正交性。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210416153704652.png"></p><p>屏幕刷新率60Hz，码长64bit，刺激周期64/60=1.066s。</p><h3 id="目标识别">3.2 目标识别</h3><p>目标识别分为训练阶段和测试阶段，训练阶段用于创建模板，测试阶段将测试信号与三组的模板计算，选择相关系数最大的为目标。</p><p>为了提取更多信息，通常记录多个通道脑电数据。然而模板匹配是两个一维向量的比较。所以需要空域滤波将多维信号压缩到一维。</p><p>本研究使用CCA降维。</p><blockquote><p><a href="/2021/03/14/深度学习/典型相关分析(CCA)">典型相关分析 CCA</a></p></blockquote><p>CCA是一种多变量相关性分析方法，可发现两个多维数据集之间的潜在相关性。它为两个数据集创建一对线性组合，从而使两个组合之间的相关性最大化</p><p>X,Y为两个多维信号，x,y为canonical 变量。 <span class="math inline">\(x=X^TW_x\)</span>, <span class="math inline">\(y=Y^TW_y\)</span></p><p><span class="math inline">\(W_x,W_y\)</span> 可通过最大化x,y的相关系数<span class="math inline">\(\rho\)</span> 计算：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210416153640465.png"></p><blockquote><p>模板创建</p></blockquote><p>对第i组，选取目标r作为参考，被试通过注意参考目标N个刺激周期，获得原始数据。</p><p>该数据采集C个电极信息。先对2-30Hz信号时域滤波。然后分段（周期），中心化（减去均值）。得到数据<span class="math inline">\(X_r^n(t),,n=1,2,...N\)</span>.<span class="math inline">\(X_r^n(t)\in R^{C\times L}\)</span>.<span class="math inline">\(L\)</span>是采样点。</p><p>本文中，<span class="math inline">\(r=11\)</span>, <span class="math inline">\(C=9\)</span>, <span class="math inline">\(N=200\)</span>. 码长<span class="math inline">\(lc=64bits\)</span>, 屏幕刷新率<span class="math inline">\(fr=60Hz\)</span>, 采样率<span class="math inline">\(fs=1000Hz\)</span>,</p><p>所以<span class="math inline">\(L=floor(lc/fr.fs)=1066\)</span>.</p><p>通过平均<span class="math inline">\(X_r^n(t)\)</span> 得到<span class="math inline">\(ERP\)</span> <span class="math inline">\(\overline{S}_r(t)\in R^{C\times L}\)</span></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210416160806928.png"></p><p><span class="math inline">\(S_r(t)=[\overline{S}_r(t),\overline{S}_r(t),...,\overline{S}_r(t)]\)</span>, 复制N次</p><p><span class="math inline">\(X_r(t)=[X_r^1(t),X_r^2(t),...X_r^N(t)]\)</span>, 拼接N个周期数据</p><p><span class="math inline">\(S_r(t)和X_r(t)\)</span> 由 <span class="math inline">\(C\times N\times L\)</span>转化为 <span class="math inline">\(C\times (N.L)\)</span> 矩阵。</p><p>作为CCA输入，得到第i组的<span class="math inline">\(C\times 1\)</span> 的空间滤波器<span class="math inline">\(w_{xi}\)</span></p><p>然后通过<span class="math inline">\(T_{ir}(t)=w_{xi}^T.\overline{S}_r(t)\)</span>得到一维模板矢量</p><p>所有目标的模板可通过循环移位获得 <span class="math display">\[T_{ik}(t)=T_{ir}(t-b_s(\tau_k-\tau_r))  ,k=1,2,...16\]</span> 其中 k是目标数，<span class="math inline">\(b_s=4\)</span> 是移位比特数。</p><p><span class="math inline">\(\tau_k-\tau_r=(k-r).fs/fr\)</span></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210416163334043.png"></p><blockquote><p>模板匹配</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210416163523150.png"></p><p>与训练阶段相同，滤波，中心化，CCA得到<span class="math inline">\(y_i(t)=w_{xi}^T.Y(t)\)</span> .</p><p>计算皮尔逊相关</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210416163936203.png"></p><p>选取每组的最大值</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210416164006759.png"></p><p>三个最大值中的最大值几位注视目标</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210416164053461.png"></p><h2 id="评估实验">4. 评估，实验</h2><h3 id="数据获取">数据获取</h3><p>该实验包括离线和模拟在线实验，以三个月的间隔进行，每个实验包括一个训练阶段和一个测试阶段。20个健康受试者参加实验（8名女性），年龄21-26，平均23岁。10人参加离线实验，8人参加在线实验，2人参加两个实验。</p><p>记录枕区的P3,Pz, P4,PO7,POz,PO8,O1, Oz, O2九个电极，参考电极在顶部。电极阻抗保持在10 k以下。脑电数据以1000 Hz的采样率数字化。</p><h4 id="离线实验">1 离线实验</h4><p>收集训练数据创建模板。每组第11个目标作为参考。记录200个刺激周期数据。</p><h4 id="模拟在线实验">2 模拟在线实验</h4><p>模拟的在线实验与离线实验相同，不同之处在于，三个参考目标中的每一个仅连续进行了100个刺激周期而不是200个刺激周期，因为对离线实验的数据分析表明，训练量数据足以产生用于目标刺激的准确模板。</p><h2 id="结论">5. 结论</h2><h3 id="c-vep信号的自相关和互相关">1 c-VEP信号的自相关和互相关</h3><p>三个参考模板的自相关和互相关图</p><p>第一行自相关函数，中心峰与最大旁瓣之比足够大，可以确保在单个组中准确区分不同目标</p><p>第二行互相关函数，与自相关函数的中心峰相比，互相关函数在所有时间滞后都具有较小的值，可以区分不同目标</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210416165754847.png"></p><p><strong>注意</strong>，尽管目标刺激都作为二进制信号不相关，但这并不意味着对这些刺激的响应也不相关，因为大脑是一个非线性的动力系统。</p><h3 id="分类准确率">2 分类准确率</h3><p>分类准确度定义为正确分类的试验次数与试验总数之比。 表II报告了离线测试中单个组中所有刺激的分类准确度以及整个刺激组中所有三组（w组）的分类准确度。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210416165155231.png"></p><p>第2组准确率最高，可能是刺激位于PC的屏幕中心，并且引起c-VEP信号幅度大于第1组和第3组中的刺激。</p><p>准确率降低可能是由于目标数量急剧增加（从16到48）引起的，因为目标识别的难度增加了。</p><h3 id="混淆矩阵">3 混淆矩阵</h3><p>可以看出，这些目标的分类精度较高，并且这些目标之间的准确性没有明显差异。 从矩阵中可以看出，目标6最经常与目标7混淆。但是，大多数目标与周围目标（包括四个边和四个对角线的目标）混淆了（见图1）。这种现象可能源于附近刺激物对目标刺激物的干扰。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210416175115623.png"></p><p>图b显示了单组受试者之间目标识别的平均混淆矩阵。</p><p>显然，每组的分类准确性很高，并且各组之间的准确性几乎没有差异。</p><p>组之间精度的良好平衡可能归因于三个调制序列的良好自相关和互相关特性。</p><p>每个组最常与相邻的组混淆。这种现象也可能是由于<code>附近群体的刺激干扰目标所致</code></p><h3 id="目标识别的数据长度">4 目标识别的数据长度</h3><p>分类精度和ITR用来评估该范式的性能</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210416181053928.png"></p><p>M是目标数，P是检测精度，T是目标选择时间</p><figure><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210416181254026.png" alt="图5.平均精确度和平均ITR"><figcaption aria-hidden="true"><strong>图5.平均精确度和平均ITR</strong></figcaption></figure><h3 id="训练次数">5 训练次数</h3><p>100次后精度几乎不变。因此，在模拟的在线实验中，为了节省培训时间，每组的参考目标参加了100次试验。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210416182129371.png"></p><h3 id="模拟在线实验-1">6 模拟在线实验</h3><p>对于大多数受试者，单个刺激组的准确性高于w组</p><p>刺激数量有16提速到48，准确率小幅下降的同时，大大提高了ITRs</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210416182417845.png"></p><h2 id="笔记">6. 笔记</h2><ol type="1"><li><p>伪随机M序列具有良好的自相关特性，可以用于调制单个刺激组。 然而，不同的M序列不能保证良好的互相关性。因此，它们不能用于调节多组刺激。 为了解决该问题，选择了一对Golay互补序列和几乎完美的自相关序列，以调制c-VEP BCI范式中的三组刺激。 它们表现出良好的自相关和良好的互相关，并且原则上确保了由三个调制码及其循环移位码激励的不同目标的刺激信号之间的正交性</p></li><li><p>为了将所有48个刺激目标在有限的区域内排列在监视器上，使用等效邻居的原理来设计视觉刺激器。 单个组中的十六个刺激紧密放置在一起以节省屏幕空间。 有了互补的非目标刺激，每个目标刺激和所有邻居都会保持固定时滞的关系。 由于中央凹视野之外的刺激也可能有助于VEP ，因此该原理利用了对目标及其邻居的诱发反应。 但这是在以下基础上建立的：<code>从人眼到所有目标的中心点的视角是相同的，并且等于在训练阶段用于模板数据获取的从人眼到参考目标的中心点的视角</code>。 在实践中，很难做到这一点，特别是对于具有大量目标刺激的视觉刺激器而言。 <code>结果</code>，由邻近刺激引起的诱发反应并不是一种有用的信号，而是一种噪声干扰。</p></li><li><p><strong>v-vep vs f-vep</strong></p><p>在常规的c-VEP BCI中，一组刺激是由原始的伪随机二进制代码及其循环移位代码调制的。 因此，所有刺激共享相同的调制码，但是具有不同的相位。</p><p>在频率编码f-VEP BCI中，一组刺激由不同频率的方波信号调制。为了在计算机屏幕上呈现视觉刺激，实际上将单频方波信号编码为周期性二进制代码。 因此，所有刺激具有不同的周期代码，但共享相同的一个相位（零相位）。</p><p>两者不同之处在于：</p><ul><li>前者使用相同二进制码，相位不同。</li><li>后者使用不同周期码，相位相同</li><li>前者中的大量目标可以通过少量的伪随机码和大量相位进行调制，</li><li>后者中的目标可以通过大量的周期码和少量的相位进行调制。</li></ul><p>​</p></li></ol><h2 id="文章传送">文章传送</h2><p><a href="\2021\04\15\Paper\A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials">基于编码调制视觉诱发电位的多目标脑机接口</a></p><p><a href="/2021/03/15/Paper/2.基于编码调制VEP的高速BCI">基于编码调制VEP的高速BCI</a></p><h2 id="参考文献">参考文献</h2>]]></content>
    
    
    <summary type="html">基于不同代码分组调制的增加刺激目标数目的新型c-VEP脑机接口范式</summary>
    
    
    
    <category term="论文" scheme="https://1iuke.github.io/categories/%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="c-VEP" scheme="https://1iuke.github.io/tags/c-VEP/"/>
    
    <category term="CCA" scheme="https://1iuke.github.io/tags/CCA/"/>
    
  </entry>
  
  <entry>
    <title>正交编码与伪随机序列</title>
    <link href="https://1iuke.github.io/2021/04/15/%E9%80%9A%E4%BF%A1/%E6%AD%A3%E4%BA%A4%E7%BC%96%E7%A0%81%E4%B8%8E%E4%BC%AA%E9%9A%8F%E6%9C%BA%E5%BA%8F%E5%88%97/"/>
    <id>https://1iuke.github.io/2021/04/15/%E9%80%9A%E4%BF%A1/%E6%AD%A3%E4%BA%A4%E7%BC%96%E7%A0%81%E4%B8%8E%E4%BC%AA%E9%9A%8F%E6%9C%BA%E5%BA%8F%E5%88%97/</id>
    <published>2021-04-15T05:08:37.000Z</published>
    <updated>2021-04-15T12:10:00.156Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="正交">1 正交</h1><p>M个周期为T的信号<span class="math inline">\(s_1(t)、s_2(t)、、s_m(t)\)</span>构成正交信号集，则 <span class="math display">\[\int_o^T s_i(t)s_j(t)dt=0,i \neq j,i,j=1,2...M\]</span></p><h1 id="正交编码">2 正交编码</h1><h2 id="互相关系数">2.1 互相关系数</h2><p>设长为n的编码码元只取+1，-1，x,y是其中两个码组</p><p><span class="math inline">\(x=(x_1,x_2,...x_n)\)</span> <span class="math inline">\(y=(y_1,y_2,...y_n)\)</span></p><p>则x,y的互相关系数定义为： <span class="math display">\[\rho(x,y) =\frac{1}{n}\sum_{i=1}^{n}x_iy_i\\=\frac{A-D}{A+D}\]</span> A是相同码元个数，D是不同码元个数</p><p>此时 <span class="math inline">\(\rho\)</span> 有三种取值：</p><ol type="1"><li><span class="math inline">\(\rho&gt;0\)</span></li><li><span class="math inline">\(\rho=0\)</span> 正交</li><li><span class="math inline">\(\rho&lt;0\)</span> 超正交（不同码元数多余相同码元数）</li></ol><h2 id="自相关系数">2.2 自相关系数</h2><p><span class="math display">\[\rho _x(i) = \frac{1}{n}\sum_{i=1}^{n}x_ix_{i+j}\]</span></p><p>下标按模n计算</p><h2 id="正交编码-1">2.3 正交编码</h2><p>若码组 <span class="math inline">\(x,y\in C\)</span> 且<span class="math inline">\(\rho(x,y)=0\)</span></p><p>则x,y 正交，C为正交编码集</p><p>即正交编码的任意两个码组是正交的</p><p>s1 （1 1 1 1 ）</p><p>s2 （1 1 -1 -1）</p><p>s3 （1 -1 -1 1）</p><p>s4 （1 -1 1 -1）</p><h2 id="超正交编码">2.4 超正交编码</h2><p>任何两个码组间均超正交，这种编码为超正交编码</p><p>s1 （1 -1 -1）</p><p>s2 （-1 1 1）</p><p>s3 （-1 1 -1）</p><h2 id="双正交编码">2.5 双正交编码</h2><p>由正交编码及其反码组成</p><p>（0 0 0 0）（1 1 1 1）</p><p>（0 0 1 1）（1 1 0 0）</p><p>（0 1 1 0）（1 0 0 1）</p><p>（0 1 0 1）（1 0 1 0）</p><h1 id="伪随机噪声">3 伪随机噪声</h1><p><code>特点</code>： 具有类似随机噪声的统计特性，同时由便于重复产生个处理</p><p><code>产生</code>: 线性/非线性反馈移位器</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/%E9%80%9A%E4%BF%A1/%E6%AD%A3%E4%BA%A4%E7%BC%96%E7%A0%81%E4%B8%8E%E4%BC%AA%E9%9A%8F%E6%9C%BA%E5%BA%8F%E5%88%97/image-20210415200954514.png"></p>]]></content>
    
    
    <summary type="html">通信原理的一些知识点</summary>
    
    
    
    <category term="通信原理" scheme="https://1iuke.github.io/categories/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>A multi-target brain-computer interface based on code modulated visual evoked potentials</title>
    <link href="https://1iuke.github.io/2021/04/15/Paper/C4.A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials/"/>
    <id>https://1iuke.github.io/2021/04/15/Paper/C4.A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials/</id>
    <published>2021-04-15T02:06:57.000Z</published>
    <updated>2021-05-13T01:55:45.163Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总结">0. 总结</h2><p>三组目标提高到4组，实现64目标</p><p>弃用等效邻域原则</p><p>使用了4种不同数据预处理方法</p><p>进一步提高了target数量和ITR</p><h2 id="研究目标">1. 研究目标</h2><h2 id="研究背景及问题陈述">2. 研究背景及问题陈述</h2><blockquote><p>当受试者凝视感兴趣的目标时，大脑的<code>枕叶</code>会产生c-VEP信号。</p></blockquote><p>现有c-VEP范例将所有刺激目标打包为一组，用原始伪随机二进制码及其循环移位码 或 相同长度的不同伪随机二进制码调制。前者只需训练一个目标来创建所有目标的模板。后者需要创建所有目标的模板。通常采用第一种以减少训练时间。</p><p>影响ITR的主要因素之一是可选择<code>目标的数量</code>。高性能的脑机接口通常有大量的目标。因此，如何增加目标数目是c-VEP脑机接口的关键问题。</p><h2 id="研究方法">3. 研究方法</h2><p>在<a href="\2021\04\15\Paper\A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes">一种基于分码分组调制增加刺激目标数的c-VEP脑机接口新范式</a>的研究中，通过将现有的第一种目标调制方法与第二种基于视觉刺激分组调制的方法相结合，构建了一个48个目标的c-VEP BCI。在不显著增加训练时间的情况下，大幅增加刺激目标的数量和由此产生的ITR。</p><p>在本研究中，将目标组从三个扩展到四个，目标排列的方法从<code>等效邻居原则</code>调整为<code>分开放置</code>，并应用了四种不同的数据预处理方法来分析c-VEP系统。每个目标组有16个刺激目标，共64个目标。对8个被试的实验数据的分类结果验证了该范式在增加刺激靶数和ITR方面的可行性和有效性。</p><h2 id="评估实验">4. 评估，实验</h2><h3 id="visual-stimulator">3.1 Visual stimulator</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210415114951381.png"></p><p>如图，有64给刺激分为四组，每组4x4块，每组刺激由不同的伪随机二进制码及其循环移位码调制。所有编码应正交或近似正交。</p><p>本文采用一会Golay互补序列和两个近乎完美自相关序列。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210415123752379.png"></p><h3 id="experimental-setup">3.2 Experimental setup</h3><p>8名被试。60Hz刷新率，1920x1080像素，九个电极(P3, Pz, P4, PO7, POz, PO8, O1, Oz, O2）</p><p>采样率1000Hz</p><p><strong>目标测试试验的时间结构:</strong></p><figure><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210415133134554.png" alt="image-20210415133134554"><figcaption aria-hidden="true">image-20210415133134554</figcaption></figure><h3 id="target-recognition">3.3 Target recognition</h3><h4 id="cca">1 CCA</h4><p>提取更多与目标识别相关的信息</p><h4 id="spatial-filter-estimation.">2 Spatial filter estimation.</h4><p>在c-VEP脑机接口系统中，用于目标识别的数据长度是一个完整的刺激周期，即单次试验的数据长度。</p><p>利用从每个目标组中的参考目标导出的训练数据来估计空间滤波器</p><p>本实验中，<span class="math inline">\(X(t)\)</span>是滤波后的<span class="math inline">\(2-40Hz\)</span>时间信号。<span class="math inline">\(X^n(t),n=1,2...N\)</span> 是单次实验数据。<span class="math inline">\(X^n(t) \in R^{C\times L}\)</span> ,L为数据长度（采样点），C是电极。<span class="math inline">\(L=floor(lc/fr.fs)=1066\)</span> .lc(编码长度=64bit)，fr(屏幕刷新率60Hz) ，fs（采样率1000Hz)</p><p>ERP均值为 <span class="math display">\[{\over{S}}_{(t)} = \frac{1}{N}\sum_{n=1}^{N}X^n(t)\]</span> 通过复制<span class="math inline">\(\hat{S}_r(t)\)</span> N 此得到 ERP成分 <span class="math inline">\(S_r(t)=[\hat{S}_r(t),\hat{S}_r(t)..\hat{S}_r(t)]\)</span></p><p>为了估计空间滤波器，将以单次试验为中心的数据<span class="math inline">\(X_r^n(t)\)</span>连接成连续数据<span class="math inline">\(X_r(t)= [X_r^1(t),X_r^2(t)...X_r^N(t)]\)</span></p><p><span class="math inline">\(S_r(t)和X_r(t) \in R^{C\times(N.L)}\)</span> ,将其作为CCA输入可得到第 i 组空间滤波器 <span class="math inline">\(w_{xi} \in R^{C\times 1}\)</span></p><h4 id="template-creating">3 Template creating</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210415161311177.png"></p><ol type="1"><li>对第i个目标组，用空间滤波器对来自参考目标的多通道ERP信号进行滤波，得到以为参考模板<span class="math inline">\(T_{ir}(t)\)</span></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210415161629115.png"></p><ol start="2" type="1"><li>计算时延</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210415161952699.png"></p><ol start="3" type="1"><li>循环移位生成所有模板</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210415162030028.png"></p><h4 id="template-matching.">4 Template matching.</h4><p>通过测试信号和单个目标组中的所有模板之间的模板匹配，选取四个组的最佳结果。</p><p>度量方法有<code>normalized cross correlation (NCC), sum of absolute difference (SAD),</code> <code>sum of square difference (SSD)</code>, etc.本文采用相关方法</p><p>测试信号<span class="math inline">\(Y(t)\in R^{C\times L}\)</span> 先在<span class="math inline">\(2-40Hz\)</span> 进行时间滤波 ，然后用四个空间滤波器<span class="math inline">\(w_{xi}\)</span>进行空间滤波，生成4个一维向量<span class="math inline">\(y_i(t)=w_{xi}^TY(t)\)</span> ,<span class="math inline">\(y_i(t)\in R^{1\times L}\)</span></p><p>对于每一个组，<span class="math inline">\(y_i(t)\)</span> 与16个模板<span class="math inline">\(T_{ik}\)</span> 计算得到相关系数<span class="math inline">\(\rho_{ik}\)</span></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210415163603936.png"></p><p>第i组的最大值 <span class="math display">\[\rho_{imax}= \max _k \rho_{ik}\]</span></p><p>将四个最大系数的最大值确定为关注目标 <span class="math display">\[ST=\max _i \rho_{imax}\]</span></p><h3 id="performance-evaluation">3.4 Performance evaluation</h3><h4 id="itr">1 ITR</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210415164550190.png"></p><p>M是目标数，P是分类精度，T是一次选择的平均时间，包括视线转移时间和视觉刺激时间</p><h4 id="snr">2 SNR</h4><p>与f-VEP分析不同的是，到目前为止还没有一种确定c-VEP信号信噪比的方法。</p><p>本文采用 相似指数 （SMI）</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210415164952928.png"></p><p><span class="math inline">\(\hat X\)</span> 是所有试次的均值，<span class="math inline">\(x_i\)</span> 是第 i 此测试实验。 <span class="math inline">\(S=\frac{\hat{X}^Tx_i}{X^T\hat{X}}X^T\)</span> ,<span class="math inline">\(N=x_i-\hat{X}\)</span></p><h4 id="statistical-analysis">3 Statistical analysis</h4><p>针对系统性能指标非正态分布的特点，采用Wilcoxon符号秩检验对中值差值显著性进行统计分析，研究了不同目标数和不同数据预处理方法对系统性能的影响。配对测试是在95%的置信水平下进行的。</p><h2 id="结论">5. 结论</h2><h3 id="auto--and-cross-correlation-of-c-vep-signals">1 Auto- and cross-correlation of c-VEP signals</h3><p>虽然c-VEP BCI中的视觉刺激作为二进制信号都是不相关的，但这并不能保证对这些刺激的反应也是不相关的，因为大脑是一个非线性动态系统。因此，刺激目标的可分性实际上取决于刺激响应(即，c-VEP信号)的正交性，而不是编码</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210415170258948.png"></p><p>四个自相关函数中的每一个在时滞0处都有一个尖锐的中心峰值，在其他地方都有一个低旁瓣。中心峰值与最大旁瓣的比值足够大，可以保证在同一组中准确区分不同的目标。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210415170351280.png"></p><p>互相关函数在所有时间滞后时都具有较小的值。这意味着也很容易区分不同组中的目标。</p><h3 id="amplitude-spectrum-and-snr">2 Amplitude spectrum and SNR</h3><p>频谱分析是为了找出c-VEP信号的主要功率集中在哪个频段。主要能量基本上位于2-40 Hz的频率范围内。因此，在时间上对频率中的原始c-VEP信号进行滤波以降低噪声提高信噪比</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210415171557406.png"></p><p>为了评估c-VEP信号的信噪比，探索了四种不同的数据预处理方法，即：</p><p>1)M1：未经时间滤波的原始单通道(Oz)信号；</p><p>2)M2：带时间滤波的单通道(Oz)信号；</p><p>3)M3：未经空间滤波的原始多通道信号；</p><p>4)M4：同时进行时间和空间滤波的多通道信号。</p><p>M4为c-VEP脑机接口系统中使用的方法。使用来自每个参考目标的训练信号来评估SMI，并且SNR是从四个参考目标导出的四个SMI的平均值。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210415172029255.png"></p><p><strong>(M4)时间滤波和空间滤波组合的信噪比改善效果最好。</strong></p><h3 id="correlation-coefficient">3 Correlation coefficient</h3><p><span class="math inline">\(CC_T\)</span> 匹配系数 目标和模板</p><p><span class="math inline">\(CC_M\)</span> 失配系数 目标和其他模板</p><p>M4得到的CCT和CCT与CCM之间的距离都是所有目标中最大的，这表明时间和空间滤波相结合的方法可以获得最好的检测精度。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210415184118296.png"></p><h3 id="classification-accuracy-and-itr">4 Classification accuracy and ITR</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210415184321563.png"></p><h2 id="笔记">6. 笔记</h2><p>ITR由三个参数决定，即分类精度、目标数量和检测时间。高ITR要求第一个参数高，第二个参数大，第三个参数短。然而，这三个参数并不是独立的，而是相互作用的，这使得脑-机接口系统的设计成为一项复杂的任务。</p><p>高的ITR主要归因于以下几个因素：</p><p>1)较多的刺激目标，</p><p>2)具有良好的自相关和互相关特性的四种不同的调制码，</p><p>3)结合时间和空间滤波的有效信号处理算法</p><p>4)用于目标识别的短数据段。</p><p>改进：</p><p>在本系统中，64个刺激目标被呈现在尺寸为24英寸(1920×1080像素)的面积受限的LCD监视器上，使得每个刺激目标的大小为140×100像素，这对于VEP BCI来说是次优的。以前的研究建议，对于尺寸为1920×1080像素的显示器，最佳刺激尺寸至少为170×170像素(视角为3.8˚)。因此，增加每个刺激目标的大小将提高检测精度和由此产生的ITR。考虑到个体的差异，选择特定于受试者的参数，例如通道位置、滤波器频带和训练试验的次数，对于提高个体的表现也是有用的。</p><p>用于目标识别的数据长度是一个刺激周期，即对于60 Hz的屏幕刷新率为1.066秒。使用<code>固定停止(FS)</code>策略的缺点是它没有考虑被试在BCI容量上的个体差异。最好使用不同的数据长度对目标进行分类，即采用<code>动态停止(DS)</code>策略，该长度由脑电特征的质量和每次试验的分类置信度确定。DS策略不仅可以提高分类精度，而且可以缩短目标识别的整体时间。最近的一项研究表明，即使对于高速SSVEP BCI，DS策略也可以进一步提高它们的性能[39]。因此，<strong>将DS策略纳入64个目标的c-VEP BCI将是未来研究的一个方向</strong></p><h2 id="文章传送">文章传送：</h2><ol type="1"><li><a href="\2021\04\15\通信\正交编码与伪随机序列">正交编码与伪随机序列</a></li><li><a href="\2021\04\15\Paper\A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes">一种基于分码分组调制增加刺激目标数的c-VEP脑机接口新范式</a></li><li><a href="\2021\04\15\Paper\Incorporation-of-dynamic-stopping-strategy-into-the-high-speed-SSVEP-based-BCIs">DS策略</a></li><li><a href="\2021\03\15\Paper\2.基于编码调制VEP的高速BCI">基于编码调制VEP的高速BCI</a></li></ol><h2 id="参考文献">参考文献</h2><ol type="1"><li><a href="https://ieeexplore.ieee.org/document/8360166/">A Novel c-VEP BCI Paradigm for Increasing the Number of Stimulus T argets Based on Grouping Modulation With Different Codes</a></li></ol>]]></content>
    
    
    <summary type="html">基于编码调制视觉诱发电位的多目标脑机接口</summary>
    
    
    
    <category term="论文" scheme="https://1iuke.github.io/categories/%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="c-VEP" scheme="https://1iuke.github.io/tags/c-VEP/"/>
    
    <category term="CCA" scheme="https://1iuke.github.io/tags/CCA/"/>
    
  </entry>
  
  <entry>
    <title>Visual and Auditory Brain–Computer Interfaces</title>
    <link href="https://1iuke.github.io/2021/04/13/Paper/%E8%A7%86%E8%A7%89%E5%92%8C%E5%90%AC%E8%A7%89-%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/"/>
    <id>https://1iuke.github.io/2021/04/13/Paper/%E8%A7%86%E8%A7%89%E5%92%8C%E5%90%AC%E8%A7%89-%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/</id>
    <published>2021-04-13T02:15:55.000Z</published>
    <updated>2021-05-12T02:45:11.562Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总结">0. 总结</h2><p>本综述旨在为探索新的范式和方法以改进当前的视觉和听觉脑-机接口技术提供有用的指导。</p><h2 id="研究目标">1. 研究目标</h2><p>本文涉及的v-BCI和a-BCI系统仅包括基于大脑对<code>外源性</code>视觉或听觉刺激的反应的BCI[例如稳态视觉诱发电位(SSVEP)和听觉稳态反应(ASSR)]以及与视觉或听觉刺激相关的内源性电位(例如视觉和听觉P300事件相关电位(ERPs))。</p><h2 id="研究背景及问题陈述">2. 研究背景及问题陈述</h2><p>V-BCI和a-BCI可分为凝视依赖系统和凝视非依赖系统。视线相关的v-BCI系统利用了脑电记录的高信噪比(SNR)和高信息传输率(ITR)。不依赖凝视的v-BCI和a-BCI系统可以为不能使用凝视依赖的BCI的闭锁患者提供相对较高的系统性能。由于高BCI性能依赖于可靠、可重复和可区分的脑信号，因此v-BCI和a-BCI系统可以提供稳健的系统性能。</p><p>当前的v-BCI和a-BCI系统缺乏统一的系统框架，部分原因是它们从概念开始就被分开研究。</p><p>本综述将集中于v-BCI和a-BCI系统的现状和未来挑战。为了将各种v-BCI和a-BCI系统统一在一个框架内，我们从电信系统中借用了<code>信号调制和多址</code>(MA)方法的概念</p><h2 id="脑信号">2.1 脑信号</h2><p>大脑信号可以受到外源性刺激或内源性心理活动的调节。如图1所示，v-BCI和a-BCI系统中的外源性刺激是视觉和听觉刺激，而内源性刺激可能是由用户的隐性注意或心理任务引起的。这些大脑反应可能发生在感觉、感知或认知层面。感觉是感觉系统对外界刺激信号的处理。视觉和听觉刺激产生的诱发电位(EP)反映了典型的感觉过程。知觉涉及到感官信息的组织、识别和解释。意识水平的感官知觉使个体能够感觉到他们周围的环境。认知过程包括注意、学习、推理、决策等。在脑-机接口系统中，上述三个阶段的大脑反应可以通过被试的自愿注意进行调制，从而可以对所传达的信息进行编码。调制的脑信号中的特征可以在时域、频域或空间域中提取。不同领域的特征组合可以显著提高分类精度，从而提高BCI性能。</p><h2 id="v-bci和a-bci的脑信号">2.2 V-BCI和a-BCI的脑信号</h2><h3 id="受外部刺激调制的大脑信号">1 受外部刺激调制的大脑信号：</h3><p>a)视觉诱发电位，VEP(瞬时VEP，SSVEP，运动VEP，编码调制VEP)；</p><p>b)听觉稳态反应(ASSR)</p><p>视觉诱发电位是大脑对视觉刺激的反应，可以在头皮的枕部区域以最大幅度记录下来</p><h3 id="内源性调制的大脑信号">2 内源性调制的大脑信号：</h3><p>​ a) response to oddball stimulus (auditory mismatch negativ-ity (MMN) [42], N200 and P300 [43]);</p><p>​ b) response to mental tasks [late positive components (LPC)];</p><p>​ c) response inhibition (No-Go N2) [45];</p><p>​ d) semantic processing (N400) [46];</p><p>​ e) attention-modulated brain signals (SSVEP , ASSR)</p><h2 id="研究方法">3. 研究方法</h2><h2 id="v-bci和a-bci中的多目标编码">3.1 V-BCI和A-BCI中的多目标编码</h2><h3 id="v-bci和a-bci中的信息流">1 V-BCI和a-BCI中的信息流</h3><p><code>通信系统</code>中的技术可以启发脑机接口设计的新思路。从本质上讲，BCI中的信息流与电信系统非常相似。为了表达不同的意图，大脑信号必须以某种方式进行调制，以便将意图嵌入的EEG信号解调成原始信息。同时，为了避免相互<code>干扰</code>，不同意图的调制脑信号应相互<code>正交</code>或接近正交。为此，调制的大脑信号可以按<code>时间/频率/代码/空间</code>分区排列。该策略类似于在电信系统中允许多个用户以最小的性能降级同时<code>共享带宽</code>的MA技术</p><p>有四种基本的移动接入方案：时分多址(TDMA)、频分多址(FDMA)、码分多址(CDMA)和空分多址(SDMA)。</p><p>在TDMA中，用户被分配到不同的时隙，在此期间他们拥有整个信道带宽。</p><p>在FDMA中，整个带宽被分成多个部分频带，并在用户之间分配。</p><p>在CDMA中，用户被分配单独的代码来调制他们的信号，这使得他们彼此不同。</p><p>SDMA将地理空间划分为更小的空间，并根据用户的空间位置区分用户。</p><figure><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210413145334099.png" alt="image-20210413145334099"><figcaption aria-hidden="true">image-20210413145334099</figcaption></figure><p>表I描述了BCI中使用的多目标接入方法的基本原理。在大多数基于ERP的BCI中，遵循TDMA原则，多个目标出现在不同的时隙。基于SSVEP的脑机接口是一种典型的<code>频分多址</code>系统，每个目标占用自己的频带，没有重叠。基于伪随机码调制的VEP的BCI以类似于CDMA方法的方式工作。SDMA方法已被应用于v-BCI的设计中，在v-BCI中，脑电信号被视场中的不同目标位置调制。此外，混合多址(HMA)方法最近被用于v-BCI研究以提高系统性能。</p><h3 id="v-bci和a-bci的分类">2 V-BCI和a-BCI的分类</h3><p>对所有v-BCI和a-BCI系统进行全面系统的分类(见表一)</p><p>v-BCI和a-BCI系统可以分为以下五组：</p><ol type="1"><li><p>TDMA、</p></li><li><p>FDMA、</p></li><li><p>CDMA、</p></li><li><p>SDMA</p></li><li><p>HMA</p></li></ol><p>优点：</p><ol type="1"><li>这种分类有三个主要优点。首先，它简化了对v-BCI和a-BCI系统设计和实现的理解，使BCI研究人员更容易将传统通信中的现有技术融入到这些系统中。</li><li>便于在v-BCI和a-BCI之间以及在使用不同EEG信号的系统之间进行比较</li><li>帮助转移通信系统中的现有方法和技术，以提高当前v-BCI和a-BCI系统的系统性能</li></ol><h2 id="挑战">4. 挑战</h2><p><strong>nonlinearity</strong> and <strong>nonstationarity</strong> 带来的影响</p><h2 id="解决脑机接口相关的电生理问题">4.1 解决脑机接口相关的电生理问题</h2><h3 id="脑电中的非线性">1 脑电中的非线性</h3><p>大脑是一个非线性系统，在这个系统中可以观察到神经集合的群体动力学。它的活动，如脑电信号，可以用非线性动态方法比线性方法更好地描述。</p><h3 id="脑电中的非平稳性">2 脑电中的非平稳性</h3><p>随着时间的推移，与不同精神和行为状态相关的大脑活动的非平稳性持续发生.</p><p>为了解决这个问题，已经开发了能够在在线BCI操作期间自动更新分类器的自适应分类方法。</p><p>零训练方法旨在通过整合多个会话或主题的信息来解决特征提取和分类中的非平稳性问题。</p><p>在较小的时间尺度内的另一个挑战是EEG信号的试验间非平稳性。试验之间的可变性可能导致单次试验EEG信号的SNR变化</p><p>使用先进的数据分析方法可以缓解非平稳问题。</p><h2 id="提高itr">4.2 提高ITR</h2><p>发展v-bci和a-bci技术的主要挑战之一是<code>性能瓶颈</code>，这在很大程度上归因于脑电信号的低信噪比(<span class="math inline">\(SNR\)</span>)。</p><p>度量（metric）：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210413172426338.png"></p><p>M是选择的数量，P是目标检测的准确性，T(秒/选择)是选择的平均时间。</p><p>提高ITR的方法可以分别考虑M、P和T。</p><h3 id="提高目标检测精度">1.提高目标检测精度</h3><p>a 提高任务相关脑电信号的信噪比</p><p>b 最大化多个类的可分性。</p><p>为实现这些目标，应增加任务相关EEG信号中的特征的<code>幅度</code>和<code>维数</code>。</p><p>此外，先进的数据分析技术，如信号处理和机器学习方法，也被广泛应用于当前的脑-机接口系统中</p><h4 id="信噪比">1.1.信噪比</h4><p>a 先进的信号处理方法</p><p>b 空间滤波可以将多通道脑电信号投影到低维空间子空间，消除任务无关成分，提高任务相关脑电信号的信噪比 <span class="math inline">\(CCA\)</span>最大化SSVEP信号和预定义参考信号之间的相关性 <span class="math inline">\(ICA\)</span>将与任务相关的EEG分量与与任务无关的EEG分量和伪像分量分开</p><p>c 通过激发增强任务相关的EEG信号，在刺激设计中可以采用认知任务来产生更强的ERP信号</p><h4 id="多类的可分性">1.2 多类的可分性</h4><p>目标检测精度取决于多类的可分性。</p><p>在脑-机接口系统中，<code>机器学习技术</code>已被广泛用于提高目标检测精度。当前BCI中使用的技术包括用于<code>特征选择</code>、<code>特征组合</code>和<code>分类</code>的各种方法。在系统设计中，可以通过增加任务相关脑电信号中信息<code>特征的维数</code>来提高多类的可分性。</p><p>另一种有效的方法是在系统设计中采用<code>码分多址</code>(<span class="math inline">\(CDMA\)</span>)技术等复合编码方法。基于编码调制的视觉诱发电位的脑-机接口使用正交序列来产生可以通过互相关分析容易区分的视觉诱发电位信号</p><h3 id="增加分类数量">2.增加分类数量</h3><p>ITR高的BCI有大量的类，与其他BCI相比，v-BCI和a-BCI系统更能提供大量的类来实现复杂的应用</p><p>P300脑机接口系统通常使用TDMA方法对目标刺激进行编码</p><p>基于视觉诱发电位的脑机接口系统采用了频分多址(FDMA)和码分多址(CDMA)等多种激励编码方法</p><p>频率编码是SSVEP脑机接口中应用最广泛的方法。还使用多频编码方法来增加类别的数量</p><h3 id="缩短目标检测时间">3.缩短目标检测时间</h3><p>减少目标检测时间：</p><p>1 单次试验分类比试验平均效率高得多 （基于机器学习的单次试验分析）</p><p>2 自适应方法可以减少目标检测时间</p><p>3 优化的刺激呈现可以减少目标检测时间</p><p>​ 一种直接的方法是减少刺激呈现中两次闪光之间的ISI持续时间</p><p>​ 另一种方法是优化刺激编码方法</p><h2 id="实际应用">4.3 实际应用</h2><p>在实际的脑-机接口系统中需要解决以下问题：</p><ol type="1"><li>易用性</li><li>低成本的硬件和软件</li><li>稳健的系统性能</li></ol><p>与其他不需要外界刺激的脑机接口相比，v-BCI和a-BCI系统在系统设计和实现方面提出了更大的挑战。</p><ol type="1"><li><p>移动BCI平台的开发；</p></li><li><p>减少疲劳的方法；</p></li><li><p>异步系统控制的设计。</p></li></ol><p>总结了v-BCI和a-BCI系统的潜在应用。</p><h3 id="移动系统设计">1 移动系统设计</h3><p>移动脑-机接口平台技术可以在现实环境中实现和促进大量的脑-机接口应用。</p><p>三个主要挑战：</p><ol type="1"><li>移动脑机接口需要针对脑电设备、数据处理平台和刺激设备的移动硬件解决方案</li><li>减少电极的数量</li><li>系统需要能够解决EEG信号中的伪影问题 （新兴的移动脑成像(MOBI)技术可以帮助解决这个问题。）</li></ol><h3 id="减少疲劳">2 减少疲劳</h3><p><code>精神疲劳</code>指的是由于长时间的认知活动而导致的暂时无法保持最佳认知表现。精神疲劳会导致不适和注意力下降，从而降低脑电信号的幅度</p><p>目前，视觉疲劳是v-BCI系统的最大缺点之一，严重阻碍了其在现实生活中的应用。例如，已经提出了不同类型的刺激模式，例如高频刺激、高占空比刺激和基于图像的刺激，用于在基于SSVEP的BCI中保持稳健性能的同时减少视觉疲劳</p><p>在另一项研究中，Honget 分别使用<span class="math inline">\(N200\)</span>(即运动开始VEP)和视觉<span class="math inline">\(P300\)</span>研究了两种v-BCI系统的疲劳效应。研究发现，<span class="math inline">\(N200\)</span>对重复试验引起的疲劳不敏感，而视觉<span class="math inline">\(P300\)</span>则表现出与视觉疲劳相关的显著波幅降低</p><h3 id="异步系统设计">3 异步系统设计</h3><p>大多数当前的<span class="math inline">\(v-BCI\)</span>和<span class="math inline">\(a-BCI\)</span>使用同步控制协议，其中控制周期由系统启动。然而，异步控制协议(其中用户对何时开始或停止使用系统做出自定进度的决定)更加灵活和自然.</p><p>异步控制中的一个重要问题是检测空闲状态。解决方法：</p><p>​ 首先，通过在刺激设计中加入额外的EEG特征，可以改善对空闲状态的检测。</p><p>​ 然后 可以用于有效地检测非控制状态</p><p>​ 其次，通过开发有效的计算方法来区分空闲和控制状态下的EEG信号，也可以改进空闲状态检测</p><h3 id="临床应用">4 临床应用</h3><p>由于具有ITR高、用户培训少等优点，v-BCI和a-BCI系统已被应用于许多临床应用，以帮助运动障碍患者与他们的环境进行沟通</p><p>在系统使用过程中，大多数v-BCI系统依靠眼睛的肌肉控制来凝视目标。对于能够移动眼睛的患者(例如，脊髓损伤患者)，这些依赖凝视的系统为传统辅助设备(如眼球跟踪系统)提供了另一种解决方案。尽管目前依赖凝视的BCI显示出比眼球跟踪系统更低的通信速度，但它们有一些独特的特性，使它们对用户具有吸引力。<code>例如</code>，基于SSVEP的BCI可以有大量的类别，可以完全免校准</p><p>对于完全闭锁的患者，只有独立的脑机接口系统才能满足他们的需求。典型的独立<span class="math inline">\(v-BCI\)</span>和<span class="math inline">\(a-BCI\)</span>系统包括使用选择性视觉注意的<span class="math inline">\(v-BCI\)</span>系统和使用选择性收听的<span class="math inline">\(a-BCI\)</span>系统。</p><p>目前，有几个原因限制了v-BCI和a-BCI在临床上的应用。首先，传统的辅助技术，如眼球跟踪系统，可以提供比视线相关的BCI更有效的控制。第二，基于SCP和运动图像的与凝视无关的脑机接口为闭锁患者提供了另一种脑机接口解决方案。第三，完全闭锁的患者通常在学习如何使用脑机接口系统方面有困难。研究人员和临床医生需要共同努力，以促进v-BCI和a-BCI的发展，使其更适用于临床。</p><h3 id="其它应用">5 其它应用</h3><p>V-BCI和a-BCI系统在许多非临床应用中也有潜力。最近，几项研究证明了利用脑-机接口来改善人类行为的概念。</p><p>例如，使用快速串行视觉呈现(RSVP)范式的P300BCI被用来改善人类在目标检测中的表现。其他非临床应用包括精神状态监测和视频游戏。通过解决上述挑战，v-BCI和a-BCI技术可以使更多的人群受益，无论他们是不是残疾患者。</p><h2 id="结论">5. 结论</h2><p>在建立和研究脑-机接口技术时，缺乏对潜在神经机制的知识仍然是一个挑战。</p><p>在BCI技术能够有效、可靠和负担得起，使大量的人在日常生活中受益之前，还有很长的路要走。</p><h2 id="笔记">6. 笔记</h2><h2 id="参考文献">参考文献</h2>]]></content>
    
    
    <summary type="html">视觉和听觉-脑机接口</summary>
    
    
    
    <category term="论文" scheme="https://1iuke.github.io/categories/%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="综述" scheme="https://1iuke.github.io/tags/%E7%BB%BC%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>C++输入输出</title>
    <link href="https://1iuke.github.io/2021/04/11/C++/C-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    <id>https://1iuke.github.io/2021/04/11/C++/C-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</id>
    <published>2021-04-11T12:38:43.000Z</published>
    <updated>2021-04-12T12:29:14.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>C++ 有许多输入输出函数</p><h2 id="c语言的-printf-scanf">1 C语言的 printf() scanf()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, i);  <span class="hljs-comment">// i为整型变量，正确，输出i的值</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, f);  <span class="hljs-comment">// f为单精度变量，输出f变量中前两个字节的内容</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-string">&quot;C++&quot;</span>);  <span class="hljs-comment">//输出宇符串&quot;C++&quot;的地址</span><br><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;i);  <span class="hljs-comment">//正确，输入一个整数，赋给整型变量i</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, i);  <span class="hljs-comment">//漏写&amp;  </span><br></code></pre></td></tr></table></figure><p>C++为了与C兼容，保留了用printf和scanf进行输出和输人的方法，但是不能保证所输入输出的数据是可靠的安全的。</p><h2 id="c通过io类库">2 C++通过I/O类库</h2><p><code>在C++中，输入输出流被定义为类。C++的I/O库中的类称为流类(stream class)。 用流类定义的对象称为流对象。</code></p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/04/11/C++/C-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/image-20210412202220305.png" alt="image-20210412202220305"><figcaption aria-hidden="true">image-20210412202220305</figcaption></figure><h2 id="与iostream类库有关的头文件">3 与iostream类库有关的头文件</h2>]]></content>
    
    
    <summary type="html">C++各种输入输出函数总结</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>To train or not to train? A survey on training of feature extraction methods for SSVEP-based BCIs</title>
    <link href="https://1iuke.github.io/2021/04/08/Paper/SSVEP/%E8%AE%AD%E7%BB%83%E8%BF%98%E6%98%AF%E4%B8%8D%E8%AE%AD%E7%BB%83%EF%BC%9F%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E8%AE%AD%E7%BB%83%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0/"/>
    <id>https://1iuke.github.io/2021/04/08/Paper/SSVEP/%E8%AE%AD%E7%BB%83%E8%BF%98%E6%98%AF%E4%B8%8D%E8%AE%AD%E7%BB%83%EF%BC%9F%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E8%AE%AD%E7%BB%83%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0/</id>
    <published>2021-04-08T01:26:22.000Z</published>
    <updated>2021-07-01T03:28:03.711Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总结">0. 总结</h2><p>基于SSVEP的脑机接口特征提取方法以及训练或不训练的比较</p><p>可分为三类：</p><ul><li>training-free 系统更实用，但由于复杂的 EEG 活动导致受试者间的变异性，它们的性能受限</li><li>subject-specific 性能最好，花费时间最长，不适合日常使用</li><li>subject-independent 在训练和性能之间提供了良好的权衡，使这些 BCI 更适合实际使用。</li></ul><h2 id="研究目标">1. 研究目标</h2><p>本文综述了各种最新的SSVEP特征提取方法及训练要求的比较</p><h2 id="研究背景及问题陈述">2. 研究背景及问题陈述</h2><p>脑机接口(BCI)允许通过大脑信号直接控制应用程序，消除了对外围神经系统的依赖，为运动能力受限的人(如老年人或身体残疾的人)提供了可访问性，并为健康的人提供了替代的访问方法。基于与外部刺激相关的诱发电位的BCI，例如稳态视觉诱发电位(SSVEP)，与依赖于感觉运动节奏的自愿调制的BCI相比，不需要密集的用户训练。</p><p>因此，基于SSVEP的脑机接口的大部分研究都集中在通过<strong>提出新的特征提取和分类方法</strong>来提高系统性能。</p><p>通过基于训练的特征提取算法从标注的数 据中提取具有脑模式个性化特征的脑电特征，以优化用户的系统性能。讨论这些不同特征提取方法的训练要求的比较</p><p><strong>SSVEP是对以特定频率闪烁的重复视觉刺激做出反应而诱发的电位。</strong>这种神经反应由视觉刺激的基频和谐波的振荡活动组成，在大脑的<strong>枕区</strong>表现突出。基于SSVEP的BCI通过唯一地将闪烁的视觉刺激(每个具有不同频率)与特定命令相关联来利用该响应。这些刺激被呈现给用户，<strong>用户可以通过关注相应的刺激来选择命令</strong>。BCI<strong>识别</strong>EEG信号中的SSVEP响应，并生成特定命令以<strong>控制</strong>软件应用程序或外部设备。基于SSVEP的异步BCI还必须能够区分预期控制状态或无控制状态，以允许用户独立于任何提示以自定步调方式控制BCI，其中无控制状态，也称为非刺激、空闲或休息状态，是用户不打算执行任何BCI命令的时段。</p><p>存在各种不需要任何训练的SSVEP检测技术，例如功率谱密度分析(<code>PSDA</code>)、最小能量组合(<code>MEC</code>)和典型相关分析(<code>CCA</code>)。然而，鉴于潜在神经活动的复杂性，EEG信号是<strong>高度特定于受试者</strong>的，不仅在不同的个体之间，而且由于视觉疲劳、实验用户界面和环境的变化以及电极的移动等因素，在个体的同一会话中也有相当大的<strong>差异</strong>。为了减少自发背景EEG活动对SSVEP响应的干扰，结合专门表征用户SSVEP响应的用户训练数据显著提高检测性能。通过训练发现的特定于受试者的参数，如最佳电极位置和刺激频率，也被证明在系统性能方面是有益的。然而，特定学科系统中的这些优化技术可能会导致长时间和疲惫的培训课程，从而降低BCI的实用性，特别是对长期用户而言。为此，最近引入了利用转移学习方法的与对象无关的系统，其中由来自几个对象的SSVEP数据训练的方法被转移到新的对象，从而减少或消除了对每个用户长时间训练的需要。</p><p><strong>CCA列表</strong></p><figure><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210408095615027.png" alt="特征提取方法列表"><figcaption aria-hidden="true">特征提取方法列表</figcaption></figure><figure><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210408100657180.png" alt="image-20210408100657180"><figcaption aria-hidden="true">image-20210408100657180</figcaption></figure><p>本文的主要贡献是：</p><p>(I)详细的总结，包括每个特征提取算法的简要数学描述，</p><p>(Ii)将基于SSVEP的方法的训练要求分类为三类；</p><p>(Iii)对SSVEP特征提取方法的训练要求进行比较回顾，</p><h2 id="研究方法">3. 研究方法</h2><h2 id="ssvep特征提取模型">3.1 SSVEP特征提取模型</h2><p>根据SSVEP特征是从单个还是多个EEG通道中提取出来，这些方法也被分为两类；其中，基于单通道的方法可以分别<strong>从每个通道提取一个特征</strong>，而基于多通道的方法需要<strong>多个通道来提取最有效的特征</strong>。此外，基于模型的方法与数据驱动的方法是不同的；其中基于模型的特征提取方法假定SSVEP信号的<strong>特定数学模型</strong>，而数据驱动的方法仅通过分析BCI系统的<strong>EEG数据</strong>来提取特征</p><p><strong>SSVEP模型</strong> <span class="math display">\[y_n(t)=\sum_{h=1}^{H}a_{n,h}sin(2\pi hft +b_{n,h})+e_n(t)\]</span> <span class="math inline">\(y_n(t)\)</span> 是第<span class="math inline">\(n\)</span>个电极与参考电极之间的电压差在<span class="math inline">\(t\)</span>时刻的信号</p><p>该线性模型由两个分量组成，分别对应于SSVEP<strong>响应信号</strong>和<strong>噪声信号</strong>。诱发的SSVEP响应信号由频率为刺激频率<span class="math inline">\(f\)</span>的倍数的正弦的总和组成，</p><p><span class="math inline">\(H\)</span>表示所考虑的谐波频率的数目，并且每个正弦由其振幅<span class="math inline">\(a_{n,h}\)</span>和相移<span class="math inline">\(b_{n,h}\)</span>来定义。</p><p>噪声信号<span class="math inline">\(e_{n}(t)\)</span>表示与SSVEP响应无关的所有信息，诸如环境噪声、例如来自肌肉和眼睛伪影的自然物理干扰，以及除刺激锁定的基波和谐波之外的任何其他大脑活动。</p><p>以采样频率<span class="math inline">\(F_s\)</span>采样的<span class="math inline">\(T\)</span>个样本的时间段的EEG信号的模型以<strong>矢量形式</strong>表示如下 <span class="math display">\[\mathbf{y}_n = \mathbf{X}_f\mathbf{g}_n+\mathbf{e}_n\]</span> <span class="math inline">\(\mathbf{y}_n=[y_n(1)...y_n(T)]^T\)</span> 是包含一个时间段中<strong>第n个</strong>电极的EEG信号的<span class="math inline">\(T\times 1\)</span> 向量，<span class="math inline">\(\mathbf{e}_n\)</span> 是相同形状的噪音。</p><figure><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210408104145550.png" alt="image-20210408104145550"><figcaption aria-hidden="true">image-20210408104145550</figcaption></figure><p><span class="math inline">\(\mathbf{X}_f\)</span>是<span class="math inline">\(T\times 2H\)</span> 的信息矩阵，<span class="math inline">\(\mathbf{g}_n\)</span> 是包含振幅<span class="math inline">\(a_{n,h}\)</span>和相位<span class="math inline">\(b_{n,h}\)</span> 的 <span class="math inline">\(2T \times 1\)</span> 矩阵</p><blockquote><p>此处矩阵维度应有问题？？？？[T,2H] @[2T ,1] ？？ <span class="math inline">\(g_n\)</span>为[2H,1]</p></blockquote><p>对于从<strong>多个电极N记录的一组EEG信号</strong>，模型定义为： <span class="math display">\[\mathbf{Y}=\mathbf{X}_f\mathbf{G}+\mathbf{E}\]</span> <span class="math inline">\(\mathbf{G}\)</span> 是包含振幅和相位 <span class="math inline">\(2H \times N\)</span> 矩阵,<span class="math inline">\(\mathbf{Y}=[y_1...y_N]^T\)</span> 是包含一个时间段中n个电极的EEG信号的<span class="math inline">\(T\times N\)</span> 矩阵，<span class="math inline">\(\mathbf{e}_n\)</span> 是相同形状的噪音。</p><h2 id="training-free-methods">3.2  Training-free methods</h2><p>不利用任何训练数据来提取SSVEP特征的方法</p><p>通过使用一个分类器实现，该分类器选择产生最大特征值的刺激，该特征值为最强的 SSVEP 响应</p><p>当使用基于SSVEP的脑-机接口系统时，预测用户关注的目标的预测频率<span class="math inline">\(f^*\)</span>满足如下特征提取函数</p><figure><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210408110159149.png" alt="image-20210408110159149"><figcaption aria-hidden="true">image-20210408110159149</figcaption></figure><p><span class="math inline">\(f_i\)</span>表示刺激i的频率，<span class="math inline">\(F\)</span>表示刺激数量</p><h3 id="基于单通道的方法">3.2.1 基于单通道的方法</h3><p>从一组或一对电极获得的单个EEG通道提取SSVEP信息。例如：<strong>monopolar combination</strong>，其中测量来自单个电极的电压；<strong>bipolar combination</strong>，其中测量两个紧密放置的电极之间的电压差；以及<strong>average combination</strong>，其中测量多个电极信号的平均值。</p><h4 id="功率谱密度分析psda">1.功率谱密度分析(PSDA)</h4><p>基于脑电信号频谱分析的PSDA是SSVEP检测中应用<strong>最广泛</strong>的特征提取方法之一。这种<strong>基于模型</strong>的技术使用傅立叶变换将EEG信号从<strong>时域变换到频域</strong>，并从得到的频谱内容中提取特定的SSVEP特征。<strong>功率谱密度表示不同频率分量的总功率分布</strong>。在与刺激的基频及其谐波相对应的频率分量处，预计会有较大的功率振幅，代表SSVEP响应。</p><p>基于傅立叶变换的方法，如离散傅立叶变换(<code>DFT</code>)、快速傅立叶变换(<code>FFT</code>)和小波变换(<code>WT</code>)已被用于估计感兴趣频率处的功率值以进行SSVEP检测。可以从PSD估计信噪比(SNR)，以进一步增强SSVEP活动的功率，同时降低背景EEG噪声分量，从而允许更清楚地识别SSVEP响应。</p><p>有各种方法用于在不需要训练数据的情况下估计噪声功率，例如，估计非目标刺激时的功率，或者拟合自回归(AR)模型以在SSVEP频率中内插噪声功率。根据闪烁刺激对应的基频和谐波的PSD或SNR值构造特征向量。经常使用谐波和判决(HSD)方法，其中计算每个刺激的谐波功率值之和并用于构造SSVEP特征向量。</p><h4 id="希尔伯特-黄变换hht">2.希尔伯特-黄变换(HHT)</h4><p>HHT包括<strong>经验模式分解</strong>(EMD)和<strong>希尔伯特变换</strong>(HT)的应用，<strong>用于从非线性和非静态脑电信号中提取SSVEP特征</strong>。</p><p>EMD试图通过迭代地进行移位过程来将EEG信号分解成有限数量的<strong>固有模式函数</strong>(IMF)。包含SSVEP响应的EEG信号y被分解成不同的IMF。每个IMF是数据驱动函数，其表示具有随时间变化的振幅和频率的振荡函数可以表示非平稳信号的局部特征。计算所有与SSVP相关的IMF中的瞬时频率分量，并且该瞬时频率分量可以用作识别目标闪烁刺激的特征。在HHT中，对每个IMF分量应用希尔伯特变换以获得希尔伯特谱[25]。每个频带的能量可以从该频谱中获得，并用作检测SSVEP响应的特征。</p><h3 id="多通道空间滤波方法">3.2.2 多通道空间滤波方法</h3><figure><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210408111930995.png" alt="image-20210408111930995"><figcaption aria-hidden="true">image-20210408111930995</figcaption></figure><p>下面讨论几种从多通道脑电信号中提取SSVEP信息的空间滤波方法。图1说明了这些方法的SSVEP检测过程，它们都采用SSVEP模型。每种特征提取方法的目的都是为了找到最佳的特征值<span class="math inline">\(Ψ(Y，X_F)\)</span>，以优化目标刺激频率的预测精度。</p><h4 id="最小能量组合mec和最大对比度组合mcc">1.最小能量组合(MEC)和最大对比度组合(MCC)</h4><p>==未完==</p><p>这两种方法不需要训练数据来进行特征选择或噪声估计。都找到了一种组合多电极信号的最优空间滤波器来增强脑电信号中的SSVEP信息。具体地说，由<span class="math inline">\(s\)</span>表示的信道数据矢量被定义为<span class="math inline">\(Y_n\)</span>的线性组合，如下所示： <span class="math display">\[\mathbf{s}=\sum_{n=1}^Nw_n\mathbf{y}_n=\mathbf{Yw}\]</span> 多个通道S表示为： <span class="math display">\[\mathbf{S=YW},\mathbf{S}=[s_1,...s_C]\]</span> C是通道数量，W是<span class="math inline">\(N\times C\)</span>的权重矩阵</p><p>一旦从脑电信号和参考信号的组合构造空间滤波的通道，就估计每个通道中的SSVEP信号功率，并将其用作SSVEP特征，如图1中的<span class="math inline">\(Ψ(Y，X_F)\)</span>所示。</p><p>权重矩阵W的选择取决于所使用的具体多通道检测方法，下面将对其进行描述</p><p><strong>MEC方法以在增强SSVEP信息的同时最小化干扰信号的方式组合多个信号</strong>。该方法基于识别高方差信号分量的主成分分析(PCA)。MEC假设刺激频率<span class="math inline">\(X_f\)</span>是目标刺激，并试图消除任何其他干扰信号以获得更强的SNR用于SSVEP检测。这是通过首先从所有采集的电极信号Y中移除由具有频率f的刺激产生的任何潜在SSVEP活动来实现的，具体而言是通过将它们投影到SSVEP模型矩阵XF的正交补码上：</p><figure><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210411124439551.png" alt="image-20210411124439551"><figcaption aria-hidden="true">image-20210411124439551</figcaption></figure><h4 id="典型相关分析cca">2.典型相关分析CCA</h4><p>CCA是一种多变量统计方法，用于发现两组数据之间的潜在相关性。</p><p>设<span class="math inline">\(Y\)</span>和<span class="math inline">\(X\)</span>是分别表示多通道EEG信号和SSVEP参考信号的两个多维变量。CCA找到它们的线性组合<span class="math inline">\(y=Y^TW_y\)</span>和<span class="math inline">\(x=X^TW_x\)</span>，使得两个正则变量<span class="math inline">\(y\)</span>和<span class="math inline">\(x\)</span>之间的相关性最大化。权重向量<span class="math inline">\(W_y\)</span>和<span class="math inline">\(W_x\)</span>通过求解以下优化问题来找到：</p><figure><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210411124946620.png" alt="image-20210411124946620"><figcaption aria-hidden="true">image-20210411124946620</figcaption></figure><h4 id="多变量同步指数msi">3.多变量同步指数(MSI)</h4><p>多通道EEG信号与由刺激频率定义的一组参考信号之间的同步估计被用作用于检测目标频率的指标。所使用的同步指标，称为<code>S-估计器</code>，是基于多变量信号的相关矩阵的归一化特征值的熵的非线性同步度量。该方法要求目标刺激的参考信号与混合脑电记录同步。最大的同步索引表示具有最高相关性的两组信号。然后，选择产生该相关性的参考信号的刺激频率作为目标刺激。</p><p>首先将EEG信号<span class="math inline">\(Y\)</span>和参考信号<span class="math inline">\(X_f\)</span>的矩阵归一化为具有零均值和单位方差，并且相关矩阵估计如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210411131845938.png"></p><p>其中<span class="math inline">\(C_{YY}=\frac{1}{T}YY^T\)</span>,<span class="math inline">\(C_{X_fX_f}=\frac{1}{T}X_fX_f^T\)</span>,<span class="math inline">\(C_{YX_f}=C_{X_fY}=\frac{1}{T}YX_f^T\)</span>.</p><p>为了减小自相关对同步度量的影响，应用了以下线性变换</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210412111947874.png"></p><p>抵消自相关后，变换后的相关矩阵由下式给出：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210412112037070.png"></p><p>设<span class="math inline">\(\lambda_1,\lambda_2,...\lambda_P\)</span> 为矩阵<span class="math inline">\(C_{}^{&#39;}\)</span> 的特征值</p><p>计算两组信号之间的同步指数SI为：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210412112537599.png"></p><p><span class="math inline">\(\lambda_i&#39;\)</span>的<span class="math inline">\(C&#39;\)</span>第i个归一化特征值。对于两组不相关的信号，<span class="math inline">\(C_{YX_f}=C_{X_fY}=0\)</span>，当两组信号完全相关时，SI=1，因为<span class="math inline">\(C’\)</span>在主对角线上会有1，在其他地方会有0。对于后一种情况，只有一个归一化特征值是1，而其他特征值是零。估计来自多个脑电信号Y的信号与每个参考信号<span class="math inline">\(X_f\)</span>之间的同步指数，并将其用于计算图1中的SSVEP特征<span class="math inline">\(Ψ(Y，X_f)\)</span>。</p><h4 id="似然比检验lrt">4.似然比检验(LRT)</h4><p>LRT方法找出两组多元变量的独立性。</p><h4 id="双偏最小二乘法d-pls">5.双偏最小二乘法(D-PLS)</h4><p>偏最小二乘(PLS)是一种用于SSVEP检测的多元线性回归方法，它直接计算多维因变量对多维自变量的回归。该模型估计了两个信号之间复杂的因果关系，并在非正态分布和小样本条件下提取相关性最大的潜在变量。</p><h2 id="discussion-on-training-free-methods">3.3 Discussion on training-free methods</h2><h3 id="single-channel-based-training-free-methods">1.  Single channel-based training-free methods</h3><p>PSDA 是最简单的检测方法。</p><p>bipolar 方法采用两个 EEG 电极之间的差异，消除了常见的干扰信号，通常能提供最佳性能。</p><p>实践中，同一用户的电极的确切位置在不同的会话中也可能略有不同。可能缺乏鲁棒性。</p><p>单通道方法对噪声敏感，需要更多的数据用于SSVEP识别，并且计算时间较长，特别是在HHT的情况下，这将限制基于SSVEP的BCI的<strong>实时性能</strong>。</p><h3 id="multi-channel-training-free-methods">2.Multi-channel training-free methods</h3><p>多通道检测方法受益于多个信号的优化组合，从而克服了这些限制。对于这些方法，不需要信道选择过程，并且实现了对噪声的更强的鲁棒性</p><p>MEC空间过滤器将双极组合方法推广到更多的电极，可以消除干扰信号，获得更好的SNR。</p><p>当干扰信号与刺激的相同频率重合时，MCC 搜索在感兴趣频率中导致通道信号在 SSVEP 频率中产生虚假能量</p><p>MEC 方法比 MCC 方法略好</p><p>CCA 方法在准确度方面的表现略好于各种数据长度的 MEC，并且在不同长度的测试数据下性能变化较小</p><p>CCA MEC MCC在准确性和信息传输率（ITR）方面没有显着差异。</p><p>MSI 方法，在分类精度方面的性能优于 CCA 和 MEC 方法。</p><h3 id="两种免训方法的比较">3.两种免训方法的比较</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210412115210598.png"></p><h2 id="针对特定被试的培训方法">3.4 针对特定被试的培训方法</h2><p>介绍需要特定用户培训数据的SSVEP检测最常用的技术</p><h3 id="平均最大对比度组合amcc">1.平均最大对比度组合(AMCC)</h3><h3 id="cca扩展">2.CCA扩展</h3><h4 id="相位约束典型相关分析p-cca">2.1 相位约束典型相关分析(p-CCA)</h4><h4 id="基于个体模板的典型相关分析it-cca">2.2 基于个体模板的典型相关分析(IT-CCA)</h4><h4 id="组合典型相关分析combinedcca">2.3 组合典型相关分析(CombinedCCA)</h4><h4 id="多向典型相关分析mwaycca和l1正则化多向典型相关分析l1-mcca">2.4 多向典型相关分析(MwayCCA)和L1正则化多向典型相关分析(L1-MCCA)</h4><h4 id="多集典型相关分析msetcca">2.5 多集典型相关分析(MsetCCA)</h4><h4 id="多层相关最大化mcm">2.6 多层相关最大化(MCM)</h4><h3 id="公共特征分析cfa">3.公共特征分析(CFA)</h3><h3 id="多元线性回归mlr">4.多元线性回归(MLR)</h3><h3 id="公共空间模式分析acsp">5.公共空间模式分析(ACSP)</h3><h3 id="task相关成分分析trca">6.TASK相关成分分析(TRCA)</h3><h3 id="关于特定用户训练方法的探讨">7.关于特定用户训练方法的探讨</h3><h4 id="特定用户的训练时间">7.1 特定用户的训练时间</h4><h4 id="针对分类的特定用户训练">7.2 针对分类的特定用户训练</h4><h4 id="特征提取的特定用户训练cca扩展">7.3 特征提取的特定用户训练：CCA扩展</h4><h4 id="特征提取的特定用户训练其他方法">7.4 特征提取的特定用户训练：其他方法</h4><h4 id="特定用户训练方法的比较">7.5 特定用户训练方法的比较</h4><h2 id="独立于用户的培训方法">3.5 独立于用户的培训方法</h2><h3 id="最小绝对收缩和选择操作lasso">5.1 最小绝对收缩和选择操作(LASSO)</h3><h3 id="滤波器组典型相关分析fbcca">5.2 滤波器组典型相关分析(FBCCA)</h3><h3 id="基于转移模板的典型相关分析tt-cca和基于转移的组合典型相关分析combated-tcca">5.3 基于转移模板的典型相关分析(TT-CCA)和基于转移的组合典型相关分析(Combated-TCCA)</h3><h3 id="关于独立用户训练方法的探讨">5.4 关于独立用户训练方法的探讨</h3><h4 id="模型参数由独立于对象的训练数据定义">1 模型参数由独立于对象的训练数据定义。</h4><h4 id="迁移学习方法">2 迁移学习方法</h4><h4 id="独立用户训练方法的比较">3 独立用户训练方法的比较</h4><h2 id="评估实验">4. 评估，实验</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/bloglk/image/raw/master/image/image-20210412121019420.png"></p><h2 id="结论">5. 结论</h2><p>本文为基于SSVEP的脑机接口中使用的特征提取算法的基本概念和训练要求提供了参考。很明显，就BCI的实用性而言，不需要个人用户进行任何培训的方法是最好的选择。然而，就BCI性能而言，包含训练数据的特征提取方法的性能优于无训练的方法。</p><h2 id="笔记">6. 笔记</h2><h2 id="参考文献">参考文献</h2>]]></content>
    
    
    <summary type="html">训练还是不训练？基于SSVEP的脑机接口特征提取方法训练研究综述</summary>
    
    
    
    <category term="论文" scheme="https://1iuke.github.io/categories/%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="SSVEP" scheme="https://1iuke.github.io/tags/SSVEP/"/>
    
    <category term="特征提取" scheme="https://1iuke.github.io/tags/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>Day4C++提高编程</title>
    <link href="https://1iuke.github.io/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    <id>https://1iuke.github.io/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/</id>
    <published>2021-03-31T02:52:40.000Z</published>
    <updated>2021-04-11T07:54:22.147Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>本阶段主要针对C++<code>泛型编程</code>和<code>STL技术</code>做详细讲解，探讨C++更深层的使用</li></ul><span id="more"></span><h2 id="模板">1 模板</h2><h3 id="模板的概念">1.1 模板的概念</h3><p>模板就是建立<strong>通用的模具</strong>，大大<strong>提高复用性</strong></p><p>例如生活中的模板</p><p>一寸照片模板：</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/1547105026929.png" alt="1547105026929"><figcaption aria-hidden="true">1547105026929</figcaption></figure><p>PPT模板：</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/1547103297864.png" alt="1547103297864"><figcaption aria-hidden="true">1547103297864</figcaption></figure><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/1547103359158.png" alt="1547103359158"><figcaption aria-hidden="true">1547103359158</figcaption></figure><p>模板的特点：</p><ul><li>模板不可以直接使用，它只是一个框架</li><li>模板的通用并不是万能的</li></ul><h3 id="函数模板">1.2 函数模板</h3><ul><li><p>C++另一种编程思想称为 <code>泛型编程</code> ，主要利用的技术就是模板</p></li><li><p>C++提供两种模板机制:<strong>函数模板</strong>和<strong>类模板</strong></p></li></ul><h4 id="函数模板语法">1.2.1 函数模板语法</h4><p>函数模板作用：</p><p>建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>函数声明或定义<br></code></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>template --- 声明创建模板</p><p>typename --- 表面其后面的符号是一种数据类型，可以用class代替</p><p>T --- 通用的数据类型，名称可以替换，通常为大写字母</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//交换整型函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swapInt</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; a, <span class="hljs-keyword">int</span>&amp; b)</span> </span>&#123;<br><span class="hljs-keyword">int</span> temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><span class="hljs-comment">//交换浮点型函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swapDouble</span><span class="hljs-params">(<span class="hljs-keyword">double</span>&amp; a, <span class="hljs-keyword">double</span>&amp; b)</span> </span>&#123;<br><span class="hljs-keyword">double</span> temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><span class="hljs-comment">//利用模板提供通用的交换函数</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mySwap</span><span class="hljs-params">(T&amp; a, T&amp; b)</span></span><br><span class="hljs-function"></span>&#123;<br>T temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br><br><span class="hljs-comment">//swapInt(a, b);</span><br><br><span class="hljs-comment">//利用模板实现交换</span><br><span class="hljs-comment">//1、自动类型推导</span><br>mySwap(a, b);<br><br><span class="hljs-comment">//2、显示指定类型</span><br>mySwap&lt;<span class="hljs-keyword">int</span>&gt;(a, b);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>函数模板利用关键字 template</li><li>使用函数模板有两种方式：自动类型推导、显示指定类型</li><li>模板的目的是为了提高复用性，将类型参数化</li></ul><h4 id="函数模板注意事项">1.2.2 函数模板注意事项</h4><p>注意事项：</p><ul><li><p>自动类型推导，必须推导出一致的数据类型T,才可以使用</p></li><li><p>模板必须要确定出T的数据类型，才可以使用</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//利用模板提供通用的交换函数</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mySwap</span><span class="hljs-params">(T&amp; a, T&amp; b)</span></span><br><span class="hljs-function"></span>&#123;<br>T temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><br><span class="hljs-comment">// 1、自动类型推导，必须推导出一致的数据类型T,才可以使用</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;c&#x27;</span>;<br><br>mySwap(a, b); <span class="hljs-comment">// 正确，可以推导出一致的T</span><br><span class="hljs-comment">//mySwap(a, c); // 错误，推导不出一致的T类型</span><br>&#125;<br><br><br><span class="hljs-comment">// 2、模板必须要确定出T的数据类型，才可以使用</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;func 调用&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//func(); //错误，模板不能独立使用，必须确定出T的类型</span><br>func&lt;<span class="hljs-keyword">int</span>&gt;(); <span class="hljs-comment">//利用显示指定类型的方式，给T一个类型，才可以使用该模板</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br>test02();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>使用模板时必须确定出通用数据类型T，并且能够推导出一致的类型</li></ul><h4 id="函数模板案例">1.2.3 函数模板案例</h4><p>案例描述：</p><ul><li>利用函数模板封装一个排序的函数，可以对<strong>不同数据类型数组</strong>进行排序</li><li>排序规则从大到小，排序算法为<strong>选择排序</strong></li><li>分别利用<strong>char数组</strong>和<strong>int数组</strong>进行测试</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//交换的函数模板</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mySwap</span><span class="hljs-params">(T &amp;a, T&amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>T temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span> <span class="hljs-comment">// 也可以替换成typename</span><br><span class="hljs-comment">//利用选择排序，进行对数组从大到小的排序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mySort</span><span class="hljs-params">(T arr[], <span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br><span class="hljs-keyword">int</span> max = i; <span class="hljs-comment">//最大数的下标</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; len; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (arr[max] &lt; arr[j])<br>&#123;<br>max = j;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (max != i) <span class="hljs-comment">//如果最大数的下标不是i，交换两者</span><br>&#123;<br>mySwap(arr[max], arr[i]);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printArray</span><span class="hljs-params">(T arr[], <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//测试char数组</span><br><span class="hljs-keyword">char</span> charArr[] = <span class="hljs-string">&quot;bdcfeagh&quot;</span>;<br><span class="hljs-keyword">int</span> num = <span class="hljs-keyword">sizeof</span>(charArr) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>);<br>mySort(charArr, num);<br>printArray(charArr, num);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//测试int数组</span><br><span class="hljs-keyword">int</span> intArr[] = &#123; <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span> &#125;;<br><span class="hljs-keyword">int</span> num = <span class="hljs-keyword">sizeof</span>(intArr) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>);<br>mySort(intArr, num);<br>printArray(intArr, num);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br>test02();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：模板可以提高代码复用，需要熟练掌握</p><h4 id="普通函数与函数模板的区别">1.2.4 普通函数与函数模板的区别</h4><p><strong>普通函数与函数模板区别：</strong></p><ul><li>普通函数调用时可以发生自动类型转换（隐式类型转换）</li><li>函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换</li><li>如果利用显示指定类型的方式，可以发生隐式类型转换</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//普通函数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">myAdd01</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-comment">//函数模板</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function">T <span class="hljs-title">myAdd02</span><span class="hljs-params">(T a, T b)</span>  </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-comment">//使用函数模板时，如果用自动类型推导，不会发生自动类型转换,即隐式类型转换</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;c&#x27;</span>;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; myAdd01(a, c) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//正确，将char类型的&#x27;c&#x27;隐式转换为int类型  &#x27;c&#x27; 对应 ASCII码 99</span><br><br><span class="hljs-comment">//myAdd02(a, c); // 报错，使用自动类型推导时，不会发生隐式类型转换</span><br><br>myAdd02&lt;<span class="hljs-keyword">int</span>&gt;(a, c); <span class="hljs-comment">//正确，如果用显示指定类型，可以发生隐式类型转换</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T</p><h4 id="普通函数与函数模板的调用规则">1.2.5 普通函数与函数模板的调用规则</h4><p>调用规则如下：</p><ol type="1"><li>如果函数模板和普通函数都可以实现，优先调用普通函数</li><li>可以通过空模板参数列表来强制调用函数模板</li><li>函数模板也可以发生重载</li><li>如果函数模板可以产生更好的匹配,优先调用函数模板</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//普通函数与函数模板调用规则</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">myPrint</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;调用的普通函数&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">myPrint</span><span class="hljs-params">(T a, T b)</span> </span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;调用的模板&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">myPrint</span><span class="hljs-params">(T a, T b, T c)</span> </span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;调用重载的模板&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//1、如果函数模板和普通函数都可以实现，优先调用普通函数</span><br><span class="hljs-comment">// 注意 如果告诉编译器  普通函数是有的，但只是声明没有实现，或者不在当前文件内实现，就会报错找不到</span><br><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>myPrint(a, b); <span class="hljs-comment">//调用普通函数</span><br><br><span class="hljs-comment">//2、可以通过空模板参数列表来强制调用函数模板</span><br>myPrint&lt;&gt;(a, b); <span class="hljs-comment">//调用函数模板</span><br><br><span class="hljs-comment">//3、函数模板也可以发生重载</span><br><span class="hljs-keyword">int</span> c = <span class="hljs-number">30</span>;<br>myPrint(a, b, c); <span class="hljs-comment">//调用重载的函数模板</span><br><br><span class="hljs-comment">//4、 如果函数模板可以产生更好的匹配,优先调用函数模板</span><br><span class="hljs-keyword">char</span> c1 = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">char</span> c2 = <span class="hljs-string">&#x27;b&#x27;</span>;<br>myPrint(c1, c2); <span class="hljs-comment">//调用函数模板</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性</p><h4 id="模板的局限性">1.2.6 模板的局限性</h4><p><strong>局限性：</strong></p><ul><li>模板的通用性并不是万能的</li></ul><p><strong>例如：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T a, T b)</span></span><br><span class="hljs-function"></span>&#123; <br>    a = b;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中提供的赋值操作，如果传入的a和b是一个数组，就无法实现了</p><p>再例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T a, T b)</span></span><br><span class="hljs-function"></span>&#123; <br>    <span class="hljs-keyword">if</span>(a &gt; b) &#123; ... &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，如果T的数据类型传入的是像Person这样的自定义数据类型，也无法正常运行</p><p>因此C++为了解决这种问题，提供模板的重载，可以为这些<strong>特定的类型</strong>提供<strong>具体化的模板</strong></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><span class="hljs-built_in">string</span> m_Name;<br><span class="hljs-keyword">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-comment">//普通函数模板</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">myCompare</span><span class="hljs-params">(T&amp; a, T&amp; b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (a == b)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//具体化，显示具体化的原型和定意思以template&lt;&gt;开头，并通过名称来指出类型</span><br><span class="hljs-comment">//具体化优先于常规模板</span><br><span class="hljs-keyword">template</span>&lt;&gt; <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">myCompare</span><span class="hljs-params">(Person &amp;p1, Person &amp;p2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> ( p1.m_Name  == p2.m_Name &amp;&amp; p1.m_Age == p2.m_Age)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-comment">//内置数据类型可以直接使用通用的函数模板</span><br><span class="hljs-keyword">bool</span> ret = myCompare(a, b);<br><span class="hljs-keyword">if</span> (ret)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a == b &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a != b &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-comment">//自定义数据类型，不会调用普通的函数模板</span><br><span class="hljs-comment">//可以创建具体化的Person数据类型的模板，用于特殊处理这个类型</span><br><span class="hljs-keyword">bool</span> ret = myCompare(p1, p2);<br><span class="hljs-keyword">if</span> (ret)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;p1 == p2 &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;p1 != p2 &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>test02();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>利用具体化的模板，可以解决自定义类型的通用化</li><li>学习模板并不是为了写模板，而是在STL能够运用系统提供的模板</li></ul><h3 id="类模板">1.3 类模板</h3><h4 id="类模板语法">1.3.1 类模板语法</h4><p>类模板作用：</p><ul><li>建立一个通用类，类中的成员 数据类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</li></ul><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>类<br></code></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>template --- 声明创建模板</p><p>typename --- 表面其后面的符号是一种数据类型，可以用class代替</p><p>T --- 通用的数据类型，名称可以替换，通常为大写字母</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-comment">//类模板</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">AgeType</span>&gt;</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>Person(NameType name, AgeType age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;mName = name;<br><span class="hljs-keyword">this</span>-&gt;mAge = age;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mName &lt;&lt; <span class="hljs-string">&quot; age: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mAge &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">public</span>:<br>NameType mName;<br>AgeType mAge;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 指定NameType 为string类型，AgeType 为 int类型</span><br>Person&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt;P1(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">999</span>);<br>P1.showPerson();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：类模板和函数模板语法相似，在声明模板template后面加类，此类称为类模板</p><h4 id="类模板与函数模板区别">1.3.2 类模板与函数模板区别</h4><p>类模板与函数模板区别主要有两点：</p><ol type="1"><li>类模板没有自动类型推导的使用方式</li><li>类模板在模板参数列表中可以有默认参数</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-comment">//类模板</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">AgeType</span> =</span> <span class="hljs-keyword">int</span>&gt; <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>Person(NameType name, AgeType age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;mName = name;<br><span class="hljs-keyword">this</span>-&gt;mAge = age;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mName &lt;&lt; <span class="hljs-string">&quot; age: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mAge &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">public</span>:<br>NameType mName;<br>AgeType mAge;<br>&#125;;<br><br><span class="hljs-comment">//1、类模板没有自动类型推导的使用方式</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// Person p(&quot;孙悟空&quot;, 1000); // 错误 类模板使用时候，不可以用自动类型推导</span><br>Person &lt;<span class="hljs-built_in">string</span> ,<span class="hljs-keyword">int</span>&gt;p(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">1000</span>); <span class="hljs-comment">//必须使用显示指定类型的方式，使用类模板</span><br>p.showPerson();<br>&#125;<br><br><span class="hljs-comment">//2、类模板在模板参数列表中可以有默认参数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person &lt;<span class="hljs-built_in">string</span>&gt; p(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-number">999</span>); <span class="hljs-comment">//类模板中的模板参数列表 可以指定默认参数</span><br>p.showPerson();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>test02();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>类模板使用只能用显示指定类型方式</li><li>类模板中的模板参数列表可以有默认参数</li></ul><h4 id="类模板中成员函数创建时机">1.3.3 类模板中成员函数创建时机</h4><p>类模板中成员函数和普通类中成员函数创建时机是有区别的：</p><ul><li>普通类中的成员函数一开始就可以创建</li><li>类模板中的成员函数在调用时才创建</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person1</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showPerson1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Person1 show&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person2</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showPerson2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Person2 show&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>T obj;<br><br><span class="hljs-comment">//类模板中的成员函数，并不是一开始就创建的，而是在模板调用时再生成</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span> </span>&#123; obj.showPerson1(); &#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span> </span>&#123; obj.showPerson2(); &#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>MyClass&lt;Person1&gt; m;<br><br>m.fun1();<br><br><span class="hljs-comment">//m.fun2();//编译会出错，说明函数调用才会去创建成员函数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建</p><h4 id="类模板对象做函数参数">1.3.4 类模板对象做函数参数</h4><p>学习目标：</p><ul><li>类模板实例化出的对象，向函数传参的方式</li></ul><p>一共有三种传入方式：</p><ol type="1"><li>指定传入的类型 --- 直接显示对象的数据类型</li><li>参数模板化 --- 将对象中的参数变为模板进行传递</li><li>整个类模板化 --- 将这个对象类型 模板化进行传递</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-comment">//类模板</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">AgeType</span> =</span> <span class="hljs-keyword">int</span>&gt; <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>Person(NameType name, AgeType age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;mName = name;<br><span class="hljs-keyword">this</span>-&gt;mAge = age;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mName &lt;&lt; <span class="hljs-string">&quot; age: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mAge &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">public</span>:<br>NameType mName;<br>AgeType mAge;<br>&#125;;<br><br><span class="hljs-comment">//1、指定传入的类型</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printPerson1</span><span class="hljs-params">(Person&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; &amp;p)</span> </span><br><span class="hljs-function"></span>&#123;<br>p.showPerson();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person &lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span> &gt;p(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">100</span>);<br>printPerson1(p);<br>&#125;<br><br><span class="hljs-comment">//2、参数模板化</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printPerson2</span><span class="hljs-params">(Person&lt;T1, T2&gt;&amp;p)</span></span><br><span class="hljs-function"></span>&#123;<br>p.showPerson();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;T1的类型为： &quot;</span> &lt;&lt; <span class="hljs-keyword">typeid</span>(T1).name() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;T2的类型为： &quot;</span> &lt;&lt; <span class="hljs-keyword">typeid</span>(T2).name() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person &lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span> &gt;p(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-number">90</span>);<br>printPerson2(p);<br>&#125;<br><br><span class="hljs-comment">//3、整个类模板化</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printPerson3</span><span class="hljs-params">(T &amp; p)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;T的类型为： &quot;</span> &lt;&lt; <span class="hljs-keyword">typeid</span>(T).name() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>p.showPerson();<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person &lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span> &gt;p(<span class="hljs-string">&quot;唐僧&quot;</span>, <span class="hljs-number">30</span>);<br>printPerson3(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br>test02();<br>test03();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>通过类模板创建的对象，可以有三种方式向函数中进行传参</li><li>使用比较广泛是第一种：指定传入的类型</li></ul><h4 id="类模板与继承">1.3.5 类模板与继承</h4><p>当类模板碰到继承时，需要注意一下几点：</p><ul><li>当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型</li><li>如果不指定，编译器无法给子类分配内存</li><li>如果想灵活指定出父类中T的类型，子类也需变为类模板</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br>T m;<br>&#125;;<br><br><span class="hljs-comment">//class Son:public Base  //错误，c++编译需要给子类分配内存，必须知道父类中T的类型才可以向下继承</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> :</span><span class="hljs-keyword">public</span> Base&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-comment">//必须指定一个类型</span><br>&#123;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Son c;<br>&#125;<br><br><span class="hljs-comment">//类模板继承类模板 ,可以用T2指定父类中的T类型</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son2</span> :</span><span class="hljs-keyword">public</span> Base&lt;T2&gt;<br>&#123;<br><span class="hljs-keyword">public</span>:<br>Son2()<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-keyword">typeid</span>(T1).name() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-keyword">typeid</span>(T2).name() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Son2&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">char</span>&gt; child1;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>test02();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：如果父类是类模板，子类需要指定出父类中T的数据类型</p><h4 id="类模板成员函数类外实现">1.3.6 类模板成员函数类外实现</h4><p>学习目标：能够掌握类模板中的成员函数类外实现</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//类模板中成员函数类外实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//成员函数类内声明</span><br>Person(T1 name, T2 age);<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">public</span>:<br>T1 m_Name;<br>T2 m_Age;<br>&#125;;<br><br><span class="hljs-comment">//构造函数 类外实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br>Person&lt;T1, T2&gt;::Person(T1 name, T2 age) &#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><br><span class="hljs-comment">//成员函数 类外实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br><span class="hljs-keyword">void</span> Person&lt;T1, T2&gt;::showPerson() &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄:&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person&lt;string, int&gt; p(&quot;Tom&quot;, 20);<br>p.showPerson();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：类模板中成员函数类外实现时，需要加上模板参数列表</p><h4 id="类模板分文件编写">1.3.7 类模板分文件编写</h4><p>学习目标：</p><ul><li>掌握类模板成员函数分文件编写产生的问题以及解决方式</li></ul><p>问题：</p><ul><li>类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到</li></ul><p>解决：</p><ul><li>解决方式1：直接包含.cpp源文件</li><li>解决方式2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，hpp是约定的名称，并不是强制</li></ul><p><strong>示例：</strong></p><p>person.hpp中代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>Person(T1 name, T2 age);<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">public</span>:<br>T1 m_Name;<br>T2 m_Age;<br>&#125;;<br><br><span class="hljs-comment">//构造函数 类外实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br>Person&lt;T1, T2&gt;::Person(T1 name, T2 age) &#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><br><span class="hljs-comment">//成员函数 类外实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br><span class="hljs-keyword">void</span> Person&lt;T1, T2&gt;::showPerson() &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄:&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>类模板分文件编写.cpp中代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">//#include &quot;person.h&quot;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;person.cpp&quot;</span> <span class="hljs-comment">//解决方式1，包含cpp源文件</span></span><br><br><span class="hljs-comment">//解决方式2，将声明和实现写到一起，文件后缀名改为.hpp</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;person.hpp&quot;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person&lt;string, int&gt; p(&quot;Tom&quot;, 10);<br>p.showPerson();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp</p><h4 id="类模板与友元">1.3.8 类模板与友元</h4><p>学习目标：</p><ul><li>掌握类模板配合友元函数的类内和类外实现</li></ul><p>全局函数类内实现 - 直接在类内声明友元即可</p><p>全局函数类外实现 - 需要提前让编译器知道全局函数的存在</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//2、全局函数配合友元  类外实现 - 先做函数模板声明，下方在做函数模板定义，在做友元</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>;</span><br><br><span class="hljs-comment">//如果声明了函数模板，可以将实现写到后面，否则需要将实现体写到类的前面让编译器提前看到</span><br><span class="hljs-comment">//template&lt;class T1, class T2&gt; void printPerson2(Person&lt;T1, T2&gt; &amp; p); </span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printPerson2</span><span class="hljs-params">(Person&lt;T1, T2&gt; &amp; p)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;类外实现 ---- 姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-comment">//1、全局函数配合友元   类内实现</span><br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printPerson</span><span class="hljs-params">(Person&lt;T1, T2&gt; &amp; p)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><br><span class="hljs-comment">//全局函数配合友元  类外实现</span><br><span class="hljs-keyword">friend</span> <span class="hljs-keyword">void</span> printPerson2&lt;&gt;(Person&lt;T1, T2&gt; &amp; p);<br><br><span class="hljs-keyword">public</span>:<br><br>Person(T1 name, T2 age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><br><br><span class="hljs-keyword">private</span>:<br>T1 m_Name;<br>T2 m_Age;<br><br>&#125;;<br><br><span class="hljs-comment">//1、全局函数在类内实现</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person &lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span> &gt;p(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">20</span>);<br>printPerson(p);<br>&#125;<br><br><br><span class="hljs-comment">//2、全局函数在类外实现</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person &lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span> &gt;p(<span class="hljs-string">&quot;Jerry&quot;</span>, <span class="hljs-number">30</span>);<br>printPerson2(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><br>test02();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：建议全局函数做类内实现，用法简单，而且编译器可以直接识别</p><h4 id="类模板案例">1.3.9 类模板案例</h4><p>案例描述: 实现一个通用的数组类，要求如下：</p><ul><li>可以对内置数据类型以及自定义数据类型的数据进行存储</li><li>将数组中的数据存储到堆区</li><li>构造函数中可以传入数组的容量</li><li>提供对应的拷贝构造函数以及operator=防止浅拷贝问题</li><li>提供尾插法和尾删法对数组中的数据进行增加和删除</li><li>可以通过下标的方式访问数组中的元素</li><li>可以获取数组中当前元素个数和数组的容量</li></ul><p><strong>示例：</strong></p><p>myArray.hpp中代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyArray</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <br><span class="hljs-comment">//构造函数</span><br>MyArray(<span class="hljs-keyword">int</span> capacity)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Capacity = capacity;<br><span class="hljs-keyword">this</span>-&gt;m_Size = <span class="hljs-number">0</span>;<br>pAddress = <span class="hljs-keyword">new</span> T[<span class="hljs-keyword">this</span>-&gt;m_Capacity];<br>&#125;<br><br><span class="hljs-comment">//拷贝构造</span><br>MyArray(<span class="hljs-keyword">const</span> MyArray &amp; arr)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Capacity = arr.m_Capacity;<br><span class="hljs-keyword">this</span>-&gt;m_Size = arr.m_Size;<br><span class="hljs-keyword">this</span>-&gt;pAddress = <span class="hljs-keyword">new</span> T[<span class="hljs-keyword">this</span>-&gt;m_Capacity];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;m_Size; i++)<br>&#123;<br><span class="hljs-comment">//如果T为对象，而且还包含指针，必须需要重载 = 操作符，因为这个等号不是 构造 而是赋值，</span><br><span class="hljs-comment">// 普通类型可以直接= 但是指针类型需要深拷贝</span><br><span class="hljs-keyword">this</span>-&gt;pAddress[i] = arr.pAddress[i];<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//重载= 操作符  防止浅拷贝问题</span><br>MyArray&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> MyArray&amp; myarray) &#123;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;pAddress != <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">delete</span>[] <span class="hljs-keyword">this</span>-&gt;pAddress;<br><span class="hljs-keyword">this</span>-&gt;m_Capacity = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">this</span>-&gt;m_Size = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">this</span>-&gt;m_Capacity = myarray.m_Capacity;<br><span class="hljs-keyword">this</span>-&gt;m_Size = myarray.m_Size;<br><span class="hljs-keyword">this</span>-&gt;pAddress = <span class="hljs-keyword">new</span> T[<span class="hljs-keyword">this</span>-&gt;m_Capacity];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;m_Size; i++) &#123;<br><span class="hljs-keyword">this</span>-&gt;pAddress[i] = myarray[i];<br>&#125;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">//重载[] 操作符  arr[0]</span><br>T&amp; <span class="hljs-keyword">operator</span> [](<span class="hljs-keyword">int</span> index)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;pAddress[index]; <span class="hljs-comment">//不考虑越界，用户自己去处理</span><br>&#125;<br><br><span class="hljs-comment">//尾插法</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Push_back</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T &amp; val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Capacity == <span class="hljs-keyword">this</span>-&gt;m_Size)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">this</span>-&gt;pAddress[<span class="hljs-keyword">this</span>-&gt;m_Size] = val;<br><span class="hljs-keyword">this</span>-&gt;m_Size++;<br>&#125;<br><br><span class="hljs-comment">//尾删法</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Pop_back</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Size == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">this</span>-&gt;m_Size--;<br>&#125;<br><br><span class="hljs-comment">//获取数组容量</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getCapacity</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;m_Capacity;<br>&#125;<br><br><span class="hljs-comment">//获取数组大小</span><br><span class="hljs-function"><span class="hljs-keyword">int</span><span class="hljs-title">getSize</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;m_Size;<br>&#125;<br><br><br><span class="hljs-comment">//析构</span><br>~MyArray()<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;pAddress != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span>[] <span class="hljs-keyword">this</span>-&gt;pAddress;<br><span class="hljs-keyword">this</span>-&gt;pAddress = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">this</span>-&gt;m_Capacity = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">this</span>-&gt;m_Size = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">private</span>:<br>T * pAddress;  <span class="hljs-comment">//指向一个堆空间，这个空间存储真正的数据</span><br><span class="hljs-keyword">int</span> m_Capacity; <span class="hljs-comment">//容量</span><br><span class="hljs-keyword">int</span> m_Size;   <span class="hljs-comment">// 大小</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>类模板案例—数组类封装.cpp中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;myArray.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printIntArray</span><span class="hljs-params">(MyArray&lt;<span class="hljs-keyword">int</span>&gt;&amp; arr)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.getSize(); i++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//测试内置数据类型</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">MyArray&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">array1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>array1.Push_back(i);<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array1打印输出：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>printIntArray(array1);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array1的大小：&quot;</span> &lt;&lt; array1.getSize() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array1的容量：&quot;</span> &lt;&lt; array1.getCapacity() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;--------------------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-function">MyArray&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">array2</span><span class="hljs-params">(array1)</span></span>;<br>array2.Pop_back();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array2打印输出：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>printIntArray(array2);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array2的大小：&quot;</span> &lt;&lt; array2.getSize() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array2的容量：&quot;</span> &lt;&lt; array2.getCapacity() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//测试自定义数据类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>Person() &#123;&#125; <br>Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age) &#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">string</span> m_Name;<br><span class="hljs-keyword">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printPersonArray</span><span class="hljs-params">(MyArray&lt;Person&gt;&amp; personArr)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; personArr.getSize(); i++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; personArr[i].m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; personArr[i].m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//创建数组</span><br><span class="hljs-function">MyArray&lt;Person&gt; <span class="hljs-title">pArray</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;韩信&quot;</span>, <span class="hljs-number">20</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;妲己&quot;</span>, <span class="hljs-number">18</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;王昭君&quot;</span>, <span class="hljs-number">15</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;赵云&quot;</span>, <span class="hljs-number">24</span>)</span></span>;<br><br><span class="hljs-comment">//插入数据</span><br>pArray.Push_back(p1);<br>pArray.Push_back(p2);<br>pArray.Push_back(p3);<br>pArray.Push_back(p4);<br>pArray.Push_back(p5);<br><br>printPersonArray(pArray);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;pArray的大小：&quot;</span> &lt;&lt; pArray.getSize() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;pArray的容量：&quot;</span> &lt;&lt; pArray.getCapacity() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><br>test02();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><p>能够利用所学知识点实现通用的数组</p><h2 id="stl初识">2 STL初识</h2><h3 id="stl的诞生">2.1 STL的诞生</h3><ul><li><p>长久以来，软件界一直希望建立一种可重复利用的东西</p></li><li><p>C++的<strong>面向对象</strong>和<strong>泛型编程</strong>思想，目的就是<strong>复用性的提升</strong></p></li><li><p>大多情况下，数据结构和算法都未能有一套标准,导致被迫从事大量重复工作</p></li><li><p>为了建立数据结构和算法的一套标准,诞生了<strong>STL</strong></p></li></ul><h3 id="stl基本概念">2.2 STL基本概念</h3><ul><li>STL(Standard Template Library,<strong>标准模板库</strong>)</li><li>STL 从广义上分为: <strong>容器(container) 算法(algorithm) 迭代器(iterator)</strong></li><li><strong>容器</strong>和<strong>算法</strong>之间通过<strong>迭代器</strong>进行无缝连接。</li><li>STL 几乎所有的代码都采用了模板类或者模板函数</li></ul><h3 id="stl六大组件">2.3 STL六大组件</h3><p>STL大体分为六大组件，分别是:<strong>容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器</strong></p><ol type="1"><li>容器：各种数据结构，如vector、list、deque、set、map等,用来存放数据。</li><li>算法：各种常用的算法，如sort、find、copy、for_each等</li><li>迭代器：扮演了容器与算法之间的胶合剂。</li><li>仿函数：行为类似函数，可作为算法的某种策略。</li><li>适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。</li><li>空间配置器：负责空间的配置与管理。</li></ol><h3 id="stl中容器算法迭代器">2.4 STL中容器、算法、迭代器</h3><p><strong>容器：</strong>置物之所也</p><p>STL<strong>容器</strong>就是将运用<strong>最广泛的一些数据结构</strong>实现出来</p><p>常用的数据结构：数组, 链表,树, 栈, 队列, 集合, 映射表 等</p><p>这些容器分为<strong>序列式容器</strong>和<strong>关联式容器</strong>两种:</p><p>​ <strong>序列式容器</strong>:强调值的排序，序列式容器中的每个元素均有固定的位置。 ​ <strong>关联式容器</strong>:二叉树结构，各元素之间没有严格的物理上的顺序关系</p><p><strong>算法：</strong>问题之解法也</p><p>有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms)</p><p>算法分为:<strong>质变算法</strong>和<strong>非质变算法</strong>。</p><p>质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等</p><p>非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等</p><p><strong>迭代器：</strong>容器和算法之间粘合剂</p><p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。</p><p>每个容器都有自己专属的迭代器</p><p>迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针</p><p>迭代器种类：</p><table><thead><tr class="header"><th>种类</th><th>功能</th><th>支持运算</th></tr></thead><tbody><tr class="odd"><td>输入迭代器</td><td>对数据的只读访问</td><td>只读，支持++、==、！=</td></tr><tr class="even"><td>输出迭代器</td><td>对数据的只写访问</td><td>只写，支持++</td></tr><tr class="odd"><td>前向迭代器</td><td>读写操作，并能向前推进迭代器</td><td>读写，支持++、==、！=</td></tr><tr class="even"><td>双向迭代器</td><td>读写操作，并能向前和向后操作</td><td>读写，支持++、--，</td></tr><tr class="odd"><td>随机访问迭代器</td><td>读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td><td>读写，支持++、--、[n]、-n、&lt;、&lt;=、&gt;、&gt;=</td></tr></tbody></table><p>常用的容器中迭代器种类为双向迭代器，和随机访问迭代器</p><h3 id="容器算法迭代器初识">2.5 容器算法迭代器初识</h3><p>了解STL中容器、算法、迭代器概念之后，我们利用代码感受STL的魅力</p><p>STL中最常用的容器为Vector，可以理解为数组，下面我们将学习如何向这个容器中插入数据、并遍历这个容器</p><h4 id="vector存放内置数据类型">2.5.1 vector存放内置数据类型</h4><p>容器： <code>vector</code></p><p>算法： <code>for_each</code></p><p>迭代器： <code>vector&lt;int&gt;::iterator</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MyPrint</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//创建vector容器对象，并且通过模板参数指定容器中存放的数据的类型</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br><span class="hljs-comment">//向容器中放数据</span><br>v.push_back(<span class="hljs-number">10</span>);<br>v.push_back(<span class="hljs-number">20</span>);<br>v.push_back(<span class="hljs-number">30</span>);<br>v.push_back(<span class="hljs-number">40</span>);<br><br><span class="hljs-comment">//每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素</span><br><span class="hljs-comment">//v.begin()返回迭代器，这个迭代器指向容器中第一个数据</span><br><span class="hljs-comment">//v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置</span><br><span class="hljs-comment">//vector&lt;int&gt;::iterator 拿到vector&lt;int&gt;这种容器的迭代器类型</span><br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator pBegin = v.begin();<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator pEnd = v.end();<br><br><span class="hljs-comment">//第一种遍历方式：</span><br><span class="hljs-keyword">while</span> (pBegin != pEnd) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *pBegin &lt;&lt; <span class="hljs-built_in">endl</span>;<br>pBegin++;<br>&#125;<br><br><br><span class="hljs-comment">//第二种遍历方式：</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-comment">//第三种遍历方式：</span><br><span class="hljs-comment">//使用STL提供标准遍历算法  头文件 algorithm</span><br>for_each(v.begin(), v.end(), MyPrint);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="vector存放自定义数据类型">2.5.2 Vector存放自定义数据类型</h4><p>学习目标：vector中存放自定义数据类型，并打印输出</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//自定义数据类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age) &#123;<br>mName = name;<br>mAge = age;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">string</span> mName;<br><span class="hljs-keyword">int</span> mAge;<br>&#125;;<br><span class="hljs-comment">//存放对象</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">vector</span>&lt;Person&gt; v;<br><br><span class="hljs-comment">//创建数据</span><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-number">20</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;ddd&quot;</span>, <span class="hljs-number">40</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;eee&quot;</span>, <span class="hljs-number">50</span>)</span></span>;<br><br>v.push_back(p1);<br>v.push_back(p2);<br>v.push_back(p3);<br>v.push_back(p4);<br>v.push_back(p5);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Name:&quot;</span> &lt;&lt; (*it).mName &lt;&lt; <span class="hljs-string">&quot; Age:&quot;</span> &lt;&lt; (*it).mAge &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//放对象指针</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">vector</span>&lt;Person*&gt; v;<br><br><span class="hljs-comment">//创建数据</span><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-number">20</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;ddd&quot;</span>, <span class="hljs-number">40</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;eee&quot;</span>, <span class="hljs-number">50</span>)</span></span>;<br><br>v.push_back(&amp;p1);<br>v.push_back(&amp;p2);<br>v.push_back(&amp;p3);<br>v.push_back(&amp;p4);<br>v.push_back(&amp;p5);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;Person*&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br>Person * p = (*it);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Name:&quot;</span> &lt;&lt; p-&gt;mName &lt;&lt; <span class="hljs-string">&quot; Age:&quot;</span> &lt;&lt; (*it)-&gt;mAge &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br>    <br>test02();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="vector容器嵌套容器">2.5.3 Vector容器嵌套容器</h4><p>学习目标：容器中嵌套容器，我们将所有数据进行遍历输出</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-comment">//容器嵌套容器</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">vector</span>&lt; <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &gt;  v;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v2;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v3;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v4;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>v1.push_back(i + <span class="hljs-number">1</span>);<br>v2.push_back(i + <span class="hljs-number">2</span>);<br>v3.push_back(i + <span class="hljs-number">3</span>);<br>v4.push_back(i + <span class="hljs-number">4</span>);<br>&#125;<br><br><span class="hljs-comment">//将容器元素插入到vector v中</span><br>v.push_back(v1);<br>v.push_back(v2);<br>v.push_back(v3);<br>v.push_back(v4);<br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator vit = (*it).begin(); vit != (*it).end(); vit++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *vit &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="stl--常用容器">3 STL- 常用容器</h2><h3 id="string容器">3.1 string容器</h3><h4 id="string基本概念">3.1.1 string基本概念</h4><p><strong>本质：</strong></p><ul><li>string是C++风格的字符串，而string本质上是一个类</li></ul><p><strong>string和char * 区别：</strong></p><ul><li>char * 是一个指针</li><li>string是一个类，类内部封装了char*，管理这个字符串，是一个char*型的容器。</li></ul><p><strong>特点：</strong></p><p>string 类内部封装了很多成员方法</p><p>例如：查找find，拷贝copy，删除delete 替换replace，插入insert</p><p>string管理char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责</p><h4 id="string构造函数">3.1.2 string构造函数</h4><p>构造函数原型：</p><ul><li><code>string();</code> //创建一个空的字符串 例如: string str; <code>string(const char* s);</code> //使用字符串s初始化</li><li><code>string(const string&amp; str);</code> //使用一个string对象初始化另一个string对象</li><li><code>string(int n, char c);</code> //使用n个字符c初始化</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-comment">//string构造</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">string</span> s1; <span class="hljs-comment">//创建空字符串，调用无参构造函数</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str1 = &quot;</span> &lt;&lt; s1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">s2</span><span class="hljs-params">(str)</span></span>; <span class="hljs-comment">//把c_string转换成了string</span><br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str2 = &quot;</span> &lt;&lt; s2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">s3</span><span class="hljs-params">(s2)</span></span>; <span class="hljs-comment">//调用拷贝构造函数</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str3 = &quot;</span> &lt;&lt; s3 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">s4</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;a&#x27;</span>)</span></span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str3 = &quot;</span> &lt;&lt; s3 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：string的多种构造方式没有可比性，灵活使用即可</p><h4 id="string赋值操作">3.1.3 string赋值操作</h4><p>功能描述：</p><ul><li>给string字符串进行赋值</li></ul><p>赋值的函数原型：</p><ul><li><code>string&amp; operator=(const char* s);</code> //char*类型字符串 赋值给当前的字符串</li><li><code>string&amp; operator=(const string &amp;s);</code> //把字符串s赋给当前的字符串</li><li><code>string&amp; operator=(char c);</code> //字符赋值给当前的字符串</li><li><code>string&amp; assign(const char *s);</code> //把字符串s赋给当前的字符串</li><li><code>string&amp; assign(const char *s, int n);</code> //把字符串s的前n个字符赋给当前的字符串</li><li><code>string&amp; assign(const string &amp;s);</code> //把字符串s赋给当前字符串</li><li><code>string&amp; assign(int n, char c);</code> //用n个字符c赋给当前字符串</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//赋值</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">string</span> str1;<br>str1 = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">string</span> str2;<br>str2 = str1;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str2 = &quot;</span> &lt;&lt; str2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">string</span> str3;<br>str3 = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">string</span> str4;<br>str4.assign(<span class="hljs-string">&quot;hello c++&quot;</span>);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str4 = &quot;</span> &lt;&lt; str4 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">string</span> str5;<br>str5.assign(<span class="hljs-string">&quot;hello c++&quot;</span>,<span class="hljs-number">5</span>);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str5 = &quot;</span> &lt;&lt; str5 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br><span class="hljs-built_in">string</span> str6;<br>str6.assign(str5);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str6 = &quot;</span> &lt;&lt; str6 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">string</span> str7;<br>str7.assign(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;x&#x27;</span>);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str7 = &quot;</span> &lt;&lt; str7 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><p>​ string的赋值方式很多，<code>operator=</code> 这种方式是比较实用的</p><p>c++中 “ “ (const char[2]) ‘ ’ (char)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-string">&quot; &quot;</span>) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//2</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-string">&#x27; &#x27;</span>) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure><h4 id="string字符串拼接">3.1.4 string字符串拼接</h4><p><strong>功能描述：</strong></p><ul><li>实现在字符串末尾拼接字符串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string&amp; operator+=(const char* str);</code> //重载+=操作符</li><li><code>string&amp; operator+=(const char c);</code> //重载+=操作符</li><li><code>string&amp; operator+=(const string&amp; str);</code> //重载+=操作符</li><li><code>string&amp; append(const char *s);</code> //把字符串s连接到当前字符串结尾</li><li><code>string&amp; append(const char *s, int n);</code> //把字符串s的前n个字符连接到当前字符串结尾</li><li><code>string&amp; append(const string &amp;s);</code> //同operator+=(const string&amp; str)</li><li><code>string&amp; append(const string &amp;s, int pos, int n);</code>//字符串s中从pos开始的n个字符连接到字符串结尾</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//字符串拼接</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">string</span> str1 = <span class="hljs-string">&quot;我&quot;</span>;<br><br>str1 += <span class="hljs-string">&quot;爱玩游戏&quot;</span>;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>str1 += <span class="hljs-string">&#x27;:&#x27;</span>;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">string</span> str2 = <span class="hljs-string">&quot;LOL DNF&quot;</span>;<br><br>str1 += str2;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">string</span> str3 = <span class="hljs-string">&quot;I&quot;</span>;<br>str3.append(<span class="hljs-string">&quot; love &quot;</span>);<br>str3.append(<span class="hljs-string">&quot;game abcde&quot;</span>, <span class="hljs-number">4</span>);<br><span class="hljs-comment">//str3.append(str2);</span><br>str3.append(str2, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// 从下标4位置开始 ，截取3个字符，拼接到字符串末尾</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：字符串拼接的重载版本很多，初学阶段记住几种即可</p><h4 id="string查找和替换">3.1.5 string查找和替换</h4><p><strong>功能描述：</strong></p><ul><li>查找：查找指定字符串是否存在</li><li>替换：在指定的位置替换字符串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>int find(const string&amp; str, int pos = 0) const;</code> //查找str第一次出现位置,从pos开始查找</li><li><code>int find(const char* s, int pos = 0) const;</code> //查找s第一次出现位置,从pos开始查找</li><li><code>int find(const char* s, int pos, int n) const;</code> //从pos位置查找s的前n个字符第一次位置</li><li><code>int find(const char c, int pos = 0) const;</code> //查找字符c第一次出现位置</li><li><code>int rfind(const string&amp; str, int pos = npos) const;</code> //查找str最后一次位置,从pos开始查找</li><li><code>int rfind(const char* s, int pos = npos) const;</code> //查找s最后一次出现位置,从pos开始查找</li><li><code>int rfind(const char* s, int pos, int n) const;</code> //从pos查找s的前n个字符最后一次位置</li><li><code>int rfind(const char c, int pos = 0) const;</code> //查找字符c最后一次出现位置</li><li><code>string&amp; replace(int pos, int n, const string&amp; str);</code> //替换从pos开始n个字符为字符串str</li><li><code>string&amp; replace(int pos, int n,const char* s);</code> //替换从pos开始的n个字符为字符串s</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//查找和替换</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//查找</span><br><span class="hljs-built_in">string</span> str1 = <span class="hljs-string">&quot;abcdefgde&quot;</span>;<br><br><span class="hljs-keyword">int</span> pos = str1.find(<span class="hljs-string">&quot;de&quot;</span>);<br><br><span class="hljs-keyword">if</span> (pos == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;未找到&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;pos = &quot;</span> &lt;&lt; pos &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><br>pos = str1.rfind(<span class="hljs-string">&quot;de&quot;</span>);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;pos = &quot;</span> &lt;&lt; pos &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//替换</span><br><span class="hljs-built_in">string</span> str1 = <span class="hljs-string">&quot;abcdefgde&quot;</span>;<br>str1.replace(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;1111&quot;</span>);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><span class="hljs-comment">//test02();</span><br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>find查找是从左往后，rfind从右往左</li><li>find找到字符串后返回查找的第一个字符位置，找不到返回-1</li><li>replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串</li></ul><h4 id="string字符串比较">3.1.6 string字符串比较</h4><p><strong>功能描述：</strong></p><ul><li>字符串之间的比较</li></ul><p><strong>比较方式：</strong></p><ul><li>字符串比较是按字符的ASCII码进行对比</li></ul><p>= 返回 0</p><p>&gt; 返回 1</p><p>&lt; 返回 -1</p><p><strong>函数原型：</strong></p><ul><li><code>int compare(const string &amp;s) const;</code> //与字符串s比较</li><li><code>int compare(const char *s) const;</code> //与字符串s比较</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//字符串比较</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-built_in">string</span> s1 = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-built_in">string</span> s2 = <span class="hljs-string">&quot;aello&quot;</span>;<br><br><span class="hljs-keyword">int</span> ret = s1.compare(s2);<br><br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;s1 等于 s2&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;s1 大于 s2&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;s1 小于 s2&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大</p><h4 id="string字符存取">3.1.7 string字符存取</h4><p>string中单个字符存取方式有两种</p><ul><li><code>char&amp; operator[](int n);</code> //通过[]方式取字符</li><li><code>char&amp; at(int n);</code> //通过at方法获取字符</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; str.size(); i++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; str[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; str.size(); i++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; str.at(i) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br><span class="hljs-comment">//字符修改</span><br>str[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>str.at(<span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;x&#x27;</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：string字符串中单个字符存取有两种方式，利用 [ ] 或 at</p><h4 id="string插入和删除">3.1.8 string插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>对string字符串进行插入和删除字符操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string&amp; insert(int pos, const char* s);</code> //插入字符串</li><li><code>string&amp; insert(int pos, const string&amp; str);</code> //插入字符串</li><li><code>string&amp; insert(int pos, int n, char c);</code> //在指定位置插入n个字符c</li><li><code>string&amp; erase(int pos, int n = npos);</code> //删除从Pos开始的n个字符</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//字符串插入和删除</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;hello&quot;</span>;<br>str.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;111&quot;</span>);<br><span class="hljs-built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>str.erase(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);  <span class="hljs-comment">//从1号位置开始3个字符</span><br><span class="hljs-built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>插入和删除的起始下标都是从0开始</p><h4 id="string子串">3.1.9 string子串</h4><p><strong>功能描述：</strong></p><ul><li>从字符串中获取想要的子串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string substr(int pos = 0, int n = npos) const;</code> //返回由pos开始的n个字符组成的字符串</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//子串</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;abcdefg&quot;</span>;<br><span class="hljs-built_in">string</span> subStr = str.substr(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;subStr = &quot;</span> &lt;&lt; subStr &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">string</span> email = <span class="hljs-string">&quot;hello@sina.com&quot;</span>;<br><span class="hljs-keyword">int</span> pos = email.find(<span class="hljs-string">&quot;@&quot;</span>);<br><span class="hljs-built_in">string</span> username = email.substr(<span class="hljs-number">0</span>, pos);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;username: &quot;</span> &lt;&lt; username &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>灵活的运用求子串功能，可以在实际开发中获取有效的信息</p><h3 id="vector容器">3.2 vector容器</h3><h4 id="vector基本概念">3.2.1 vector基本概念</h4><p><strong>功能：</strong></p><ul><li>vector数据结构和<strong>数组非常相似</strong>，也称为<strong>单端数组</strong></li></ul><p><strong>vector与普通数组区别：</strong></p><ul><li>不同之处在于数组是静态空间，而vector可以<strong>动态扩展</strong></li></ul><p><strong>动态扩展：</strong></p><ul><li>并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间</li></ul><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/clip_image002.jpg" alt="说明: 2015-11-10_151152"><figcaption aria-hidden="true">说明: 2015-11-10_151152</figcaption></figure><ul><li>vector容器的迭代器是支持随机访问的迭代器</li></ul><h4 id="vector构造函数">3.2.2 vector构造函数</h4><p><strong>功能描述：</strong></p><ul><li>创建vector容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>vector&lt;T&gt; v;</code> //采用模板实现类实现，默认构造函数</li><li><code>vector(v.begin(), v.end());</code> //将v[begin(), end())区间中的元素拷贝给本身。</li><li><code>vector(n, elem);</code> //构造函数将n个elem拷贝给本身。</li><li><code>vector(const vector &amp;vec);</code> //拷贝构造函数。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printVector</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; v)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1; <span class="hljs-comment">//无参构造</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>v1.push_back(i);<br>&#125;<br>printVector(v1);<br><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v2</span><span class="hljs-params">(v1.begin(), v1.end())</span></span>;<br>printVector(v2);<br><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v3</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>)</span></span>;<br>printVector(v3);<br><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v4</span><span class="hljs-params">(v3)</span></span>;<br>printVector(v4);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>vector的多种构造方式没有可比性，灵活使用即可</p><h4 id="vector赋值操作">3.2.3 vector赋值操作</h4><p><strong>功能描述：</strong></p><ul><li>给vector容器进行赋值</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>vector&amp; operator=(const vector &amp;vec);</code>//重载等号操作符</p></li><li><p><code>assign(beg, end);</code> //将[beg, end)区间中的数据拷贝赋值给本身。</p></li><li><p><code>assign(n, elem);</code> //将n个elem拷贝赋值给本身。</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printVector</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; v)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//赋值操作</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1; <span class="hljs-comment">//无参构造</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>v1.push_back(i);<br>&#125;<br>printVector(v1);<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v2;<br>v2 = v1;<br>printVector(v2);<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v3;<br>v3.assign(v1.begin(), v1.end());<br>printVector(v3);<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v4;<br>v4.assign(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<br>printVector(v4);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>总结： vector赋值方式比较简单，使用operator=，或者assign都可以</p><h4 id="vector容量和大小">3.2.4 vector容量和大小</h4><p><strong>功能描述：</strong></p><ul><li>对vector容器的容量和大小操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>empty();</code> //判断容器是否为空</p></li><li><p><code>capacity();</code> //容器的容量</p></li><li><p><code>size();</code> //返回容器中元素的个数</p></li><li><p><code>resize(int num);</code> //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p><p>​ //如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>resize(int num, elem);</code> //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p><p>​ //如果容器变短，则末尾超出容器长度的元素被删除</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printVector</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; v)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>v1.push_back(i);<br>&#125;<br>printVector(v1);<br><span class="hljs-keyword">if</span> (v1.empty())<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v1为空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v1不为空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v1的容量 = &quot;</span> &lt;&lt; v1.capacity() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v1的大小 = &quot;</span> &lt;&lt; v1.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//resize 重新指定大小 ，若指定的更大，默认用0填充新位置，可以利用重载版本替换默认填充</span><br>v1.resize(<span class="hljs-number">15</span>,<span class="hljs-number">10</span>);<br>printVector(v1);<br><br><span class="hljs-comment">//resize 重新指定大小 ，若指定的更小，超出部分元素被删除</span><br>v1.resize(<span class="hljs-number">5</span>);<br>printVector(v1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>判断是否为空 --- empty</li><li>返回元素个数 --- size</li><li>返回容器容量 --- capacity</li><li>重新指定大小 --- resize</li></ul><h4 id="vector插入和删除">3.2.5 vector插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>对vector容器进行插入、删除操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>push_back(ele);</code> //尾部插入元素ele</li><li><code>pop_back();</code> //删除最后一个元素</li><li><code>insert(const_iterator pos, ele);</code> //迭代器指向位置pos插入元素ele</li><li><code>insert(const_iterator pos, int count,ele);</code>//迭代器指向位置pos插入count个元素ele</li><li><code>erase(const_iterator pos);</code> //删除迭代器指向的元素</li><li><code>erase(const_iterator start, const_iterator end);</code>//删除迭代器从start到end之间的元素</li><li><code>clear();</code> //删除容器中所有元素</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printVector</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; v)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//插入和删除</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br><span class="hljs-comment">//尾插</span><br>v1.push_back(<span class="hljs-number">10</span>);<br>v1.push_back(<span class="hljs-number">20</span>);<br>v1.push_back(<span class="hljs-number">30</span>);<br>v1.push_back(<span class="hljs-number">40</span>);<br>v1.push_back(<span class="hljs-number">50</span>);<br>printVector(v1);<br><span class="hljs-comment">//尾删</span><br>v1.pop_back();<br>printVector(v1);<br><span class="hljs-comment">//插入</span><br>v1.insert(v1.begin(), <span class="hljs-number">100</span>);<br>printVector(v1);<br><br>v1.insert(v1.begin(), <span class="hljs-number">2</span>, <span class="hljs-number">1000</span>);<br>printVector(v1);<br><br><span class="hljs-comment">//删除</span><br>v1.erase(v1.begin());<br>printVector(v1);<br><br><span class="hljs-comment">//清空</span><br>v1.erase(v1.begin(), v1.end());<br>v1.clear();<br>printVector(v1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>尾插 --- push_back</li><li>尾删 --- pop_back</li><li>插入 --- insert (位置迭代器)</li><li>删除 --- erase （位置迭代器）</li><li>清空 --- clear</li></ul><h4 id="vector数据存取">3.2.6 vector数据存取</h4><p><strong>功能描述：</strong></p><ul><li>对vector中的数据的存取操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>at(int idx);</code> //返回索引idx所指的数据</li><li><code>operator[];</code> //返回索引idx所指的数据</li><li><code>front();</code> //返回容器中第一个数据元素</li><li><code>back();</code> //返回容器中最后一个数据元素</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v1;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>v1.push_back(i);<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v1.size(); i++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; v1[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v1.size(); i++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; v1.at(i) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v1的第一个元素为： &quot;</span> &lt;&lt; v1.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v1的最后一个元素为： &quot;</span> &lt;&lt; v1.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>除了用迭代器获取vector容器中元素，[ ]和at也可以</li><li>front返回容器第一个元素</li><li>back返回容器最后一个元素</li></ul><h4 id="vector互换容器">3.2.7 vector互换容器</h4><p><strong>功能描述：</strong></p><ul><li>实现两个容器内元素进行互换</li></ul><p><strong>函数原型：</strong></p><ul><li><code>swap(vec);</code> // 将vec与本身的元素互换</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printVector</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; v)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v1;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>v1.push_back(i);<br>&#125;<br>printVector(v1);<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>&#123;<br>v2.push_back(i);<br>&#125;<br>printVector(v2);<br><br><span class="hljs-comment">//互换容器</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;互换后&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>v1.swap(v2);<br>printVector(v1);<br>printVector(v2);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;<br>v.push_back(i);<br>&#125;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v的容量为：&quot;</span> &lt;&lt; v.capacity() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v的大小为：&quot;</span> &lt;&lt; v.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>v.resize(<span class="hljs-number">3</span>);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v的容量为：&quot;</span> &lt;&lt; v.capacity() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v的大小为：&quot;</span> &lt;&lt; v.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-comment">//收缩内存</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;(v).swap(v); <span class="hljs-comment">//匿名对象</span><br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v的容量为：&quot;</span> &lt;&lt; v.capacity() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v的大小为：&quot;</span> &lt;&lt; v.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>test02();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>总结：swap可以使两个容器互换，可以达到实用的收缩内存效果</p><h4 id="vector预留空间">3.2.8 vector预留空间</h4><p><strong>功能描述：</strong></p><ul><li>减少vector在动态扩展容量时的扩展次数</li></ul><p><strong>函数原型：</strong></p><ul><li><code>reserve(int len);</code>//容器预留len个元素长度，预留位置不初始化，元素不可访问。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br><br><span class="hljs-comment">//预留空间</span><br>v.reserve(<span class="hljs-number">100000</span>);<br><br><span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span>* p = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;<br>v.push_back(i);<br><span class="hljs-keyword">if</span> (p != &amp;v[<span class="hljs-number">0</span>]) &#123;<br>p = &amp;v[<span class="hljs-number">0</span>];<br>num++;<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num:&quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br>    <br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：如果数据量较大，可以一开始利用reserve预留空间</p><h3 id="deque容器">3.3 deque容器</h3><h4 id="deque容器基本概念">3.3.1 deque容器基本概念</h4><p><strong>功能：</strong></p><ul><li>双端数组，可以对头端进行插入删除操作</li></ul><p><strong>deque与vector区别：</strong></p><ul><li>vector对于头部的插入删除效率低，数据量越大，效率越低</li><li>deque相对而言，对头部的插入删除速度回比vector快</li><li>vector访问元素时的速度会比deque快,这和两者内部实现有关</li></ul><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/clip_image002-1547547642923.jpg" alt="说明: 2015-11-19_204101"><figcaption aria-hidden="true">说明: 2015-11-19_204101</figcaption></figure><p>deque内部工作原理:</p><p>deque内部有个<strong>中控器</strong>，维护每段缓冲区中的内容，缓冲区中存放真实数据</p><p>中控器维护的是每个缓冲区的地址，使得使用deque时像一片连续的内存空间</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/clip_image002-1547547896341.jpg" alt="clip_image002-1547547896341"><figcaption aria-hidden="true">clip_image002-1547547896341</figcaption></figure><ul><li>deque容器的迭代器也是支持随机访问的</li></ul><h4 id="deque构造函数">3.3.2 deque构造函数</h4><p><strong>功能描述：</strong></p><ul><li>deque容器构造</li></ul><p><strong>函数原型：</strong></p><ul><li><code>deque&lt;T&gt;</code> deqT; //默认构造形式</li><li><code>deque(beg, end);</code> //构造函数将[beg, end)区间中的元素拷贝给本身。</li><li><code>deque(n, elem);</code> //构造函数将n个elem拷贝给本身。</li><li><code>deque(const deque &amp;deq);</code> //拷贝构造函数</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printDeque</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; d)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-comment">//deque构造</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d1; <span class="hljs-comment">//无参构造函数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>d1.push_back(i);<br>&#125;<br>printDeque(d1);<br><span class="hljs-function"><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">d2</span><span class="hljs-params">(d1.begin(),d1.end())</span></span>;<br>printDeque(d2);<br><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;d3(<span class="hljs-number">10</span>,<span class="hljs-number">100</span>);<br>printDeque(d3);<br><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;d4 = d3;<br>printDeque(d4);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>deque容器和vector容器的构造方式几乎一致，灵活使用即可</p><h4 id="deque赋值操作">3.3.3 deque赋值操作</h4><p><strong>功能描述：</strong></p><ul><li>给deque容器进行赋值</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>deque&amp; operator=(const deque &amp;deq);</code> //重载等号操作符</p></li><li><p><code>assign(beg, end);</code> //将[beg, end)区间中的数据拷贝赋值给本身。</p></li><li><p><code>assign(n, elem);</code> //将n个elem拷贝赋值给本身。</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printDeque</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; d)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-comment">//赋值操作</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d1;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>d1.push_back(i);<br>&#125;<br>printDeque(d1);<br><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;d2;<br>d2 = d1;<br>printDeque(d2);<br><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;d3;<br>d3.assign(d1.begin(), d1.end());<br>printDeque(d3);<br><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;d4;<br>d4.assign(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<br>printDeque(d4);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：deque赋值操作也与vector相同，需熟练掌握</p><h4 id="deque大小操作">3.3.4 deque大小操作</h4><p><strong>功能描述：</strong></p><ul><li>对deque容器的大小进行操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>deque.empty();</code> //判断容器是否为空</p></li><li><p><code>deque.size();</code> //返回容器中元素的个数</p></li><li><p><code>deque.resize(num);</code> //重新指定容器的长度为num,若容器变长，则以默认值填充新位置。</p><p>​ //如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>deque.resize(num, elem);</code> //重新指定容器的长度为num,若容器变长，则以elem值填充新位置。</p><p>​ //如果容器变短，则末尾超出容器长度的元素被删除。</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printDeque</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; d)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//大小操作</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d1;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>d1.push_back(i);<br>&#125;<br>printDeque(d1);<br><br><span class="hljs-comment">//判断容器是否为空</span><br><span class="hljs-keyword">if</span> (d1.empty()) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;d1为空!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;d1不为空!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-comment">//统计大小</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;d1的大小为：&quot;</span> &lt;&lt; d1.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//重新指定大小</span><br>d1.resize(<span class="hljs-number">15</span>, <span class="hljs-number">1</span>);<br>printDeque(d1);<br><br>d1.resize(<span class="hljs-number">5</span>);<br>printDeque(d1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>deque没有容量的概念</li><li>判断是否为空 --- empty</li><li>返回元素个数 --- size</li><li>重新指定个数 --- resize</li></ul><h4 id="deque-插入和删除">3.3.5 deque 插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>向deque容器中插入和删除数据</li></ul><p><strong>函数原型：</strong></p><p>两端插入操作：</p><ul><li><code>push_back(elem);</code> //在容器尾部添加一个数据</li><li><code>push_front(elem);</code> //在容器头部插入一个数据</li><li><code>pop_back();</code> //删除容器最后一个数据</li><li><code>pop_front();</code> //删除容器第一个数据</li></ul><p>指定位置操作：</p><ul><li><p><code>insert(pos,elem);</code> //在pos位置插入一个elem元素的拷贝，返回新数据的位置。</p></li><li><p><code>insert(pos,n,elem);</code> //在pos位置插入n个elem数据，无返回值。</p></li><li><p><code>insert(pos,beg,end);</code> //在pos位置插入[beg,end)区间的数据，无返回值。</p></li><li><p><code>clear();</code> //清空容器的所有数据</p></li><li><p><code>erase(beg,end);</code> //删除[beg,end)区间的数据，返回下一个数据的位置。</p></li><li><p><code>erase(pos);</code> //删除pos位置的数据，返回下一个数据的位置。</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printDeque</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; d)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-comment">//两端操作</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d;<br><span class="hljs-comment">//尾插</span><br>d.push_back(<span class="hljs-number">10</span>);<br>d.push_back(<span class="hljs-number">20</span>);<br><span class="hljs-comment">//头插</span><br>d.push_front(<span class="hljs-number">100</span>);<br>d.push_front(<span class="hljs-number">200</span>);<br><br>printDeque(d);<br><br><span class="hljs-comment">//尾删</span><br>d.pop_back();<br><span class="hljs-comment">//头删</span><br>d.pop_front();<br>printDeque(d);<br>&#125;<br><br><span class="hljs-comment">//插入</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d;<br>d.push_back(<span class="hljs-number">10</span>);<br>d.push_back(<span class="hljs-number">20</span>);<br>d.push_front(<span class="hljs-number">100</span>);<br>d.push_front(<span class="hljs-number">200</span>);<br>printDeque(d);<br><br>d.insert(d.begin(), <span class="hljs-number">1000</span>);<br>printDeque(d);<br><br>d.insert(d.begin(), <span class="hljs-number">2</span>,<span class="hljs-number">10000</span>);<br>printDeque(d);<br><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;d2;<br>d2.push_back(<span class="hljs-number">1</span>);<br>d2.push_back(<span class="hljs-number">2</span>);<br>d2.push_back(<span class="hljs-number">3</span>);<br><br>d.insert(d.begin(), d2.begin(), d2.end());<br>printDeque(d);<br><br>&#125;<br><br><span class="hljs-comment">//删除</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d;<br>d.push_back(<span class="hljs-number">10</span>);<br>d.push_back(<span class="hljs-number">20</span>);<br>d.push_front(<span class="hljs-number">100</span>);<br>d.push_front(<span class="hljs-number">200</span>);<br>printDeque(d);<br><br>d.erase(d.begin());<br>printDeque(d);<br><br>d.erase(d.begin(), d.end());<br>d.clear();<br>printDeque(d);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><br><span class="hljs-comment">//test02();</span><br><br>    test03();<br>    <br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>插入和删除提供的位置是迭代器！</li><li>尾插 --- push_back</li><li>尾删 --- pop_back</li><li>头插 --- push_front</li><li>头删 --- pop_front</li></ul><h4 id="deque-数据存取">3.3.6 deque 数据存取</h4><p><strong>功能描述：</strong></p><ul><li>对deque 中的数据的存取操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>at(int idx);</code> //返回索引idx所指的数据</li><li><code>operator[];</code> //返回索引idx所指的数据</li><li><code>front();</code> //返回容器中第一个数据元素</li><li><code>back();</code> //返回容器中最后一个数据元素</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printDeque</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; d)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//数据存取</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d;<br>d.push_back(<span class="hljs-number">10</span>);<br>d.push_back(<span class="hljs-number">20</span>);<br>d.push_front(<span class="hljs-number">100</span>);<br>d.push_front(<span class="hljs-number">200</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; d.size(); i++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; d[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; d.size(); i++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; d.at(i) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;front:&quot;</span> &lt;&lt; d.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;back:&quot;</span> &lt;&lt; d.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>除了用迭代器获取deque容器中元素，[ ]和at也可以</li><li>front返回容器第一个元素</li><li>back返回容器最后一个元素</li></ul><h4 id="deque-排序">3.3.7 deque 排序</h4><p><strong>功能描述：</strong></p><ul><li>利用算法实现对deque容器进行排序</li></ul><p><strong>算法：</strong></p><ul><li><code>sort(iterator beg, iterator end)</code> //对beg和end区间内元素进行排序</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printDeque</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; d)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d;<br>d.push_back(<span class="hljs-number">10</span>);<br>d.push_back(<span class="hljs-number">20</span>);<br>d.push_front(<span class="hljs-number">100</span>);<br>d.push_front(<span class="hljs-number">200</span>);<br><br>printDeque(d);<br>sort(d.begin(), d.end());<br>printDeque(d);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：sort算法非常实用，使用时包含头文件 algorithm即可</p><h3 id="案例-评委打分">3.4 案例-评委打分</h3><h4 id="案例描述">3.4.1 案例描述</h4><p>有5名选手：选手ABCDE，10个评委分别对每一名选手打分，去除最高分，去除评委中最低分，取平均分。</p><h4 id="实现步骤">3.4.2 实现步骤</h4><ol type="1"><li>创建五名选手，放到vector中</li><li>遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分打分存到deque容器中</li><li>sort算法对deque容器中分数排序，去除最高和最低分</li><li>deque容器遍历一遍，累加总分</li><li>获取平均分</li></ol><p><strong>示例代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//选手类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> score)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Score = score;<br>&#125;<br><br><span class="hljs-built_in">string</span> m_Name; <span class="hljs-comment">//姓名</span><br><span class="hljs-keyword">int</span> m_Score;  <span class="hljs-comment">//平均分</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createPerson</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;Person&gt;&amp;v)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">string</span> nameSeed = <span class="hljs-string">&quot;ABCDE&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br><span class="hljs-built_in">string</span> name = <span class="hljs-string">&quot;选手&quot;</span>;<br>name += nameSeed[i];<br><br><span class="hljs-keyword">int</span> score = <span class="hljs-number">0</span>;<br><br><span class="hljs-function">Person <span class="hljs-title">p</span><span class="hljs-params">(name, score)</span></span>;<br><br><span class="hljs-comment">//将创建的person对象 放入到容器中</span><br>v.push_back(p);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//打分</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setScore</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;Person&gt;&amp;v)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)<br>&#123;<br><span class="hljs-comment">//将评委的分数 放入到deque容器中</span><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;d;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-keyword">int</span> score = rand() % <span class="hljs-number">41</span> + <span class="hljs-number">60</span>;  <span class="hljs-comment">// 60 ~ 100</span><br>d.push_back(score);<br>&#125;<br><br><span class="hljs-comment">//cout &lt;&lt; &quot;选手： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 打分： &quot; &lt;&lt; endl;</span><br><span class="hljs-comment">//for (deque&lt;int&gt;::iterator dit = d.begin(); dit != d.end(); dit++)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; *dit &lt;&lt; &quot; &quot;;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//cout &lt;&lt; endl;</span><br><br><span class="hljs-comment">//排序</span><br>sort(d.begin(), d.end());<br><br><span class="hljs-comment">//去除最高和最低分</span><br>d.pop_back();<br>d.pop_front();<br><br><span class="hljs-comment">//取平均分</span><br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator dit = d.begin(); dit != d.end(); dit++)<br>&#123;<br>sum += *dit; <span class="hljs-comment">//累加每个评委的分数</span><br>&#125;<br><br><span class="hljs-keyword">int</span> avg = sum / d.size();<br><br><span class="hljs-comment">//将平均分 赋值给选手身上</span><br>it-&gt;m_Score = avg;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showScore</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;Person&gt;&amp;v)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 平均分： &quot;</span> &lt;&lt; it-&gt;m_Score &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//随机数种子</span><br>srand((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)time(<span class="hljs-literal">NULL</span>));<br><br><span class="hljs-comment">//1、创建5名选手</span><br><span class="hljs-built_in">vector</span>&lt;Person&gt;v;  <span class="hljs-comment">//存放选手容器</span><br>createPerson(v);<br><br><span class="hljs-comment">//测试</span><br><span class="hljs-comment">//for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; (*it).m_Name &lt;&lt; &quot; 分数： &quot; &lt;&lt; (*it).m_Score &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//2、给5名选手打分</span><br>setScore(v);<br><br><span class="hljs-comment">//3、显示最后得分</span><br>showScore(v);<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong> 选取不同的容器操作数据，可以提升代码的效率</p><h3 id="stack容器">3.5 stack容器</h3><h4 id="stack-基本概念">3.5.1 stack 基本概念</h4><p><strong>概念：</strong>stack是一种<strong>先进后出</strong>(First In Last Out,FILO)的数据结构，它只有一个出口</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/clip_image002-1547604555425.jpg" alt="说明: 2015-11-15_195707"><figcaption aria-hidden="true">说明: 2015-11-15_195707</figcaption></figure><p>栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为</p><p>栈中进入数据称为 --- <strong>入栈</strong> <code>push</code></p><p>栈中弹出数据称为 --- <strong>出栈</strong> <code>pop</code></p><p>生活中的栈：</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/clip_image002.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/clip_image002-1547605111510.jpg" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><h4 id="stack-常用接口">3.5.2 stack 常用接口</h4><p>功能描述：栈容器常用的对外接口</p><p>构造函数：</p><ul><li><code>stack&lt;T&gt; stk;</code> //stack采用模板类实现， stack对象的默认构造形式</li><li><code>stack(const stack &amp;stk);</code> //拷贝构造函数</li></ul><p>赋值操作：</p><ul><li><code>stack&amp; operator=(const stack &amp;stk);</code> //重载等号操作符</li></ul><p>数据存取：</p><ul><li><code>push(elem);</code> //向栈顶添加元素</li><li><code>pop();</code> //从栈顶移除第一个元素</li><li><code>top();</code> //返回栈顶元素</li></ul><p>大小操作：</p><ul><li><code>empty();</code> //判断堆栈是否为空</li><li><code>size();</code> //返回栈的大小</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><br><span class="hljs-comment">//栈容器常用接口</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//创建栈容器 栈容器必须符合先进后出</span><br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br><br><span class="hljs-comment">//向栈中添加元素，叫做 压栈 入栈</span><br>s.push(<span class="hljs-number">10</span>);<br>s.push(<span class="hljs-number">20</span>);<br>s.push(<span class="hljs-number">30</span>);<br><br><span class="hljs-keyword">while</span> (!s.empty()) &#123;<br><span class="hljs-comment">//输出栈顶元素</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;栈顶元素为： &quot;</span> &lt;&lt; s.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-comment">//弹出栈顶元素</span><br>s.pop();<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;栈的大小为：&quot;</span> &lt;&lt; s.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>入栈 --- push</li><li>出栈 --- pop</li><li>返回栈顶 --- top</li><li>判断栈是否为空 --- empty</li><li>返回栈大小 --- size</li></ul><h3 id="queue-容器">3.6 queue 容器</h3><h4 id="queue-基本概念">3.6.1 queue 基本概念</h4><p><strong>概念：</strong>Queue是一种<strong>先进先出</strong>(First In First Out,FIFO)的数据结构，它有两个出口</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/clip_image002-1547606475892.jpg" alt="说明: 2015-11-15_214429"><figcaption aria-hidden="true">说明: 2015-11-15_214429</figcaption></figure><p>队列容器允许从一端新增元素，从另一端移除元素</p><p>队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为</p><p>队列中进数据称为 --- <strong>入队</strong> <code>push</code></p><p>队列中出数据称为 --- <strong>出队</strong> <code>pop</code></p><p>生活中的队列：</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/1547606785041.png" alt="1547606785041"><figcaption aria-hidden="true">1547606785041</figcaption></figure><h4 id="queue-常用接口">3.6.2 queue 常用接口</h4><p>功能描述：栈容器常用的对外接口</p><p>构造函数：</p><ul><li><code>queue&lt;T&gt; que;</code> //queue采用模板类实现，queue对象的默认构造形式</li><li><code>queue(const queue &amp;que);</code> //拷贝构造函数</li></ul><p>赋值操作：</p><ul><li><code>queue&amp; operator=(const queue &amp;que);</code> //重载等号操作符</li></ul><p>数据存取：</p><ul><li><code>push(elem);</code> //往队尾添加元素</li><li><code>pop();</code> //从队头移除第一个元素</li><li><code>back();</code> //返回最后一个元素</li><li><code>front();</code> //返回第一个元素</li></ul><p>大小操作：</p><ul><li><code>empty();</code> //判断堆栈是否为空</li><li><code>size();</code> //返回栈的大小</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><br><span class="hljs-built_in">string</span> m_Name;<br><span class="hljs-keyword">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//创建队列</span><br><span class="hljs-built_in">queue</span>&lt;Person&gt; q;<br><br><span class="hljs-comment">//准备数据</span><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;唐僧&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">1000</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-number">900</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;沙僧&quot;</span>, <span class="hljs-number">800</span>)</span></span>;<br><br><span class="hljs-comment">//向队列中添加元素  入队操作</span><br>q.push(p1);<br>q.push(p2);<br>q.push(p3);<br>q.push(p4);<br><br><span class="hljs-comment">//队列不提供迭代器，更不支持随机访问</span><br><span class="hljs-keyword">while</span> (!q.empty()) &#123;<br><span class="hljs-comment">//输出队头元素</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;队头元素-- 姓名： &quot;</span> &lt;&lt; q.front().m_Name <br>              &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span>&lt;&lt; q.front().m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;队尾元素-- 姓名： &quot;</span> &lt;&lt; q.back().m_Name  <br>              &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; q.back().m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-comment">//弹出队头元素</span><br>q.pop();<br>&#125;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;队列大小为：&quot;</span> &lt;&lt; q.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>入队 --- push</li><li>出队 --- pop</li><li>返回队头元素 --- front</li><li>返回队尾元素 --- back</li><li>判断队是否为空 --- empty</li><li>返回队列大小 --- size</li></ul><h3 id="list容器">3.7 list容器</h3><h4 id="list基本概念">3.7.1 list基本概念</h4><p><strong>功能：</strong>将数据进行链式存储</p><p><strong>链表</strong>（list）是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的</p><p>链表的组成：链表由一系列<strong>结点</strong>组成</p><p>结点的组成：一个是存储数据元素的<strong>数据域</strong>，另一个是存储下一个结点地址的<strong>指针域</strong></p><p>STL中的链表是一个双向循环链表</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/clip_image002-1547608564071.jpg" alt="说明: 2015-11-15_225145"><figcaption aria-hidden="true">说明: 2015-11-15_225145</figcaption></figure><p>由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于<strong>双向迭代器</strong></p><p>list的优点：</p><ul><li>采用动态存储分配，不会造成内存浪费和溢出</li><li>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素</li></ul><p>list的缺点：</p><ul><li>链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大</li></ul><p>List有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的。</p><p>总结：STL中<strong>List和vector是两个最常被使用的容器</strong>，各有优缺点</p><h4 id="list构造函数">3.7.2 list构造函数</h4><p><strong>功能描述：</strong></p><ul><li>创建list容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>list&lt;T&gt; lst;</code> //list采用采用模板类实现,对象的默认构造形式：</li><li><code>list(beg,end);</code> //构造函数将[beg, end)区间中的元素拷贝给本身。</li><li><code>list(n,elem);</code> //构造函数将n个elem拷贝给本身。</li><li><code>list(const list &amp;lst);</code> //拷贝构造函数。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; L)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L1;<br>L1.push_back(<span class="hljs-number">10</span>);<br>L1.push_back(<span class="hljs-number">20</span>);<br>L1.push_back(<span class="hljs-number">30</span>);<br>L1.push_back(<span class="hljs-number">40</span>);<br><br>printList(L1);<br><br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L2(L1.begin(),L1.end());<br>printList(L2);<br><br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L3(L2);<br>printList(L3);<br><br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L4(<span class="hljs-number">10</span>, <span class="hljs-number">1000</span>);<br>printList(L4);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：list构造方式同其他几个STL常用容器，熟练掌握即可</p><h4 id="list-赋值和交换">3.7.3 list 赋值和交换</h4><p><strong>功能描述：</strong></p><ul><li>给list容器进行赋值，以及交换list容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>assign(beg, end);</code> //将[beg, end)区间中的数据拷贝赋值给本身。</li><li><code>assign(n, elem);</code> //将n个elem拷贝赋值给本身。</li><li><code>list&amp; operator=(const list &amp;lst);</code> //重载等号操作符</li><li><code>swap(lst);</code> //将lst与本身的元素互换。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; L)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//赋值和交换</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L1;<br>L1.push_back(<span class="hljs-number">10</span>);<br>L1.push_back(<span class="hljs-number">20</span>);<br>L1.push_back(<span class="hljs-number">30</span>);<br>L1.push_back(<span class="hljs-number">40</span>);<br>printList(L1);<br><br><span class="hljs-comment">//赋值</span><br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L2;<br>L2 = L1;<br>printList(L2);<br><br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L3;<br>L3.assign(L2.begin(), L2.end());<br>printList(L3);<br><br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L4;<br>L4.assign(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<br>printList(L4);<br><br>&#125;<br><br><span class="hljs-comment">//交换</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L1;<br>L1.push_back(<span class="hljs-number">10</span>);<br>L1.push_back(<span class="hljs-number">20</span>);<br>L1.push_back(<span class="hljs-number">30</span>);<br>L1.push_back(<span class="hljs-number">40</span>);<br><br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L2;<br>L2.assign(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;交换前： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>printList(L1);<br>printList(L2);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>L1.swap(L2);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;交换后： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>printList(L1);<br>printList(L2);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><br>test02();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：list赋值和交换操作能够灵活运用即可</p><h4 id="list-大小操作">3.7.4 list 大小操作</h4><p><strong>功能描述：</strong></p><ul><li>对list容器的大小进行操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>size();</code> //返回容器中元素的个数</p></li><li><p><code>empty();</code> //判断容器是否为空</p></li><li><p><code>resize(num);</code> //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p><p>​ //如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>resize(num, elem);</code> //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p><p>//如果容器变短，则末尾超出容器长度的元素被删除。</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; L)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//大小操作</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L1;<br>L1.push_back(<span class="hljs-number">10</span>);<br>L1.push_back(<span class="hljs-number">20</span>);<br>L1.push_back(<span class="hljs-number">30</span>);<br>L1.push_back(<span class="hljs-number">40</span>);<br><br><span class="hljs-keyword">if</span> (L1.empty())<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;L1为空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;L1不为空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;L1的大小为： &quot;</span> &lt;&lt; L1.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//重新指定大小</span><br>L1.resize(<span class="hljs-number">10</span>);<br>printList(L1);<br><br>L1.resize(<span class="hljs-number">2</span>);<br>printList(L1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>判断是否为空 --- empty</li><li>返回元素个数 --- size</li><li>重新指定个数 --- resize</li></ul><h4 id="list-插入和删除">3.7.5 list 插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>对list容器进行数据的插入和删除</li></ul><p><strong>函数原型：</strong></p><ul><li>push_back(elem);//在容器尾部加入一个元素</li><li>pop_back();//删除容器中最后一个元素</li><li>push_front(elem);//在容器开头插入一个元素</li><li>pop_front();//从容器开头移除第一个元素</li><li>insert(pos,elem);//在pos位置插elem元素的拷贝，返回新数据的位置。</li><li>insert(pos,n,elem);//在pos位置插入n个elem数据，无返回值。</li><li>insert(pos,beg,end);//在pos位置插入[beg,end)区间的数据，无返回值。</li><li>clear();//移除容器的所有数据</li><li>erase(beg,end);//删除[beg,end)区间的数据，返回下一个数据的位置。</li><li>erase(pos);//删除pos位置的数据，返回下一个数据的位置。</li><li>remove(elem);//删除容器中所有与elem值匹配的元素。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; L)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//插入和删除</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt; L;<br><span class="hljs-comment">//尾插</span><br>L.push_back(<span class="hljs-number">10</span>);<br>L.push_back(<span class="hljs-number">20</span>);<br>L.push_back(<span class="hljs-number">30</span>);<br><span class="hljs-comment">//头插</span><br>L.push_front(<span class="hljs-number">100</span>);<br>L.push_front(<span class="hljs-number">200</span>);<br>L.push_front(<span class="hljs-number">300</span>);<br><br>printList(L);<span class="hljs-comment">//300 200 100 10 20 30</span><br><br><span class="hljs-comment">//尾删</span><br>L.pop_back();<br>printList(L);<span class="hljs-comment">//300 200 100 10 20</span><br><br><span class="hljs-comment">//头删</span><br>L.pop_front();<br>printList(L);<span class="hljs-comment">// 200 100 10 20</span><br><br><span class="hljs-comment">//插入</span><br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = L.begin();<br>L.insert(++it, <span class="hljs-number">1000</span>);<br>printList(L);<span class="hljs-comment">// 200 1000 100 1000 10 1000 20 1000</span><br><br><span class="hljs-comment">//删除</span><br>it = L.begin();<br>L.erase(++it);<br>printList(L);<span class="hljs-comment">// 200 100 10 20</span><br><br><br><span class="hljs-comment">//移除</span><br>L.push_back(<span class="hljs-number">10000</span>);<br>L.push_back(<span class="hljs-number">10000</span>);<br>L.push_back(<span class="hljs-number">10000</span>);<br>printList(L);<span class="hljs-comment">// 200 100 10 20 10000 10000 10000</span><br>L.remove(<span class="hljs-number">10000</span>);<br>printList(L);<span class="hljs-comment">// 200 100 10 20</span><br>    <br>    <span class="hljs-comment">//清空</span><br>L.clear();<br>printList(L);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>尾插 --- push_back</li><li>尾删 --- pop_back</li><li>头插 --- push_front</li><li>头删 --- pop_front</li><li>插入 --- insert</li><li>删除 --- erase</li><li>移除 --- remove</li><li>清空 --- clear</li></ul><h4 id="list-数据存取">3.7.6 list 数据存取</h4><p><strong>功能描述：</strong></p><ul><li>对list容器中数据进行存取</li></ul><p><strong>函数原型：</strong></p><ul><li><code>front();</code> //返回第一个元素。</li><li><code>back();</code> //返回最后一个元素。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><br><span class="hljs-comment">//数据存取</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L1;<br>L1.push_back(<span class="hljs-number">10</span>);<br>L1.push_back(<span class="hljs-number">20</span>);<br>L1.push_back(<span class="hljs-number">30</span>);<br>L1.push_back(<span class="hljs-number">40</span>);<br><br><br><span class="hljs-comment">//cout &lt;&lt; L1.at(0) &lt;&lt; endl;//错误 不支持at访问数据</span><br><span class="hljs-comment">//cout &lt;&lt; L1[0] &lt;&lt; endl; //错误  不支持[]方式访问数据</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;第一个元素为： &quot;</span> &lt;&lt; L1.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;最后一个元素为： &quot;</span> &lt;&lt; L1.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-comment">//list容器的迭代器是双向迭代器，不支持随机访问</span><br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = L1.begin();<br><span class="hljs-comment">//it = it + 1;//错误，不可以跳跃访问，即使是+1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>list容器中不可以通过[]或者at方式访问数据</li><li>返回第一个元素 --- front</li><li>返回最后一个元素 --- back</li></ul><h4 id="list-反转和排序">3.7.7 list 反转和排序</h4><p><strong>功能描述：</strong></p><ul><li>将容器中的元素反转，以及将容器中的数据进行排序</li></ul><p><strong>函数原型：</strong></p><ul><li><code>reverse();</code> //反转链表</li><li><code>sort();</code> //链表排序</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; L)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">myCompare</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val1 , <span class="hljs-keyword">int</span> val2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> val1 &gt; val2;<br>&#125;<br><br><span class="hljs-comment">//反转和排序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt; L;<br>L.push_back(<span class="hljs-number">90</span>);<br>L.push_back(<span class="hljs-number">30</span>);<br>L.push_back(<span class="hljs-number">20</span>);<br>L.push_back(<span class="hljs-number">70</span>);<br>printList(L);<br><br><span class="hljs-comment">//反转容器的元素</span><br>L.reverse();<br>printList(L);<br><br><span class="hljs-comment">//排序</span><br>L.sort(); <span class="hljs-comment">//默认的排序规则 从小到大</span><br>printList(L);<br><br>L.sort(myCompare); <span class="hljs-comment">//指定规则，从大到小</span><br>printList(L);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>反转 --- reverse</li><li>排序 --- sort （成员函数）</li></ul><h4 id="排序案例">3.7.8 排序案例</h4><p>案例描述：将Person自定义数据类型进行排序，Person中属性有姓名、年龄、身高</p><p>排序规则：按照年龄进行升序，如果年龄相同按照身高进行降序</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age , <span class="hljs-keyword">int</span> height) &#123;<br>m_Name = name;<br>m_Age = age;<br>m_Height = height;<br>&#125;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">string</span> m_Name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-keyword">int</span> m_Age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-keyword">int</span> m_Height;   <span class="hljs-comment">//身高</span><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ComparePerson</span><span class="hljs-params">(Person&amp; p1, Person&amp; p2)</span> </span>&#123;<br><br><span class="hljs-keyword">if</span> (p1.m_Age == p2.m_Age) &#123;<br><span class="hljs-keyword">return</span> p1.m_Height  &gt; p2.m_Height;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span>  p1.m_Age &lt; p2.m_Age;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">list</span>&lt;Person&gt; L;<br><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;刘备&quot;</span>, <span class="hljs-number">35</span> , <span class="hljs-number">175</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;曹操&quot;</span>, <span class="hljs-number">45</span> , <span class="hljs-number">180</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;孙权&quot;</span>, <span class="hljs-number">40</span> , <span class="hljs-number">170</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;赵云&quot;</span>, <span class="hljs-number">25</span> , <span class="hljs-number">190</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-number">35</span> , <span class="hljs-number">160</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p6</span><span class="hljs-params">(<span class="hljs-string">&quot;关羽&quot;</span>, <span class="hljs-number">35</span> , <span class="hljs-number">200</span>)</span></span>;<br><br>L.push_back(p1);<br>L.push_back(p2);<br>L.push_back(p3);<br>L.push_back(p4);<br>L.push_back(p5);<br>L.push_back(p6);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">list</span>&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; it-&gt;m_Age <br>              &lt;&lt; <span class="hljs-string">&quot; 身高： &quot;</span> &lt;&lt; it-&gt;m_Height &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;---------------------------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>L.sort(ComparePerson); <span class="hljs-comment">//排序</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">list</span>&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; it-&gt;m_Age <br>              &lt;&lt; <span class="hljs-string">&quot; 身高： &quot;</span> &lt;&lt; it-&gt;m_Height &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li><p>对于自定义数据类型，必须要指定排序规则，否则编译器不知道如何进行排序</p></li><li><p>高级排序只是在排序规则上再进行一次逻辑规则制定，并不复杂</p></li></ul><h3 id="set-multiset-容器">3.8 set/ multiset 容器</h3><h4 id="set基本概念">3.8.1 set基本概念</h4><p><strong>简介：</strong></p><ul><li>所有元素都会在插入时自动被排序</li></ul><p><strong>本质：</strong></p><ul><li>set/multiset属于<strong>关联式容器</strong>，底层结构是用<strong>二叉树</strong>实现。</li></ul><p><strong>set和multiset区别</strong>：</p><ul><li>set不允许容器中有重复的元素</li><li>multiset允许容器中有重复的元素</li></ul><h4 id="set构造和赋值">3.8.2 set构造和赋值</h4><p>功能描述：创建set容器以及赋值</p><p>构造：</p><ul><li><code>set&lt;T&gt; st;</code> //默认构造函数：</li><li><code>set(const set &amp;st);</code> //拷贝构造函数</li></ul><p>赋值：</p><ul><li><code>set&amp; operator=(const set &amp;st);</code> //重载等号操作符</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printSet</span><span class="hljs-params">(<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp; s)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = s.begin(); it != s.end(); it++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//构造和赋值</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s1;<br><br>s1.insert(<span class="hljs-number">10</span>);<br>s1.insert(<span class="hljs-number">30</span>);<br>s1.insert(<span class="hljs-number">20</span>);<br>s1.insert(<span class="hljs-number">40</span>);<br>printSet(s1);<br><br><span class="hljs-comment">//拷贝构造</span><br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;s2(s1);<br>printSet(s2);<br><br><span class="hljs-comment">//赋值</span><br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;s3;<br>s3 = s2;<br>printSet(s3);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>set容器插入数据时用insert</li><li>set容器插入数据的数据会自动排序</li></ul><h4 id="set大小和交换">3.8.3 set大小和交换</h4><p><strong>功能描述：</strong></p><ul><li>统计set容器大小以及交换set容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>size();</code> //返回容器中元素的数目</li><li><code>empty();</code> //判断容器是否为空</li><li><code>swap(st);</code> //交换两个集合容器</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printSet</span><span class="hljs-params">(<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp; s)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = s.begin(); it != s.end(); it++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//大小</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s1;<br><br>s1.insert(<span class="hljs-number">10</span>);<br>s1.insert(<span class="hljs-number">30</span>);<br>s1.insert(<span class="hljs-number">20</span>);<br>s1.insert(<span class="hljs-number">40</span>);<br><br><span class="hljs-keyword">if</span> (s1.empty())<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;s1为空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;s1不为空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;s1的大小为： &quot;</span> &lt;&lt; s1.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//交换</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s1;<br><br>s1.insert(<span class="hljs-number">10</span>);<br>s1.insert(<span class="hljs-number">30</span>);<br>s1.insert(<span class="hljs-number">20</span>);<br>s1.insert(<span class="hljs-number">40</span>);<br><br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s2;<br><br>s2.insert(<span class="hljs-number">100</span>);<br>s2.insert(<span class="hljs-number">300</span>);<br>s2.insert(<span class="hljs-number">200</span>);<br>s2.insert(<span class="hljs-number">400</span>);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;交换前&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>printSet(s1);<br>printSet(s2);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;交换后&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>s1.swap(s2);<br>printSet(s1);<br>printSet(s2);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><br>test02();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>统计大小 --- size</li><li>判断是否为空 --- empty</li><li>交换容器 --- swap</li></ul><h4 id="set插入和删除">3.8.4 set插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>set容器进行插入数据和删除数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>insert(elem);</code> //在容器中插入元素。</li><li><code>clear();</code> //清除所有元素</li><li><code>erase(pos);</code> //删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><code>erase(beg, end);</code> //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li><li><code>erase(elem);</code> //删除容器中值为elem的元素。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printSet</span><span class="hljs-params">(<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp; s)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = s.begin(); it != s.end(); it++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//插入和删除</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s1;<br><span class="hljs-comment">//插入</span><br>s1.insert(<span class="hljs-number">10</span>);<br>s1.insert(<span class="hljs-number">30</span>);<br>s1.insert(<span class="hljs-number">20</span>);<br>s1.insert(<span class="hljs-number">40</span>);<br>printSet(s1);<br><br><span class="hljs-comment">//删除</span><br>s1.erase(s1.begin());<br>printSet(s1);<br><br>s1.erase(<span class="hljs-number">30</span>);<br>printSet(s1);<br><br><span class="hljs-comment">//清空</span><br><span class="hljs-comment">//s1.erase(s1.begin(), s1.end());</span><br>s1.clear();<br>printSet(s1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>插入 --- insert</li><li>删除 --- erase</li><li>清空 --- clear</li></ul><h4 id="set查找和统计">3.8.5 set查找和统计</h4><p><strong>功能描述：</strong></p><ul><li>对set容器进行查找数据以及统计数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>find(key);</code> //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li><li><code>count(key);</code> //统计key的元素个数</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><br><span class="hljs-comment">//查找和统计</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s1;<br><span class="hljs-comment">//插入</span><br>s1.insert(<span class="hljs-number">10</span>);<br>s1.insert(<span class="hljs-number">30</span>);<br>s1.insert(<span class="hljs-number">20</span>);<br>s1.insert(<span class="hljs-number">40</span>);<br><br><span class="hljs-comment">//查找</span><br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator pos = s1.find(<span class="hljs-number">30</span>);<br><br><span class="hljs-keyword">if</span> (pos != s1.end())<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到了元素 ： &quot;</span> &lt;&lt; *pos &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;未找到元素&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//统计</span><br><span class="hljs-keyword">int</span> num = s1.count(<span class="hljs-number">30</span>);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>查找 --- find （返回的是迭代器）</li><li>统计 --- count （对于set，结果为0或者1）</li></ul><h4 id="set和multiset区别">3.8.6 set和multiset区别</h4><p><strong>学习目标：</strong></p><ul><li>掌握set和multiset的区别</li></ul><p><strong>区别：</strong></p><ul><li>set不可以插入重复数据，而multiset可以</li><li>set插入数据的同时会返回插入结果，表示插入是否成功</li><li>multiset不会检测数据，因此可以插入重复数据</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><br><span class="hljs-comment">//set和multiset区别</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br><span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator, <span class="hljs-keyword">bool</span>&gt;  ret = s.insert(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">if</span> (ret.second) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;第一次插入成功!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;第一次插入失败!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br>ret = s.insert(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">if</span> (ret.second) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;第二次插入成功!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;第二次插入失败!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>    <br><span class="hljs-comment">//multiset</span><br><span class="hljs-built_in">multiset</span>&lt;<span class="hljs-keyword">int</span>&gt; ms;<br>ms.insert(<span class="hljs-number">10</span>);<br>ms.insert(<span class="hljs-number">10</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">multiset</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = ms.begin(); it != ms.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>如果不允许插入重复数据可以利用set</li><li>如果需要插入重复数据利用multiset</li></ul><h4 id="pair对组创建">3.8.7 pair对组创建</h4><p><strong>功能描述：</strong></p><ul><li>成对出现的数据，利用对组可以返回两个数据</li></ul><p><strong>两种创建方式：</strong></p><ul><li><code>pair&lt;type, type&gt; p ( value1, value2 );</code></li><li><code>pair&lt;type, type&gt; p = make_pair( value1, value2 );</code></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//对组创建</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>pair&lt;string, int&gt; p(string(&quot;Tom&quot;), 20);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt;  p.first &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; p.second &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; p2 = <span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;Jerry&quot;</span>, <span class="hljs-number">10</span>);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; p2.first &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; p2.second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><p>两种方式都可以创建对组，记住一种即可</p><h4 id="set容器排序">3.8.8 set容器排序</h4><p>学习目标：</p><ul><li>set容器默认排序规则为从小到大，掌握如何改变排序规则</li></ul><p>主要技术点：</p><ul><li>利用仿函数，可以改变排序规则</li></ul><p><strong>示例一</strong> set存放内置数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCompare</span> </span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">int</span> v2)</span> </span>&#123;<br><span class="hljs-keyword">return</span> v1 &gt; v2;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;    <br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s1;<br>s1.insert(<span class="hljs-number">10</span>);<br>s1.insert(<span class="hljs-number">40</span>);<br>s1.insert(<span class="hljs-number">20</span>);<br>s1.insert(<span class="hljs-number">30</span>);<br>s1.insert(<span class="hljs-number">50</span>);<br><br><span class="hljs-comment">//默认从小到大</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = s1.begin(); it != s1.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-comment">//指定排序规则</span><br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>,MyCompare&gt; s2;<br>s2.insert(<span class="hljs-number">10</span>);<br>s2.insert(<span class="hljs-number">40</span>);<br>s2.insert(<span class="hljs-number">20</span>);<br>s2.insert(<span class="hljs-number">30</span>);<br>s2.insert(<span class="hljs-number">50</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>, MyCompare&gt;::iterator it = s2.begin(); it != s2.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：利用仿函数可以指定set容器的排序规则</p><p><strong>示例二</strong> set存放自定义数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><br><span class="hljs-built_in">string</span> m_Name;<br><span class="hljs-keyword">int</span> m_Age;<br><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">comparePerson</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Person&amp; p1, <span class="hljs-keyword">const</span> Person &amp;p2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//按照年龄进行排序  降序</span><br><span class="hljs-keyword">return</span> p1.m_Age &gt; p2.m_Age;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">set</span>&lt;Person, comparePerson&gt; s;<br><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;刘备&quot;</span>, <span class="hljs-number">23</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;关羽&quot;</span>, <span class="hljs-number">27</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-number">25</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;赵云&quot;</span>, <span class="hljs-number">21</span>)</span></span>;<br><br>s.insert(p1);<br>s.insert(p2);<br>s.insert(p3);<br>s.insert(p4);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">set</span>&lt;Person, comparePerson&gt;::iterator it = s.begin(); it != s.end(); it++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><p>对于自定义数据类型，set必须指定排序规则才可以插入数据</p><h3 id="map-multimap容器">3.9 map/ multimap容器</h3><h4 id="map基本概念">3.9.1 map基本概念</h4><p><strong>简介：</strong></p><ul><li>map中所有元素都是pair</li><li>pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值）</li><li>所有元素都会根据元素的键值自动排序</li></ul><p><strong>本质：</strong></p><ul><li>map/multimap属于<strong>关联式容器</strong>，底层结构是用二叉树实现。</li></ul><p><strong>优点：</strong></p><ul><li>可以根据key值快速找到value值</li></ul><p>map和multimap<strong>区别</strong>：</p><ul><li>map不允许容器中有重复key值元素</li><li>multimap允许容器中有重复key值元素</li></ul><h4 id="map构造和赋值">3.9.2 map构造和赋值</h4><p><strong>功能描述：</strong></p><ul><li>对map容器进行构造和赋值操作</li></ul><p><strong>函数原型：</strong></p><p><strong>构造：</strong></p><ul><li><code>map&lt;T1, T2&gt; mp;</code> //map默认构造函数:</li><li><code>map(const map &amp;mp);</code> //拷贝构造函数</li></ul><p><strong>赋值：</strong></p><ul><li><code>map&amp; operator=(const map &amp;mp);</code> //重载等号操作符</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printMap</span><span class="hljs-params">(<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;&amp;m)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;::iterator it = m.begin(); it != m.end(); it++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">&quot; value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;m; <span class="hljs-comment">//默认构造</span><br>m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));<br>m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br>printMap(m);<br><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;m2(m); <span class="hljs-comment">//拷贝构造</span><br>printMap(m2);<br><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;m3;<br>m3 = m2; <span class="hljs-comment">//赋值</span><br>printMap(m3);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：map中所有元素都是成对出现，插入数据时候要使用对组</p><h4 id="map大小和交换">3.9.3 map大小和交换</h4><p><strong>功能描述：</strong></p><ul><li>统计map容器大小以及交换map容器</li></ul><p>函数原型：</p><ul><li><code>size();</code> //返回容器中元素的数目</li><li><code>empty();</code> //判断容器是否为空</li><li><code>swap(st);</code> //交换两个集合容器</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printMap</span><span class="hljs-params">(<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;&amp;m)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;::iterator it = m.begin(); it != m.end(); it++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">&quot; value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;m;<br>m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));<br>m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br><br><span class="hljs-keyword">if</span> (m.empty())<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;m为空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;m不为空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;m的大小为： &quot;</span> &lt;&lt; m.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//交换</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;m;<br>m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));<br>m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;m2;<br>m2.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">4</span>, <span class="hljs-number">100</span>));<br>m2.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">5</span>, <span class="hljs-number">200</span>));<br>m2.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">6</span>, <span class="hljs-number">300</span>));<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;交换前&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>printMap(m);<br>printMap(m2);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;交换后&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>m.swap(m2);<br>printMap(m);<br>printMap(m2);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>test02();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>统计大小 --- size</li><li>判断是否为空 --- empty</li><li>交换容器 --- swap</li></ul><h4 id="map插入和删除">3.9.4 map插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>map容器进行插入数据和删除数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>insert(elem);</code> //在容器中插入元素。</li><li><code>clear();</code> //清除所有元素</li><li><code>erase(pos);</code> //删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><code>erase(beg, end);</code> //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li><li><code>erase(key);</code> //删除容器中值为key的元素。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printMap</span><span class="hljs-params">(<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;&amp;m)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;::iterator it = m.begin(); it != m.end(); it++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">&quot; value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//插入</span><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; m;<br><span class="hljs-comment">//第一种插入方式</span><br>m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br><span class="hljs-comment">//第二种插入方式</span><br>m.insert(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));<br><span class="hljs-comment">//第三种插入方式</span><br>m.insert(<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;::value_type(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br><span class="hljs-comment">//第四种插入方式</span><br>m[<span class="hljs-number">4</span>] = <span class="hljs-number">40</span>; <br>printMap(m);<br><br><span class="hljs-comment">//删除</span><br>m.erase(m.begin());<br>printMap(m);<br><br>m.erase(<span class="hljs-number">3</span>);<br>printMap(m);<br><br><span class="hljs-comment">//清空</span><br>m.erase(m.begin(),m.end());<br>m.clear();<br>printMap(m);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li><p>map插入方式很多，记住其一即可</p></li><li><p>插入 --- insert</p></li><li><p>删除 --- erase</p></li><li><p>清空 --- clear</p></li></ul><h4 id="map查找和统计">3.9.5 map查找和统计</h4><p><strong>功能描述：</strong></p><ul><li>对map容器进行查找数据以及统计数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>find(key);</code> //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li><li><code>count(key);</code> //统计key的元素个数</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><br><span class="hljs-comment">//查找和统计</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;m; <br>m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));<br>m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br><br><span class="hljs-comment">//查找</span><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;::iterator pos = m.find(<span class="hljs-number">3</span>);<br><br><span class="hljs-keyword">if</span> (pos != m.end())<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到了元素 key = &quot;</span> &lt;&lt; (*pos).first &lt;&lt; <span class="hljs-string">&quot; value = &quot;</span> &lt;&lt; (*pos).second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;未找到元素&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//统计</span><br><span class="hljs-keyword">int</span> num = m.count(<span class="hljs-number">3</span>);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>查找 --- find （返回的是迭代器）</li><li>统计 --- count （对于map，结果为0或者1）</li></ul><h4 id="map容器排序">3.9.6 map容器排序</h4><p><strong>学习目标：</strong></p><ul><li>map容器默认排序规则为 按照key值进行 从小到大排序，掌握如何改变排序规则</li></ul><p><strong>主要技术点:</strong></p><ul><li>利用仿函数，可以改变排序规则</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCompare</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">int</span> v2)</span> </span>&#123;<br><span class="hljs-keyword">return</span> v1 &gt; v2;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//默认从小到大排序</span><br><span class="hljs-comment">//利用仿函数实现从大到小排序</span><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>, MyCompare&gt; m;<br><br>m.insert(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>m.insert(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));<br>m.insert(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br>m.insert(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">4</span>, <span class="hljs-number">40</span>));<br>m.insert(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">5</span>, <span class="hljs-number">50</span>));<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>, MyCompare&gt;::iterator it = m.begin(); it != m.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;key:&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">&quot; value:&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>利用仿函数可以指定map容器的排序规则</li><li>对于自定义数据类型，map必须要指定排序规则,同set容器</li></ul><h3 id="案例-员工分组">3.10 案例-员工分组</h3><h4 id="案例描述-1">3.10.1 案例描述</h4><ul><li>公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作</li><li>员工信息有: 姓名 工资组成；部门分为：策划、美术、研发</li><li>随机给10名员工分配部门和工资</li><li>通过multimap进行信息的插入 key(部门编号) value(员工)</li><li>分部门显示员工信息</li></ul><h4 id="实现步骤-1">3.10.2 实现步骤</h4><ol type="1"><li>创建10名员工，放到vector中</li><li>遍历vector容器，取出每个员工，进行随机分组</li><li>分组后，将员工部门编号作为key，具体员工作为value，放入到multimap容器中</li><li>分部门显示员工信息</li></ol><p><strong>案例代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">- 公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作</span><br><span class="hljs-comment">- 员工信息有: 姓名  工资组成；部门分为：策划、美术、研发</span><br><span class="hljs-comment">- 随机给10名员工分配部门和工资</span><br><span class="hljs-comment">- 通过multimap进行信息的插入  key(部门编号) value(员工)</span><br><span class="hljs-comment">- 分部门显示员工信息</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CEHUA  0</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MEISHU 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> YANFA  2</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Worker</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">string</span> m_Name;<br><span class="hljs-keyword">int</span> m_Salary;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createWorker</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;Worker&gt;&amp;v)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">string</span> nameSeed = <span class="hljs-string">&quot;ABCDEFGHIJ&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>Worker worker;<br>worker.m_Name = <span class="hljs-string">&quot;员工&quot;</span>;<br>worker.m_Name += nameSeed[i];<br><br>worker.m_Salary = rand() % <span class="hljs-number">10000</span> + <span class="hljs-number">10000</span>; <span class="hljs-comment">// 10000 ~ 19999</span><br><span class="hljs-comment">//将员工放入到容器中</span><br>v.push_back(worker);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//员工分组</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setGroup</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;Worker&gt;&amp;v,<span class="hljs-built_in">multimap</span>&lt;<span class="hljs-keyword">int</span>,Worker&gt;&amp;m)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;Worker&gt;::iterator it = v.begin(); it != v.end(); it++)<br>&#123;<br><span class="hljs-comment">//产生随机部门编号</span><br><span class="hljs-keyword">int</span> deptId = rand() % <span class="hljs-number">3</span>; <span class="hljs-comment">// 0 1 2 </span><br><br><span class="hljs-comment">//将员工插入到分组中</span><br><span class="hljs-comment">//key部门编号，value具体员工</span><br>m.insert(<span class="hljs-built_in">make_pair</span>(deptId, *it));<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showWorkerByGourp</span><span class="hljs-params">(<span class="hljs-built_in">multimap</span>&lt;<span class="hljs-keyword">int</span>,Worker&gt;&amp;m)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 0  A  B  C   1  D  E   2  F G ...</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;策划部门：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">multimap</span>&lt;<span class="hljs-keyword">int</span>,Worker&gt;::iterator pos = m.find(CEHUA);<br><span class="hljs-keyword">int</span> count = m.count(CEHUA); <span class="hljs-comment">// 统计具体人数</span><br><span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (; pos != m.end() &amp;&amp; index &lt; count; pos++ , index++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="hljs-string">&quot; 工资： &quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;----------------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;美术部门： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>pos2 = m.find(MEISHU);<br>count2 = m.count(MEISHU); <span class="hljs-comment">// 统计具体人数</span><br>index2 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (; pos2 != m.end() &amp;&amp; index2 &lt; count2; pos2++, index2++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; pos2-&gt;second.m_Name &lt;&lt; <span class="hljs-string">&quot; 工资： &quot;</span> &lt;&lt; pos2-&gt;second.m_Salary &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;----------------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;研发部门： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>pos3 = m.find(YANFA);<br>count3 = m.count(YANFA); <span class="hljs-comment">// 统计具体人数</span><br>index3 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (; pos3 != m.end() &amp;&amp; index3 &lt; count3; pos3++, index3++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; pos3-&gt;second.m_Name &lt;&lt; <span class="hljs-string">&quot; 工资： &quot;</span> &lt;&lt; pos3-&gt;second.m_Salary &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>srand((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)time(<span class="hljs-literal">NULL</span>));<br><br><span class="hljs-comment">//1、创建员工</span><br><span class="hljs-built_in">vector</span>&lt;Worker&gt;vWorker;<br>createWorker(vWorker);<br><br><span class="hljs-comment">//2、员工分组</span><br><span class="hljs-built_in">multimap</span>&lt;<span class="hljs-keyword">int</span>, Worker&gt;mWorker;<br>setGroup(vWorker, mWorker);<br><br><br><span class="hljs-comment">//3、分组显示员工</span><br>showWorkerByGourp(mWorker);<br><br><span class="hljs-comment">////测试</span><br><span class="hljs-comment">//for (vector&lt;Worker&gt;::iterator it = vWorker.begin(); it != vWorker.end(); it++)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; it-&gt;m_Salary &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/image-20210330222420427.png" alt="image-20210330222420427"><figcaption aria-hidden="true">image-20210330222420427</figcaption></figure><p>总结：</p><ul><li>当数据以键值对形式存在，可以考虑用map 或 multimap</li></ul><h2 id="stl--函数对象">4 STL- 函数对象</h2><h3 id="函数对象">4.1 函数对象</h3><h4 id="函数对象概念">4.1.1 函数对象概念</h4><p><strong>概念：</strong></p><ul><li>重载<strong>函数调用操作符</strong>的类，其对象常称为<strong>函数对象</strong></li><li><strong>函数对象</strong>使用重载的()时，行为类似函数调用，也叫<strong>仿函数</strong></li></ul><p><strong>本质：</strong></p><p>函数对象(仿函数)是一个<strong>类</strong>，不是一个函数</p><h4 id="函数对象使用">4.1.2 函数对象使用</h4><p><strong>特点：</strong></p><ul><li>函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值</li><li>函数对象超出普通函数的概念，函数对象可以有自己的状态</li><li>函数对象可以作为参数传递</li></ul><p><strong>示例:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//1、函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAdd</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span> :<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1,<span class="hljs-keyword">int</span> v2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> v1 + v2;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>MyAdd myAdd;<br><span class="hljs-built_in">cout</span> &lt;&lt; myAdd(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//2、函数对象可以有自己的状态</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>MyPrint()<br>&#123;<br>count = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-built_in">string</span> test)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; test &lt;&lt; <span class="hljs-built_in">endl</span>;<br>count++; <span class="hljs-comment">//统计使用次数</span><br>&#125;<br><br><span class="hljs-keyword">int</span> count; <span class="hljs-comment">//内部自己的状态</span><br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>MyPrint myPrint;<br>myPrint(<span class="hljs-string">&quot;hello world&quot;</span>);<br>myPrint(<span class="hljs-string">&quot;hello world&quot;</span>);<br>myPrint(<span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;myPrint调用次数为： &quot;</span> &lt;&lt; myPrint.count &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//3、函数对象可以作为参数传递</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doPrint</span><span class="hljs-params">(MyPrint &amp;mp , <span class="hljs-built_in">string</span> test)</span></span><br><span class="hljs-function"></span>&#123;<br>mp(test);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>MyPrint myPrint;<br>doPrint(myPrint, <span class="hljs-string">&quot;Hello C++&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><span class="hljs-comment">//test02();</span><br>test03();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>仿函数写法非常灵活，可以作为参数进行传递。</li></ul><h3 id="谓词">4.2 谓词</h3><h4 id="谓词概念">4.2.1 谓词概念</h4><p><strong>概念：</strong></p><ul><li>返回bool类型的仿函数称为<strong>谓词</strong></li><li>如果operator()接受一个参数，那么叫做一元谓词</li><li>如果operator()接受两个参数，那么叫做二元谓词</li></ul><h4 id="一元谓词">4.2.2 一元谓词</h4><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-comment">//1.一元谓词</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GreaterFive</span>&#123;</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br><span class="hljs-keyword">return</span> val &gt; <span class="hljs-number">5</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>v.push_back(i);<br>&#125;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive());<br><span class="hljs-keyword">if</span> (it == v.end()) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;没找到!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到:&quot;</span> &lt;&lt; *it &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：参数只有一个的谓词，称为一元谓词</p><h4 id="二元谓词">4.2.3 二元谓词</h4><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-comment">//二元谓词</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCompare</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1, <span class="hljs-keyword">int</span> num2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> num1 &gt; num2;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>v.push_back(<span class="hljs-number">10</span>);<br>v.push_back(<span class="hljs-number">40</span>);<br>v.push_back(<span class="hljs-number">20</span>);<br>v.push_back(<span class="hljs-number">30</span>);<br>v.push_back(<span class="hljs-number">50</span>);<br><br><span class="hljs-comment">//默认从小到大</span><br>sort(v.begin(), v.end());<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;----------------------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-comment">//使用函数对象改变算法策略，排序从大到小</span><br>sort(v.begin(), v.end(), MyCompare());<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：参数只有两个的谓词，称为二元谓词</p><h3 id="内建函数对象">4.3 内建函数对象</h3><h4 id="内建函数对象意义">4.3.1 内建函数对象意义</h4><p><strong>概念：</strong></p><ul><li>STL内建了一些函数对象</li></ul><p><strong>分类:</strong></p><ul><li><p>算术仿函数</p></li><li><p>关系仿函数</p></li><li><p>逻辑仿函数</p></li></ul><p><strong>用法：</strong></p><ul><li>这些仿函数所产生的对象，用法和一般函数完全相同</li><li>使用内建函数对象，需要引入头文件 <code>#include&lt;functional&gt;</code></li></ul><h4 id="算术仿函数">4.3.2 算术仿函数</h4><p><strong>功能描述：</strong></p><ul><li>实现四则运算</li><li>其中negate是一元运算，其他都是二元运算</li></ul><p><strong>仿函数原型：</strong></p><ul><li><code>template&lt;class T&gt; T plus&lt;T&gt;</code> //加法仿函数</li><li><code>template&lt;class T&gt; T minus&lt;T&gt;</code> //减法仿函数</li><li><code>template&lt;class T&gt; T multiplies&lt;T&gt;</code> //乘法仿函数</li><li><code>template&lt;class T&gt; T divides&lt;T&gt;</code> //除法仿函数</li><li><code>template&lt;class T&gt; T modulus&lt;T&gt;</code> //取模仿函数</li><li><code>template&lt;class T&gt; T negate&lt;T&gt;</code> //取反仿函数</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-comment">//negate</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>negate&lt;<span class="hljs-keyword">int</span>&gt; n;<br><span class="hljs-built_in">cout</span> &lt;&lt; n(<span class="hljs-number">50</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//plus</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>plus&lt;<span class="hljs-keyword">int</span>&gt; p;<br><span class="hljs-built_in">cout</span> &lt;&lt; p(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br>test02();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：使用内建函数对象时，需要引入头文件 <code>#include &lt;functional&gt;</code></p><h4 id="关系仿函数">4.3.3 关系仿函数</h4><p><strong>功能描述：</strong></p><ul><li>实现关系对比</li></ul><p><strong>仿函数原型：</strong></p><ul><li><code>template&lt;class T&gt; bool equal_to&lt;T&gt;</code> //等于</li><li><code>template&lt;class T&gt; bool not_equal_to&lt;T&gt;</code> //不等于</li><li><code>template&lt;class T&gt; bool greater&lt;T&gt;</code> //大于</li><li><code>template&lt;class T&gt; bool greater_equal&lt;T&gt;</code> //大于等于</li><li><code>template&lt;class T&gt; bool less&lt;T&gt;</code> //小于</li><li><code>template&lt;class T&gt; bool less_equal&lt;T&gt;</code> //小于等于</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCompare</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1,<span class="hljs-keyword">int</span> v2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> v1 &gt; v2;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br><br>v.push_back(<span class="hljs-number">10</span>);<br>v.push_back(<span class="hljs-number">30</span>);<br>v.push_back(<span class="hljs-number">50</span>);<br>v.push_back(<span class="hljs-number">40</span>);<br>v.push_back(<span class="hljs-number">20</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-comment">//自己实现仿函数</span><br><span class="hljs-comment">//sort(v.begin(), v.end(), MyCompare());</span><br><span class="hljs-comment">//STL内建仿函数  大于仿函数</span><br>sort(v.begin(), v.end(), greater&lt;<span class="hljs-keyword">int</span>&gt;());<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：关系仿函数中最常用的就是greater&lt;&gt;大于</p><h4 id="逻辑仿函数">4.3.4 逻辑仿函数</h4><p><strong>功能描述：</strong></p><ul><li>实现逻辑运算</li></ul><p><strong>函数原型：</strong></p><ul><li><code>template&lt;class T&gt; bool logical_and&lt;T&gt;</code> //逻辑与</li><li><code>template&lt;class T&gt; bool logical_or&lt;T&gt;</code> //逻辑或</li><li><code>template&lt;class T&gt; bool logical_not&lt;T&gt;</code> //逻辑非</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt; v;<br>v.push_back(<span class="hljs-literal">true</span>);<br>v.push_back(<span class="hljs-literal">false</span>);<br>v.push_back(<span class="hljs-literal">true</span>);<br>v.push_back(<span class="hljs-literal">false</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt;::iterator it = v.begin();it!= v.end();it++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-comment">//逻辑非  将v容器搬运到v2中，并执行逻辑非运算</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt; v2;<br>v2.resize(v.size());<br>transform(v.begin(), v.end(),  v2.begin(), logical_not&lt;<span class="hljs-keyword">bool</span>&gt;());<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt;::iterator it = v2.begin(); it != v2.end(); it++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：逻辑仿函数实际应用较少，了解即可</p><h2 id="stl--常用算法">5 STL- 常用算法</h2><p><strong>概述</strong>:</p><ul><li><p>算法主要是由头文件<code>&lt;algorithm&gt;</code> <code>&lt;functional&gt;</code> <code>&lt;numeric&gt;</code>组成。</p></li><li><p><code>&lt;algorithm&gt;</code>是所有STL头文件中最大的一个，范围涉及到比较、 交换、查找、遍历操作、复制、修改等等</p></li><li><p><code>&lt;numeric&gt;</code>体积很小，只包括几个在序列上面进行简单数学运算的模板函数</p></li><li><p><code>&lt;functional&gt;</code>定义了一些模板类,用以声明函数对象。</p></li></ul><h3 id="常用遍历算法">5.1 常用遍历算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的遍历算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>for_each</code> //遍历容器</li><li><code>transform</code> //搬运容器到另一个容器中</li></ul><h4 id="for_each">5.1.1 for_each</h4><p><strong>功能描述：</strong></p><ul><li>实现遍历容器</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>for_each(iterator beg, iterator end, _func);</code></p><p>// 遍历算法 遍历容器元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// _func 函数或者函数对象</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-comment">//普通函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print01</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-comment">//函数对象</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">print02</span> </span><br><span class="hljs-class">&#123;</span><br> <span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//for_each算法基本用法</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) <br>&#123;<br>v.push_back(i);<br>&#125;<br><br><span class="hljs-comment">//遍历算法</span><br>for_each(v.begin(), v.end(), print01);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>for_each(v.begin(), v.end(), print02());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>for_each在实际开发中是最常用遍历算法，需要熟练掌握</p><h4 id="transform">5.1.2 transform</h4><p><strong>功能描述：</strong></p><ul><li>搬运容器到另一个容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><code>transform(iterator beg1, iterator end1, iterator beg2, _func);</code></li></ul><p>//beg1 源容器开始迭代器</p><p>//end1 源容器结束迭代器</p><p>//beg2 目标容器开始迭代器</p><p>//_func 函数或者函数对象</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-comment">//常用遍历算法  搬运 transform</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TransForm</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> val;<br>&#125;<br><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>v.push_back(i);<br>&#125;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;vTarget; <span class="hljs-comment">//目标容器</span><br><br>vTarget.resize(v.size()); <span class="hljs-comment">// 目标容器需要提前开辟空间</span><br><br>transform(v.begin(), v.end(), vTarget.begin(), TransForm());<br><br>for_each(vTarget.begin(), vTarget.end(), MyPrint());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong> 搬运的目标容器必须要提前开辟空间，否则无法正常搬运</p><h3 id="常用查找算法">5.2 常用查找算法</h3><p>学习目标：</p><ul><li>掌握常用的查找算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>find</code> //查找元素</li><li><code>find_if</code> //按条件查找元素</li><li><code>adjacent_find</code> //查找相邻重复元素</li><li><code>binary_search</code> //二分查找法</li><li><code>count</code> //统计元素个数</li><li><code>count_if</code> //按条件统计元素个数</li></ul><h4 id="find">5.2.1 find</h4><p><strong>功能描述：</strong></p><ul><li>查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end()</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>find(iterator beg, iterator end, value);</code></p><p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 查找的元素</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v.push_back(i + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-comment">//查找容器中是否有 5 这个元素</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = find(v.begin(), v.end(), <span class="hljs-number">5</span>);<br><span class="hljs-keyword">if</span> (it == v.end()) <br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;没有找到!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到:&quot;</span> &lt;&lt; *it &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age) <br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><span class="hljs-comment">//重载==</span><br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-keyword">const</span> Person&amp; p) <br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="hljs-keyword">this</span>-&gt;m_Age == p.m_Age) <br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">string</span> m_Name;<br><span class="hljs-keyword">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">vector</span>&lt;Person&gt; v;<br><br><span class="hljs-comment">//创建数据</span><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-number">20</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;ddd&quot;</span>, <span class="hljs-number">40</span>)</span></span>;<br><br>v.push_back(p1);<br>v.push_back(p2);<br>v.push_back(p3);<br>v.push_back(p4);<br><br><span class="hljs-built_in">vector</span>&lt;Person&gt;::iterator it = find(v.begin(), v.end(), p2);<br><span class="hljs-keyword">if</span> (it == v.end()) <br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;没有找到!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到姓名:&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄: &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结： 利用find可以在容器中找指定的元素，返回值是<strong>迭代器</strong></p><h4 id="find_if">5.2.2 find_if</h4><p><strong>功能描述：</strong></p><ul><li>按条件查找元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>find_if(iterator beg, iterator end, _Pred);</code></p><p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// _Pred 函数或者谓词（返回bool类型的仿函数）</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//内置数据类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GreaterFive</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> val &gt; <span class="hljs-number">5</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v.push_back(i + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive());<br><span class="hljs-keyword">if</span> (it == v.end()) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;没有找到!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到大于5的数字:&quot;</span> &lt;&lt; *it &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//自定义数据类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">string</span> m_Name;<br><span class="hljs-keyword">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Greater20</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(Person &amp;p)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> p.m_Age &gt; <span class="hljs-number">20</span>;<br>&#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">vector</span>&lt;Person&gt; v;<br><br><span class="hljs-comment">//创建数据</span><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-number">20</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;ddd&quot;</span>, <span class="hljs-number">40</span>)</span></span>;<br><br>v.push_back(p1);<br>v.push_back(p2);<br>v.push_back(p3);<br>v.push_back(p4);<br><br><span class="hljs-built_in">vector</span>&lt;Person&gt;::iterator it = find_if(v.begin(), v.end(), Greater20());<br><span class="hljs-keyword">if</span> (it == v.end())<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;没有找到!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到姓名:&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄: &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><br>test02();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：find_if按条件查找使查找更加灵活，提供的仿函数可以改变不同的策略</p><h4 id="adjacent_find">5.2.3 adjacent_find</h4><p><strong>功能描述：</strong></p><ul><li>查找相邻重复元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>adjacent_find(iterator beg, iterator end);</code></p><p>// 查找相邻重复元素,返回相邻元素的第一个位置的迭代器</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>v.push_back(<span class="hljs-number">1</span>);<br>v.push_back(<span class="hljs-number">2</span>);<br>v.push_back(<span class="hljs-number">5</span>);<br>v.push_back(<span class="hljs-number">2</span>);<br>v.push_back(<span class="hljs-number">4</span>);<br>v.push_back(<span class="hljs-number">4</span>);<br>v.push_back(<span class="hljs-number">3</span>);<br><br><span class="hljs-comment">//查找相邻重复元素</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = adjacent_find(v.begin(), v.end());<br><span class="hljs-keyword">if</span> (it == v.end()) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找不到!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到相邻重复元素为:&quot;</span> &lt;&lt; *it &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：面试题中如果出现查找相邻重复元素，记得用STL中的adjacent_find算法</p><h4 id="binary_search">5.2.4 binary_search</h4><p><strong>功能描述：</strong></p><ul><li>查找指定元素是否存在</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>bool binary_search(iterator beg, iterator end, value);</code></p><p>// 查找指定的元素，查到 返回true 否则false</p><p>// 注意: 在<strong>无序序列中不可用</strong></p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 查找的元素</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>v.push_back(i);<br>&#125;<br><span class="hljs-comment">//二分查找</span><br><span class="hljs-keyword">bool</span> ret = binary_search(v.begin(), v.end(),<span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span> (ret)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到了&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;未找到&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>二分查找法查找效率很高，值得注意的是查找的容器中元素必须的有序序列</p><h4 id="count">5.2.5 count</h4><p><strong>功能描述：</strong></p><ul><li>统计元素个数</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>count(iterator beg, iterator end, value);</code></p><p>// 统计元素出现次数</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 统计的元素</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-comment">//内置数据类型</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>v.push_back(<span class="hljs-number">1</span>);<br>v.push_back(<span class="hljs-number">2</span>);<br>v.push_back(<span class="hljs-number">4</span>);<br>v.push_back(<span class="hljs-number">5</span>);<br>v.push_back(<span class="hljs-number">3</span>);<br>v.push_back(<span class="hljs-number">4</span>);<br>v.push_back(<span class="hljs-number">4</span>);<br><br><span class="hljs-keyword">int</span> num = count(v.begin(), v.end(), <span class="hljs-number">4</span>);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;4的个数为： &quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//自定义数据类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-keyword">const</span> Person &amp; p)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Age == p.m_Age)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">string</span> m_Name;<br><span class="hljs-keyword">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;Person&gt; v;<br><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;刘备&quot;</span>, <span class="hljs-number">35</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;关羽&quot;</span>, <span class="hljs-number">35</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-number">35</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;赵云&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;曹操&quot;</span>, <span class="hljs-number">25</span>)</span></span>;<br><br>v.push_back(p1);<br>v.push_back(p2);<br>v.push_back(p3);<br>v.push_back(p4);<br>v.push_back(p5);<br>    <br>    <span class="hljs-function">Person <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-string">&quot;诸葛亮&quot;</span>,<span class="hljs-number">35</span>)</span></span>;<br><br><span class="hljs-keyword">int</span> num = count(v.begin(), v.end(), p);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><br>test02();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong> 统计自定义数据类型时候，需要配合重载 <code>operator==</code></p><h4 id="count_if">5.2.6 count_if</h4><p><strong>功能描述：</strong></p><ul><li>按条件统计元素个数</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>count_if(iterator beg, iterator end, _Pred);</code></p><p>// 按条件统计元素出现次数</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// _Pred 谓词</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Greater4</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> val &gt;= <span class="hljs-number">4</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//内置数据类型</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>v.push_back(<span class="hljs-number">1</span>);<br>v.push_back(<span class="hljs-number">2</span>);<br>v.push_back(<span class="hljs-number">4</span>);<br>v.push_back(<span class="hljs-number">5</span>);<br>v.push_back(<span class="hljs-number">3</span>);<br>v.push_back(<span class="hljs-number">4</span>);<br>v.push_back(<span class="hljs-number">4</span>);<br><br><span class="hljs-keyword">int</span> num = count_if(v.begin(), v.end(), Greater4());<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;大于4的个数为： &quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//自定义数据类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><br><span class="hljs-built_in">string</span> m_Name;<br><span class="hljs-keyword">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AgeLess35</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Person &amp;p)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> p.m_Age &lt; <span class="hljs-number">35</span>;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;Person&gt; v;<br><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;刘备&quot;</span>, <span class="hljs-number">35</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;关羽&quot;</span>, <span class="hljs-number">35</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-number">35</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;赵云&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;曹操&quot;</span>, <span class="hljs-number">25</span>)</span></span>;<br><br>v.push_back(p1);<br>v.push_back(p2);<br>v.push_back(p3);<br>v.push_back(p4);<br>v.push_back(p5);<br><br><span class="hljs-keyword">int</span> num = count_if(v.begin(), v.end(), AgeLess35());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;小于35岁的个数：&quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><br>test02();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>按值统计用count，按条件统计用count_if</p><h3 id="常用排序算法">5.3 常用排序算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的排序算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>sort</code> //对容器内元素进行排序</li><li><code>random_shuffle</code> //洗牌 指定范围内的元素随机调整次序</li><li><code>merge</code> // 容器元素合并，并存储到另一容器中</li><li><code>reverse</code> // 反转指定范围的元素</li></ul><h4 id="sort">5.3.1 sort</h4><p><strong>功能描述：</strong></p><ul><li>对容器内元素进行排序</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>sort(iterator beg, iterator end, _Pred);</code></p><p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// _Pred 谓词</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">myPrint</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>v.push_back(<span class="hljs-number">10</span>);<br>v.push_back(<span class="hljs-number">30</span>);<br>v.push_back(<span class="hljs-number">50</span>);<br>v.push_back(<span class="hljs-number">20</span>);<br>v.push_back(<span class="hljs-number">40</span>);<br><br><span class="hljs-comment">//sort默认从小到大排序</span><br>sort(v.begin(), v.end());<br>for_each(v.begin(), v.end(), myPrint);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-comment">//从大到小排序</span><br>sort(v.begin(), v.end(), greater&lt;<span class="hljs-keyword">int</span>&gt;());<br>for_each(v.begin(), v.end(), myPrint);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>sort属于开发中最常用的算法之一，需熟练掌握</p><h4 id="random_shuffle">5.3.2 random_shuffle</h4><p><strong>功能描述：</strong></p><ul><li>洗牌 指定范围内的元素随机调整次序</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>random_shuffle(iterator beg, iterator end);</code></p><p>// 指定范围内的元素随机调整次序</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>srand((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)time(<span class="hljs-literal">NULL</span>));<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">10</span>;i++)<br>&#123;<br>v.push_back(i);<br>&#125;<br>for_each(v.begin(), v.end(), myPrint());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-comment">//打乱顺序</span><br>random_shuffle(v.begin(), v.end());<br>for_each(v.begin(), v.end(), myPrint());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>random_shuffle洗牌算法比较实用，使用时记得加随机数种子</p><h4 id="merge">5.3.3 merge</h4><p><strong>功能描述：</strong></p><ul><li>两个容器元素合并，并存储到另一容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></p><p>// 容器元素合并，并存储到另一容器中</p><p>// 注意: 两个容器必须是<strong>有序的</strong></p><p>// beg1 容器1开始迭代器 // end1 容器1结束迭代器 // beg2 容器2开始迭代器 // end2 容器2结束迭代器 // dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span> ; i++) <br>    &#123;<br>v1.push_back(i);<br>v2.push_back(i + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; vtarget;<br><span class="hljs-comment">//目标容器需要提前开辟空间</span><br>vtarget.resize(v1.size() + v2.size());<br><span class="hljs-comment">//合并  需要两个有序序列</span><br>merge(v1.begin(), v1.end(), v2.begin(), v2.end(), vtarget.begin());<br>for_each(vtarget.begin(), vtarget.end(), myPrint());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>merge合并的两个容器必须的有序序列</p><h4 id="reverse">5.3.4 reverse</h4><p><strong>功能描述：</strong></p><ul><li>将容器内元素进行反转</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>reverse(iterator beg, iterator end);</code></p><p>// 反转指定范围的元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>v.push_back(<span class="hljs-number">10</span>);<br>v.push_back(<span class="hljs-number">30</span>);<br>v.push_back(<span class="hljs-number">50</span>);<br>v.push_back(<span class="hljs-number">20</span>);<br>v.push_back(<span class="hljs-number">40</span>);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;反转前： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>for_each(v.begin(), v.end(), myPrint());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;反转后： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>reverse(v.begin(), v.end());<br>for_each(v.begin(), v.end(), myPrint());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>reverse反转区间内元素，面试题可能涉及到</p><h3 id="常用拷贝和替换算法">5.4 常用拷贝和替换算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的拷贝和替换算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>copy</code> // 容器内指定范围的元素拷贝到另一容器中</li><li><code>replace</code> // 将容器内指定范围的旧元素修改为新元素</li><li><code>replace_if</code> // 容器内指定范围满足条件的元素替换为新元素</li><li><code>swap</code> // 互换两个容器的元素</li></ul><h4 id="copy">5.4.1 copy</h4><p><strong>功能描述：</strong></p><ul><li>容器内指定范围的元素拷贝到另一容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>copy(iterator beg, iterator end, iterator dest);</code></p><p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// dest 目标起始迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v1.push_back(i + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v2;<br>v2.resize(v1.size());<br>copy(v1.begin(), v1.end(), v2.begin());<br><br>for_each(v2.begin(), v2.end(), myPrint());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>利用copy算法在拷贝时，目标容器记得提前开辟空间</p><h4 id="replace">5.4.2 replace</h4><p><strong>功能描述：</strong></p><ul><li>将容器内指定范围的旧元素修改为新元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>replace(iterator beg, iterator end, oldvalue, newvalue);</code></p><p>// 将区间内旧元素 替换成 新元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// oldvalue 旧元素</p><p>// newvalue 新元素</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>v.push_back(<span class="hljs-number">20</span>);<br>v.push_back(<span class="hljs-number">30</span>);<br>v.push_back(<span class="hljs-number">20</span>);<br>v.push_back(<span class="hljs-number">40</span>);<br>v.push_back(<span class="hljs-number">50</span>);<br>v.push_back(<span class="hljs-number">10</span>);<br>v.push_back(<span class="hljs-number">20</span>);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;替换前：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>for_each(v.begin(), v.end(), myPrint());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-comment">//将容器中的20 替换成 2000</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;替换后：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>replace(v.begin(), v.end(), <span class="hljs-number">20</span>,<span class="hljs-number">2000</span>);<br>for_each(v.begin(), v.end(), myPrint());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>replace会替换区间内满足条件的元素</p><h4 id="replace_if">5.4.3 replace_if</h4><p><strong>功能描述:</strong></p><ul><li>将区间内满足条件的元素，替换成指定元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>replace_if(iterator beg, iterator end, _pred, newvalue);</code></p><p>// 按条件替换元素，满足条件的替换成指定元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// _pred 谓词</p><p>// newvalue 替换的新元素</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReplaceGreater30</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> val &gt;= <span class="hljs-number">30</span>;<br>&#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>v.push_back(<span class="hljs-number">20</span>);<br>v.push_back(<span class="hljs-number">30</span>);<br>v.push_back(<span class="hljs-number">20</span>);<br>v.push_back(<span class="hljs-number">40</span>);<br>v.push_back(<span class="hljs-number">50</span>);<br>v.push_back(<span class="hljs-number">10</span>);<br>v.push_back(<span class="hljs-number">20</span>);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;替换前：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>for_each(v.begin(), v.end(), myPrint());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-comment">//将容器中大于等于的30 替换成 3000</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;替换后：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>replace_if(v.begin(), v.end(), ReplaceGreater30(), <span class="hljs-number">3000</span>);<br>for_each(v.begin(), v.end(), myPrint());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>replace_if按条件查找，可以利用仿函数灵活筛选满足的条件</p><h4 id="swap">5.4.4 swap</h4><p><strong>功能描述：</strong></p><ul><li>互换两个容器的元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>swap(container c1, container c2);</code></p><p>// 互换两个容器的元素</p><p>// c1容器1</p><p>// c2容器2</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v1.push_back(i);<br>v2.push_back(i+<span class="hljs-number">100</span>);<br>&#125;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;交换前： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>for_each(v1.begin(), v1.end(), myPrint());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>for_each(v2.begin(), v2.end(), myPrint());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;交换后： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>swap(v1, v2);<br>for_each(v1.begin(), v1.end(), myPrint());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>for_each(v2.begin(), v2.end(), myPrint());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>swap交换容器时，注意交换的容器要同种类型</p><h3 id="常用算术生成算法">5.5 常用算术生成算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的算术生成算法</li></ul><p><strong>注意：</strong></p><ul><li>算术生成算法属于小型算法，使用时包含的头文件为 <code>#include &lt;numeric&gt;</code></li></ul><p><strong>算法简介：</strong></p><ul><li><p><code>accumulate</code> // 计算容器元素累计总和</p></li><li><p><code>fill</code> // 向容器中添加元素</p></li></ul><h4 id="accumulate">5.5.1 accumulate</h4><p><strong>功能描述：</strong></p><ul><li>计算区间内 容器元素累计总和</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>accumulate(iterator beg, iterator end, value);</code></p><p>// 计算容器元素累计总和</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 起始值</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>v.push_back(i);<br>&#125;<br><br><span class="hljs-keyword">int</span> total = accumulate(v.begin(), v.end(), <span class="hljs-number">0</span>);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;total = &quot;</span> &lt;&lt; total &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>accumulate使用时头文件注意是 numeric，这个算法很实用</p><h4 id="fill">5.5.2 fill</h4><p><strong>功能描述：</strong></p><ul><li>向容器中填充指定的元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>fill(iterator beg, iterator end, value);</code></p><p>// 向容器中填充元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 填充的值</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>v.resize(<span class="hljs-number">10</span>);<br><span class="hljs-comment">//填充</span><br>fill(v.begin(), v.end(), <span class="hljs-number">100</span>);<br><br>for_each(v.begin(), v.end(), myPrint());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>利用fill可以将容器区间内元素填充为 指定的值</p><h3 id="常用集合算法">5.6 常用集合算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的集合算法</li></ul><p><strong>算法简介：</strong></p><ul><li><p><code>set_intersection</code> // 求两个容器的交集</p></li><li><p><code>set_union</code> // 求两个容器的并集</p></li><li><p><code>set_difference</code> // 求两个容器的差集</p></li></ul><h4 id="set_intersection">5.6.1 set_intersection</h4><p><strong>功能描述：</strong></p><ul><li>求两个容器的交集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></p><p>// 求两个集合的交集</p><p>// <strong>注意:两个集合必须是有序序列</strong></p><p>// beg1 容器1开始迭代器 // end1 容器1结束迭代器 // beg2 容器2开始迭代器 // end2 容器2结束迭代器 // dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>v1.push_back(i);<br>v2.push_back(i+<span class="hljs-number">5</span>);<br>&#125;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; vTarget;<br><span class="hljs-comment">//取两个里面较小的值给目标容器开辟空间</span><br>vTarget.resize(min(v1.size(), v2.size()));<br><br><span class="hljs-comment">//返回目标容器的最后一个元素的迭代器地址</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator itEnd = <br>        set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());<br><br>for_each(vTarget.begin(), itEnd, myPrint());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>求交集的两个集合必须的有序序列</li><li>目标容器开辟空间需要从<strong>两个容器中取小值</strong></li><li>set_intersection返回值既是交集中最后一个元素的位置</li></ul><h4 id="set_union">5.6.2 set_union</h4><p><strong>功能描述：</strong></p><ul><li>求两个集合的并集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></p><p>// 求两个集合的并集</p><p>// <strong>注意:两个集合必须是有序序列</strong></p><p>// beg1 容器1开始迭代器 // end1 容器1结束迭代器 // beg2 容器2开始迭代器 // end2 容器2结束迭代器 // dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v1.push_back(i);<br>v2.push_back(i+<span class="hljs-number">5</span>);<br>&#125;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; vTarget;<br><span class="hljs-comment">//取两个容器的和给目标容器开辟空间</span><br>vTarget.resize(v1.size() + v2.size());<br><br><span class="hljs-comment">//返回目标容器的最后一个元素的迭代器地址</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator itEnd = <br>        set_union(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());<br><br>for_each(vTarget.begin(), itEnd, myPrint());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>求并集的两个集合必须的有序序列</li><li>目标容器开辟空间需要<strong>两个容器相加</strong></li><li>set_union返回值既是并集中最后一个元素的位置</li></ul><h4 id="set_difference">5.6.3 set_difference</h4><p><strong>功能描述：</strong></p><ul><li>求两个集合的差集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></p><p>// 求两个集合的差集</p><p>// <strong>注意:两个集合必须是有序序列</strong></p><p>// beg1 容器1开始迭代器 // end1 容器1结束迭代器 // beg2 容器2开始迭代器 // end2 容器2结束迭代器 // dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v1.push_back(i);<br>v2.push_back(i+<span class="hljs-number">5</span>);<br>&#125;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; vTarget;<br><span class="hljs-comment">//取两个里面较大的值给目标容器开辟空间</span><br>vTarget.resize( max(v1.size() , v2.size()));<br><br><span class="hljs-comment">//返回目标容器的最后一个元素的迭代器地址</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v1与v2的差集为： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator itEnd = <br>        set_difference(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());<br>for_each(vTarget.begin(), itEnd, myPrint());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v2与v1的差集为： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>itEnd = set_difference(v2.begin(), v2.end(), v1.begin(), v1.end(), vTarget.begin());<br>for_each(vTarget.begin(), itEnd, myPrint());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>test01();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>求差集的两个集合必须的有序序列</li><li>目标容器开辟空间需要从<strong>两个容器取较大值</strong></li><li>set_difference返回值既是差集中最后一个元素的位置</li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;本阶段主要针对C++&lt;code&gt;泛型编程&lt;/code&gt;和&lt;code&gt;STL技术&lt;/code&gt;做详细讲解，探讨C++更深层的使用&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="C++" scheme="https://1iuke.github.io/categories/C/"/>
    
    
    <category term="STL" scheme="https://1iuke.github.io/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>Day3职工管理系统</title>
    <link href="https://1iuke.github.io/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://1iuke.github.io/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-03-29T03:16:42.000Z</published>
    <updated>2021-04-01T05:55:26.524Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本教程主要利用C++来实现一个基于多态的职工管理系统</p><span id="more"></span><h2 id="管理系统需求">1、管理系统需求</h2><p>职工管理系统可以用来管理公司内所有员工的信息</p><p>公司中职工分为三类：普通员工、经理、老板，显示信息时，需要显示职工编号、职工姓名、职工岗位、以及职责</p><p>普通员工职责：完成经理交给的任务</p><p>经理职责：完成老板交给的任务，并下发任务给员工</p><p>老板职责：管理公司所有事务</p><p>管理系统中需要实现的功能如下：</p><ul><li><p>退出管理程序：退出当前管理系统</p></li><li><p>增加职工信息：实现批量添加职工功能，将信息录入到文件中，职工信息为：职工编号、姓名、部门编号</p></li><li><p>显示职工信息：显示公司内部所有职工的信息</p></li><li><p>删除离职职工：按照编号删除指定的职工</p></li><li><p>修改职工信息：按照编号修改职工个人信息</p></li><li><p>查找职工信息：按照职工的编号或者职工的姓名进行查找相关的人员信息</p></li><li><p>按照编号排序：按照职工编号，进行排序，排序规则由用户指定</p></li><li><p>清空所有文档：清空文件中记录的所有职工信息 （清空前需要再次确认，防止误删）</p></li></ul><p>系统界面效果图如下：</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546511409198.png" alt="1546511409198"><figcaption aria-hidden="true">1546511409198</figcaption></figure><p>需根据用户不同的选择，完成不同的功能！</p><h2 id="创建项目">2、创建项目</h2><p>创建项目步骤如下：</p><ul><li>创建新项目</li><li>添加文件</li></ul><h3 id="创建项目-1">2.1 创建项目</h3><p>打开vs2017后，点击创建新项目，创建新的C++项目</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544151201465.png" alt="1544151201465"><figcaption aria-hidden="true">1544151201465</figcaption></figure><p>填写项目名称以及项目路径，点击确定</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546349209805.png" alt="1546349209805"><figcaption aria-hidden="true">1546349209805</figcaption></figure><h3 id="添加文件">2.2 添加文件</h3><p>右键源文件，进行添加文件操作</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546349360960.png" alt="1546349360960"><figcaption aria-hidden="true">1546349360960</figcaption></figure><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546349421496.png" alt="1546349421496"><figcaption aria-hidden="true">1546349421496</figcaption></figure><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546349488752.png" alt="1546349488752"><figcaption aria-hidden="true">1546349488752</figcaption></figure><p>至此，项目已创建完毕</p><h2 id="创建管理类">3、创建管理类</h2><p>​ 管理类负责的内容如下：</p><ul><li>与用户的沟通菜单界面</li><li>对职工增删改查的操作</li><li>与文件的读写交互</li></ul><h3 id="创建文件">3.1创建文件</h3><p>在头文件和源文件的文件夹下分别创建workerManager.h 和 workerManager.cpp文件</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546349904944.png" alt="1546349904944"><figcaption aria-hidden="true">1546349904944</figcaption></figure><h3 id="头文件实现">3.2 头文件实现</h3><p>在workerManager.h中设计管理类</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WorkerManager</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-comment">//构造函数</span><br>WorkerManager();<br><br><span class="hljs-comment">//析构函数</span><br>~WorkerManager();<br><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="源文件实现">3.3 源文件实现</h3><p>在workerManager.cpp中将构造和析构函数空实现补全</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;workerManager.h&quot;</span></span><br><br>WorkerManager::WorkerManager()<br>&#123;<br>&#125;<br><br>WorkerManager::~WorkerManager()<br>&#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>至此职工管理类以创建完毕</p><h2 id="菜单功能">4、菜单功能</h2><p>功能描述：与用户的沟通界面</p><h3 id="添加成员函数">4.1 添加成员函数</h3><p>在管理类workerManager.h中添加成员函数 <code>void Show_Menu();</code></p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546351543942.png" alt="1546351543942"><figcaption aria-hidden="true">1546351543942</figcaption></figure><h3 id="菜单功能实现">4.2 菜单功能实现</h3><p>在管理类workerManager.cpp中实现 Show_Menu()函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::Show_Menu</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;********************************************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*********  欢迎使用职工管理系统！ **********&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*************  0.退出管理程序  *************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*************  1.增加职工信息  *************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*************  2.显示职工信息  *************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*************  3.删除离职职工  *************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*************  4.修改职工信息  *************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*************  5.查找职工信息  *************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*************  6.按照编号排序  *************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*************  7.清空所有文档  *************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;********************************************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试菜单功能">4.3 测试菜单功能</h3><p>在职工管理系统.cpp中测试菜单功能</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;workerManager.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>WorkerManager wm;<br><br>wm.Show_Menu();<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果如图：</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546352771191.png" alt="1546352771191"><figcaption aria-hidden="true">1546352771191</figcaption></figure><h2 id="退出功能">5、退出功能</h2><h3 id="提供功能接口">5.1 提供功能接口</h3><p>在main函数中提供分支选择，提供每个功能接口</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>WorkerManager wm;<br><span class="hljs-keyword">int</span> choice = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-comment">//展示菜单</span><br>wm.Show_Menu();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入您的选择:&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; choice;<br><br><span class="hljs-keyword">switch</span> (choice)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-comment">//退出系统</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">//添加职工</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">//显示职工</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-comment">//删除职工</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-comment">//修改职工</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: <span class="hljs-comment">//查找职工</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: <span class="hljs-comment">//排序职工</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>: <span class="hljs-comment">//清空文件</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现退出功能">5.2 实现退出功能</h3><p>在workerManager.h中提供退出系统的成员函数 <code>void exitSystem();</code></p><p>在workerManager.cpp中提供具体的功能实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::exitSystem</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;欢迎下次使用&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试功能">5.3测试功能</h3><p>在main函数分支 0 选项中，调用退出程序的接口</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546353199424.png" alt="1546353199424"><figcaption aria-hidden="true">1546353199424</figcaption></figure><p>运行测试效果如图：</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546353155490.png" alt="1546353155490"><figcaption aria-hidden="true">1546353155490</figcaption></figure><h2 id="创建职工类">6、创建职工类</h2><h3 id="创建职工抽象类">6.1 创建职工抽象类</h3><p>职工的分类为：普通员工、经理、老板</p><p>将三种职工抽象到一个类（worker）中,利用多态管理不同职工种类</p><p>职工的属性为：职工编号、职工姓名、职工所在部门编号</p><p>职工的行为为：岗位职责信息描述，获取岗位名称</p><p>头文件文件夹下 创建文件worker.h 文件并且添加如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">//职工抽象基类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Worker</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-comment">//显示个人信息</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showInfo</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-comment">//获取岗位名称</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-built_in">string</span> <span class="hljs-title">getDeptName</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">int</span> m_Id; <span class="hljs-comment">//职工编号</span><br><span class="hljs-built_in">string</span> m_Name; <span class="hljs-comment">//职工姓名</span><br><span class="hljs-keyword">int</span> m_DeptId; <span class="hljs-comment">//职工所在部门名称编号</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="创建普通员工类">6.2 创建普通员工类</h3><p>普通员工类<strong>继承</strong>职工抽象类，并重写父类中纯虚函数</p><p>在头文件和源文件的文件夹下分别创建employee.h 和 employee.cpp文件</p><p>employee.h中代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;worker.h&quot;</span></span><br><br><span class="hljs-comment">//员工类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> :</span><span class="hljs-keyword">public</span> Worker<br>&#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-comment">//构造函数</span><br>Employee(<span class="hljs-keyword">int</span> id, <span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> dId);<br><br><span class="hljs-comment">//显示个人信息</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showInfo</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//获取职工岗位名称</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-built_in">string</span> <span class="hljs-title">getDeptName</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>employee.cpp中代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;employee.h&quot;</span></span><br><br>Employee::Employee(<span class="hljs-keyword">int</span> id, <span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> dId)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Id = id;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_DeptId = dId;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Employee::showInfo</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;职工编号： &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Id<br>&lt;&lt; <span class="hljs-string">&quot; \t职工姓名： &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Name<br>&lt;&lt; <span class="hljs-string">&quot; \t岗位：&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;getDeptName()<br>&lt;&lt; <span class="hljs-string">&quot; \t岗位职责：完成经理交给的任务&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">Employee::getDeptName</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;员工&quot;</span>);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="创建经理类">6.3 创建经理类</h3><p>经理类<strong>继承</strong>职工抽象类，并重写父类中纯虚函数，和普通员工类似</p><p>在头文件和源文件的文件夹下分别创建manager.h 和 manager.cpp文件</p><p>manager.h中代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;worker.h&quot;</span></span><br><br><span class="hljs-comment">//经理类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Manager</span> :</span><span class="hljs-keyword">public</span> Worker<br>&#123;<br><span class="hljs-keyword">public</span>:<br><br>Manager(<span class="hljs-keyword">int</span> id, <span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> dId);<br><br><span class="hljs-comment">//显示个人信息</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showInfo</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//获取职工岗位名称</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-built_in">string</span> <span class="hljs-title">getDeptName</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>manager.cpp中代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;manager.h&quot;</span></span><br><br>Manager::Manager(<span class="hljs-keyword">int</span> id, <span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> dId)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Id = id;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_DeptId = dId;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Manager::showInfo</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;职工编号： &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Id<br>&lt;&lt; <span class="hljs-string">&quot; \t职工姓名： &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Name<br>&lt;&lt; <span class="hljs-string">&quot; \t岗位：&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;getDeptName()<br>&lt;&lt; <span class="hljs-string">&quot; \t岗位职责：完成老板交给的任务,并下发任务给员工&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">Manager::getDeptName</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;经理&quot;</span>);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="创建老板类">6.4 创建老板类</h3><p>老板类<strong>继承</strong>职工抽象类，并重写父类中纯虚函数，和普通员工类似</p><p>在头文件和源文件的文件夹下分别创建boss.h 和 boss.cpp文件</p><p>boss.h中代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;worker.h&quot;</span></span><br><br><span class="hljs-comment">//老板类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Boss</span> :</span><span class="hljs-keyword">public</span> Worker<br>&#123;<br><span class="hljs-keyword">public</span>:<br><br>Boss(<span class="hljs-keyword">int</span> id, <span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> dId);<br><br><span class="hljs-comment">//显示个人信息</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showInfo</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//获取职工岗位名称</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-built_in">string</span> <span class="hljs-title">getDeptName</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>boss.cpp中代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;boss.h&quot;</span></span><br><br>Boss::Boss(<span class="hljs-keyword">int</span> id, <span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> dId)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Id = id;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_DeptId = dId;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Boss::showInfo</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;职工编号： &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Id<br>&lt;&lt; <span class="hljs-string">&quot; \t职工姓名： &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Name<br>&lt;&lt; <span class="hljs-string">&quot; \t岗位：&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;getDeptName()<br>&lt;&lt; <span class="hljs-string">&quot; \t岗位职责：管理公司所有事务&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">Boss::getDeptName</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;总裁&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="测试多态">6.5 测试多态</h3><p>在职工管理系统.cpp中添加测试函数，并且运行能够产生多态</p><p>测试代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;worker.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;employee.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;manager.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;boss.h&quot;</span></span><br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Worker * worker = <span class="hljs-literal">NULL</span>;<br>worker = <span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">1</span>);<br>worker-&gt;showInfo();<br><span class="hljs-keyword">delete</span> worker;<br><br>worker = <span class="hljs-keyword">new</span> Manager(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">2</span>);<br>worker-&gt;showInfo();<br><span class="hljs-keyword">delete</span> worker;<br><br>worker = <span class="hljs-keyword">new</span> Boss(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">3</span>);<br>worker-&gt;showInfo();<br><span class="hljs-keyword">delete</span> worker;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行效果如图：</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546398236081.png" alt="1546398236081"><figcaption aria-hidden="true">1546398236081</figcaption></figure><p>测试成功后，测试代码可以注释保留，或者选择删除</p><h2 id="添加职工">7、添加职工</h2><p>功能描述：批量添加职工，并且保存到文件中</p><h3 id="功能分析">7.1 功能分析</h3><p>分析：</p><p>用户在批量创建时，可能会创建不同种类的职工</p><p>如果想将所有不同种类的员工都放入到一个数组中，可以将所有员工的指针维护到一个数组里</p><p>如果想在程序中维护这个不定长度的数组，可以将数组创建到堆区，并利用Worker **的指针维护</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546399491099.png" alt="1546399491099"><figcaption aria-hidden="true">1546399491099</figcaption></figure><h3 id="功能实现">7.2 功能实现</h3><p>在WokerManager.h头文件中添加成员属性 代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//记录文件中的人数个数</span><br><span class="hljs-keyword">int</span> m_EmpNum;<br><br><span class="hljs-comment">//员工数组的指针</span><br>Worker ** m_EmpArray;<br></code></pre></td></tr></table></figure><p>在WorkerManager构造函数中初始化属性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">WorkerManager::WorkerManager()<br>&#123;<br><span class="hljs-comment">//初始化人数</span><br><span class="hljs-keyword">this</span>-&gt;m_EmpNum = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//初始化数组指针</span><br><span class="hljs-keyword">this</span>-&gt;m_EmpArray = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在workerManager.h中添加成员函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//增加职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add_Emp</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>workerManager.cpp中实现该函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//增加职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::Add_Emp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入增加职工数量： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-keyword">int</span> addNum = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; addNum;<br><br><span class="hljs-keyword">if</span> (addNum &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">//计算新空间大小</span><br><span class="hljs-keyword">int</span> newSize = <span class="hljs-keyword">this</span>-&gt;m_EmpNum + addNum;<br><br><span class="hljs-comment">//开辟新空间</span><br>Worker ** newSpace = <span class="hljs-keyword">new</span> Worker*[newSize];<br><br><span class="hljs-comment">//将原空间下内容存放到新空间下</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_EmpArray != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;m_EmpNum; i++)<br>&#123;<br>newSpace[i] = <span class="hljs-keyword">this</span>-&gt;m_EmpArray[i];<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//输入新数据</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; addNum; i++)<br>&#123;<br><span class="hljs-keyword">int</span> id;<br><span class="hljs-built_in">string</span> name;<br><span class="hljs-keyword">int</span> dSelect;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入第 &quot;</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; 个新职工编号：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; id;<br><br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入第 &quot;</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; 个新职工姓名：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; name;<br><br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请选择该职工的岗位：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;1、普通职工&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;2、经理&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;3、老板&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; dSelect;<br><br><br>Worker * worker = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">switch</span> (dSelect)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">//普通员工</span><br>worker = <span class="hljs-keyword">new</span> Employee(id, name, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">//经理</span><br>worker = <span class="hljs-keyword">new</span> Manager(id, name, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:  <span class="hljs-comment">//老板</span><br>worker = <span class="hljs-keyword">new</span> Boss(id, name, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><br>newSpace[<span class="hljs-keyword">this</span>-&gt;m_EmpNum + i] = worker;<br>&#125;<br><br><span class="hljs-comment">//释放原有空间</span><br><span class="hljs-keyword">delete</span>[] <span class="hljs-keyword">this</span>-&gt;m_EmpArray;<br><br><span class="hljs-comment">//更改新空间的指向</span><br><span class="hljs-keyword">this</span>-&gt;m_EmpArray = newSpace;<br><br><span class="hljs-comment">//更新新的个数</span><br><span class="hljs-keyword">this</span>-&gt;m_EmpNum = newSize;<br><br><span class="hljs-comment">//提示信息</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;成功添加&quot;</span> &lt;&lt; addNum &lt;&lt; <span class="hljs-string">&quot;名新职工！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;输入有误&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在WorkerManager.cpp的析构函数中，释放堆区数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">WorkerManager::~WorkerManager()<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_EmpArray != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span>[] <span class="hljs-keyword">this</span>-&gt;m_EmpArray;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="测试添加">7.3 测试添加</h3><p>在main函数分支 1 选项中，调用添加职工接口</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546401705277.png" alt="1546401705277"><figcaption aria-hidden="true">1546401705277</figcaption></figure><p>效果如图：</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546401763461.png" alt="1546401763461"><figcaption aria-hidden="true">1546401763461</figcaption></figure><p>至此，添加职工到程序中功能实现完毕</p><h2 id="文件交互---写文件">8、文件交互 - 写文件</h2><p>功能描述：对文件进行读写</p><p>​ 在上一个添加功能中，我们只是将所有的数据添加到了内存中，一旦程序结束就无法保存了</p><p>​ 因此文件管理类中需要一个与文件进行交互的功能，对于文件进行读写操作</p><h3 id="设定文件路径">8.1 设定文件路径</h3><p>首先我们将文件路径，在workerManager.h中添加宏常量,并且包含头文件 fstream</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  FILENAME <span class="hljs-meta-string">&quot;empFile.txt&quot;</span></span><br></code></pre></td></tr></table></figure><h3 id="成员函数声明">8.2 成员函数声明</h3><p>在workerManager.h中类里添加成员函数 <code>void save()</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//保存文件</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h3 id="保存文件功能实现">8.3 保存文件功能实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::save</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ofstream ofs;<br>ofs.open(FILENAME, ios::out);<br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;m_EmpNum; i++)<br>&#123;<br>ofs &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Id &lt;&lt; <span class="hljs-string">&quot; &quot;</span> <br>&lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> <br>&lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_DeptId &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br>ofs.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="保存文件功能测试">8.4 保存文件功能测试</h3><p>在添加职工功能中添加成功后添加保存文件函数</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546432469465.png" alt="1546432469465"><figcaption aria-hidden="true">1546432469465</figcaption></figure><p>再次运行代码，添加职工</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546401763461.png" alt="1546401763461"><figcaption aria-hidden="true">1546401763461</figcaption></figure><p>同级目录下多出文件，并且保存了添加的信息</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546432343078.png" alt="1546432343078"><figcaption aria-hidden="true">1546432343078</figcaption></figure><h2 id="文件交互---读文件">9、文件交互 - 读文件</h2><p>功能描述：将文件中的内容读取到程序中</p><p>虽然我们实现了添加职工后保存到文件的操作，但是每次开始运行程序，并没有将文件中数据读取到程序中</p><p>而我们的程序功能中还有清空文件的需求</p><p>因此构造函数初始化数据的情况分为三种</p><ol type="1"><li>第一次使用，文件未创建</li><li>文件存在，但是数据被用户清空</li><li>文件存在，并且保存职工的所有数据</li></ol><h3 id="文件未创建">9.1 文件未创建</h3><p>在workerManager.h中添加新的成员属性 m_FileIsEmpty标志文件是否为空</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//标志文件是否为空</span><br><span class="hljs-keyword">bool</span> m_FileIsEmpty;<br></code></pre></td></tr></table></figure><p>修改WorkerManager.cpp中构造函数代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++">WorkerManager::WorkerManager()<br>&#123;<br>ifstream ifs;<br>ifs.open(FILENAME, ios::in);<br><br><span class="hljs-comment">//文件不存在情况</span><br><span class="hljs-keyword">if</span> (!ifs.is_open())<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;文件不存在&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//测试输出</span><br><span class="hljs-keyword">this</span>-&gt;m_EmpNum = <span class="hljs-number">0</span>;  <span class="hljs-comment">//初始化人数</span><br><span class="hljs-keyword">this</span>-&gt;m_FileIsEmpty = <span class="hljs-literal">true</span>; <span class="hljs-comment">//初始化文件为空标志</span><br><span class="hljs-keyword">this</span>-&gt;m_EmpArray = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//初始化数组</span><br>ifs.close(); <span class="hljs-comment">//关闭文件</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>删除文件后，测试文件不存在时初始化数据功能</p><h3 id="文件存在且数据为空">9.2 文件存在且数据为空</h3><p>在workerManager.cpp中的构造函数追加代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//文件存在，并且没有记录</span><br><span class="hljs-keyword">char</span> ch;<br>ifs &gt;&gt; ch;<br><span class="hljs-keyword">if</span> (ifs.eof())<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;文件为空!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">this</span>-&gt;m_EmpNum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">this</span>-&gt;m_FileIsEmpty = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">this</span>-&gt;m_EmpArray = <span class="hljs-literal">NULL</span>;<br>ifs.close();<br><span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>追加代码位置如图：</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546435197575.png" alt="1546435197575"><figcaption aria-hidden="true">1546435197575</figcaption></figure><p>将文件创建后清空文件内容，并测试该情况下初始化功能</p><p>我们发现文件不存在或者为空清空 m_FileIsEmpty 判断文件是否为空的标志都为真，那何时为假？</p><p>成功添加职工后，应该更改文件不为空的标志</p><p>在<code>void WorkerManager::Add_Emp()</code>成员函数中添加：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//更新职工不为空标志</span><br><span class="hljs-keyword">this</span>-&gt;m_FileIsEmpty = <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546656256176.png" alt="1546656256176"><figcaption aria-hidden="true">1546656256176</figcaption></figure><h3 id="文件存在且保存职工数据">9.3 文件存在且保存职工数据</h3><h4 id="获取记录的职工人数">9.3.1 获取记录的职工人数</h4><p>在workerManager.h中添加成员函数 <code>int get_EmpNum();</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//统计人数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_EmpNum</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>workerManager.cpp中实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">WorkerManager::get_EmpNum</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ifstream ifs;<br>ifs.open(FILENAME, ios::in);<br><br><span class="hljs-keyword">int</span> id;<br><span class="hljs-built_in">string</span> name;<br><span class="hljs-keyword">int</span> dId;<br><br><span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span> (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; dId)<br>&#123;<br>        <span class="hljs-comment">//记录人数</span><br>num++;<br>&#125;<br>ifs.close();<br><br><span class="hljs-keyword">return</span> num;<br>&#125;<br></code></pre></td></tr></table></figure><p>在workerManager.cpp构造函数中继续追加代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> num =  <span class="hljs-keyword">this</span>-&gt;get_EmpNum();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;职工个数为：&quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">//测试代码</span><br><span class="hljs-keyword">this</span>-&gt;m_EmpNum = num;  <span class="hljs-comment">//更新成员属性 </span><br></code></pre></td></tr></table></figure><p>手动添加一些职工数据，测试获取职工数量函数</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546436429055.png" alt="1546436429055"><figcaption aria-hidden="true">1546436429055</figcaption></figure><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546436385793.png" alt="1546436385793"><figcaption aria-hidden="true">1546436385793</figcaption></figure><h4 id="初始化数组">9.3.2 初始化数组</h4><p>根据职工的数据以及职工数据，初始化workerManager中的Worker ** m_EmpArray 指针</p><p>在WorkerManager.h中添加成员函数 <code>void init_Emp();</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//初始化员工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init_Emp</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>在WorkerManager.cpp中实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::init_Emp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ifstream ifs;<br>ifs.open(FILENAME, ios::in);<br><br><span class="hljs-keyword">int</span> id;<br><span class="hljs-built_in">string</span> name;<br><span class="hljs-keyword">int</span> dId;<br><br><span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; dId)<br>&#123;<br>Worker * worker = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//根据不同的部门Id创建不同对象</span><br><span class="hljs-keyword">if</span> (dId == <span class="hljs-number">1</span>)  <span class="hljs-comment">// 1普通员工</span><br>&#123;<br>worker = <span class="hljs-keyword">new</span> Employee(id, name, dId);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dId == <span class="hljs-number">2</span>) <span class="hljs-comment">//2经理</span><br>&#123;<br>worker = <span class="hljs-keyword">new</span> Manager(id, name, dId);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-comment">//总裁</span><br>&#123;<br>worker = <span class="hljs-keyword">new</span> Boss(id, name, dId);<br>&#125;<br><span class="hljs-comment">//存放在数组中</span><br><span class="hljs-keyword">this</span>-&gt;m_EmpArray[index] = worker;<br>index++;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在workerManager.cpp构造函数中追加代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//根据职工数创建数组</span><br><span class="hljs-keyword">this</span>-&gt;m_EmpArray = <span class="hljs-keyword">new</span> Worker *[<span class="hljs-keyword">this</span>-&gt;m_EmpNum];<br><span class="hljs-comment">//初始化职工</span><br>init_Emp();<br><br><span class="hljs-comment">//测试代码</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m_EmpNum; i++)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;职工号： &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Id<br>&lt;&lt; <span class="hljs-string">&quot; 职工姓名： &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Name<br>&lt;&lt; <span class="hljs-string">&quot; 部门编号： &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_DeptId &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行程序，测试从文件中获取的数据</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546436938152.png" alt="1546436938152"><figcaption aria-hidden="true">1546436938152</figcaption></figure><p>至此初始化数据功能完毕，测试代码可以注释或删除掉！</p><h2 id="显示职工">10、显示职工</h2><p>功能描述：显示当前所有职工信息</p><h3 id="显示职工函数声明">10.1 显示职工函数声明</h3><p>在workerManager.h中添加成员函数 <code>void Show_Emp();</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//显示职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show_Emp</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h3 id="显示职工函数实现">10.2 显示职工函数实现</h3><p>在workerManager.cpp中实现成员函数 <code>void Show_Emp();</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//显示职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::Show_Emp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_FileIsEmpty)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;文件不存在或记录为空！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m_EmpNum; i++)<br>&#123;<br><span class="hljs-comment">//利用多态调用接口</span><br><span class="hljs-keyword">this</span>-&gt;m_EmpArray[i]-&gt;showInfo();<br>&#125;<br>&#125;<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试显示职工">10.3 测试显示职工</h3><p>在main函数分支 2 选项中，调用显示职工接口</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546497336465.png" alt="1546497336465"><figcaption aria-hidden="true">1546497336465</figcaption></figure><p>测试时分别测试 文件为空和文件不为空两种情况</p><p>测试效果：</p><p>测试1-文件不存在或者为空情况</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546497082135.png" alt="1546497082135"><figcaption aria-hidden="true">1546497082135</figcaption></figure><p>测试2 - 文件存在且有记录情况</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546496947671.png" alt="1546496947671"><figcaption aria-hidden="true">1546496947671</figcaption></figure><p>测试完毕，至此，显示所有职工信息功能实现</p><h2 id="删除职工">11、删除职工</h2><p>功能描述：按照职工的编号进行删除职工操作</p><h3 id="删除职工函数声明">11.1 删除职工函数声明</h3><p>在workerManager.h中添加成员函数 <code>void Del_Emp();</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//删除职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Del_Emp</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h3 id="职工是否存在函数声明">11.2 职工是否存在函数声明</h3><p>很多功能都需要用到根据职工是否存在来进行操作如：删除职工、修改职工、查找职工</p><p>因此添加该公告函数，以便后续调用</p><p>在workerManager.h中添加成员函数 <code>int IsExist(int id);</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//按照职工编号判断职工是否存在,若存在返回职工在数组中位置，不存在返回-1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">IsExist</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="职工是否存在函数实现">11.3 职工是否存在函数实现</h3><p>在workerManager.cpp中实现成员函数 <code>int IsExist(int id);</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">WorkerManager::IsExist</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> index = <span class="hljs-number">-1</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;m_EmpNum; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Id == id)<br>&#123;<br>index = i;<br><br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> index;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除职工函数实现">11.4 删除职工函数实现</h3><p>在workerManager.cpp中实现成员函数 <code>void Del_Emp();</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//删除职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::Del_Emp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_FileIsEmpty)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;文件不存在或记录为空！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//按职工编号删除</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入想要删除的职工号：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">int</span> id = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; id;<br><br><span class="hljs-keyword">int</span> index = <span class="hljs-keyword">this</span>-&gt;IsExist(id);<br><br><span class="hljs-keyword">if</span> (index != <span class="hljs-number">-1</span>)  <span class="hljs-comment">//说明index上位置数据需要删除</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = index; i &lt; <span class="hljs-keyword">this</span>-&gt;m_EmpNum - <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_EmpArray[i] = <span class="hljs-keyword">this</span>-&gt;m_EmpArray[i + <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-keyword">this</span>-&gt;m_EmpNum--;<br><br><span class="hljs-keyword">this</span>-&gt;save(); <span class="hljs-comment">//删除后数据同步到文件中</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;删除成功！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;删除失败，未找到该职工&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试删除职工">11.5 测试删除职工</h3><p>在main函数分支 3 选项中，调用删除职工接口</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546502698622.png" alt="1546502698622"><figcaption aria-hidden="true">1546502698622</figcaption></figure><p>测试1 - 删除不存在职工情况</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546500324196.png" alt="1546500324196"><figcaption aria-hidden="true">1546500324196</figcaption></figure><p>测试2 - 删除存在的职工情况</p><p>删除成功提示图：</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546500350526.png" alt="1546500350526"><figcaption aria-hidden="true">1546500350526</figcaption></figure><p>再次显示所有职工信息，确保已经删除</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546500361889.png" alt="1546500361889"><figcaption aria-hidden="true">1546500361889</figcaption></figure><p>查看文件中信息，再次核实员工已被完全删除</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546500383570.png" alt="1546500383570"><figcaption aria-hidden="true">1546500383570</figcaption></figure><p>至此，删除职工功能实现完毕！</p><h2 id="修改职工">12、修改职工</h2><p>功能描述：能够按照职工的编号对职工信息进行修改并保存</p><h3 id="修改职工函数声明">12.1 修改职工函数声明</h3><p>在workerManager.h中添加成员函数 <code>void Mod_Emp();</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//修改职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Mod_Emp</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h3 id="修改职工函数实现">12.2 修改职工函数实现</h3><p>在workerManager.cpp中实现成员函数 <code>void Mod_Emp();</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//修改职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::Mod_Emp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_FileIsEmpty)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;文件不存在或记录为空！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入修改职工的编号：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">int</span> id;<br><span class="hljs-built_in">cin</span> &gt;&gt; id;<br><br><span class="hljs-keyword">int</span> ret = <span class="hljs-keyword">this</span>-&gt;IsExist(id);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-number">-1</span>)<br>&#123; <br><span class="hljs-comment">//查找到编号的职工</span><br><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">this</span>-&gt;m_EmpArray[ret];<br><br><span class="hljs-keyword">int</span> newId = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">string</span> newName = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">int</span> dSelect = <span class="hljs-number">0</span>;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;查到： &quot;</span> &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot;号职工，请输入新职工号： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; newId;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入新姓名： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; newName;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入岗位： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;1、普通职工&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;2、经理&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;3、老板&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; dSelect;<br><br>Worker * worker = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">switch</span> (dSelect)<br>&#123;<br>case1:<br>worker = <span class="hljs-keyword">new</span> Employee(newId, newName, dSelect);<br><span class="hljs-keyword">break</span>;<br>case2:<br>worker = <span class="hljs-keyword">new</span> Manager(newId, newName, dSelect);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>worker = <span class="hljs-keyword">new</span> Boss(newId, newName, dSelect);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">//更改数据 到数组中</span><br><span class="hljs-keyword">this</span>-&gt;m_EmpArray[ret]= worker;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;修改成功！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-comment">//保存到文件中</span><br><span class="hljs-keyword">this</span>-&gt;save();<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;修改失败，查无此人&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//按任意键 清屏</span><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="测试修改职工">12.3 测试修改职工</h3><p>在main函数分支 4 选项中，调用修改职工接口</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546502651922.png" alt="1546502651922"><figcaption aria-hidden="true">1546502651922</figcaption></figure><p>测试1 - 修改不存在职工情况</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546502759643.png" alt="1546502759643"><figcaption aria-hidden="true">1546502759643</figcaption></figure><p>测试2 - 修改存在职工情况，例如将职工 "李四" 改为 "赵四"</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546502830350.png" alt="1546502830350"><figcaption aria-hidden="true">1546502830350</figcaption></figure><p>修改后再次查看所有职工信息，并确认修改成功</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546502865443.png" alt="1546502865443"><figcaption aria-hidden="true">1546502865443</figcaption></figure><p>再次确认文件中信息也同步更新</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546502898653.png" alt="1546502898653"><figcaption aria-hidden="true">1546502898653</figcaption></figure><p>至此，修改职工功能已实现！</p><h2 id="查找职工">13、查找职工</h2><p>功能描述：提供两种查找职工方式，一种按照职工编号，一种按照职工姓名</p><h3 id="查找职工函数声明">13.1 查找职工函数声明</h3><p>在workerManager.h中添加成员函数 <code>void Find_Emp();</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//查找职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Find_Emp</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h3 id="查找职工函数实现">13.2 查找职工函数实现</h3><p>在workerManager.cpp中实现成员函数 <code>void Find_Emp();</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//查找职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::Find_Emp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_FileIsEmpty)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;文件不存在或记录为空！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入查找的方式：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;1、按职工编号查找&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;2、按姓名查找&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-keyword">int</span> select = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; select;<br><br><br><span class="hljs-keyword">if</span> (select == <span class="hljs-number">1</span>) <span class="hljs-comment">//按职工号查找</span><br>&#123;<br><span class="hljs-keyword">int</span> id;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入查找的职工编号：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; id;<br><br><span class="hljs-keyword">int</span> ret = IsExist(id);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;查找成功！该职工信息如下：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">this</span>-&gt;m_EmpArray[ret]-&gt;showInfo();<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;查找失败，查无此人&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(select == <span class="hljs-number">2</span>) <span class="hljs-comment">//按姓名查找</span><br>&#123;<br><span class="hljs-built_in">string</span> name;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入查找的姓名：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; name;<br><br><span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;  <span class="hljs-comment">//查找到的标志</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m_EmpNum; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (m_EmpArray[i]-&gt;m_Name == name)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;查找成功,职工编号为：&quot;</span><br>                           &lt;&lt; m_EmpArray[i]-&gt;m_Id<br>                           &lt;&lt; <span class="hljs-string">&quot; 号的信息如下：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>flag = <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">this</span>-&gt;m_EmpArray[i]-&gt;showInfo();<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">false</span>)<br>&#123;<br><span class="hljs-comment">//查无此人</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;查找失败，查无此人&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;输入选项有误&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试查找职工">13.3 测试查找职工</h3><p>在main函数分支 5 选项中，调用查找职工接口</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546504714318.png" alt="1546504714318"><figcaption aria-hidden="true">1546504714318</figcaption></figure><p>测试1 - 按照职工编号查找 - 查找不存在职工</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546504767229.png" alt="1546504767229"><figcaption aria-hidden="true">1546504767229</figcaption></figure><p>测试2 - 按照职工编号查找 - 查找存在职工</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546505046521.png" alt="1546505046521"><figcaption aria-hidden="true">1546505046521</figcaption></figure><p>测试3 - 按照职工姓名查找 - 查找不存在职工</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546505115610.png" alt="1546505115610"><figcaption aria-hidden="true">1546505115610</figcaption></figure><p>测试4 - 按照职工姓名查找 - 查找存在职工（如果出现重名，也一并显示，在文件中可以添加重名职工）</p><p>例如 添加两个王五的职工，然后按照姓名查找王五</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546507850441.png" alt="1546507850441"><figcaption aria-hidden="true">1546507850441</figcaption></figure><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546507760284.png" alt="1546507760284"><figcaption aria-hidden="true">1546507760284</figcaption></figure><p>至此，查找职工功能实现完毕！</p><h2 id="排序">14、排序</h2><p>功能描述：按照职工编号进行排序，排序的顺序由用户指定</p><h3 id="排序函数声明">14.1 排序函数声明</h3><p>在workerManager.h中添加成员函数 <code>void Sort_Emp();</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//排序职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Sort_Emp</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h3 id="排序函数实现">14.2 排序函数实现</h3><p>在workerManager.cpp中实现成员函数 <code>void Sort_Emp();</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//排序职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::Sort_Emp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_FileIsEmpty)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;文件不存在或记录为空！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请选择排序方式： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;1、按职工号进行升序&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;2、按职工号进行降序&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-keyword">int</span> select = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; select;<br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m_EmpNum; i++)<br>&#123;<br><span class="hljs-keyword">int</span> minOrMax = i;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; m_EmpNum; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (select == <span class="hljs-number">1</span>) <span class="hljs-comment">//升序</span><br>&#123;<br><span class="hljs-keyword">if</span> (m_EmpArray[minOrMax]-&gt;m_Id &gt; m_EmpArray[j]-&gt;m_Id)<br>&#123;<br>minOrMax = j;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>  <span class="hljs-comment">//降序</span><br>&#123;<br><span class="hljs-keyword">if</span> (m_EmpArray[minOrMax]-&gt;m_Id &lt; m_EmpArray[j]-&gt;m_Id)<br>&#123;<br>minOrMax = j;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (i != minOrMax)<br>&#123;<br>Worker * temp = m_EmpArray[i];<br>m_EmpArray[i] = m_EmpArray[minOrMax];<br>m_EmpArray[minOrMax] = temp;<br>&#125;<br><br>&#125;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;排序成功,排序后结果为：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">this</span>-&gt;save();<br><span class="hljs-keyword">this</span>-&gt;Show_Emp();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试排序功能">14.3 测试排序功能</h3><p>在main函数分支 6 选项中，调用排序职工接口</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546510145181.png" alt="1546510145181"><figcaption aria-hidden="true">1546510145181</figcaption></figure><p>测试：</p><p>首先我们添加一些职工，序号是无序的，例如：</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546658169987.png" alt="1546658169987"><figcaption aria-hidden="true">1546658169987</figcaption></figure><p>测试 - 升序排序</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546658190479.png" alt="1546658190479"><figcaption aria-hidden="true">1546658190479</figcaption></figure><p>文件同步更新</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546658273581.png" alt="1546658273581"><figcaption aria-hidden="true">1546658273581</figcaption></figure><p>测试 - 降序排序</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546658288936.png" alt="1546658288936"><figcaption aria-hidden="true">1546658288936</figcaption></figure><p>文件同步更新</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546658313704.png" alt="1546658313704"><figcaption aria-hidden="true">1546658313704</figcaption></figure><p>至此，职工按照编号排序的功能实现完毕！</p><h2 id="清空文件">15、清空文件</h2><p>功能描述：将文件中记录数据清空</p><h3 id="清空函数声明">15.1 清空函数声明</h3><p>在workerManager.h中添加成员函数 <code>void Clean_File();</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//清空文件</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Clean_File</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h3 id="清空函数实现">15.2 清空函数实现</h3><p>在workerManager.cpp中实现员函数 <code>void Clean_File();</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//清空文件</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::Clean_File</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;确认清空？&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;1、确认&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;2、返回&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-keyword">int</span> select = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; select;<br><br><span class="hljs-keyword">if</span> (select == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-comment">//打开模式 ios::trunc 如果存在删除文件并重新创建</span><br><span class="hljs-function">ofstream <span class="hljs-title">ofs</span><span class="hljs-params">(FILENAME, ios::trunc)</span></span>;<br>ofs.close();<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_EmpArray != <span class="hljs-literal">NULL</span>)<br>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;m_EmpNum; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_EmpArray[i] != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">this</span>-&gt;m_EmpArray[i];<br>&#125;<br>&#125;<br><span class="hljs-keyword">this</span>-&gt;m_EmpNum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">delete</span>[] <span class="hljs-keyword">this</span>-&gt;m_EmpArray;<br><span class="hljs-keyword">this</span>-&gt;m_EmpArray = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">this</span>-&gt;m_FileIsEmpty = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;清空成功！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试清空文件">15.3 测试清空文件</h3><p>在main函数分支 7 选项中，调用清空文件接口</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546511085541.png" alt="1546511085541"><figcaption aria-hidden="true">1546511085541</figcaption></figure><p>测试：确认清空文件</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546510976745.png" alt="1546510976745"><figcaption aria-hidden="true">1546510976745</figcaption></figure><p>再次查看文件中数据，记录已为空</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546510994196.png" alt="1546510994196"><figcaption aria-hidden="true">1546510994196</figcaption></figure><p>打开文件，里面数据已确保清空，该功能需要慎用！</p><figure><img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546511018517.png" alt="1546511018517"><figcaption aria-hidden="true">1546511018517</figcaption></figure><p>随着清空文件功能实现，本案例制作完毕 ^ _ ^ on给</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本教程主要利用C++来实现一个基于多态的职工管理系统&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="https://1iuke.github.io/categories/C/"/>
    
    
    <category term="C++实战" scheme="https://1iuke.github.io/tags/C-%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
</feed>
