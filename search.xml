<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++输入输出</title>
    <url>/2021/04/11/C++/C-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>C++ 有许多输入输出函数</p>
<h2 id="c语言的-printf-scanf">1 C语言的 printf() scanf()</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, i);  <span class="hljs-comment">// i为整型变量，正确，输出i的值</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, f);  <span class="hljs-comment">// f为单精度变量，输出f变量中前两个字节的内容</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-string">&quot;C++&quot;</span>);  <span class="hljs-comment">//输出宇符串&quot;C++&quot;的地址</span><br><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;i);  <span class="hljs-comment">//正确，输入一个整数，赋给整型变量i</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, i);  <span class="hljs-comment">//漏写&amp;  </span><br></code></pre></td></tr></table></figure>
<p>C++为了与C兼容，保留了用printf和scanf进行输出和输人的方法，但是不能保证所输入输出的数据是可靠的安全的。</p>
<h2 id="c通过io类库">2 C++通过I/O类库</h2>
<p><code>在C++中，输入输出流被定义为类。C++的I/O库中的类称为流类(stream class)。 用流类定义的对象称为流对象。</code></p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/C++/C-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/image-20210412202220305.png" alt="image-20210412202220305"><figcaption aria-hidden="true">image-20210412202220305</figcaption>
</figure>
<h2 id="与iostream类库有关的头文件">3 与iostream类库有关的头文件</h2>
]]></content>
  </entry>
  <entry>
    <title>Day1night通讯管理系统</title>
    <url>/2021/03/26/C++/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本教程主要利用C++来实现一个通讯录管理系统</p>
<span id="more"></span>
<h2 id="系统需求">1、系统需求</h2>
<p>通讯录是一个可以记录亲人、好友信息的工具。</p>
<p>系统中需要实现的功能如下：</p>
<ul>
<li>添加联系人：向通讯录中添加新人，信息包括（姓名、性别、年龄、联系电话、家庭住址）最多记录1000人</li>
<li>显示联系人：显示通讯录中所有联系人信息</li>
<li>删除联系人：按照姓名进行删除指定联系人</li>
<li>查找联系人：按照姓名查看指定联系人信息</li>
<li>修改联系人：按照姓名重新修改指定联系人</li>
<li>清空联系人：清空通讯录中所有信息</li>
<li>退出通讯录：退出当前使用的通讯录</li>
</ul>
<h2 id="创建项目">2、创建项目</h2>
<p>创建项目步骤如下：</p>
<ul>
<li>创建新项目</li>
<li>添加文件</li>
</ul>
<h3 id="创建项目-1">2.1 创建项目</h3>
<p>打开vs2017后，点击创建新项目，创建新的C++项目</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544151401138.png" alt="1544151401138"><figcaption aria-hidden="true">1544151401138</figcaption>
</figure>
<p>填写项目名称，选择项目路径</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544151579620.png" alt="1544151579620"><figcaption aria-hidden="true">1544151579620</figcaption>
</figure>
<h3 id="添加文件">2.2添加文件</h3>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544161551746.png" alt="1544161551746"><figcaption aria-hidden="true">1544161551746</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544161648175.png" alt="1544161648175"><figcaption aria-hidden="true">1544161648175</figcaption>
</figure>
<p>添加成功后，效果如图：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544162344057.png" alt="1544162344057"><figcaption aria-hidden="true">1544162344057</figcaption>
</figure>
<p>至此，项目已创建完毕</p>
<h2 id="菜单功能">3、菜单功能</h2>
<p><strong>功能描述：</strong> 用户选择功能的界面</p>
<p>菜单界面效果如下图：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544149559893.png" alt="1544149559893"><figcaption aria-hidden="true">1544149559893</figcaption>
</figure>
<p><strong>步骤：</strong></p>
<ul>
<li>封装函数显示该界面 如 <code>void showMenu()</code></li>
<li>在main函数中调用封装好的函数</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">//菜单界面</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showMenu</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;***************************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*****  1、添加联系人  *****&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*****  2、显示联系人  *****&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*****  3、删除联系人  *****&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*****  4、查找联系人  *****&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*****  5、修改联系人  *****&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*****  6、清空联系人  *****&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*****  0、退出通讯录  *****&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;***************************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	showMenu();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="退出功能">4、退出功能</h2>
<p>功能描述：退出通讯录系统</p>
<p>思路：根据用户不同的选择，进入不同的功能，可以选择switch分支结构，将整个架构进行搭建</p>
<p>当用户选择0时候，执行退出，选择其他先不做操作，也不会退出程序</p>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> select = <span class="hljs-number">0</span>;<br><br>	<span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>	&#123;<br>		showMenu();<br><br>		<span class="hljs-built_in">cin</span> &gt;&gt; select;<br>		<br>		<span class="hljs-keyword">switch</span> (select)<br>		&#123;<br>		<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:  <span class="hljs-comment">//添加联系人</span><br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:  <span class="hljs-comment">//显示联系人</span><br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:  <span class="hljs-comment">//删除联系人</span><br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:  <span class="hljs-comment">//查找联系人</span><br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:  <span class="hljs-comment">//修改联系人</span><br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:  <span class="hljs-comment">//清空联系人</span><br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:  <span class="hljs-comment">//退出通讯录</span><br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;欢迎下次使用&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>			system(<span class="hljs-string">&quot;pause&quot;</span>);<br>			<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">default</span>:<br>			<span class="hljs-keyword">break</span>;<br>		&#125;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>效果图：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544163868043.png" alt="1544163868043"><figcaption aria-hidden="true">1544163868043</figcaption>
</figure>
<h2 id="添加联系人">5、添加联系人</h2>
<p>功能描述：</p>
<p>实现添加联系人功能，联系人上限为1000人，联系人信息包括（姓名、性别、年龄、联系电话、家庭住址）</p>
<p>添加联系人实现步骤：</p>
<ul>
<li>设计联系人结构体</li>
<li>设计通讯录结构体</li>
<li>main函数中创建通讯录</li>
<li>封装添加联系人函数</li>
<li>测试添加联系人功能</li>
</ul>
<h3 id="设计联系人结构体">5.1 设计联系人结构体</h3>
<p>联系人信息包括：姓名、性别、年龄、联系电话、家庭住址</p>
<p>设计如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;  //string头文件</span></span><br><span class="hljs-comment">//联系人结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-built_in">string</span> m_Name; <span class="hljs-comment">//姓名</span><br>	<span class="hljs-keyword">int</span> m_Sex; <span class="hljs-comment">//性别：1男 2女</span><br>	<span class="hljs-keyword">int</span> m_Age; <span class="hljs-comment">//年龄</span><br>	<span class="hljs-built_in">string</span> m_Phone; <span class="hljs-comment">//电话</span><br>	<span class="hljs-built_in">string</span> m_Addr; <span class="hljs-comment">//住址</span><br>&#125;;<br></code></pre></td></tr></table></figure>
<h3 id="设计通讯录结构体">5.2 设计通讯录结构体</h3>
<p>设计时候可以在通讯录结构体中，维护一个容量为1000的存放联系人的数组，并记录当前通讯录中联系人数量</p>
<p>设计如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 1000 <span class="hljs-comment">//最大人数</span></span><br><br><span class="hljs-comment">//通讯录结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Addressbooks</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Person</span> <span class="hljs-title">personArray</span>[<span class="hljs-title">MAX</span>];</span> <span class="hljs-comment">//通讯录中保存的联系人数组</span><br>	<span class="hljs-keyword">int</span> m_Size; <span class="hljs-comment">//通讯录中人员个数</span><br>&#125;;<br></code></pre></td></tr></table></figure>
<h3 id="main函数中创建通讯录">5.3 main函数中创建通讯录</h3>
<p>添加联系人函数封装好后，在main函数中创建一个通讯录变量，这个就是我们需要一直维护的通讯录</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">mian函数起始位置添加：<br><br>	<span class="hljs-comment">//创建通讯录</span><br>	Addressbooks <span class="hljs-built_in">abs</span>;<br>	<span class="hljs-comment">//初始化通讯录中人数</span><br>	<span class="hljs-built_in">abs</span>.m_Size = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure>
<h3 id="封装添加联系人函数">5.4 封装添加联系人函数</h3>
<p>思路：添加联系人前先判断通讯录是否已满，如果满了就不再添加，未满情况将新联系人信息逐个加入到通讯录</p>
<p>添加联系人代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//1、添加联系人信息</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addPerson</span><span class="hljs-params">(Addressbooks *<span class="hljs-built_in">abs</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//判断电话本是否满了</span><br>	<span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>-&gt;m_Size == MAX)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;通讯录已满，无法添加&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-comment">//姓名</span><br>		<span class="hljs-built_in">string</span> name;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入姓名：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">cin</span> &gt;&gt; name;<br>		<span class="hljs-built_in">abs</span>-&gt;personArray[<span class="hljs-built_in">abs</span>-&gt;m_Size].m_Name = name;<br><br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入性别：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;1 -- 男&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;2 -- 女&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>		<span class="hljs-comment">//性别</span><br>		<span class="hljs-keyword">int</span> sex = <span class="hljs-number">0</span>;<br>		<span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>		&#123;<br>			<span class="hljs-built_in">cin</span> &gt;&gt; sex;<br>			<span class="hljs-keyword">if</span> (sex == <span class="hljs-number">1</span> || sex == <span class="hljs-number">2</span>)<br>			&#123;<br>				<span class="hljs-built_in">abs</span>-&gt;personArray[<span class="hljs-built_in">abs</span>-&gt;m_Size].m_Sex = sex;<br>				<span class="hljs-keyword">break</span>;<br>			&#125;<br>			<span class="hljs-keyword">else</span> &#123;<br>				<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;输入有误，请重新输入&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>			&#125;<br>		&#125;<br><br>		<span class="hljs-comment">//年龄</span><br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入年龄：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-keyword">int</span> age = <span class="hljs-number">0</span>;<br>		<span class="hljs-built_in">cin</span> &gt;&gt; age;<br>		<span class="hljs-built_in">abs</span>-&gt;personArray[<span class="hljs-built_in">abs</span>-&gt;m_Size].m_Age = age;<br><br>		<span class="hljs-comment">//联系电话</span><br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入联系电话：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">string</span> phone = <span class="hljs-string">&quot;&quot;</span>;<br>		<span class="hljs-built_in">cin</span> &gt;&gt; phone;<br>		<span class="hljs-built_in">abs</span>-&gt;personArray[<span class="hljs-built_in">abs</span>-&gt;m_Size].m_Phone = phone;<br><br>		<span class="hljs-comment">//家庭住址</span><br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入家庭住址：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">string</span> address;<br>		<span class="hljs-built_in">cin</span> &gt;&gt; address;<br>		<span class="hljs-built_in">abs</span>-&gt;personArray[<span class="hljs-built_in">abs</span>-&gt;m_Size].m_Addr = address;<br><br>		<span class="hljs-comment">//更新通讯录人数</span><br>		<span class="hljs-built_in">abs</span>-&gt;m_Size++;<br><br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;添加成功&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		system(<span class="hljs-string">&quot;pause&quot;</span>);<br>		system(<span class="hljs-string">&quot;cls&quot;</span>);<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="测试添加联系人功能">5.5 测试添加联系人功能</h3>
<p>选择界面中，如果玩家选择了1，代表添加联系人，我们可以测试下该功能</p>
<p>在switch case 语句中，case1里添加：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:  <span class="hljs-comment">//添加联系人</span><br>	addPerson(&amp;<span class="hljs-built_in">abs</span>);<br>	<span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure>
<p>测试效果如图：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544165554002.png" alt="1544165554002"><figcaption aria-hidden="true">1544165554002</figcaption>
</figure>
<h2 id="显示联系人">6、显示联系人</h2>
<p>功能描述：显示通讯录中已有的联系人信息</p>
<p>显示联系人实现步骤：</p>
<ul>
<li>封装显示联系人函数</li>
<li>测试显示联系人功能</li>
</ul>
<h3 id="封装显示联系人函数">6.1 封装显示联系人函数</h3>
<p>思路：判断如果当前通讯录中没有人员，就提示记录为空，人数大于0，显示通讯录中信息</p>
<p>显示联系人代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//2、显示所有联系人信息</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">(Addressbooks * <span class="hljs-built_in">abs</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>-&gt;m_Size == <span class="hljs-number">0</span>)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;当前记录为空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">abs</span>-&gt;m_Size; i++)<br>		&#123;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; <span class="hljs-built_in">abs</span>-&gt;personArray[i].m_Name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;性别：&quot;</span> &lt;&lt; (<span class="hljs-built_in">abs</span>-&gt;personArray[i].m_Sex == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;男&quot;</span> : <span class="hljs-string">&quot;女&quot;</span>) &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;年龄：&quot;</span> &lt;&lt; <span class="hljs-built_in">abs</span>-&gt;personArray[i].m_Age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;电话：&quot;</span> &lt;&lt; <span class="hljs-built_in">abs</span>-&gt;personArray[i].m_Phone &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;住址：&quot;</span> &lt;&lt; <span class="hljs-built_in">abs</span>-&gt;personArray[i].m_Addr &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		&#125;<br>	&#125;<br>	<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br>	system(<span class="hljs-string">&quot;cls&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="测试显示联系人功能">6.2 测试显示联系人功能</h3>
<p>在switch case语句中，case 2 里添加</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:  <span class="hljs-comment">//显示联系人</span><br>	showPerson(&amp;<span class="hljs-built_in">abs</span>);<br>	<span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure>
<p>测试效果如图：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544166401582.png" alt="1544166401582"><figcaption aria-hidden="true">1544166401582</figcaption>
</figure>
<h2 id="删除联系人">7、删除联系人</h2>
<p>功能描述：按照姓名进行删除指定联系人</p>
<p>删除联系人实现步骤：</p>
<ul>
<li>封装检测联系人是否存在</li>
<li>封装删除联系人函数</li>
<li>测试删除联系人功能</li>
</ul>
<h3 id="封装检测联系人是否存在">7.1 封装检测联系人是否存在</h3>
<p>设计思路：</p>
<p>删除联系人前，我们需要先判断用户输入的联系人是否存在，如果存在删除，不存在提示用户没有要删除的联系人</p>
<p>因此我们可以把检测联系人是否存在封装成一个函数中，如果存在，返回联系人在通讯录中的位置，不存在返回-1</p>
<p>检测联系人是否存在代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//判断是否存在查询的人员，存在返回在数组中索引位置，不存在返回-1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">isExist</span><span class="hljs-params">(Addressbooks * <span class="hljs-built_in">abs</span>, <span class="hljs-built_in">string</span> name)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">abs</span>-&gt;m_Size; i++)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>-&gt;personArray[i].m_Name == name)<br>		&#123;<br>			<span class="hljs-keyword">return</span> i;<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="封装删除联系人函数">7.2 封装删除联系人函数</h3>
<p>根据用户输入的联系人判断该通讯录中是否有此人</p>
<p>查找到进行删除，并提示删除成功</p>
<p>查不到提示查无此人。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//3、删除指定联系人信息</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deletePerson</span><span class="hljs-params">(Addressbooks * <span class="hljs-built_in">abs</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入您要删除的联系人&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">string</span> name;<br>	<span class="hljs-built_in">cin</span> &gt;&gt; name;<br><br>	<span class="hljs-keyword">int</span> ret = isExist(<span class="hljs-built_in">abs</span>, name);<br>	<span class="hljs-keyword">if</span> (ret != <span class="hljs-number">-1</span>)<br>	&#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = ret; i &lt; <span class="hljs-built_in">abs</span>-&gt;m_Size; i++)<br>		&#123;<br>			<span class="hljs-built_in">abs</span>-&gt;personArray[i] = <span class="hljs-built_in">abs</span>-&gt;personArray[i + <span class="hljs-number">1</span>];<br>		&#125;<br>         <span class="hljs-built_in">abs</span>-&gt;m_Size--;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;删除成功&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;查无此人&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br>	system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="测试删除联系人功能">7.3 测试删除联系人功能</h3>
<p>在switch case 语句中，case3里添加：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:  <span class="hljs-comment">//删除联系人</span><br>	deletePerson(&amp;<span class="hljs-built_in">abs</span>);<br>	<span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure>
<p>测试效果如图：</p>
<p>存在情况：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544167951559.png" alt="1544167951559"><figcaption aria-hidden="true">1544167951559</figcaption>
</figure>
<p>不存在情况：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544168010831.png" alt="1544168010831"><figcaption aria-hidden="true">1544168010831</figcaption>
</figure>
<h2 id="查找联系人">8、查找联系人</h2>
<p>功能描述：按照姓名查看指定联系人信息</p>
<p>查找联系人实现步骤</p>
<ul>
<li>封装查找联系人函数</li>
<li>测试查找指定联系人</li>
</ul>
<h3 id="封装查找联系人函数">8.1 封装查找联系人函数</h3>
<p>实现思路：判断用户指定的联系人是否存在，如果存在显示信息，不存在则提示查无此人。</p>
<p>查找联系人代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//4、查找指定联系人信息</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findPerson</span><span class="hljs-params">(Addressbooks * <span class="hljs-built_in">abs</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入您要查找的联系人&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">string</span> name;<br>	<span class="hljs-built_in">cin</span> &gt;&gt; name;<br><br>	<span class="hljs-keyword">int</span> ret = isExist(<span class="hljs-built_in">abs</span>, name);<br>	<span class="hljs-keyword">if</span> (ret != <span class="hljs-number">-1</span>)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; <span class="hljs-built_in">abs</span>-&gt;personArray[ret].m_Name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;性别：&quot;</span> &lt;&lt; <span class="hljs-built_in">abs</span>-&gt;personArray[ret].m_Sex &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;年龄：&quot;</span> &lt;&lt; <span class="hljs-built_in">abs</span>-&gt;personArray[ret].m_Age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;电话：&quot;</span> &lt;&lt; <span class="hljs-built_in">abs</span>-&gt;personArray[ret].m_Phone &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;住址：&quot;</span> &lt;&lt; <span class="hljs-built_in">abs</span>-&gt;personArray[ret].m_Addr &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;查无此人&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br>	system(<span class="hljs-string">&quot;cls&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="测试查找指定联系人">8.2 测试查找指定联系人</h3>
<p>在switch case 语句中，case4里添加：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:  <span class="hljs-comment">//查找联系人</span><br>	findPerson(&amp;<span class="hljs-built_in">abs</span>);<br>	<span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure>
<p>测试效果如图</p>
<p>存在情况：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544170057646.png" alt="1544170057646"><figcaption aria-hidden="true">1544170057646</figcaption>
</figure>
<p>不存在情况：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544170254021.png" alt="1544170254021"><figcaption aria-hidden="true">1544170254021</figcaption>
</figure>
<h2 id="修改联系人">9、修改联系人</h2>
<p>功能描述：按照姓名重新修改指定联系人</p>
<p>修改联系人实现步骤</p>
<ul>
<li>封装修改联系人函数</li>
<li>测试修改联系人功能</li>
</ul>
<h3 id="封装修改联系人函数">9.1 封装修改联系人函数</h3>
<p>实现思路：查找用户输入的联系人，如果查找成功进行修改操作，查找失败提示查无此人</p>
<p>修改联系人代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//5、修改指定联系人信息</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modifyPerson</span><span class="hljs-params">(Addressbooks * <span class="hljs-built_in">abs</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入您要修改的联系人&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">string</span> name;<br>	<span class="hljs-built_in">cin</span> &gt;&gt; name;<br><br>	<span class="hljs-keyword">int</span> ret = isExist(<span class="hljs-built_in">abs</span>, name);<br>	<span class="hljs-keyword">if</span> (ret != <span class="hljs-number">-1</span>)<br>	&#123;<br>		<span class="hljs-comment">//姓名</span><br>		<span class="hljs-built_in">string</span> name;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入姓名：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">cin</span> &gt;&gt; name;<br>		<span class="hljs-built_in">abs</span>-&gt;personArray[ret].m_Name = name;<br><br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入性别：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;1 -- 男&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;2 -- 女&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>		<span class="hljs-comment">//性别</span><br>		<span class="hljs-keyword">int</span> sex = <span class="hljs-number">0</span>;<br>		<span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>		&#123;<br>			<span class="hljs-built_in">cin</span> &gt;&gt; sex;<br>			<span class="hljs-keyword">if</span> (sex == <span class="hljs-number">1</span> || sex == <span class="hljs-number">2</span>)<br>			&#123;<br>				<span class="hljs-built_in">abs</span>-&gt;personArray[ret].m_Sex = sex;<br>				<span class="hljs-keyword">break</span>;<br>			&#125;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;输入有误，请重新输入&quot;</span>;<br>		&#125;<br><br>		<span class="hljs-comment">//年龄</span><br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入年龄：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-keyword">int</span> age = <span class="hljs-number">0</span>;<br>		<span class="hljs-built_in">cin</span> &gt;&gt; age;<br>		<span class="hljs-built_in">abs</span>-&gt;personArray[ret].m_Age = age;<br><br>		<span class="hljs-comment">//联系电话</span><br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入联系电话：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">string</span> phone = <span class="hljs-string">&quot;&quot;</span>;<br>		<span class="hljs-built_in">cin</span> &gt;&gt; phone;<br>		<span class="hljs-built_in">abs</span>-&gt;personArray[ret].m_Phone = phone;<br><br>		<span class="hljs-comment">//家庭住址</span><br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入家庭住址：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">string</span> address;<br>		<span class="hljs-built_in">cin</span> &gt;&gt; address;<br>		<span class="hljs-built_in">abs</span>-&gt;personArray[ret].m_Addr = address;<br><br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;修改成功&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;查无此人&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br>	system(<span class="hljs-string">&quot;cls&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="测试修改联系人功能">9.2 测试修改联系人功能</h3>
<p>在switch case 语句中，case 5里添加：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:  <span class="hljs-comment">//修改联系人</span><br>	modifyPerson(&amp;<span class="hljs-built_in">abs</span>);<br>	<span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure>
<p>测试效果如图：</p>
<p>查不到指定联系人情况：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544172265676.png" alt="1544172265676"><figcaption aria-hidden="true">1544172265676</figcaption>
</figure>
<p>查找到联系人，并修改成功：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544172164141.png" alt="1544172164141"><figcaption aria-hidden="true">1544172164141</figcaption>
</figure>
<p>再次查看通讯录，确认修改完毕</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544172228627.png" alt="1544172228627"><figcaption aria-hidden="true">1544172228627</figcaption>
</figure>
<h2 id="清空联系人">10、清空联系人</h2>
<p>功能描述：清空通讯录中所有信息</p>
<p>清空联系人实现步骤</p>
<ul>
<li>封装清空联系人函数</li>
<li>测试清空联系人</li>
</ul>
<h3 id="封装清空联系人函数">10.1 封装清空联系人函数</h3>
<p>实现思路： 将通讯录所有联系人信息清除掉，只要将通讯录记录的联系人数量置为0，做逻辑清空即可。</p>
<p>清空联系人代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//6、清空所有联系人</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cleanPerson</span><span class="hljs-params">(Addressbooks * <span class="hljs-built_in">abs</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">abs</span>-&gt;m_Size = <span class="hljs-number">0</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;通讯录已清空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br>	system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="测试清空联系人">10.2 测试清空联系人</h3>
<p>在switch case 语句中，case 6 里添加：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:  <span class="hljs-comment">//清空联系人</span><br>	cleanPerson(&amp;<span class="hljs-built_in">abs</span>);<br>	<span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure>
<p>测试效果如图：</p>
<p>清空通讯录</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544172909693.png" alt="1544172909693"><figcaption aria-hidden="true">1544172909693</figcaption>
</figure>
<p>再次查看信息，显示记录为空</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544172943653.png" alt="1544172943653"><figcaption aria-hidden="true">1544172943653</figcaption>
</figure>
<p><strong>至此，通讯录管理系统完成！</strong></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++实战</tag>
      </tags>
  </entry>
  <entry>
    <title>线性表</title>
    <url>/2020/11/06/C++/%E7%BA%BF%E6%80%A7%E8%A1%A8-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是线性表">1.什么是线性表</h1>
<p>把所有数据用一根线儿串起来，再存储到物理空间中</p>
<p>根据<strong>数据存储方式</strong>可分为</p>
<ul>
<li>顺序表</li>
<li>链表</li>
</ul>
<span id="more"></span>
<p><strong>前驱和后继</strong></p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2020/11/06/C++/%E7%BA%BF%E6%80%A7%E8%A1%A8-1/前驱和后继-1615645952176.gif" alt="前驱和后继"><figcaption aria-hidden="true">前驱和后继</figcaption>
</figure>
<h1 id="顺序表及初始化">2 顺序表及初始化</h1>
<p>数组<img src= "/img/loading.gif" data-lazy-src="/2020/11/06/C++/%E7%BA%BF%E6%80%A7%E8%A1%A8-1/顺序表-1615645959375.gif" alt="顺序表"></p>
<p><strong>顺序表的初始化</strong></p>
<p>使用顺序表存储数据之前，除了要申请足够大小的物理空间之外，为了方便后期使用表中的数据，顺序表还需要实时记录以下 2 项数据：</p>
<ol type="1">
<li>顺序表申请的存储容量</li>
<li>顺序表的长度，元素个数</li>
</ol>
<p>自定义顺序表 代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Table</span>&#123;</span><br>	<span class="hljs-keyword">int</span> *head;<span class="hljs-comment">//声明一个名为head的长度不确定的数组，动态数组</span><br>	<span class="hljs-keyword">int</span> length;<span class="hljs-comment">//记录当前顺序表的长度</span><br>	<span class="hljs-keyword">int</span> size;<span class="hljs-comment">//记录顺序表分配的存储容量</span><br>&#125;table;<br></code></pre></td></tr></table></figure>
<p>接下来开始学习顺序表的初始化，也就是初步建立一个顺序表。建立顺序表需要做如下工作：</p>
<ul>
<li>给 head 动态数据申请足够大小的物理空间；</li>
<li>给 size 和 length 赋初值；</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Size 5<span class="hljs-comment">//申请空间大小</span></span><br><span class="hljs-function">table <span class="hljs-title">initTable</span><span class="hljs-params">()</span></span>&#123;<br>    table t;<br>    t.head=(<span class="hljs-keyword">int</span>*)<span class="hljs-built_in">malloc</span>(Size*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<span class="hljs-comment">//构造一个空的顺序表，动态申请存储空间</span><br>    <span class="hljs-keyword">if</span>(!t.head)<span class="hljs-comment">//如果申请失败，退出程序&#123;</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化失败&quot;</span>)；<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>	&#125;<br>	t.length=<span class="hljs-number">0</span>;<span class="hljs-comment">//空表长度为0；</span><br>	t.size=Size;<span class="hljs-comment">//空表的初始存储空间为Size</span><br>	<span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>实例程序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Size 5</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Table</span>&#123;</span><br>    <span class="hljs-keyword">int</span> * head;<br>    <span class="hljs-keyword">int</span> length;<br>    <span class="hljs-keyword">int</span> size;<br>&#125;table;<br><span class="hljs-function">table <span class="hljs-title">initTable</span><span class="hljs-params">()</span></span>&#123;<br>    table t;<br>    t.head=(<span class="hljs-keyword">int</span>*)<span class="hljs-built_in">malloc</span>(Size*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br>    <span class="hljs-keyword">if</span> (!t.head)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化失败&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    t.length=<span class="hljs-number">0</span>;<br>    t.size=Size;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br><span class="hljs-comment">//输出顺序表中元素的函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">displayTable</span><span class="hljs-params">(table t)</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;t.length;i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,t.head[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    table t=initTable();<br>    <span class="hljs-comment">//向顺序表中添加元素</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=Size; i++) &#123;<br>        t.head[i<span class="hljs-number">-1</span>]=i;<br>        t.length++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;顺序表中存储的元素分别是：\n&quot;</span>);<br>    displayTable(t);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>输出：</strong></p>
<p>顺序表中存储的元素分别是： 1 2 3 4 5</p>
<h1 id="顺序表的基本操作">3.顺序表的基本操作</h1>
<h2 id="插入元素">3.1 插入元素</h2>
<p>根据插入位置不同：</p>
<ol type="1">
<li>插入表头</li>
<li>插入中间</li>
<li>插入表位</li>
</ol>
<p>解决方法：</p>
<ul>
<li>将要插入位置元素以及后续的元素整体向后移动一个位置；</li>
<li>将元素放到腾出来的位置上；</li>
</ul>
<p>例如：在{1 2 3 4 5}的第三个位置插入6</p>
<ul>
<li><img src= "/img/loading.gif" data-lazy-src="/2020/11/06/C++/%E7%BA%BF%E6%80%A7%E8%A1%A8-1/找到目标元素位置-1615645975721.gif" title="fig:" alt="找到目标元素位置"></li>
<li><img src= "/img/loading.gif" data-lazy-src="/2020/11/06/C++/%E7%BA%BF%E6%80%A7%E8%A1%A8-1/将插入位置腾出-1615645979073.gif" title="fig:" alt="将插入位置腾出"></li>
<li><img src= "/img/loading.gif" data-lazy-src="/2020/11/06/C++/%E7%BA%BF%E6%80%A7%E8%A1%A8-1/插入目标元素-1604587218577-1615645980901.gif" title="fig:" alt="插入目标元素"></li>
</ul>
<p>代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//插入函数，其中，elem为插入的元素，add为插入到顺序表的位置</span><br><span class="hljs-function">table <span class="hljs-title">addTable</span><span class="hljs-params">(table t,<span class="hljs-keyword">int</span> elem,<span class="hljs-keyword">int</span> add)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//判断插入本身是否存在问题（如果插入元素位置比整张表的长度+1还大（如果相等，是尾随的情况），或者插入的位置本身不存在，程序作为提示并自动退出）</span><br>    <span class="hljs-keyword">if</span> (add&gt;t.length+<span class="hljs-number">1</span>||add&lt;<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入位置有问题\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>    <span class="hljs-comment">//做插入操作时，首先需要看顺序表是否有多余的存储空间提供给插入的元素，如果没有，需要申请</span><br>    <span class="hljs-keyword">if</span> (t.length==t.size) &#123;<br>        t.head=(<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">realloc</span>(t.head, (t.size+<span class="hljs-number">1</span>)*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br>        <span class="hljs-keyword">if</span> (!t.head) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;存储分配失败\n&quot;</span>);<br>            <span class="hljs-keyword">return</span> t;<br>        &#125;<br>        t.size+=<span class="hljs-number">1</span>;<br>    &#125; <br>    <span class="hljs-comment">//插入操作，需要将从插入位置开始的后续元素，逐个后移</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=t.length<span class="hljs-number">-1</span>; i&gt;=add<span class="hljs-number">-1</span>; i--) &#123;<br>        t.head[i+<span class="hljs-number">1</span>]=t.head[i];<br>    &#125;<br>    <span class="hljs-comment">//后移完成后，直接将所需插入元素，添加到顺序表的相应位置</span><br>    t.head[add<span class="hljs-number">-1</span>]=elem;<br>    <span class="hljs-comment">//由于添加了元素，所以长度+1</span><br>    t.length++;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>注意，动态数组额外申请更多物理空间使用的是 realloc 函数。并且，在实现后续元素整体后移的过程，目标位置其实是有数据的，还是 3，只是下一步新插入元素时会把旧元素直接覆盖。</p>
<h2 id="删除元素">3.2 删除元素</h2>
<p>后续元素整体前移一个位置，会直接将目标元素删除，可间接实现删除元素的目的。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2020/11/06/C++/%E7%BA%BF%E6%80%A7%E8%A1%A8-1/后续元素前移-1615645985862.gif" alt="后续元素前移"><figcaption aria-hidden="true">后续元素前移</figcaption>
</figure>
<p>实现代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-function">table <span class="hljs-title">delTable</span><span class="hljs-params">(table t,<span class="hljs-keyword">int</span> add)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (add&gt;t.length || add&lt;<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;被删除元素的位置有误\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>    <span class="hljs-comment">//删除操作</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=add; i&lt;t.length; i++) &#123;<br>        t.head[i<span class="hljs-number">-1</span>]=t.head[i];<br>    &#125;<br>    t.length--;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="查找元素">3.3 查找元素</h2>
<p>顺序表中查找目标元素，可以使用多种查找算法实现，比如说<a href="http://c.biancheng.net/view/3428.html">二分查找算法</a>、插值查找算法等。</p>
<p>这里，我们选择<a href="http://c.biancheng.net/view/3427.html">顺序查找算法</a>，具体实现代码为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//查找函数，其中，elem表示要查找的数据元素的值</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">selectTable</span><span class="hljs-params">(table t,<span class="hljs-keyword">int</span> elem)</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;t.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (t.head[i]==elem) &#123;<br>            <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//如果查找失败，返回-1</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="更改元素">3.4 更改元素</h2>
<p>顺序表更改元素的实现过程是：</p>
<ol type="1">
<li>找到目标元素；</li>
<li>直接修改该元素的值；</li>
</ol>
<p>顺序表更改元素的 C 语言实现代码为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//更改函数，其中，elem为要更改的元素，newElem为新的数据元素</span><br><span class="hljs-function">table <span class="hljs-title">amendTable</span><span class="hljs-params">(table t,<span class="hljs-keyword">int</span> elem,<span class="hljs-keyword">int</span> newElem)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> add=selectTable(t, elem);<br>    t.head[add<span class="hljs-number">-1</span>]=newElem;<span class="hljs-comment">//由于返回的是元素在顺序表中的位置，所以-1就是该元素在数组中的下标</span><br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="实例">3.5 实例</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Size 5</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Table</span>&#123;</span><br>    <span class="hljs-keyword">int</span> * head;<br>    <span class="hljs-keyword">int</span> length;<br>    <span class="hljs-keyword">int</span> size;<br>&#125;table;<br><span class="hljs-function">table <span class="hljs-title">initTable</span><span class="hljs-params">()</span></span>&#123;<br>    table t;<br>    t.head=(<span class="hljs-keyword">int</span>*)<span class="hljs-built_in">malloc</span>(Size*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br>    <span class="hljs-keyword">if</span> (!t.head)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    t.length=<span class="hljs-number">0</span>;<br>    t.size=Size;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br><span class="hljs-function">table <span class="hljs-title">addTable</span><span class="hljs-params">(table t,<span class="hljs-keyword">int</span> elem,<span class="hljs-keyword">int</span> add)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (add&gt;t.length+<span class="hljs-number">1</span>||add&lt;<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入位置有问题\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (t.length&gt;=t.size) &#123;<br>        t.head=(<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">realloc</span>(t.head, (t.size+<span class="hljs-number">1</span>)*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br>        <span class="hljs-keyword">if</span> (!t.head) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;存储分配失败\n&quot;</span>);<br>        &#125;<br>        t.size+=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=t.length<span class="hljs-number">-1</span>; i&gt;=add<span class="hljs-number">-1</span>; i--) &#123;<br>        t.head[i+<span class="hljs-number">1</span>]=t.head[i];<br>    &#125;<br>    t.head[add<span class="hljs-number">-1</span>]=elem;<br>    t.length++;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br><span class="hljs-function">table <span class="hljs-title">delTable</span><span class="hljs-params">(table t,<span class="hljs-keyword">int</span> add)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (add&gt;t.length || add&lt;<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;被删除元素的位置有误\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=add; i&lt;t.length; i++) &#123;<br>        t.head[i<span class="hljs-number">-1</span>]=t.head[i];<br>    &#125;<br>    t.length--;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">selectTable</span><span class="hljs-params">(table t,<span class="hljs-keyword">int</span> elem)</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;t.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (t.head[i]==elem) &#123;<br>            <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function">table <span class="hljs-title">amendTable</span><span class="hljs-params">(table t,<span class="hljs-keyword">int</span> elem,<span class="hljs-keyword">int</span> newElem)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> add=selectTable(t, elem);<br>    t.head[add<span class="hljs-number">-1</span>]=newElem;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">displayTable</span><span class="hljs-params">(table t)</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;t.length;i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,t.head[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    table t1=initTable();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=Size; i++) &#123;<br>        t1.head[i<span class="hljs-number">-1</span>]=i;<br>        t1.length++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;原顺序表：\n&quot;</span>);<br>    displayTable(t1);<br>  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除元素1:\n&quot;</span>);<br>    t1=delTable(t1, <span class="hljs-number">1</span>);<br>    displayTable(t1);<br>  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在第2的位置插入元素5:\n&quot;</span>);<br>    t1=addTable(t1, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>);<br>    displayTable(t1);<br>  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;查找元素3的位置:\n&quot;</span>);<br>    <span class="hljs-keyword">int</span> add=selectTable(t1, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,add);<br>  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;将元素3改为6:\n&quot;</span>);<br>    t1=amendTable(t1, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>);<br>    displayTable(t1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><code class="hljs tap">原顺序表：<br>1<span class="hljs-number"> 2 </span>3<span class="hljs-number"> 4 </span>5<br>删除元素1:<br>2<span class="hljs-number"> 3 </span>4 5<br>在第2的位置插入元素5:<br>2<span class="hljs-number"> 5 </span>3<span class="hljs-number"> 4 </span>5<br>查找元素3的位置:<br>3<br>将元素3改为6:<br>2<span class="hljs-number"> 5 </span>6<span class="hljs-number"> 4 </span>5<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线性表</tag>
      </tags>
  </entry>
  <entry>
    <title>Day1EEG基础</title>
    <url>/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于脑电信号和脑电信号预处理</p>
<span id="more"></span>
<h2 id="什么是脑电eeg">1 什么是脑电(EEG)?</h2>
<ul>
<li>EEG is the electrical activity, which is normally recorded at the scalp of human brain, generated by the firing of neurons within the brain.</li>
</ul>
<p>脑细胞无时无刻不在进行自发性、 节律性、 综合性的电活动。 将这种 电活动 的电位作为纵轴， 时间为横轴， 记录下来的电位与时间相互关系的 平面图即为脑电图（ electroencephalograph， EEG）。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/第二十五届脑电数据处理中级班PPT-1615949013950.jpg" alt="第二十五届脑电数据处理中级班PPT"><figcaption aria-hidden="true">第二十五届脑电数据处理中级班PPT</figcaption>
</figure>
<h2 id="数据预处理">2 数据预处理</h2>
<h3 id="eeglab启动">0 eeglab启动</h3>
<h3 id="数据格式转化">1 数据格式转化</h3>
<p>导入原始数据并转化为set格式文件 file --&gt; import data --&gt;using eeglab functions and plugins –&gt; from Brain Vis,Rec..vhdr file 找到对应的厂家以及文件格式信息 如果没有你的厂家或者格式信息： 1）可以找厂家要 2）自行下载extensions 导入更多厂家的数据 https://sccn.ucsd.edu/wiki/Plugin_list_import</p>
<p>导入已经存好的set文件： file --&gt; load existing dataset</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317150558774.png" alt="image-20210317150558774"><figcaption aria-hidden="true">image-20210317150558774</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317220023613.png" alt="image-20210317220023613"><figcaption aria-hidden="true">image-20210317220023613</figcaption>
</figure>
<h3 id="通道定位">2 通道定位</h3>
<ul>
<li><p>对于标准名称的电极 可以直接定位： <strong>Edit -- channel location</strong> 如果电极名称不标准 1 如果电极位于标准位置 ,只是名称不标准，可以将名字改为标准名称再进行定位 <strong>--&gt;look up locs</strong></p>
<blockquote>
<p>HEO 标准名称为 HEOG</p>
</blockquote>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317220624969.png" alt="image-20210317220624969"><figcaption aria-hidden="true">image-20210317220624969</figcaption>
</figure>
<p>2 如果名字不标准 位置也不标准， 2.1 如果只是极个别电极是这种情况，而这些电极又不是你关系的电极。eg: CB1 CB2 ，可以当做无用电极去掉 2.2 如果大多数电极都是这种情况，可以找厂家要坐标文件，自行导入定位。 <strong>--&gt; look up locs</strong></p></li>
<li><p>查看电极名称与序号之间的关系 1）<strong>plot --&gt; channel locations - -&gt;by name/by number</strong> 电极名称或者序号 可以转换 2）点击workspace中的EEG 点开之后 再点击 chanlocs 查看电极点对应名称</p></li>
</ul>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317222512799.png" alt="image-20210317222512799"><figcaption aria-hidden="true">image-20210317222512799</figcaption>
</figure>
<h3 id="去除无用电极选">3 去除无用电极（选）</h3>
<p><strong>Edit --&gt; select data --&gt; channel range</strong> 中选择不要的电极 <strong>on -&gt;remove these</strong> 勾选是上</p>
<p>去除63 HEO 64 VEO</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317221423555.png" alt="image-20210317221423555"><figcaption aria-hidden="true">image-20210317221423555</figcaption>
</figure>
<p>此时电极数为62个</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317221516935.png" alt="image-20210317221516935"><figcaption aria-hidden="true">image-20210317221516935</figcaption>
</figure>
<h3 id="滤波">4 滤波</h3>
<p><strong>Tools --&gt; Filter the data --&gt; Basic FIR filter</strong></p>
<ul>
<li><p>低通 low pass high edge</p></li>
<li><p>高通 high pass lower edge</p></li>
<li><p>带通 一次滤波效果优于低通+高通</p></li>
</ul>
<p>4.1 带通</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317150348697.png" alt="image-20210317150348697"><figcaption aria-hidden="true">image-20210317150348697</figcaption>
</figure>
<p>滤波器：</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317221718548.png"></p>
<ol start="4" type="1">
<li><p>2 去50Hz工频干扰：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317151350782.png" alt="image-20210317151350782"><figcaption aria-hidden="true">image-20210317151350782</figcaption>
</figure>
<p>滤波器：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317223040234.png" alt="image-20210317223040234"><figcaption aria-hidden="true">image-20210317223040234</figcaption>
</figure></li>
</ol>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317223128561.png" alt="image-20210317223128561"><figcaption aria-hidden="true">image-20210317223128561</figcaption>
</figure>
<h3 id="降采样">5 降采样</h3>
<p><strong>Tools-&gt;Change sampling rate</strong></p>
<p>常用1000Hz</p>
<p>缺点：降低了时间分辨率，</p>
<p>优点：降低多重比较次数</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317152013696.png" alt="image-20210317152013696"><figcaption aria-hidden="true">image-20210317152013696</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317223246491.png" alt="image-20210317223246491"><figcaption aria-hidden="true">image-20210317223246491</figcaption>
</figure>
<h3 id="分段">6 分段</h3>
<p><strong>Tools-&gt;extract epochs</strong></p>
<p>6.1 提取信号前1s后2s的数据</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317153048902.png" alt="image-20210317153048902"><figcaption aria-hidden="true">image-20210317153048902</figcaption>
</figure>
<p>6.2 减去baseline的平均值</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317223425020.png" alt="image-20210317223425020"><figcaption aria-hidden="true">image-20210317223425020</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317153357592.png" alt="image-20210317153357592"><figcaption aria-hidden="true">image-20210317153357592</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317192737305.png" alt="image-20210317192737305"><figcaption aria-hidden="true">image-20210317192737305</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317224014659.png" alt="image-20210317224014659"><figcaption aria-hidden="true">image-20210317224014659</figcaption>
</figure>
<p><strong>4 5 6的顺序：分段导致时间过短；</strong></p>
<pre><code>                    **降采样丢失信息**</code></pre>
<h3 id="去除坏电极替换坏导去除坏段">7 去除坏电极，替换坏导，去除坏段，</h3>
<p>7.1 去除</p>
<p><strong>Edit -&gt; Select data</strong> 同2</p>
<p>7.2 插补</p>
<p><strong>Tools --&gt; Interpolate electrodes</strong></p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317160732429.png" alt="image-20210317160732429"><figcaption aria-hidden="true">image-20210317160732429</figcaption>
</figure>
<p><strong>有效trials应超过60%</strong></p>
<p>7.3 去除坏段</p>
<p><strong>Plot–&gt;Channel data –&gt; Reject</strong></p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317162107819.png" alt="image-20210317162107819"><figcaption aria-hidden="true">image-20210317162107819</figcaption>
</figure>
<h3 id="ica">8 ICA</h3>
<p><strong>Tools --&gt; Run ICA</strong></p>
<p>如果没有进行坏电极插补 直接点击ok即可 如果进行坏电极插补，则需要在'extended', 1后面加东西 <strong>'extended', 1, 'pca', m-n</strong> m为当前电极数量，n为插补的电极数量</p>
<p>数据通道太少 不建议跑ICA 可以手动去伪迹 效果不好 数据大于64个通道 例如 128导 256导 ICA通常跑64个即可</p>
<p><strong>ICA过程</strong></p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317225334493.png" alt="image-20210317225334493"><figcaption aria-hidden="true">image-20210317225334493</figcaption>
</figure>
<p><strong>绘制ICA成分</strong></p>
<p><strong>Plot --&gt; Component properties</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317165436899.png"></p>
<h3 id="剔除眼动">9 剔除眼动</h3>
<p><strong>Tool --&gt; Reject data using ICA --&gt; Reject components by map</strong></p>
<h4 id="经典成分-眨眼">9.1 经典成分-眨眼</h4>
<ul>
<li>判断依据：</li>
</ul>
<ol type="1">
<li><p>前端分布</p></li>
<li><p>小方块</p></li>
<li><p>随机分布</p></li>
<li><p>低频能量高</p></li>
<li><p>成分排序靠前</p></li>
</ol>
<ul>
<li>注意：颜色的深浅有意义， 但是红蓝无所谓，大红大蓝 都可以。</li>
</ul>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210318184633943.png" alt="image-20210318184633943"><figcaption aria-hidden="true">image-20210318184633943</figcaption>
</figure>
<h4 id="经典成分-眼漂">9.2 经典成分-眼漂</h4>
<ul>
<li>判断依据：</li>
</ul>
<ol type="1">
<li><p>前端两侧分布， 红蓝相对</p></li>
<li><p>长条状，红蓝相 间</p></li>
<li><p>随机分布</p></li>
<li><p>低频能量高</p></li>
<li><p>成分排序靠前， 但一般排在眨眼 后面</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210318184919137.png" alt="image-20210318184919137"><figcaption aria-hidden="true">image-20210318184919137</figcaption>
</figure></li>
</ol>
<h4 id="经典成分头动">9.3 经典成分：头动</h4>
<ul>
<li>判断依据</li>
</ul>
<ol type="1">
<li><p>周围分布</p></li>
<li><p>长条状</p></li>
<li><p>随机分布</p></li>
<li><p>在单个trial里有 非常明显的漂移</p></li>
</ol>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210318185015606.png" alt="image-20210318185015606"><figcaption aria-hidden="true">image-20210318185015606</figcaption>
</figure>
<h4 id="其他成分-工频干扰">9.4 其他成分： 工频干扰</h4>
<ol type="1">
<li><p>分布在地线 周围</p></li>
<li><p>单个Trial上 的分布非常 有规律</p></li>
<li><p>50Hz左右能 量最高</p></li>
</ol>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210318185434043.png" alt="image-20210318185434043"><figcaption aria-hidden="true">image-20210318185434043</figcaption>
</figure>
<h4 id="其他成分-心电">9.5 其他成分 • 心电</h4>
<p>• 呈雨点般散落状。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210318185517456.png" alt="image-20210318185517456"><figcaption aria-hidden="true">image-20210318185517456</figcaption>
</figure>
<h4 id="保存数据图片">9.6 保存数据、图片</h4>
<p>保存数据： File -&gt; save current dataset</p>
<p>保存图片：</p>
<ul>
<li><p>Plot Channel ERP image</p></li>
<li><p>Plot Channel ERPs With scalp maps</p></li>
<li><p>Plot Channel ERPs In scalp/rect. Array</p></li>
<li><p>Plot ERP map series 2D</p></li>
</ul>
<p><strong>不确定就不去除</strong></p>
<h3 id="极端值去伪迹">10 极端值去伪迹</h3>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317173206003.png" alt="image-20210317173206003"><figcaption aria-hidden="true">image-20210317173206003</figcaption>
</figure>
<p>100 yes</p>
<p>70/80</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317173330602.png" alt="image-20210317173330602"><figcaption aria-hidden="true">image-20210317173330602</figcaption>
</figure>
<h3 id="重参考">11 重参考</h3>
<p><strong>Tools --&gt; re-reference</strong></p>
<p>去除 TP9 TP10</p>
<p>选取平均参考</p>
<h3 id="手动浏览数据-查看是否还有伪迹">12 手动浏览数据 查看是否还有伪迹</h3>
<h3 id="补充">补充：</h3>
<p>12.1 只保留正确反应的分段 <strong>edit --&gt;select epochs or events</strong> 在type里面选上正确反映的marker</p>
<p>12.2 二次滤波只需要做低通滤波 做完记得基线校正 <strong>tools -- remove baseline</strong></p>
<p>12.3 二次分段 也需要基线校正</p>
]]></content>
      <categories>
        <category>脑电</category>
      </categories>
      <tags>
        <tag>EEGLAB</tag>
      </tags>
  </entry>
  <entry>
    <title>Day2EEGLAB脚本</title>
    <url>/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day2EEGLAB%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>EEG脚本编程。数据批处理</strong></p>
<span id="more"></span>
<h1 id="数据">0 数据</h1>
<p>采集每个被试的脑电数据；使用64个电极，每个电极记录n =3000 毫秒数据；分为36 个epoch</p>
<p>个体数据（64，3000，36）</p>
<p>EEG.data (channel,time,epoch)</p>
<h1 id="批处理">1 批处理</h1>
<p>同时处理多个被试数据。</p>
<p>假设我们有100个数据 被试的文件名为1.set 2.set .... 100.set</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 1导入原始数据 </span><br><span class="hljs-comment">%注意  是导入bp数据的函数 </span><br><span class="hljs-comment">%如果你的数据是别的厂家别的格式 要自己导入一次 查看EEG.history中的代码</span><br><span class="hljs-comment">%对于每个被试</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-number">100</span><br>    <span class="hljs-comment">%拼接被试的文件名 </span><br>    rawname = [num2str(<span class="hljs-built_in">i</span>),<span class="hljs-string">&#x27;.vhdr&#x27;</span>];<br>    setname = [num2str(<span class="hljs-built_in">i</span>),<span class="hljs-string">&#x27;.set&#x27;</span>];<br>    <span class="hljs-comment">%使用函数导入数据 路径记得修改 不要忘记后面的分隔符\</span><br>    EEG = pop_loadbv(<span class="hljs-string">&#x27;路径1\&#x27;, rawname, [], []);</span><br><span class="hljs-string">    %检查EEG结构体是否完好</span><br><span class="hljs-string">    EEG = eeg_checkset( EEG );</span><br><span class="hljs-string">    %把set文件存到磁盘上</span><br><span class="hljs-string">    EEG = pop_saveset( EEG, &#x27;</span>filename&#x27;,setname,<span class="hljs-string">&#x27;filepath&#x27;</span>,<span class="hljs-string">&#x27;路径2\&#x27;);</span><br><span class="hljs-string">end</span><br><span class="hljs-string"></span><br><span class="hljs-string">%% 2通道定位</span><br><span class="hljs-string">for i = 1:100</span><br><span class="hljs-string">    %拼接被试的文件名 </span><br><span class="hljs-string">    setname = [num2str(i),&#x27;</span>.set&#x27;];<br>    <span class="hljs-comment">%导入set格式文件</span><br>    EEG = pop_loadset(<span class="hljs-string">&#x27;filename&#x27;</span>,setname,<span class="hljs-string">&#x27;filepath&#x27;</span>,<span class="hljs-string">&#x27;路径2\&#x27;);</span><br><span class="hljs-string">    %通道定位</span><br><span class="hljs-string">    EEG=pop_chanedit(EEG, &#x27;</span>lookup&#x27;,<span class="hljs-string">&#x27;坐标文件自己生成路径&#x27;</span>);<br>    <span class="hljs-comment">%去除无用电极</span><br>    EEG = pop_select( EEG,<span class="hljs-string">&#x27;nochannel&#x27;</span>,&#123;<span class="hljs-string">&#x27;HEO&#x27;</span> <span class="hljs-string">&#x27;VEOG&#x27;</span>&#125;);<br>    <span class="hljs-comment">%进行0.1 - 40Hz 的带通滤波</span><br>    EEG = pop_eegfiltnew(EEG, <span class="hljs-number">0.1</span>, <span class="hljs-number">40</span>, <span class="hljs-number">33000</span>, <span class="hljs-number">0</span>, [], <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">%进行48-52 Hz的凹陷滤波</span><br>    EEG = pop_eegfiltnew(EEG, <span class="hljs-number">48</span>, <span class="hljs-number">52</span>, <span class="hljs-number">1650</span>, <span class="hljs-number">1</span>, [], <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">%降采样到500Hz</span><br>    EEG = pop_resample( EEG, <span class="hljs-number">500</span>);<br>    <span class="hljs-comment">%分段</span><br>    EEG = pop_epoch( EEG, &#123;  <span class="hljs-string">&#x27;10&#x27;</span>  <span class="hljs-string">&#x27;11&#x27;</span>  &#125;, [<span class="hljs-number">-1</span>  <span class="hljs-number">2</span>], <span class="hljs-string">&#x27;newname&#x27;</span>, <span class="hljs-string">&#x27; resampled epochs&#x27;</span>, <span class="hljs-string">&#x27;epochinfo&#x27;</span>, <span class="hljs-string">&#x27;yes&#x27;</span>);<br>    <span class="hljs-comment">%基线校正</span><br>    EEG = pop_rmbase( EEG, [<span class="hljs-number">-1000</span>     <span class="hljs-number">0</span>]);<br>    <span class="hljs-comment">%提取正确反应试次</span><br>    EEG = pop_selectevent( EEG, <span class="hljs-string">&#x27;type&#x27;</span>,<span class="hljs-number">200</span>,<span class="hljs-string">&#x27;deleteevents&#x27;</span>,<span class="hljs-string">&#x27;off&#x27;</span>,<span class="hljs-string">&#x27;deleteepochs&#x27;</span>,<span class="hljs-string">&#x27;on&#x27;</span>,<span class="hljs-string">&#x27;invertepochs&#x27;</span>,<span class="hljs-string">&#x27;off&#x27;</span>);<br>    <span class="hljs-comment">%把set文件存到磁盘上</span><br>    EEG = pop_saveset( EEG, <span class="hljs-string">&#x27;filename&#x27;</span>,setname,<span class="hljs-string">&#x27;filepath&#x27;</span>,<span class="hljs-string">&#x27;路径3\&#x27;);</span><br><span class="hljs-string">end</span><br><span class="hljs-string"></span><br><span class="hljs-string">%% 手动插值坏导 替换坏段</span><br><span class="hljs-string">%要一个一个被试查看 不能批处理 </span><br><span class="hljs-string">%做好的数据存在路径4中</span><br><span class="hljs-string">EEG = pop_interp(EEG, [13  60], &#x27;</span>spherical&#x27;);<br>EEG = pop_rejepoch( EEG, [<span class="hljs-number">2</span> <span class="hljs-number">77</span> <span class="hljs-number">78</span>] ,<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">%% RunICA</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-number">100</span><br>    <span class="hljs-comment">%拼接被试的文件名 </span><br>    setname = [num2str(<span class="hljs-built_in">i</span>),<span class="hljs-string">&#x27;.set&#x27;</span>];<br>    <span class="hljs-comment">%导入set格式文件</span><br>    EEG = pop_loadset(<span class="hljs-string">&#x27;filename&#x27;</span>,setname,<span class="hljs-string">&#x27;filepath&#x27;</span>,<span class="hljs-string">&#x27;路径4\&#x27;);</span><br><span class="hljs-string">    %如果数据中没有对坏电极进行插值，则运行此行</span><br><span class="hljs-string">%     EEG = pop_runica(EEG, &#x27;</span>extended&#x27;,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;interupt&#x27;</span>,<span class="hljs-string">&#x27;on&#x27;</span>);<br>    <span class="hljs-comment">%如果你进行了坏电极插值，则需要执行这行</span><br>    <span class="hljs-comment">%此处的m为当前电极的数量 n为插值的电极数量</span><br>    EEG = pop_runica(EEG, <span class="hljs-string">&#x27;extended&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;pca&#x27;</span>,m-n,<span class="hljs-string">&#x27;interupt&#x27;</span>,<span class="hljs-string">&#x27;on&#x27;</span>);<br>    <span class="hljs-comment">%把set文件存到磁盘上</span><br>    EEG = pop_saveset( EEG, <span class="hljs-string">&#x27;filename&#x27;</span>,setname,<span class="hljs-string">&#x27;filepath&#x27;</span>,<span class="hljs-string">&#x27;路径5\&#x27;);</span><br><span class="hljs-string">end</span><br><span class="hljs-string">%% 手动查看独立成分 并去除眨眼等伪迹成分</span><br><span class="hljs-string">%不能批处理 数据存在路径6</span><br><span class="hljs-string">%% 极端值去伪迹、重参考、基线校正</span><br><span class="hljs-string">for i = 1:100</span><br><span class="hljs-string">    %拼接被试的文件名 </span><br><span class="hljs-string">    setname = [num2str(i),&#x27;</span>.set&#x27;];<br>    <span class="hljs-comment">%导入set格式文件</span><br>    EEG = pop_loadset(<span class="hljs-string">&#x27;filename&#x27;</span>,setname,<span class="hljs-string">&#x27;filepath&#x27;</span>,<span class="hljs-string">&#x27;路径6\&#x27;);</span><br><span class="hljs-string">    % 此处是+-100 </span><br><span class="hljs-string">    EEG = pop_eegthresh(EEG,1,[1:62] ,-100,100,-1,1.998,0,1);</span><br><span class="hljs-string">    %重参考</span><br><span class="hljs-string">    EEG = pop_reref( EEG, [33 43] );</span><br><span class="hljs-string">    %基线校正</span><br><span class="hljs-string">    EEG = pop_rmbase( EEG, [-1000     0]);</span><br><span class="hljs-string">    %把set文件存到磁盘上</span><br><span class="hljs-string">    EEG = pop_saveset( EEG, &#x27;</span>filename&#x27;,setname,<span class="hljs-string">&#x27;filepath&#x27;</span>,<span class="hljs-string">&#x27;路径7\&#x27;);</span><br><span class="hljs-string">end</span><br><span class="hljs-string"></span><br><span class="hljs-string">%% 手动浏览数据 再次筛查伪迹</span><br><span class="hljs-string">%结果存在路径8</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure>
<p>基线 100/200ms</p>
<p>分段 -200 1000ms</p>
<h1 id="时域处理-叠加平均">2 时域处理 叠加平均</h1>
<h2 id="个体水平叠加平均">2.1 个体水平叠加平均</h2>
<ul>
<li>提值
<ul>
<li>peak 峰值</li>
<li>latency 潜伏期</li>
<li>mean 均值</li>
<li>amplicated 幅值</li>
</ul></li>
<li>统计
<ul>
<li>t-ROI ch-ROI</li>
<li>选定ch 沿时间点进行比较</li>
<li>选定时间 沿ch进行统计</li>
</ul></li>
</ul>
<h2 id="组水平叠加平均">2.2 组水平叠加平均</h2>
<ul>
<li>画图
<ul>
<li>plot 波形图： 时间信息 选ch 画时间 by (EEG.chanlocs)</li>
<li>topplot 地形图： 空间信息 选时间 画ch<br>
</li>
</ul></li>
<li>找成分
<ul>
<li>peak ——&gt; latency</li>
<li>time-window</li>
<li>find函数找位置</li>
<li>沿时间点平均</li>
<li>绘制地形图</li>
</ul></li>
<li>定时间窗口</li>
</ul>
<h1 id="matlab-code1">3 matlab code1</h1>
<h2 id="计算个体水平">3.1 计算个体水平</h2>
<p>将每个被试的epoch进行平均，此时EEG.data由（59，3000，36）变为（59，3000）</p>
<p>将平均后的数据组合起来，放入EEG.avg中，保存每个被试的个体平均。数据形状为（10，59，3000）</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab">clear all; clc; close all<br><br><span class="hljs-comment">%% part1: compute group-level ERP</span><br><br>Subj = [<span class="hljs-number">1</span>:<span class="hljs-number">10</span>]; <span class="hljs-comment">%% subject numbers</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(Subj)<br>    setname = strcat(num2str(<span class="hljs-built_in">i</span>),<span class="hljs-string">&#x27;_LH.set&#x27;</span>); <span class="hljs-comment">%% filename of set file</span><br>    setpath = <span class="hljs-string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day2\Example_data\&#x27;;</span><br><span class="hljs-string">    EEG = pop_loadset(&#x27;</span>filename&#x27;,setname,<span class="hljs-string">&#x27;filepath&#x27;</span>,setpath); <span class="hljs-comment">%% load the data</span><br>    EEG = eeg_checkset( EEG );<br>    <span class="hljs-comment">% 汇总每个被试个体水平叠加平均好的数据</span><br>    <span class="hljs-comment">% 10 59 3000  sub  chl time</span><br>    EEG_avg(<span class="hljs-built_in">i</span>,:,:) = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(EEG.data,<span class="hljs-number">3</span>)); <span class="hljs-comment">%% single-subject ERPs; EEG_avg dimension: subj*channel*time</span><br><span class="hljs-keyword">end</span><br><br>save(<span class="hljs-string">&#x27;Group_level_ERP.mat&#x27;</span>,<span class="hljs-string">&#x27;EEG_avg&#x27;</span>);  <span class="hljs-comment">%% save the data of subjects</span><br></code></pre></td></tr></table></figure>
<h2 id="计算组水平">3.2 计算组水平</h2>
<p>计算是所有被试Cz电极所有时间点的组水平平局数据</p>
<p>选取所有被试的Cz电极数据（10，1，3000）进行平均；</p>
<p>数据形状为（1，1，3000）</p>
<p>squeeze后变为（3000，1）</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% part2: plot group-level ERP</span><br><br>Cz = <span class="hljs-number">13</span>; <span class="hljs-comment">% select the channel to plot (display maximum response)</span><br><span class="hljs-built_in">figure</span>;<br><span class="hljs-comment">% 提取所有被试Cz电极所有时间点的数据</span><br><span class="hljs-comment">% mean_data 是Cz电极所有时间点的组水平平局数据</span><br>mean_data = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(EEG_avg(:,Cz,:),<span class="hljs-number">1</span>)); <span class="hljs-comment">%% select the data at Cz, average across subjects, mean_data: 1*3000</span><br><br><span class="hljs-built_in">plot</span>(EEG.times, mean_data,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;linewidth&#x27;</span>, <span class="hljs-number">1.5</span>); <span class="hljs-comment">%% plot the waveforms</span><br>set(gca,<span class="hljs-string">&#x27;YDir&#x27;</span>,<span class="hljs-string">&#x27;reverse&#x27;</span>); <span class="hljs-comment">%% reverse the direction of Y axis</span><br>axis([<span class="hljs-number">-500</span> <span class="hljs-number">1000</span> <span class="hljs-number">-15</span> <span class="hljs-number">10</span>]);  <span class="hljs-comment">%% define the region to display</span><br><span class="hljs-comment">% xlim([-500 1000]);  %% define the region of X axis</span><br><span class="hljs-comment">% ylim([-15 10]); %% define the region of Y axis</span><br>title(<span class="hljs-string">&#x27;Group-level at Cz&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">16</span>); <span class="hljs-comment">%% specify the figure name</span><br>xlabel(<span class="hljs-string">&#x27;Latency (ms)&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">16</span>); <span class="hljs-comment">%% name of X axis</span><br>ylabel(<span class="hljs-string">&#x27;Amplitude (uV)&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">16</span>);  <span class="hljs-comment">%% name of Y axis</span><br><br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day2EEGLAB%E8%84%9A%E6%9C%AC/image-20210318144950274.png" alt="image-20210318144950274"><figcaption aria-hidden="true">image-20210318144950274</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day2EEGLAB%E8%84%9A%E6%9C%AC/image-20210318145006862.png" alt="image-20210318145006862"><figcaption aria-hidden="true">image-20210318145006862</figcaption>
</figure>
<h2 id="绘制特定点地形图">3.3 绘制特定点地形图</h2>
<p>选取波峰波谷附近数据 绘制地形图</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% part3: plot the scalp maps at dominant peaks</span><br><br>N2_peak = <span class="hljs-number">207</span>; P2_peak = <span class="hljs-number">374</span>; <span class="hljs-comment">%% dominant peaks on waveforms</span><br>N2_interval = <span class="hljs-built_in">find</span>((EEG.times&gt;=<span class="hljs-number">197</span>)&amp;(EEG.times&lt;=<span class="hljs-number">217</span>)); <span class="hljs-comment">%% define the N2 intervals [peak-10 peak+10]</span><br>P2_interval = <span class="hljs-built_in">find</span>((EEG.times&gt;=<span class="hljs-number">364</span>)&amp;(EEG.times&lt;=<span class="hljs-number">384</span>)); <span class="hljs-comment">%% define the P2 intervals [peak-10 peak+10]</span><br><br>N2_amplitude = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(EEG_avg(:,:,N2_interval),<span class="hljs-number">3</span>));  <span class="hljs-comment">%% N2 amplitude for each subject and each channel</span><br>P2_amplitude = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(EEG_avg(:,:,P2_interval),<span class="hljs-number">3</span>));   <span class="hljs-comment">%% P2 amplitude for each subject and each channel</span><br><br><span class="hljs-built_in">figure</span>; <br>subplot(<span class="hljs-number">121</span>); topoplot(<span class="hljs-built_in">mean</span>(N2_amplitude),EEG.chanlocs,<span class="hljs-string">&#x27;maplimits&#x27;</span>,[<span class="hljs-number">-15</span> <span class="hljs-number">15</span>]); title(<span class="hljs-string">&#x27;N2 Amplitude&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">16</span>); <span class="hljs-comment">%% N2 scalp map (group-level)</span><br>subplot(<span class="hljs-number">122</span>); topoplot(<span class="hljs-built_in">mean</span>(P2_amplitude),EEG.chanlocs,<span class="hljs-string">&#x27;maplimits&#x27;</span>,[<span class="hljs-number">-15</span> <span class="hljs-number">15</span>]); title(<span class="hljs-string">&#x27;P2 Amplitude&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">16</span>); <span class="hljs-comment">%% P2 scalp map (group-level)</span><br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day2EEGLAB%E8%84%9A%E6%9C%AC/N2_P2_maps.jpg" alt="N2_P2_maps"><figcaption aria-hidden="true">N2_P2_maps</figcaption>
</figure>
<h2 id="绘制感兴趣时间地形图">3.4 绘制感兴趣时间地形图</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% part4: series of scalp mps</span><br><br>time_interval = [<span class="hljs-number">0</span>:<span class="hljs-number">100</span>:<span class="hljs-number">500</span>]; <span class="hljs-comment">%% specify the time intervals to display (to be changed)</span><br><span class="hljs-built_in">figure</span>; <br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(time_interval)<br>    latency_range = [time_interval(<span class="hljs-built_in">i</span>) time_interval(<span class="hljs-built_in">i</span>)+<span class="hljs-number">100</span>]; <span class="hljs-comment">%% lower and upper limits</span><br>    latency_idx = <span class="hljs-built_in">find</span>((EEG.times&gt;=latency_range(<span class="hljs-number">1</span>))&amp;(EEG.times&lt;=latency_range(<span class="hljs-number">2</span>))); <span class="hljs-comment">%% interval of the specific regions</span><br>    Amplitude = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">mean</span>(EEG_avg(:,:,latency_idx),<span class="hljs-number">1</span>),<span class="hljs-number">3</span>)); <span class="hljs-comment">%% 1*channel (averaged across subjects and interval)</span><br>    subplot(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-built_in">i</span>); <br>    topoplot(Amplitude,EEG.chanlocs,<span class="hljs-string">&#x27;maplimits&#x27;</span>,[<span class="hljs-number">-10</span> <span class="hljs-number">10</span>]); <span class="hljs-comment">%% topoplot(Amplitude,EEG.chanlocs);</span><br>    setname = strcat(num2str(latency_range(<span class="hljs-number">1</span>)),<span class="hljs-string">&#x27;--&#x27;</span>,num2str(latency_range(<span class="hljs-number">2</span>)),<span class="hljs-string">&#x27;ms&#x27;</span>); <span class="hljs-comment">%% specify the name of subplots</span><br>    title(setname,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">16</span>); <span class="hljs-comment">%% display the names of subplots</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day2EEGLAB%E8%84%9A%E6%9C%AC/p4.jpg" alt="p4"><figcaption aria-hidden="true">p4</figcaption>
</figure>
<h1 id="matlab-code2">4 matlab code2</h1>
<h2 id="section">4.1</h2>
<p>(sub,ch,times) —-&gt; (sub,con,ch,times)</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab">clear all; clc; close all <br><br><span class="hljs-comment">%%  part1: plot the waveforms for different conditions</span><br><br>Subj = [<span class="hljs-number">1</span>:<span class="hljs-number">10</span>]; <span class="hljs-comment">%% subject number</span><br><br>Cond = &#123;<span class="hljs-string">&#x27;L1&#x27;</span>,<span class="hljs-string">&#x27;L2&#x27;</span>,<span class="hljs-string">&#x27;L3&#x27;</span>,<span class="hljs-string">&#x27;L4&#x27;</span>&#125;; <span class="hljs-comment">%% condition name</span><br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(Subj)<br>     setname = strcat(num2str(<span class="hljs-built_in">i</span>),<span class="hljs-string">&#x27;_LH.set&#x27;</span>); <span class="hljs-comment">%% name of the set file</span><br>     setpath = <span class="hljs-string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day2\Example_data\&#x27;; %% filepath of the set file</span><br><span class="hljs-string">     EEG = pop_loadset(&#x27;</span>filename&#x27;,setname,<span class="hljs-string">&#x27;filepath&#x27;</span>,setpath);  <span class="hljs-comment">%% load the data into EEG</span><br>     EEG = eeg_checkset( EEG );<br>    <br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(Cond)<br>   <br>        EEG_new = pop_epoch( EEG, Cond(<span class="hljs-built_in">j</span>), [<span class="hljs-number">-1</span>  <span class="hljs-number">2</span>], <span class="hljs-string">&#x27;newname&#x27;</span>, <span class="hljs-string">&#x27;Merged datasets pruned with ICA&#x27;</span>, <span class="hljs-string">&#x27;epochinfo&#x27;</span>, <span class="hljs-string">&#x27;yes&#x27;</span>); <span class="hljs-comment">%% epoch by conditions, input to EEG_new</span><br>        EEG_new = eeg_checkset( EEG_new );<br>        EEG_new = pop_rmbase( EEG_new, [<span class="hljs-number">-1000</span>     <span class="hljs-number">0</span>]); <span class="hljs-comment">%% baseline correction for EEG_new</span><br>        EEG_new = eeg_checkset( EEG_new );<br>        EEG_avg(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>,:,:) = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(EEG_new.data,<span class="hljs-number">3</span>));  <span class="hljs-comment">%% average across trials for EEG_new, EEG_avg dimension: subj*cond*channel*time</span><br>    <span class="hljs-keyword">end</span> <br><span class="hljs-keyword">end</span><br><br>Cz = <span class="hljs-number">13</span>; <span class="hljs-comment">%% channel to display</span><br>mean_data = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(EEG_avg(:,:,Cz,:),<span class="hljs-number">1</span>)); <span class="hljs-comment">%% select data at Cz, and average across subjects, mean_data: cond*times</span><br><span class="hljs-built_in">figure</span>; <br><span class="hljs-built_in">plot</span>(EEG.times, mean_data,<span class="hljs-string">&#x27;linewidth&#x27;</span>, <span class="hljs-number">1.5</span>); <span class="hljs-comment">%% plot waveforms for different conditions</span><br>set(gca,<span class="hljs-string">&#x27;YDir&#x27;</span>,<span class="hljs-string">&#x27;reverse&#x27;</span>);  <span class="hljs-comment">%% reverse Y axis</span><br>axis([<span class="hljs-number">-500</span> <span class="hljs-number">1000</span> <span class="hljs-number">-35</span> <span class="hljs-number">25</span>]);  <span class="hljs-comment">%% define the region to display</span><br>title(<span class="hljs-string">&#x27;Group level data&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">16</span>); <br>xlabel(<span class="hljs-string">&#x27;Latency (ms)&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">16</span>);<br>ylabel(<span class="hljs-string">&#x27;Amplitude (uV)&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">16</span>); <br><span class="hljs-built_in">legend</span>(Cond)<br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day2EEGLAB%E8%84%9A%E6%9C%AC/2_1.jpg" alt="2_1"><figcaption aria-hidden="true">2_1</figcaption>
</figure>
<h2 id="section-1">4.2</h2>
<p>(sub,con,ch,times) —- &gt; (sub,con,ch)</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% scalp maps of dominant peak for different conditions</span><br><br>N2_peak = <span class="hljs-number">207</span>; P2_peak = <span class="hljs-number">374</span>; <span class="hljs-comment">%% define the peaks</span><br>N2_interval=<span class="hljs-built_in">find</span>((EEG.times&gt;=<span class="hljs-number">197</span>)&amp;(EEG.times&lt;=<span class="hljs-number">217</span>)); <span class="hljs-comment">%% N2 interval</span><br>P2_interval=<span class="hljs-built_in">find</span>((EEG.times&gt;=<span class="hljs-number">364</span>)&amp;(EEG.times&lt;=<span class="hljs-number">384</span>)); <span class="hljs-comment">%% P2 interval</span><br><br>N2_amplitude=<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(EEG_avg(:,:,:,N2_interval),<span class="hljs-number">4</span>)); <span class="hljs-comment">%% N2 amplitude for each subject, condition, and channels</span><br>P2_amplitude=<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(EEG_avg(:,:,:,P2_interval),<span class="hljs-number">4</span>)); <span class="hljs-comment">%% P2 amplitude for each subject, condition, and channels</span><br><br><span class="hljs-built_in">figure</span>; <span class="hljs-comment">%% divide the panel into 4 rows and 2 colums</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-number">4</span><br>    <span class="hljs-comment">% 提取N2成分该条件的所有被试  当前条件  所有通道的数据</span><br>    N2_data = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(N2_amplitude(:,<span class="hljs-built_in">i</span>,:),<span class="hljs-number">1</span>)); <span class="hljs-comment">%% average across subjects</span><br>    subplot(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-built_in">i</span>); <br>    topoplot(N2_data,EEG.chanlocs,<span class="hljs-string">&#x27;maplimits&#x27;</span>,[<span class="hljs-number">-15</span> <span class="hljs-number">15</span>]); <br>    colorbar;<br>    titlename = strcat(<span class="hljs-string">&#x27;N2 Amplitude &#x27;</span>,Cond(<span class="hljs-built_in">i</span>))<br>    title(titlename ,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">16</span>); <span class="hljs-comment">%% plot N2 scalp map (group-level)</span><br>    <span class="hljs-comment">% 提取P2成分该条件的所有被试  当前条件  所有通道的数据</span><br>    P2_data = <span class="hljs-built_in">mean</span>(P2_amplitude(:,<span class="hljs-built_in">i</span>,:),<span class="hljs-number">1</span>); <span class="hljs-comment">%% average across subjets</span><br>    subplot(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-built_in">i</span>+<span class="hljs-number">4</span>); <br>    topoplot(P2_data,EEG.chanlocs,<span class="hljs-string">&#x27;maplimits&#x27;</span>,[<span class="hljs-number">-15</span> <span class="hljs-number">15</span>]); <br>    colorbar;<br>    title(titlename,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">16</span>); <span class="hljs-comment">%% plot P2 scamp map (group-level)</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day2EEGLAB%E8%84%9A%E6%9C%AC/2_2-1616056566941.jpg" alt="2_2"><figcaption aria-hidden="true">2_2</figcaption>
</figure>
<h1 id="matlab-code3">5 matlab code3</h1>
<p>差异性判断</p>
<p><a href="D:\hexo\source_posts\T检验.md">T检验</a></p>
<h2 id="比较单个个体l3-l4-时间上的差异">5.1 比较单个个体L3 L4 时间上的差异</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab">clear all; clc; close all<br><br>Subj = [<span class="hljs-number">1</span>:<span class="hljs-number">10</span>]; <br>Cond = &#123;<span class="hljs-string">&#x27;L1&#x27;</span>,<span class="hljs-string">&#x27;L2&#x27;</span>,<span class="hljs-string">&#x27;L3&#x27;</span>,<span class="hljs-string">&#x27;L4&#x27;</span>&#125;;<br><br><span class="hljs-comment">%% compute averaged data</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(Subj)<br>    setname = strcat(num2str(<span class="hljs-built_in">i</span>),<span class="hljs-string">&#x27;_LH.set&#x27;</span>); <br>    setpath = <span class="hljs-string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day2\Example_data\&#x27;;</span><br><span class="hljs-string">    EEG = pop_loadset(&#x27;</span>filename&#x27;,setname,<span class="hljs-string">&#x27;filepath&#x27;</span>,setpath); <br>    EEG = eeg_checkset( EEG );<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(Cond)<br>        EEG_new = pop_epoch( EEG, Cond(<span class="hljs-built_in">j</span>), [<span class="hljs-number">-1</span>  <span class="hljs-number">2</span>], <span class="hljs-string">&#x27;newname&#x27;</span>, <span class="hljs-string">&#x27;Merged datasets pruned with ICA&#x27;</span>, <span class="hljs-string">&#x27;epochinfo&#x27;</span>, <span class="hljs-string">&#x27;yes&#x27;</span>); <br>        EEG_new = eeg_checkset( EEG_new );<br>        EEG_new = pop_rmbase( EEG_new, [<span class="hljs-number">-1000</span>     <span class="hljs-number">0</span>]); <br>        EEG_new = eeg_checkset( EEG_new );<br>        EEG_avg(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>,:,:)=<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(EEG_new.data,<span class="hljs-number">3</span>));  <span class="hljs-comment">%% subj*cond*channel*timepoints</span><br>    <span class="hljs-keyword">end</span> <br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">%%  point-by-point paried t-test  across multiple time points </span><br>data_test = <span class="hljs-built_in">squeeze</span>(EEG_avg(:,:,<span class="hljs-number">13</span>,:)); <span class="hljs-comment">%% select the data at Cz, data_test: subj*cond*time</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(data_test,<span class="hljs-number">3</span>)<br>    data_1 = <span class="hljs-built_in">squeeze</span>(data_test(:,<span class="hljs-number">3</span>,<span class="hljs-built_in">i</span>)); <span class="hljs-comment">%% select condition L3 for each time point</span><br>    data_2 = <span class="hljs-built_in">squeeze</span>(data_test(:,<span class="hljs-number">4</span>,<span class="hljs-built_in">i</span>)); <span class="hljs-comment">%% select condition L4 for each time point</span><br>    <span class="hljs-comment">% 检验两个条件的差异  用配对样本T检验  ttest</span><br>    <span class="hljs-comment">% 检验两组样本之间的差异，要做独立样本T检验  ttest2</span><br>    [h p] = ttest(data_1,data_2); <span class="hljs-comment">%% ttest comparison</span><br>    P_ttest(<span class="hljs-built_in">i</span>) = p; <span class="hljs-comment">%% save the p value from ttest</span><br><span class="hljs-keyword">end</span><br><span class="hljs-built_in">figure</span>; <br>subplot(<span class="hljs-number">211</span>); <span class="hljs-built_in">plot</span>(EEG.times,<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(data_test(:,<span class="hljs-number">3</span>,:),<span class="hljs-number">1</span>)),<span class="hljs-string">&#x27;b&#x27;</span>); <span class="hljs-comment">%% plot the average waveform for Condition L3</span><br><span class="hljs-built_in">hold</span> on; <span class="hljs-built_in">plot</span>(EEG.times,<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(data_test(:,<span class="hljs-number">4</span>,:),<span class="hljs-number">1</span>)),<span class="hljs-string">&#x27;r&#x27;</span>); <span class="hljs-comment">%% plot the average waveform for Condition L4</span><br>subplot(<span class="hljs-number">212</span>); <span class="hljs-built_in">plot</span>(EEG.times,P_ttest); ylim([<span class="hljs-number">0</span> <span class="hljs-number">0.05</span>]); <span class="hljs-comment">%%plot the p values from ttest</span><br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day2EEGLAB%E8%84%9A%E6%9C%AC/3_1.jpg" alt="3_1"><figcaption aria-hidden="true">3_1</figcaption>
</figure>
<h2 id="比较不同通道的差异">5.2 比较不同通道的差异</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% point-by-point paried t-test  across multiple channels</span><br><span class="hljs-comment">% 定义感兴趣的成分 --&gt; 锁定成分</span><br>test_idx = <span class="hljs-built_in">find</span>((EEG.times&gt;=<span class="hljs-number">197</span>)&amp;(EEG.times&lt;=<span class="hljs-number">217</span>)); <span class="hljs-comment">%% define the intervals</span><br>data_test = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(EEG_avg(:,:,:,test_idx),<span class="hljs-number">4</span>)); <span class="hljs-comment">%% select the data in [197 217]ms, subj*cond*channel</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(data_test,<span class="hljs-number">3</span>)<br>    data_1 = <span class="hljs-built_in">squeeze</span>(data_test(:,<span class="hljs-number">3</span>,<span class="hljs-built_in">i</span>)); <span class="hljs-comment">%% select condition L3 for each channel</span><br>    data_2 = <span class="hljs-built_in">squeeze</span>(data_test(:,<span class="hljs-number">4</span>,<span class="hljs-built_in">i</span>)); <span class="hljs-comment">%% select condition L4 for each channel</span><br>    [h,p,ci,stats] = ttest(data_1,data_2); <span class="hljs-comment">%% ttest comparison</span><br>    P_ttest2(<span class="hljs-built_in">i</span>) = p; <span class="hljs-comment">%% save the p value from ttest</span><br>    T_ttest2(<span class="hljs-built_in">i</span>) = stats.tstat; <br><span class="hljs-keyword">end</span><br><br><span class="hljs-built_in">figure</span>; <br>subplot(<span class="hljs-number">141</span>); <br>topoplot(<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(data_test(:,<span class="hljs-number">3</span>,:),<span class="hljs-number">1</span>)),EEG.chanlocs,<span class="hljs-string">&#x27;maplimits&#x27;</span>,[<span class="hljs-number">-20</span> <span class="hljs-number">20</span>]); <br>subplot(<span class="hljs-number">142</span>); <br>topoplot(<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(data_test(:,<span class="hljs-number">4</span>,:),<span class="hljs-number">1</span>)),EEG.chanlocs,<span class="hljs-string">&#x27;maplimits&#x27;</span>,[<span class="hljs-number">-20</span> <span class="hljs-number">20</span>]); <br>subplot(<span class="hljs-number">143</span>); <br>topoplot(T_ttest2,EEG.chanlocs); <br>subplot(<span class="hljs-number">144</span>); <br>topoplot(P_ttest2,EEG.chanlocs,<span class="hljs-string">&#x27;maplimits&#x27;</span>,[<span class="hljs-number">0</span> <span class="hljs-number">0.05</span>]); <br><br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day2EEGLAB%E8%84%9A%E6%9C%AC/3_2.jpg" alt="3_2"><figcaption aria-hidden="true">3_2</figcaption>
</figure>
<h2 id="section-2">5.3</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% point-by-point repeated measures of ANOVA across time points</span><br>data_test = <span class="hljs-built_in">squeeze</span>(EEG_avg(:,:,<span class="hljs-number">13</span>,:)); <span class="hljs-comment">%% select the data at Cz, data_test: subj*cond*time</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(data_test,<span class="hljs-number">3</span>)<br>    data_anova = <span class="hljs-built_in">squeeze</span>(data_test(:,:,<span class="hljs-built_in">i</span>)); <span class="hljs-comment">%% select the data at time point i</span><br>    [p, <span class="hljs-built_in">table</span>] = anova_rm(data_anova,<span class="hljs-string">&#x27;off&#x27;</span>);  <span class="hljs-comment">%% perform repeated measures ANOVA</span><br>    P_anova(<span class="hljs-built_in">i</span>) = p(<span class="hljs-number">1</span>); <span class="hljs-comment">%% save the data from ANOVA</span><br><span class="hljs-keyword">end</span><br><br>mean_data = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(data_test,<span class="hljs-number">1</span>)); <span class="hljs-comment">%% dimension: cond*time</span><br><span class="hljs-built_in">figure</span>; <br>subplot(<span class="hljs-number">211</span>);<span class="hljs-built_in">plot</span>(EEG.times, mean_data,<span class="hljs-string">&#x27;linewidth&#x27;</span>, <span class="hljs-number">1.5</span>); <span class="hljs-comment">%% waveform for different condition </span><br>set(gca,<span class="hljs-string">&#x27;YDir&#x27;</span>,<span class="hljs-string">&#x27;reverse&#x27;</span>);<br>axis([<span class="hljs-number">-500</span> <span class="hljs-number">1000</span> <span class="hljs-number">-35</span> <span class="hljs-number">25</span>]);<br>subplot(<span class="hljs-number">212</span>);<span class="hljs-built_in">plot</span>(EEG.times,P_anova); axis([<span class="hljs-number">-500</span> <span class="hljs-number">1000</span> <span class="hljs-number">0</span> <span class="hljs-number">0.05</span>]); <span class="hljs-comment">%% plot the p values from ANOVA</span><br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day2EEGLAB%E8%84%9A%E6%9C%AC/3_3.jpg" alt="3_3"><figcaption aria-hidden="true">3_3</figcaption>
</figure>
<h2 id="section-3">5.4</h2>
<p>提取所有被试 所有条件 所有通道 感兴趣的时间点范围的数据</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% point-by-point repeated measures of ANOVA across channels</span><br><br>test_idx = <span class="hljs-built_in">find</span>((EEG.times&gt;=<span class="hljs-number">197</span>)&amp;(EEG.times&lt;=<span class="hljs-number">217</span>)); <span class="hljs-comment">%% define the intervals</span><br>data_test = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(EEG_avg(:,:,:,test_idx),<span class="hljs-number">4</span>)); <span class="hljs-comment">%% select the data in [197 217]ms, subj*cond*channel</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(data_test,<span class="hljs-number">3</span>)<br>    data_anova = <span class="hljs-built_in">squeeze</span>(data_test(:,:,<span class="hljs-built_in">i</span>)); <span class="hljs-comment">%% select the data at channel i</span><br>    [p, <span class="hljs-built_in">table</span>] = anova_rm(data_anova,<span class="hljs-string">&#x27;off&#x27;</span>);  <span class="hljs-comment">%% perform repeated measures ANOVA</span><br>    P_anova2(<span class="hljs-built_in">i</span>) = p(<span class="hljs-number">1</span>); <span class="hljs-comment">%% save the data from ANOVA</span><br>    F_anova2(<span class="hljs-built_in">i</span>) = <span class="hljs-built_in">table</span>&#123;<span class="hljs-number">2</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">end</span><br><span class="hljs-built_in">figure</span>; <br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-number">4</span><br>    subplot(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-built_in">i</span>); <br>    topoplot(<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(data_test(:,<span class="hljs-built_in">i</span>,:),<span class="hljs-number">1</span>)),EEG.chanlocs,<span class="hljs-string">&#x27;maplimits&#x27;</span>,[<span class="hljs-number">-20</span> <span class="hljs-number">20</span>]); <br><span class="hljs-keyword">end</span><br><span class="hljs-comment">% subplot(1,5,5); topoplot( P_anova2,EEG.chanlocs,&#x27;maplimits&#x27;,[0 0.05]); </span><br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>); topoplot( F_anova2,EEG.chanlocs); <br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day2EEGLAB%E8%84%9A%E6%9C%AC/3_4.jpg" alt="3_4"><figcaption aria-hidden="true">3_4</figcaption>
</figure>
<p>小结：</p>
<p>时域分析 针对ERP</p>
]]></content>
      <categories>
        <category>脑电</category>
      </categories>
      <tags>
        <tag>EEGLAB</tag>
      </tags>
  </entry>
  <entry>
    <title>Day5MicroState analysis</title>
    <url>/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day5MicroState-analysis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="basic-knowledge">Basic Knowledge</h1>
<p>电极数量&gt;18</p>
<ol type="1">
<li>Global Field Power (GFP): 某个<strong>时间点</strong>地形图<strong>所有电极</strong>电压值的<strong>标准差</strong>，用于描述某个地形图电场的<strong>强度</strong></li>
</ol>
<p><span class="math display">\[
GFP = \sqrt{\sum_{i=1}^{N} (u_i - \hat{u})^2/N}
\]</span></p>
<span id="more"></span>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 计算ERP的GFP  由于相对单个被试而言，总平均的ERP波形信噪比高</span><br><span class="hljs-comment">%故对总平均ERP波形计算GFP</span><br><br><span class="hljs-comment">% step1 使用pop_loadset 载入所有20个数据</span><br><br><span class="hljs-comment">% step2  使用Edit 》 Append dataset  拼接20 个数据</span><br>  <br>ERPdata = <span class="hljs-built_in">mean</span>(EEG.data,<span class="hljs-number">3</span>);  <span class="hljs-comment">%59  3000  </span><br>GFPdata = std(ERPdata,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);  <span class="hljs-comment">%1   3000</span><br><br><span class="hljs-comment">% 绘制</span><br><span class="hljs-built_in">figure</span>;<br>subplot(<span class="hljs-number">121</span>);<span class="hljs-built_in">plot</span>(EEG.times,ERPdata);<br>subplot(<span class="hljs-number">122</span>);<span class="hljs-built_in">plot</span>(EEG.times,GFPdata);<br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day5MicroState-analysis/EEG_GFP.png" alt="EEG_GFP"><figcaption aria-hidden="true">EEG_GFP</figcaption>
</figure>
<p>峰处 信噪比高</p>
<p>谷处 信噪比低</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day5MicroState-analysis/image-20210321095828890.png" alt="image-20210321095828890"><figcaption aria-hidden="true">image-20210321095828890</figcaption>
</figure>
<ul>
<li>谷”意味着一种地形图向另一种地 形图过渡</li>
<li>比较两个地形图相似度之前，将两个地形图分别除以其GFP， 得到<strong>标准化</strong>的地形图</li>
</ul>
<p><strong>K-mean</strong></p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day5MicroState-analysis/image-20210321110743530.png" alt="image-20210321110743530"><figcaption aria-hidden="true">image-20210321110743530</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day5MicroState-analysis/image-20210321113419585.png" alt="image-20210321113419585"><figcaption aria-hidden="true">image-20210321113419585</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day5MicroState-analysis/image-20210321115239769.png" alt="image-20210321115239769"><figcaption aria-hidden="true">image-20210321115239769</figcaption>
</figure>
<p>静息态EEG的Microstate分析与ERP的Microstate分析有哪些差异？</p>
<ol type="1">
<li>地形图的极性</li>
<li>选取所有时刻点的地形图？GFP峰处的地形图</li>
<li>Microstate class的数目及其意义</li>
<li>可提供的指标的差异</li>
</ol>
<p>EEG 微状态分析</p>
<ol type="1">
<li>电极数目一样</li>
<li>顺序一样</li>
<li>对应空间坐标</li>
<li>采样率一致</li>
</ol>
<p>静息态EEG分析： 示例数据为cleaned_rest_data 使用的Microstate0.3插件（仅适用于静息态微状态分析，不适用ERP微状态分析） 使用的脚本是EEG_microstate_analysis.m</p>
<p>Microstate0.3插件的安装：将Microstate0.3文件夹复制到eeglab的plugins文件夹中，并通过set path加入路径</p>
<p>在使用上述插件和脚本处理数据前： （1）数据做好常规的预处理操作，分段不分段均可。在静息态EEG microstate分析中，需要在做完常规的预处理后，进而两个额外的预处理操作：第一个是全脑平均参考；第二个是带通滤波1~40 Hz或 2~20 Hz（居多）。在脚本EEG_microstate_analysis.m中包括上述两个操作（全脑平均参考和2~20 Hz滤波），因此这两个操作你自己不需要去做； （2）如示例数据那样组织好数据，每个条件或每个组别下的所有被试各一个文件夹 如group1和group2各一个文件夹 （3）反复检查预处理后的数据的质量，特别是不能有坏电极、将采集非脑信号的电极如眼电乳突删掉</p>
<p><strong>运行步骤：</strong></p>
<ol type="1">
<li><p>将EEG_microstate_analysis.m所在的路径设置为current folder</p></li>
<li><p>运行上述脚本 把该脚本拖进command window 窗口1：指定某个条件或组别的数据所在的文件夹 如group1 窗口2：该数据所属的条件名称 本例EC 窗口3：指定数据所属的组别 如group1 窗口4：microstate分析生成的结果保存的路径 注意：该路径不要与脑电数据的路径相同也就是不要与窗口1路径相同 窗口5：是否需要删掉某些电极 是1否0 输入1会后续要求你输入哪些电极 本例输入0</p>
<p>窗口5后载入数据并进行额外处理：平均参考、带通滤波2~20 Hz</p>
<p>窗口6：是否从GFP峰处选取原始图 是1否0 本例输入1（一般建议） 窗口7：是否忽略地形图极性 是1否0 本例输入1 窗口8：使用何种方法进行聚类 AAHC输入1 k-mean输入0 本例输入1 窗口9：选择k-means的话需要指定重新开始的数目，比如100 选择AAHC的话，这里输入1</p>
<p>microstate0.3插件默认分为4类</p>
<p>​ 窗口9后对group1下的15个人的数据进行聚类，弹出组平均水平的4个map，此处需要指定4个地形图的顺序 顺序需要跟经典文献里面的顺序相一致 点man. sort 输入顺序 比如3 1 2 4 调整好顺序后，点close 接着要求我们指定是不是按照上述地形图的顺序，对每个人的4个地形图也重新排序，点yes</p>
<p>窗口10：判断每个时间点地形图属于哪一类的时候，是否是依据GFP峰处地形图还是每个时间点的地形图 一般是选择GFP峰处 本例可输入1</p></li>
</ol>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%%绘制单个被试的4个map</span><br>EEG = pop_loadset(<span class="hljs-string">&#x27;filename&#x27;</span>,<span class="hljs-string">&#x27;sub01.set&#x27;</span>,<span class="hljs-string">&#x27;filepath&#x27;</span>,<span class="hljs-string">&#x27;C:\Users\admin\Desktop\21EEG_day5\1EEGmicrostate\&#x27;);</span><br><span class="hljs-string">maps = EEG.msinfo.MSMaps(4).Maps;</span><br><span class="hljs-string">maps(3,:) = maps(3,:) * (-1); % 因为该被试map3的极性与经典文献里面的极性相反</span><br><span class="hljs-string"></span><br><span class="hljs-string">figure;</span><br><span class="hljs-string">for i = 1:4</span><br><span class="hljs-string">    subplot(2,2,i);</span><br><span class="hljs-string">    topoplot(maps(i,:), EEG.chanlocs);</span><br><span class="hljs-string">end</span><br><span class="hljs-string"></span><br><span class="hljs-string">%% 绘制组平均水平的4个 map</span><br><span class="hljs-string">EEG = pop_loadset(&#x27;</span>filename&#x27;,<span class="hljs-string">&#x27;GrandMeanECgroup1.set&#x27;</span>,<span class="hljs-string">&#x27;filepath&#x27;</span>,<span class="hljs-string">&#x27;C:\Users\admin\Desktop\24EEG_day5\1EEGmicrostate\&#x27;);</span><br><span class="hljs-string">maps_group = EEG.msinfo.MSMaps(4).Maps;</span><br><span class="hljs-string">maps_group(3,:) = maps_group(3,:) * (-1); % 因为组水平map3的极性与经典文献里面的极性相反</span><br><span class="hljs-string"></span><br><span class="hljs-string">figure;</span><br><span class="hljs-string">for i = 1:4</span><br><span class="hljs-string">    subplot(2,2,i);</span><br><span class="hljs-string">    topoplot(maps_group(i,:), EEG.chanlocs);</span><br><span class="hljs-string">end</span><br></code></pre></td></tr></table></figure>
<p>个体</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day5MicroState-analysis/个体.png" alt="个体"><figcaption aria-hidden="true">个体</figcaption>
</figure>
<p>组平均</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day5MicroState-analysis/组平均.png" alt="组平均"><figcaption aria-hidden="true">组平均</figcaption>
</figure>
<p><strong>文件</strong></p>
<ul>
<li><p>ResultsFromGrandGrandMeanTemplate.csv：判断每个时刻点地形图属于哪一类的时候，依据组平均水平的4个图</p></li>
<li><p>ResultsFromIndividualTemplates.csv：判断每个时刻点地形图属于哪一类的时候，依据单个被试的4个图</p>
<p>上述两个文件中的内容，文章中均可以用 用一个就行</p>
<p><strong>指标</strong></p></li>
<li><p>ExpVar：将数据分为4类时，四类地形图解释的方差比例 一般应70%~80%左右‘’</p></li>
<li><p>Duration_1~Duration_4：四个微状态类别的平均持续时间 单位秒</p></li>
<li><p>MeanDuration：上述四个指标的平均数</p></li>
<li><p>Occurrence_1~Occurrence_4：四个微状态类别单位时间内出现的次数 单位：次/秒</p></li>
<li><p>MeanOccurrence：上述四个的加和</p></li>
<li><p>Contribution_1~Contribution_4：四个微状态类别涵盖的时间百分比</p></li>
<li><p>OrgTM:4个微状态类别之间相互转换的概率 12个概率值</p></li>
<li><p>DeltaTM: 消除了各个微状态类别Occurrence不一样 对转换概率的影响，等于OrgTM和ExpTM 的差值 统计分析中，OrgTM和ExpTM均可</p></li>
</ul>
<p><strong>上述指标的统计分析思路：</strong></p>
<ol type="1">
<li><p>ExpVar指标文章里面报告被试间的均值和标准差、取值范围即可 不需要统计</p></li>
<li><p>Duration_1— Duration_4、Occurrence_1— Occurrence_4、Contribution_1~Contribution_4 统计分析时，需要将微状态类别作为自变量（组内） 假如是单因素2水平的组间实验设计，进行2（组别，两组人）*4（微状态类别，4个类别）方差分析 MeanDuration、MeanOccurrence不需要进行统计分析</p></li>
<li><p>OrgTM 或 DeltaTM 12个概率<br>
假如是单因素2水平的组间实验设计，进行12个独立样本 t 检验，接着需要使用FDR等方法进行多重比较校正</p>
<p><strong>ERP的微状态分析：</strong> CARTOOL软件可对静息态EEG也可以对ERP进行微状态分析，且可鉴别最佳的类别数目 上述eeglab插件仅适用于静息态EEG，且不能鉴别最佳类别数目（强制分为4类）</p>
<p>CARTOOL软件：不好用、难学、数据大一些会崩溃（降低采样率到125 Hz或250 Hz、电极数目降低）、运行慢</p>
<p>CARTOOL软件不能识别 eeglab格式的数据，需要把数据转存为brain vison(BP)格式 File &gt;&gt; Export &gt;&gt; Write Brain Vis. exchange format file brain vison(BP)格式每个数据有三个文件：dat文件 vhdr文件和 vmrk文件</p>
<p>Cartool 软件：Tools &gt;&gt; EEG and tracks &gt;&gt; Segmentation of EEG files</p>
<p>ep文件为一个微状态类别数目*电极的二维矩阵，可用于绘制每个微状态类别的地形图（借助eeglab中的topoplot函数绘制） seg文件：第三列存储的是每个时间点属于什么微状态类别 0表示什么类别都不属于</p></li>
</ol>
]]></content>
      <categories>
        <category>脑电</category>
      </categories>
      <tags>
        <tag>MicroState-analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Day5night</title>
    <url>/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day5night/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于傅里叶变换，短时傅里叶变换，小波变换的优缺点及应用，</p>
<p>以及BrainStorm3在EEGLAB的使用</p>
<span id="more"></span>
<h2 id="傅里叶变换">1傅里叶变换</h2>
<p>Fourier变换作为一种全局性的变化，有一定的局限性，如不具备局部化分析能力、不能分析非平稳信号等。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day5night/image-20210321184038242.png" alt="image-20210321184038242"><figcaption aria-hidden="true">image-20210321184038242</figcaption>
</figure>
<h2 id="短时傅里叶变换">2 短时傅里叶变换</h2>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day5night/image-20210321184229922.png" alt="image-20210321184229922"><figcaption aria-hidden="true">image-20210321184229922</figcaption>
</figure>
<p>加窗 得到时频图</p>
<p>窄窗口时间分辨率高、频率分辨率低，</p>
<p>宽窗口时间分辨率低、频率分辨率高。</p>
<p>对于时变的非稳态信号，高频适合小窗口，低频适合大窗口。</p>
<p>然而STFT的窗口是固定的，在一次STFT中宽 度不会变化，所以STFT还是无法满足非稳态信号变化的频率的需求。</p>
<h2 id="小波变换">3 小波变换</h2>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day5night/image-20210321185809723.png" alt="image-20210321185809723"><figcaption aria-hidden="true">image-20210321185809723</figcaption>
</figure>
<p>a 越大 ，小波越长， 频率越低</p>
<p>自适应性： 低频 宽窗 / 高频 窄窗</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day5night/image-20210321185640847.png" alt="image-20210321185640847"><figcaption aria-hidden="true">image-20210321185640847</figcaption>
</figure>
<ol type="1">
<li>小波系数不仅像傅里叶系数那样，是随频率不同而变化的，而且对于同一个频率指标，在不同时刻，小波系数也是不同的。</li>
<li>求各频率水平不同时刻的小波系数时，只用到该时刻附近的局部信息</li>
<li>小波做到了‘时间--频率窗’宽度可变，检测高频信号时宽度变窄，低频信号时变宽</li>
</ol>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day5night/image-20210321190059990.png" alt="image-20210321190059990"><figcaption aria-hidden="true">image-20210321190059990</figcaption>
</figure>
<p>时频信息</p>
<h2 id="brainstorm3">4 BrainStorm3</h2>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day5night/image-20210321191405236.png" alt="image-20210321191405236"><figcaption aria-hidden="true">image-20210321191405236</figcaption>
</figure>
]]></content>
      <categories>
        <category>脑电</category>
      </categories>
      <tags>
        <tag>小波变换</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow 模型保存</title>
    <url>/2021/03/13/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Tensorflow%20%E6%A8%A1%E5%9E%8B%E4%BF%9D%E5%AD%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于tensorflow使用的一些代码</p>
<span id="more"></span>
<h2 id="ipynb转换slides">1. ipynb转换slides</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">!jupyter nbconvert lesson07.ipynb --to slides --post serve<br></code></pre></td></tr></table></figure>
<h2 id="模型保存">2. 模型保存</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">network.save(<span class="hljs-string">&#x27;model.h5&#x27;</span>)<br>print(<span class="hljs-string">&#x27;saved total model.&#x27;</span>)<br></code></pre></td></tr></table></figure>
<h2 id="权值保存">3. 权值保存</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">network.save_weights(<span class="hljs-string">&#x27;weights.ckpt&#x27;</span>)<br>print(<span class="hljs-string">&#x27;saved weights.&#x27;</span>)<br></code></pre></td></tr></table></figure>
<h2 id="模型加载">4. 模型加载</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">network = tf.keras.models.load_model(<span class="hljs-string">&#x27;model.h5&#x27;</span>, <span class="hljs-built_in">compile</span>=<span class="hljs-literal">False</span>)<br>print(<span class="hljs-string">&#x27;loaded model from file.&#x27;</span>)<br></code></pre></td></tr></table></figure>
<h2 id="权值加载">5. 权值加载</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">network.load_weights(<span class="hljs-string">&#x27;weights.ckpt&#x27;</span>)<br>print(<span class="hljs-string">&#x27;loaded weights!&#x27;</span>)<br></code></pre></td></tr></table></figure>
<h2 id="tensorboard">6. TensorBoard</h2>
<h3 id="在model.fit中使用tensorboard">在Model.fit()中使用TensorBoard</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义日志目录，必须是启动web应用时指定目录的子目录，建议使用日期时间作为子目录名</span><br>log_dir=<span class="hljs-string">&quot;logs/&quot;</span> + datetime.datetime.now().strftime(<span class="hljs-string">&quot;%Y%m%d-%H%M%S&quot;</span>)<br><br>tensorboard_callback = tf.keras.callbacks.TensorBoard(<br>    log_dir=<span class="hljs-string">&#x27;logs&#x27;</span>,<br>    histogram_freq=<span class="hljs-number">1</span>, profile_batch=<span class="hljs-number">2</span>,<br>    write_graph=<span class="hljs-literal">True</span>,write_images=<span class="hljs-literal">True</span>,<br>    embeddings_freq=<span class="hljs-number">0</span>, embeddings_layer_names=<span class="hljs-literal">None</span>,<br>    embeddings_metadata=<span class="hljs-literal">None</span>, embeddings_data=<span class="hljs-literal">None</span>, update_freq=<span class="hljs-number">500</span><br>) <span class="hljs-comment"># 定义TensorBoard对象</span><br><br>model.fit(x=x_train, <br>          y=y_train, <br>          epochs=<span class="hljs-number">5</span>, <br>          validation_data=(x_test, y_test), <br>          callbacks=[tensorboard_callback])  <span class="hljs-comment"># 将定义好的TensorBoard对象作为回调传给fit方法，这样就将TensorBoard嵌入了模型训练过程</span><br></code></pre></td></tr></table></figure>
<h3 id="在其他功能函数中嵌入tensorboard">在其他功能函数中嵌入TensorBoard</h3>
<h4 id="tf.summary的基本步骤">tf.summary的基本步骤</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># （1）创建一个 SummaryWriter 对象，生成的日志将储存到 &quot;./mylogs&quot; 路径中</span><br>writer = tf.summary.create_file_writer(<span class="hljs-string">&quot;./logs&quot;</span>)  <span class="hljs-comment">#</span><br><span class="hljs-comment"># （2）使用 writer_1 记录with包裹的context中，进行 summary 写入的操作</span><br><span class="hljs-keyword">with</span> writer.as_default():  <br>    <span class="hljs-keyword">for</span> step <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):    <br>        <span class="hljs-comment"># other model code would go here    </span><br>        <span class="hljs-comment"># （3）将scalar(&quot;loss&quot;, loss, step)写入 summary </span><br>        tf.summary.scalar(<span class="hljs-string">&quot;loss&quot;</span>, loss, step=step)      <br>        <span class="hljs-comment"># （4）强制 SummaryWriter 将缓存中的数据写入到日志</span><br>        writer.flush()  <br></code></pre></td></tr></table></figure>
<h4 id="查看graph和profile信息">查看Graph和Profile信息</h4>
<p>由于tensorflow2.0取消了sess和初始静态图，所以无法使用像1.x版本，直接将sess.graph添加进tensorboard，所以需要使用trace_on进行记录。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">writer = tf.summary.create_file_writer(log_dir)<br>tf.summary.trace_on(graph=<span class="hljs-literal">True</span>, profiler=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 开启Trace，可以记录图结构和profile信息</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">进行训练</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 最后将统计信息写入日志</span><br><span class="hljs-keyword">with</span> writer.as_default():<br>    tf.summary.trace_export(name=<span class="hljs-string">&quot;model_trace&quot;</span>, step=<span class="hljs-number">0</span>, profiler_outdir=log_dir)    <span class="hljs-comment"># 保存Trace信息到文件</span><br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Day6source analysis</title>
    <url>/2021/03/22/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day6source-analysis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>脑电信号的溯源分析</p>
<p><span id="more"></span></p>
]]></content>
      <categories>
        <category>脑电</category>
      </categories>
      <tags>
        <tag>source-analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>T检验</title>
    <url>/2021/03/18/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/T%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是t检验">什么是T检验？</h2>
<p>T检验是假设检验的一种，又叫student t检验（Student’s t test），主要用于样本含量较小（例如n&lt;30），总体标准差σ未知的正态分布资料。 T检验用于检验两个总体的均值差异是否显著。</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>数理统计</category>
      </categories>
      <tags>
        <tag>检验</tag>
      </tags>
  </entry>
  <entry>
    <title>数据科学中的距离度量</title>
    <url>/2021/03/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>许多算法，无论是有监督的还是无监督的，都使用<strong>距离度量</strong>。这些度量（例如欧几里得距离或余弦相似度）通常可以在算法中找到，例如k-NN，UMAP，HDBSCAN等。</p>
<blockquote>
<p><strong>知道何时使用哪种距离量度可以帮助您从分类不正确的模型转变为准确的模型</strong></p>
</blockquote>
<span id="more"></span>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325154539773.png" alt="image-20210325154539773"><figcaption aria-hidden="true">image-20210325154539773</figcaption>
</figure>
<h1 id="欧氏距离">1 欧氏距离</h1>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325154734583.png" alt="image-20210325154734583"><figcaption aria-hidden="true">image-20210325154734583</figcaption>
</figure>
<h2 id="概念">概念：</h2>
<p>使用勾股定理从这些点的笛卡尔坐标计算出距离。 <span class="math display">\[
D(x,y)  = \sqrt{\sum_{i=1}^{n}(x_i - y_i)^2}
\]</span></p>
<h2 id="缺点">缺点：</h2>
<p>尽管这是一种常用的距离度量，但欧几里得距离并不是比例不变的，这意味着所计算的距离可能会根据要素的单位而发生偏斜。通常，在使用此距离度量之前，需要对数据进行<strong>归一化</strong>。</p>
<p>此外，随着数据维数的增加，欧几里得距离的用处也越来越小。这与维数的诅咒有关，维数的诅咒与高维空间不能像我们直观地期望的二维或3维空间那样起作用。</p>
<h2 id="用例">用例：</h2>
<p>当您拥有低维数据并且向量的大小非常重要时，欧几里得距离的效果非常好。如果在低维数据上使用欧几里得距离，则kNN和HDBSCAN之类的方法将显示出出色的结果。</p>
<p>尽管已开发出许多其他措施来解决欧几里得距离的缺点，但出于充分的原因，它仍然是最常用的距离措施之一。它使用起来非常直观，易于实现，并且在许多用例中都显示出了极好的效果。</p>
<h1 id="余弦相似度">2 余弦相似度</h1>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325155301128.png" alt="image-20210325155301128"><figcaption aria-hidden="true">image-20210325155301128</figcaption>
</figure>
<h2 id="定义">定义</h2>
<p><span class="math display">\[
D(x,y) = cos(\theta) = \frac{x . y}{||x|| \ ||y||}
\]</span></p>
<p>方向完全相同的两个向量的余弦相似度为1，而两个彼此相对的向量的相似度为-1。注意，它们的大小并不重要，因为这是方向的度量。</p>
<h2 id="缺点-1">缺点</h2>
<p>余弦相似度的主要缺点之一是<strong>不考虑向量的大小，仅考虑其方向</strong>。实际上，这意味着没有充分考虑值的差异。例如，如果使用推荐系统，则余弦相似度不会考虑不同用户之间的评分等级差异。</p>
<h2 id="用例-1">用例</h2>
<p><strong>当我们拥有高维数据并且向量的大小不重要时，通常会使用余弦相似度。</strong>对于文本分析，当数据由字数表示时，此度量非常常用。例如，当一个单词在一个文档中比另一个单词更频繁出现时，这并不一定意味着一个文档与该单词更相关。可能是文件长度不均匀，计数的重要性不太重要。然后，我们最好使用忽略幅度的余弦相似度。</p>
<h1 id="海明距离">3 海明距离</h1>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325155646742.png" alt="image-20210325155646742"><figcaption aria-hidden="true">image-20210325155646742</figcaption>
</figure>
<h2 id="定义-1">定义</h2>
<p>汉明距离是两个向量之间不同的值的数量。它通常用于比较两个相等长度的二进制字符串。它也可以用于字符串，通过计算彼此不同的字符数来比较它们彼此之间的相似程度。</p>
<h2 id="缺点-2">缺点</h2>
<p>当两个向量的长度不相等时，很难使用汉明距离。</p>
<p>当幅度是重要指标时，建议不要使用此距离指标。</p>
<h2 id="用例-2">用例</h2>
<p>典型的用例包括通过计算机网络传输数据时的错误纠正/检测。它可以用来确定二进制字中失真比特的数量，以作为估计误差的一种方法。</p>
<p>此外，可以使用汉明距离来<strong>测量分类变量之间的距离</strong>。</p>
<h1 id="曼哈顿距离">4 曼哈顿距离</h1>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325155834358.png" alt="image-20210325155834358"><figcaption aria-hidden="true">image-20210325155834358</figcaption>
</figure>
<p>定义</p>
<p>曼哈顿距离（通常称为的士距离或城市街区距离）计算实值向量之间的距离。想象一下在统一的网格上描述对象的矢量，例如棋盘。然后，曼哈顿距离是指两个向量只能以<strong>直角移动时的距离</strong>。计算距离时不涉及对角线运动。 <span class="math display">\[
D(x,y) =\sum_{i=1}^{k}|x_i-y_i|
\]</span></p>
<h2 id="缺点-3">缺点</h2>
<p>尽管曼哈顿距离对于<a href="https://www.quora.com/What-is-the-difference-between-Manhattan-and-Euclidean-distance-measures">高维数据</a>似乎还可以，但是它比欧几里德距离直观的程度要差一些，特别是在使用高维数据时。</p>
<p>此外，由于它不是最短的路径，因此比欧几里得距离更有可能提供更高的距离值。这不一定会带来问题，但是您应该考虑这一点。</p>
<h2 id="用例-3">用例</h2>
<p>当您的数据集具有离散和/或二进制属性时，Manhattan似乎工作得很好，因为它考虑了可以在这些属性的值内实际采用的路径。以欧几里得距离为例，实际上可能不可能在两个向量之间创建一条直线。</p>
<h1 id="切比雪夫距离">5 切比雪夫距离</h1>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325160127526.png" alt="image-20210325160127526"><figcaption aria-hidden="true">image-20210325160127526</figcaption>
</figure>
<h2 id="定义-2">定义：</h2>
<p>切比雪夫距离定义为沿着任何坐标维度的两个向量之间的最大差值。换句话说，它只是<strong>一个轴上的最大距离</strong>。由于其性质，通常将其称为棋盘距离，因为国王从一个方格到另一个方格所需的最小移动次数等于切比雪夫距离。 <span class="math display">\[
D(x,y) = \max_i(|x_i-y_i|)
\]</span></p>
<h2 id="缺点-4">缺点</h2>
<p>切比雪夫（Chebyshev）通常用于非常特殊的用例，这使得很难用作通用距离度量标准，例如欧几里得距离或余弦相似度。因此，建议仅在绝对确定它适合您的用例时才使用它。</p>
<h2 id="用例-4">用例</h2>
<p>如前所述，切比雪夫距离可用于提取从一个正方形移动到另一个正方形所需的最小移动次数。此外，在允许无限制八向移动的游戏中，这可能是一种有用的措施。</p>
<h1 id="闵可夫斯基">6 闵可夫斯基</h1>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325160639097.png" alt="image-20210325160639097"><figcaption aria-hidden="true">image-20210325160639097</figcaption>
</figure>
<h2 id="定义-3">定义</h2>
<p>Minkowski距离比大多数距离更复杂。它是在范数向量空间（n维实数空间）中使用的度量，这意味着它可以在距离可以表示为具有长度的向量的空间中使用。</p>
<p>该措施具有三个要求：</p>
<ul>
<li><strong>零向量</strong>—零向量的长度为零，而每个其他向量的长度为正。例如，如果我们从一个地方旅行到另一个地方，则该距离始终为正。但是，如果我们从一个地方到自己的地方旅行，则该距离为零。</li>
<li><strong>标量因数</strong>—当向量与正数相乘时，其长度会更改，同时保持其方向。例如，如果我们在一个方向上走了一定距离并添加了相同的距离，则方向不会改变。</li>
<li><strong>三角形不等式</strong>—两点之间的最短距离是一条直线。</li>
</ul>
<p>Minkowski距离的公式如下所示：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/0_UbbyH2MUPb5ZBa64.gif" alt="0_UbbyH2MUPb5ZBa64"><figcaption aria-hidden="true">0_UbbyH2MUPb5ZBa64</figcaption>
</figure>
<p>关于此距离度量最有趣的是使用参数 <strong>p</strong>。我们可以使用此参数来操纵距离度量，使其与其他度量极为相似。</p>
<p>常见值的<code>p</code>是：</p>
<ul>
<li>p = 1 —曼哈顿距离</li>
<li>p = 2 —欧几里德距离</li>
<li>p = <em>∞—</em>切比雪夫距离</li>
</ul>
<h2 id="缺点-5">缺点</h2>
<p>Minkowski与它们所代表的距离度量具有相同的缺点，因此对曼哈顿，欧几里得和契比雪夫距离等度量的良好理解非常重要。</p>
<p>此外，该参数<code>p</code>实际上可能很麻烦，因为根据您的用例，找到正确的值在计算上可能是非常低效的。</p>
<h2 id="用例-5">用例</h2>
<p>好处<code>p</code>是可以对其进行迭代并找到最适合您的用例的距离度量。它为您的距离度量提供了极大的灵活性，如果您熟悉<code>p</code>并且有很多距离度量，那么这将是一个巨大的好处。</p>
<h1 id="贾卡德指数">7 贾卡德指数</h1>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325161025734.png" alt="image-20210325161025734"><figcaption aria-hidden="true">image-20210325161025734</figcaption>
</figure>
<p>Jaccard索引（或“联合上的交集”）是用于计算样本集的相似性和多样性的度量。它是交集的大小除以样本集并集的大小。</p>
<p>实际上，它是集合之间<strong>相似实体的总数除以实体的总数</strong>。例如，如果两个集合共有1个相同的实体，并且总共有5个不同的实体，则Jaccard指数将为1/5 = 0.2。</p>
<p>要计算Jaccard距离，我们只需从1中减去Jaccard指数：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/0_3fcCoSZUOxa7vzon.gif" alt="0_3fcCoSZUOxa7vzon"><figcaption aria-hidden="true">0_3fcCoSZUOxa7vzon</figcaption>
</figure>
<h2 id="缺点-6">缺点</h2>
<p>Jaccard索引的主要缺点是它受数据大小的很大影响。大型数据集可能会对索引产生很大影响，因为它可以显着增加联合并同时保持相交相似。</p>
<h2 id="用例-6">用例</h2>
<p>Jaccard索引通常用于使用二进制或二进制数据的应用程序中。当您拥有一个预测图像片段（例如汽车）的深度学习模型时，可以使用Jaccard索引来计算给定真实标签的预测片段的准确性。</p>
<p>类似地，它可以用于文本相似性分析中，以测量文档之间有多少单词选择重叠。因此，它可以用来比较模式集。</p>
<h1 id="haversine">8 Haversine</h1>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325161300349.png" alt="image-20210325161300349"><figcaption aria-hidden="true">image-20210325161300349</figcaption>
</figure>
<p>Haversine距离是指球面上两个点之间的经度和纬度。它与欧几里得距离非常相似，因为它可以计算两点之间的最短线。主要区别在于不可能有直线，因为这里的假设是两个点都在一个球面上。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/0_ZZCAEu9KsHOfl0Kr.gif" alt="0_ZZCAEu9KsHOfl0Kr"><figcaption aria-hidden="true">0_ZZCAEu9KsHOfl0Kr</figcaption>
</figure>
<h2 id="缺点-7">缺点</h2>
<p>这种距离测量的一个缺点是，假定这些点位于一个<strong>球体上</strong>。实际上，这种情况很少出现，例如，地球不是完美的圆形，在某些情况下可能会使计算变得困难。取而代之的是，将目光转向假定椭圆形的<strong>Vincenty距离</strong>。</p>
<h2 id="用例-7">用例</h2>
<p>如您所料，Haversine距离通常用于导航。例如，您可以使用它来计算两个国家之间的飞行距离。请注意，如果距离本身不那么大，则不太适合。曲率不会产生太大的影响。</p>
<h1 id="sørensen-dice-index">9 Sørensen-Dice Index</h1>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325161655486.png" alt="image-20210325161655486"><figcaption aria-hidden="true">image-20210325161655486</figcaption>
</figure>
<p>Sørensen-Dice索引与Jaccard索引非常相似，因为它可以测量样本集的相似性和多样性。尽管它们的计算方式相似，但索伦森-迪斯指数却更直观一些，因为可以将其视为两组之间重叠的百分比，该值介于0和1之间：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/0_N5xU3llTz-MKt9E8%20(1).gif" alt="0_N5xU3llTz-MKt9E8 (1)"><figcaption aria-hidden="true">0_N5xU3llTz-MKt9E8 (1)</figcaption>
</figure>
<h2 id="缺点-8">缺点</h2>
<p>像Jaccard索引一样，它们都夸大了几乎没有或没有地面真理肯定集的集合的重要性。结果，它可以支配多组平均得分。它按与相关集合的大小成反比的方式对每个项目加权，而不是平等地对待它们。</p>
<h2 id="用例-8">用例</h2>
<p>用例与Jaccard索引相似（如果不同）。您会发现它通常用于图像分割任务或文本相似性分析中。</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>距离度量</tag>
      </tags>
  </entry>
  <entry>
    <title>典型相关分析CCA</title>
    <url>/2021/03/14/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%85%B8%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%88%86%E6%9E%90(CCA)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>典型相关分析(Canonical Correction Analysis)是最常用的数据挖掘关联算法之一。</p>
<p>比如我们拿到两组数据，第一组是人身高和体重的数据，第二组是对应的跑步能力和跳远能力的数据。那么我们能不能说这两组数据是相关的呢？CCA可以帮助我们分析这个问题。</p>
<span id="more"></span>
<h2 id="cca概述">1.CCA概述</h2>
<p>在数理统计里面，假设有两组一维的数据集X和Y，则<code>相关系数ρ</code>的定义为: <span class="math display">\[
\rho(X,Y) = \frac{cov(X,Y)}{\sqrt{D(X)}\sqrt{D(Y)}}
\]</span> ​ 其中<span class="math inline">\(cov(X,Y)\)</span> 是X，Y的协方差，<span class="math inline">\(D(X),D(Y)\)</span> 分别为<span class="math inline">\(X,Y\)</span> 的方差。相关系数<span class="math inline">\(\rho\)</span> 的取值为[-1,1]。<span class="math inline">\(\rho\)</span>的绝对值越接近于1，则<span class="math inline">\(X,Y\)</span>的线性相关性越高。越接近于0，则<span class="math inline">\(X,Y\)</span>的线性相关性越低。</p>
<p>​ 虽然相关系数可以很好的帮我们分析一维数据的相关性，但是对于高维数据就不能直接使用了。拿上面我们提到的，如果X是包括人身高和体重两个维度的数据，而Y是包括跑步能力和跳远能力两个维度的数据，就不能直接使用相关系数的方法。那我们能不能变通一下呢？<span class="math inline">\(CCA\)</span>给了我们变通的方法。</p>
<p>​ <span class="math inline">\(CCA\)</span>使用的方法是将多维的<span class="math inline">\(X,Y\)</span>都用<strong>线性变换</strong>为1维的<span class="math inline">\(X&#39;,Y&#39;\)</span>，然后再使用相关系数来看<span class="math inline">\(X&#39;,Y&#39;\)</span>'的相关性。将数据从多维变到一维，也可以理解为<span class="math inline">\(CCA\)</span>是在进行<strong>降维</strong>，将高维数据降到一维，然后再用相关系数进行相关性的分析。下面我们看看<span class="math inline">\(CCA\)</span>的算法思想。</p>
<h2 id="cca的算法思想">2.CCA的算法思想</h2>
<p>​ 降维的标准是如何选择的呢？回想下主成分分析<span class="math inline">\(PCA\)</span>，降维的原则是投影方差最大；再回想下线性判别分析<span class="math inline">\(LDA\)</span>，降维的原则是同类的投影方差小，异类间的投影方差大。对于我们的<span class="math inline">\(CCA\)</span>，它选择的投影标准是降维到1维后，两组数据的相关系数最大。</p>
<p>​ 假设我们的数据集是<span class="math inline">\(X,Y\)</span>，<span class="math inline">\(X\)</span>为<span class="math inline">\(n_1×m\)</span>的样本矩阵。<span class="math inline">\(Y\)</span>为<span class="math inline">\(n_2×m\)</span>的样本矩阵.其中<span class="math inline">\(m\)</span>为样本个数，而<span class="math inline">\(n1,n2\)</span>分别为<span class="math inline">\(X,Y\)</span>的特征维度。</p>
<p>​ 对于X矩阵，我们将其投影到1维，或者说进行线性表示，对应的投影向量或者说线性系数向量为a, 对于Y矩阵，我们将其投影到1维，或者说进行线性表示，对应的投影向量或者说线性系数向量为b, 这样X ,Y投影后得到的一维向量分别为X',Y'。我们有 <span class="math display">\[
X&#39; = a^TX, Y&#39;=b^TY
\]</span></p>
<p>​ 我们<span class="math inline">\(CCA\)</span>的优化目标是最大化<span class="math display">\[ρ(X′,Y′)\]</span>得到对应的投影向量<span class="math inline">\(a,b\)</span>，即 <span class="math display">\[
\underbrace{arg\;max}_{a,b}\frac{cov(X&#39;,Y&#39;)}{\sqrt{D(X&#39;)}\sqrt{D(Y&#39;)}}
\]</span> 　　在投影前，我们一般会把原始数据进行<code>标准化</code>，得到均值为0而方差为1的数据<span class="math inline">\(X,Y\)</span>。这样我们有： <span class="math display">\[
cov(X&#39;,Y&#39;) = cov(a^TX, b^TY) = E(&lt;a^TX, b^TY&gt;) = E((a^TX)(b^TY)^T) = a^TE(XY^T)b
\]</span></p>
<p><span class="math display">\[
D(X&#39;) = D(a^TX) = a^TE(XX^T)a
\]</span></p>
<p><span class="math display">\[
D(Y&#39;) = D(b^TY) = b^TE(YY^T)b
\]</span></p>
<p>​ 由于我们的<span class="math display">\[X，Y\]</span>的均值均为0，则 <span class="math display">\[
D(X) = cov(X,X) = E(XX^T), D(Y)= cov(Y,Y) = E(YY^T)
\]</span></p>
<p><span class="math display">\[
cov(X,Y) = E(XY^T),  cov(Y,X) = E(YX^T)
\]</span></p>
<p>​ 令<span class="math inline">\(cov(X,Y)=S_{XY}\)</span>,则优化目标可以转化为: <span class="math display">\[
\underbrace{arg\;max}_{a,b}\frac{a^TS_{XY}b}{\sqrt{ a^TS_{XX}a}\sqrt{b^TS_{YY}b}}
\]</span> 　　由于分子分母增大相同的倍数，优化目标结果不变，我们可以采用和<code>SVM</code>类似的优化方法，固定分母，优化分子，具体的转化为： <span class="math display">\[
\underbrace{arg\;max}_{a,b}\;\;{a^TS_{XY}b} \\ s.t. a^TS_{XX}a =1,\; b^TS_{YY}b =1
\]</span> ​ 也就是说，我们的<span class="math inline">\(CCA\)</span>算法的目标最终转化为一个<code>凸优化</code>过程，只要我们求出了这个优化目标的最大值，就是我们前面提到的多维X和Y的相关性度量，而对应的<span class="math inline">\(a,b\)</span>则为降维时的投影向量，或者说线性系数。</p>
<p>　　　　这个函数优化一般有两种方法，第一种是奇异值分解<span class="math inline">\(SVD\)</span>，第二种是<code>特征分解</code>，两者得到的结果一样，下面我们分别讲解。</p>
<h2 id="cca算法的svd求解">3.CCA算法的SVD求解</h2>
<p>​ 首先，令<span class="math inline">\(a=S_{XX}^{-1/2}u, b=S_{YY}^{-1/2}v\)</span> ,则有： <span class="math display">\[
a^TS_{XX}a =1 \Rightarrow u^TS_{XX}^{-1/2}S_{XX}S_{XX}^{-1/2}u =1  \Rightarrow  u^Tu=1
\]</span></p>
<p><span class="math display">\[
b^TS_{YY}b =1 \Rightarrow v^TS_{YY}^{-1/2}S_{YY}S_{YY}^{-1/2}v=1  \Rightarrow  v^Tv=1
\]</span></p>
<p><span class="math display">\[
a^TS_{XY}b = u^TS_{XX}^{-1/2}S_{XY}S_{YY}^{-1/2}v
\]</span></p>
<p>​ 也就是说，我们的优化目标变成下式： <span class="math display">\[
\underbrace{arg\;max}_{u,v}u^TS_{XX}^{-1/2}S_{XY}S_{YY}^{-1/2}v\\
s.t. u^Tu =1,\; v^Tv =1
\]</span> ​ 将<span class="math inline">\(u,v\)</span>看作矩阵 <span class="math inline">\(M=S_{XX}^{-1/2}S_{XY}S_{YY}^{-1/2}\)</span> 的某一奇异值的左右奇异向量。得到<span class="math inline">\(M=U\Sigma V^T\)</span></p>
<p>那么利用奇异值分解，我们可以得到<span class="math inline">\(M=UΣV^T\)</span>其中<span class="math inline">\(U,V\)</span>分别为M的左奇异向量和右奇异向量组成的矩阵，而<span class="math display">\[Σ\]</span>为M的奇异值组成的对角矩阵。由于<span class="math display">\[U,V\]</span>所有的列都为标准正交基，则<span class="math display">\[u^TU\]</span>和<span class="math inline">\(V^Tv\)</span>得到一个只有一个标量值为1，其余标量值为0的向量。此时我们有 <span class="math display">\[
u^TS_{XX}^{-1/2}S_{XY}S_{YY}^{-1/2}v = u^TU\Sigma V^Tv = \sigma_{uv}
\]</span> ​ 也就是说我们最大化<span class="math inline">\(u^TS_{XX}^{-1/2}S_{XY}S_{YY}^{-1/2}v\)</span>,其实对应的最大值就是某一组左右奇异向量所对应的奇异值的最大值。也就是将M做了奇异值分解后，最大的奇异值就是我们优化目标的最大值，或者说我们的X和Y之间的最大相关系数。利用对应的左右奇异向量<span class="math inline">\(u,v\)</span>我们也可以求出我们原始的X和Y的线性系数<span class="math inline">\(a=S_{XX}^{-1/2}u, b=S_{YY}^{-1/2}v\)</span>。</p>
<p>　　　　可以看出，<span class="math inline">\(SVD\)</span>的求解方式非常简洁方便。但是如果你不熟悉SVD的话，我们也可以用传统的拉格朗日函数加上特征分解来完成这个函数的优化。</p>
<h2 id="cca算法的特征分解求解">4.CCA算法的特征分解求解</h2>
<p>​ 利用拉格朗日函数，优化目标转化为最大化下式： <span class="math display">\[
J(a,b) = a^TS_{XY}b -\frac{\lambda}{2}(a^TS_{XX}a-1)-\frac{\theta}{2}(b^TS_{YY}b-1)
\]</span> ​ 分别对<span class="math inline">\(a,b\)</span>求导并令结果为0，我们得到： <span class="math display">\[
S_{XY}b-\lambda S_{XX}a=0\\
S_{YX}a-\theta S_{YY}b=0
\]</span> ​ 将上面第一个式子左乘<span class="math inline">\(a^T\)</span>,第二个式子左乘<span class="math inline">\(b^T\)</span>，并利用<span class="math inline">\(a^TS_{XX}a =1,\; b^TS_{YY}b =1\)</span>，我们得到 <span class="math display">\[
\lambda = \theta = a^TS_{XY}b
\]</span> ​ 也就是说我们的拉格朗日系数就是我们要优化的目标。我们继续将上面的(17)两个式子做整理，第一个式子左乘<span class="math inline">\(S_{XX}^{-1}\)</span>,第二个式子左乘<span class="math inline">\(S_{YY}^{-1}\)</span>，我们得到： <span class="math display">\[
S_{XX}^{-1}S_{XY}b=\lambda a\\
S_{YY}^{-1}S_{YX}a = \lambda b
\]</span> 由(19)得: <span class="math display">\[
S_{XX}^{-1}S_{XY}S_{YY}^{-1}S_{YX}a=\lambda^2a
\]</span> ​ 这个式子就是特征分解！要求最大的相关系数λλ,我们只需要对矩阵<span class="math inline">\(N=S_{XX}^{-1}S_{XY}S_{YY}^{-1}S_{YX}\)</span>做特征分解，找出最大的特征值取平方根即可，此时最大特征值对应的特征向量即为X的线性系数a。</p>
<p>同样： <span class="math display">\[
S_{YY}^{-1}S_{YX}S_{XX}^{-1}S_{XY}b=\lambda^2b
\]</span> ​ 对矩阵<span class="math inline">\(N’=S_{YY}^{-1}S_{YX}S_{XX}^{-1}S_{XY}\)</span>做特征分解，找出最大的特征值取平方根即可，此时最大特征值对应的特征向量即为Y的线性系数b。</p>
<p>​ 可以看出特征分解的方法要比SVD复杂，但是两者求得的结果其实是等价的，只要利用SVD和特征分解之间的关系就很容易发现两者最后的结果相同</p>
<h2 id="cca算法流程">5.CCA算法流程</h2>
<p>​ 以SVD方法为准。</p>
<p>　　　　输入：各为<span class="math inline">\(m\)</span>个的样本<span class="math inline">\(X\)</span>和<span class="math inline">\(Y\)</span>，<span class="math inline">\(X\)</span>和<span class="math inline">\(Y\)</span>的维度都大于1</p>
<p>　　　　输出：X,Y的相关系数<span class="math inline">\(ρ\)</span>,<span class="math inline">\(X\)</span>和<span class="math inline">\(Y\)</span>的线性系数向量<span class="math inline">\(a\)</span>和<span class="math inline">\(b\)</span></p>
<p>　　　　1）计算X的方差<span class="math inline">\(S_{XX}\)</span>, Y的方差<span class="math inline">\(S_{YY}\)</span>，X和Y的协方差<span class="math inline">\(S_{XY}\)</span>, <span class="math inline">\(Y\)</span>和<span class="math inline">\(X\)</span>的协方差<span class="math inline">\(S_{YX}=S_{XY}^T\)</span></p>
<p>　　　　2) 计算矩阵<span class="math inline">\(M=S_{XX}^{-1/2}S_{XY}S_{YY}^{-1/2}\)</span></p>
<p>　　　　3）对矩阵<span class="math inline">\(M\)</span>进行奇异值分解，得到最大的奇异值<span class="math inline">\(ρ\)</span>，和最大奇异值对应的左右奇异向量<span class="math inline">\(u,v\)</span></p>
<p>　　　　4) 计算X和Y的线性系数向量a和b, <span class="math inline">\(a=S_{XX}^{-1/2}u, b=S_{YY}^{-1/2}v\)</span></p>
<p>　　　　</p>
<h2 id="cca算法小结">6.CCA算法小结</h2>
<p>​ <span class="math inline">\(CCA\)</span>算法广泛的应用于数据相关度的分析，同时还是偏最小二乘法的基础。但是由于它依赖于数据的线性表示，当我们的数据无法线性表示时，<span class="math inline">\(CCA\)</span>就无法使用，此时我们可以利用核函数的思想，将数据映射到高维后，再利用<span class="math inline">\(CCA\)</span>的思想降维到1维，求对应的相关系数和线性关系，这个算法一般称为<span class="math inline">\(KCCA\)</span>。</p>
<p>　　此外，我们在算法里只找了相关度最大的奇异值或者特征值，作为数据的相关系数，实际上我们也可以像<span class="math inline">\(PCA\)</span>一样找出第二大奇异值，第三大奇异值，。。。得到第二相关系数和第三相关系数。然后对数据做进一步的相关性分析。但是一般的应用来说，找出第一相关系数就可以了。</p>
<p>　　有时候我们的矩阵<span class="math inline">\(S_{XX},S_{YY}\)</span>不可逆，此时我们得不到对应的逆矩阵，一般遇到这种情况可以对<span class="math inline">\(S_{XX},S_{YY}\)</span>进行正则化，将<span class="math inline">\(S_{XX},S_{YY}\)</span>变化为<span class="math inline">\(S_{XX}+\gamma I,S_{YY}+\gamma I\)</span>,然后继续求逆。其中<span class="math inline">\(γ\)</span>为正则化系数。</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>降维</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论</title>
    <url>/2021/03/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%A6%82%E7%8E%87%E8%AE%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于概率论的一些公式</p>
<span id="more"></span>
<h2 id="sum-rule">1 sum rule</h2>
<p><span class="math display">\[
p(X) = \sum_{Y}{}p(X,Y)
\]</span></p>
<h2 id="product-rule">2 product rule</h2>
<p><span class="math display">\[
p(X,Y) = p(Y|X)p(X)
\]</span></p>
<h2 id="对称性">3 对称性</h2>
<p><span class="math display">\[
p(X,Y) = p(Y,X)
\]</span> ## 4 Bayes’ theorem</p>
<p><span class="math display">\[
p(Y|X) = \frac{p(X,Y)}{p(X)}\\
        =\frac{p(X|Y)p(X)}{p(X)}\\
        =\frac{p(X|Y)p(X)}{\sum_{Y}{}p(X,Y)}\\
        =\frac{p(X|Y)p(X)}{\sum_{Y}{}p(X|Y)p(Y)}
\]</span> 贝叶斯定理的分母<span class="math inline">\(p(X)=\sum_{Y}{}p(X|Y)p(Y)\)</span>看做归⼀化常数，⽤来确保公式（4）左侧的条件概率对于所有的Y 的取值之和为1。</p>
<hr>
<h2 id="概率密度probability-density">5 概率密度probability density</h2>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210310210259698.png" alt="image-20210310210259698"> <span class="math display">\[
p(x\in(a,b)) = \int_{a}^{b}p(x) dx\\
p(x) \leq 0\\
\int_{-\infty}^{\infty}p(x)dx = 1
\]</span> <span class="math inline">\(概率密度–&gt;概率–&gt;累积分布\)</span></p>
<p>考虑 变换<span class="math inline">\(x=g(y)\)</span> 区间<span class="math inline">\((x,x+\delta_x)\)</span> 变为 <span class="math inline">\((y,y+\delta_y)\)</span> 则有<span class="math inline">\(p_{x}{}(x) \delta_x \backsimeq p_{y}{}(y) \delta_y\)</span> <span class="math display">\[
p_y(y) = p_x(x)|\frac{dx}{dy}| = p_x(g(y))|g&#39;(y)|
\]</span> <strong>结论</strong>： 概率密度最⼤值的概念取决于变量的选择</p>
<h2 id="累积分布函数">6 累积分布函数</h2>
<p><span class="math display">\[
P(z) = \int_{-\infty}^{z} p(x)dx
\]</span> 满足 <span class="math inline">\(P&#39;(x)=p(x)\)</span></p>
<p>概率的<strong>加和规则</strong>和<strong>乘积规则</strong>以及<strong>贝叶斯规则</strong>，同样可以应⽤于<strong>概率密度函数</strong>的情形，也可以 应⽤于<strong>离散变量与连续变量相结合</strong>的情形</p>
<hr>
<h2 id="期望和协方差">7 期望和协方差</h2>
<p>期望：(加权平均值)</p>
<p>单变量</p>
<p>离散 <span class="math display">\[
E[f]=\sum_x p(x)f(x)
\]</span> 连续 <span class="math display">\[
E[f]=\int p(x)f(x) dx
\]</span> 估计 <span class="math display">\[
E[f]\backsimeq \frac{1}{N}\sum_{n=1}^{N}f(x_n)
\]</span></p>
<p>方差:度 量 了<span class="math inline">\(f(x)\)</span>在 均 值<span class="math inline">\(E[f(x)]\)</span>附 近 变 化 性 的 ⼤ ⼩ <span class="math display">\[
var[f] = E[(f(x)-E[f(x)])^2]\\
=E[f(x)^2]-E[f(x)]^2
\]</span> 协方差：(两个随机变量) <span class="math display">\[
cov[x,y]=E_{x,y}[ ( x-E[x])(y-E[y])] = E_{x,y}[xy]-E[x]E[y]
\]</span> ​ (两个随机向量) <span class="math display">\[
cov[x,y]=E_{x,y}[ ( x-E[x])(y^T-E[y^T])] = E_{x,y}[xy^T]-E[x]E[y^T]
\]</span></p>
<h2 id="贝叶斯概率">8 贝叶斯概率</h2>
<p>后验<span class="math inline">\(\backsimeq\)</span>似然x先验 <span class="math display">\[
p(w|D) = \frac{p(D|w)p(w)}{p(D)}
\]</span></p>
<p>后验概率$ p(w|D)$ 似然函数 <span class="math inline">\(p(D|w)\)</span> 先验概率<span class="math inline">\(p(w)\)</span> 归一化常数<span class="math inline">\(p(D)=\int p(D|w)p(w)dw\)</span></p>
<p>似然函数不是w的概率分布，并且它关于w的积分并不（⼀定）等于1.</p>
<h2 id="高斯分布">9 高斯分布</h2>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210311174121534.png" alt="image-20210311174121534"><figcaption aria-hidden="true">image-20210311174121534</figcaption>
</figure>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>Riemannian geometry for EEG-based brain computer interfaces ;a primer and a review</title>
    <url>/2021/03/15/Paper/1.%E5%9F%BA%E4%BA%8EEEG%E8%84%91-%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%EF%BC%9B%E5%85%A5%E9%97%A8%E5%92%8C%E7%BB%BC%E8%BF%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总结">0. 总结</h2>
<hr>
<p>黎曼几何在脑机接口的应用，简述了黎曼分类的原理，优缺点。</p>
<span id="more"></span>
<h2 id="研究目的">1. 研究目的</h2>
<p>对黎曼几何在脑-机接口中的应用进行了综述，并对基于黎曼几何的分类框架进行了初步探讨。</p>
<p>提高脑-机接口的稳健性。</p>
<h2 id="背景与问题陈述">2. 背景与问题陈述</h2>
<hr>
<p>解码器传统上被认为由三个独立的模块组成：预处理、特征提取和分类 。目前三种主要的BCI模式(即基于运动/心理图像(MI)、事件相关电位(ERP)和稳态诱发电位(SSEP))中的每一种都被专用的预处理、信号处理和分类模块所处理。解码策略分为两类：一类遵循硬机器学习方法，另一类使用信号处理来提高信噪比，然后使用简单的分类算法。一些硬机器学习类型的算法在不同会话和不同主题之间具有相当好的通用性，但需要大量的训练数据。此外，它们通常是计算密集型的。空间滤波的情况正好相反，其糟糕的泛化能力被快速的训练和较低的计算成本所弥补。在实际操作中，危及BCI解码器操作的主要因素是主体间的生理变异性和真实世界环境条件的巨大变异性。三个相互关联的研究领域正在努力克服这些限制，共同解决改善BCI可用性和健壮性的问题。</p>
<p>实现所需的可用性和健壮性的途径不是通过提高系统的复杂性，而是“我们需要在技术进步和现实世界的实际使用之间取得平衡”。将预处理、特征提取和分类不作为独立的过程，而是作为一个整体。</p>
<h2 id="黎曼分类框架入门">3.1 黎曼分类框架入门</h2>
<p>对称正定(SPD)矩阵(以下称为正矩阵)可以被认为是多维平方实数的推广。特别地，一维随机变量的方差是正数(平方和)，而N维随机变量的方差是正矩阵，通常称为协方差矩阵。</p>
<p>为实现到均值的最小距离(MDM)，需要一个合适的距离函数(度量)和相应的均值函数。</p>
<p>度量(距离):</p>
<ul>
<li>非负的</li>
<li>只有当两个元素相等时它才等于零</li>
<li>对称的</li>
<li>服从三角不等式。</li>
</ul>
<p>度量空间（S，d)</p>
<h2 id="methods">3. Method(s)</h2>
<hr>
<p>传统解码器：预处理，特征提取，分类</p>
<p>模式：MI，ERP，SSEP</p>
<p>目前都有专门的预处理，信号处理和分类模块</p>
<table>
<thead>
<tr class="header">
<th>两大范式</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>hard machine learning</td>
<td>泛化性能好</td>
<td>需要大量数据，计算密集型</td>
</tr>
<tr class="even">
<td>利用信号处理提高信噪比，然后分类（空间滤波等）</td>
<td>快速训练，成本低</td>
<td>泛化差</td>
</tr>
</tbody>
</table>
<p>黎曼分类：</p>
<p>MDM(Minimum Distance to Mean)：到平均数的最小距离</p>
<h2 id="evaluation">4. Evaluation</h2>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/1.%E5%9F%BA%E4%BA%8EEEG%E8%84%91-%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%EF%BC%9B%E5%85%A5%E9%97%A8%E5%92%8C%E7%BB%BC%E8%BF%B0/image-20210311103033549.png" title="算术均值与几何均值比较" alt="image-20210311103033549"><figcaption aria-hidden="true">image-20210311103033549</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/1.%E5%9F%BA%E4%BA%8EEEG%E8%84%91-%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%EF%BC%9B%E5%85%A5%E9%97%A8%E5%92%8C%E7%BB%BC%E8%BF%B0/image-20210311103013598.png" title="黎曼MDM分类与传统CSP分类的迁移学习比较" alt="image-20210311103013598"><figcaption aria-hidden="true">image-20210311103013598</figcaption>
</figure>
<p>LDA 线性判别分析</p>
<h2 id="conclusion">5. Conclusion</h2>
<hr>
<ol type="1">
<li>提供了一个更简单的黎曼分类方法，</li>
<li>最小距离到平均数（MDM）的初步介绍，我们主要依靠直观的（几何）解释。Riemannian MDM方法完全基于两个简单的概念：两个数据点之间的距离和其中若干点的平均值。</li>
<li>黎曼几何学提供了处理对称正定矩阵的天然框架，许多种类的结构协方差矩阵都是这种类型。不管协方差矩阵是如何定义的，MDM黎曼分类器对于所有三种BCI模式，即运动想象、事件相关电位和稳态诱发电位都是一样的。</li>
<li>基于切线空间映射的黎曼方法的总体性能优于MDM方法，而且性能明显优于最新的技术水平，但由于分类器继承了算法复杂度的增加和可能需要高强度的学习，它们不太适合在线操作</li>
<li>空间滤波器的改进只能为分类目的带来适度的改进，而且这种改进并不容易转化为可靠性和鲁棒性的显著提高。</li>
</ol>
<h2 id="notes">6. Notes</h2>
<hr>
<p>附录1中给出了三种主要BCI模式的正式定义。 这些定义还可以改进，并期待对这一课题的进一步研究。</p>
<h2 id="references">References</h2>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>黎曼几何</tag>
      </tags>
  </entry>
  <entry>
    <title>A high-speed BCI based on code modulation VEP</title>
    <url>/2021/03/15/Paper/2.%E5%9F%BA%E4%BA%8E%E7%BC%96%E7%A0%81%E8%B0%83%E5%88%B6VEP%E7%9A%84%E9%AB%98%E9%80%9FBCI/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="summary">0. Summary</h2>
<p>通过编码调制与多通道处理提高ITR</p>
<span id="more"></span>
<h2 id="research-objectives">1. Research Objective(s)</h2>
<p>提高ITR和识别准确率</p>
<h2 id="background-problem-statement">2. Background / Problem Statement</h2>
<p>BCI 通信系统传输速率低，提高ITR(信息传输率)</p>
<h2 id="methods">3. Method(s)</h2>
<ul>
<li>提出了基于c-VEP的调制系统，其中二进制伪随机码被用来调制不同的视觉刺激</li>
<li>提出了一种提高识别精度的多通道检测方法</li>
</ul>
<h2 id="evaluation">4. Evaluation</h2>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/2.%E5%9F%BA%E4%BA%8E%E7%BC%96%E7%A0%81%E8%B0%83%E5%88%B6VEP%E7%9A%84%E9%AB%98%E9%80%9FBCI/image-20210311110254896.png"></p>
<ol type="1">
<li><p>该系统由一个脑电图放大器和一台带CRT显示器的个人电脑（PC）组成。</p></li>
<li><p>不同目标的之间的圆移关系是目标识别的基础，一旦获得了T0的模板，其他目标的模板可以很容易地获得</p>
<p>目标设置符合等效邻域原则</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/2.%E5%9F%BA%E4%BA%8E%E7%BC%96%E7%A0%81%E8%B0%83%E5%88%B6VEP%E7%9A%84%E9%AB%98%E9%80%9FBCI/image-20210417143553434.png" alt="等效邻域原则"><figcaption aria-hidden="true"><strong>等效邻域原则</strong></figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/2.%E5%9F%BA%E4%BA%8E%E7%BC%96%E7%A0%81%E8%B0%83%E5%88%B6VEP%E7%9A%84%E9%AB%98%E9%80%9FBCI/image-20210417143251920.png" alt="目标设置与编码"><figcaption aria-hidden="true"><strong>目标设置与编码</strong></figcaption>
</figure></li>
<li><p>​ <strong>圆移</strong></p></li>
</ol>
<p>​ (a) Ts 为刺激周期 （<span class="math inline">\(T_s = 63/60)=1.05s\)</span>)</p>
<p>​ (b) T0 编码</p>
<p>​ (c)T0 相应信号</p>
<p>​ (d) T1编码(T0延时<span class="math inline">\(\tau _s\)</span>) <span class="math inline">\(\tau _s = 2/60=0.033s\)</span></p>
<p>​ (e) T1响应信号（延时）</p>
<p>​ (f)T1模板可有T0（圆移获得）</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/2.%E5%9F%BA%E4%BA%8E%E7%BC%96%E7%A0%81%E8%B0%83%E5%88%B6VEP%E7%9A%84%E9%AB%98%E9%80%9FBCI/image-20210417144158235.png"></p>
<ol start="4" type="1">
<li><p>在获得所有目标的模板后，可以采用模板匹配的方法进行目标识别，通过选择相关系数最大的目标来确定固定目标.</p>
<ul>
<li><p>选取T20作为参考，记录N个周期数据<span class="math inline">\(x_n(t),n=1,1,...N\)</span></p></li>
<li><p>N个周期取平均获得模板 <span class="math display">\[
M_{20}(t)=\frac{1}{N}\sum_{n=1}^Nx_n(t)
\]</span></p></li>
<li><p>循环移位获得所有模板 <span class="math display">\[
M_k(t)=M_{20}(t-(\tau_k-\tau_{20}))  , k=0,1,...31
\]</span></p></li>
<li><p>计算相关系数 <span class="math display">\[
\rho_k=\frac{&lt;M_k(t),x(t)&gt;}{\sqrt{&lt;M_k(t),M_k(t)&gt;&lt;x(t),x(t)&gt;}}
\]</span></p></li>
<li><p>相关系数最大的即为目标</p></li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/2.%E5%9F%BA%E4%BA%8E%E7%BC%96%E7%A0%81%E8%B0%83%E5%88%B6VEP%E7%9A%84%E9%AB%98%E9%80%9FBCI/image-20210417144819697.png"></p></li>
<li><p>多通道处理可提高识别精度</p>
<p>训练阶段：</p>
<ol type="1">
<li><p>记录k个周期多通道数据<span class="math inline">\(X\in R^{C\times (k\times L)}\)</span></p></li>
<li><p>对k段X平均得到多通道响应R</p></li>
<li><p>复制R k次，得到<span class="math inline">\(S\in R^{C\times (k \times L)}\)</span></p></li>
<li><p>用CCA计算是X和S相关系数最大的现象变换<span class="math inline">\(W_x,W_s\)</span></p></li>
</ol>
<p>测试阶段：</p>
<p>​ 用<span class="math inline">\(W_s,W_x\)</span>作为空间滤波系数进行在线处理数据</p></li>
</ol>
<p>​</p>
<h2 id="conclusion">5. Conclusion</h2>
<p><strong>双极法与多通道法准确率比较</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/2.%E5%9F%BA%E4%BA%8E%E7%BC%96%E7%A0%81%E8%B0%83%E5%88%B6VEP%E7%9A%84%E9%AB%98%E9%80%9FBCI/image-20210417150116424.png"></p>
<p>16目标与32目标 BCI 性能比较</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/2.%E5%9F%BA%E4%BA%8E%E7%BC%96%E7%A0%81%E8%B0%83%E5%88%B6VEP%E7%9A%84%E9%AB%98%E9%80%9FBCI/image-20210417151943379.png"></p>
<p>本文对高速c-VEP BCI系统的基本原理和实现方法进行了详细的介绍,提出的c-VEP BCI具有108±12.0比特/分钟-1的高ITR,超过了以往基于脑电图的BCI的记录。</p>
<blockquote>
<p>改进：</p>
</blockquote>
<ol type="1">
<li>屏幕刷新率</li>
<li>target编码</li>
</ol>
<h2 id="notes">6. Notes</h2>
<h2 id="文章传送">文章传送：</h2>
<p><a href="\2021\04\15\Paper\A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials">基于编码调制视觉诱发电位的多目标脑机接口</a></p>
<p><a href="\2021\04\15\Paper\A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes">一种基于分码分组调制增加刺激目标数的c-VEP脑机接口新范式</a></p>
<h2 id="references">References</h2>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>c-VEP</tag>
        <tag>CCA</tag>
      </tags>
  </entry>
  <entry>
    <title>An online multi-channel SSVEP-based brain–computer interface using a canonical correlation analysis method</title>
    <url>/2021/03/15/Paper/3.%E5%9F%BA%E4%BA%8E%E5%85%B8%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%A4%9A%E9%80%9A%E9%81%93SSVEP%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="summary">0. Summary</h2>
<span id="more"></span>
<h2 id="research-objectives">1. Research Objective(s)</h2>
<p>本文提出了一种在线多信道SSVEP BCI系统，采用典型相关分析（CCA）方法提取与SSVEP相关的频率信息。利用离线数据对系统的关键参数信道位置、窗长和谐波数进行了研究，为在线系统的设计提供了依据。</p>
<h2 id="background-problem-statement">2. Background / Problem Statement</h2>
<ul>
<li>不同的SSVEP可以通过将我们的兴趣或注意力转移到其中一个频率编码的刺激上而产生</li>
<li>SSVEP的BCI有更高的信噪比（SNR）和信息传输率（ITR）</li>
<li></li>
</ul>
<h2 id="methods">3. Method(s)</h2>
<ul>
<li>MEC(minium energy method) 检测精度高, 无需校准数据</li>
<li><a href="/2021/03/14/深度学习/典型相关分析(CCA)">CCA</a></li>
</ul>
<h2 id="evaluation">4. Evaluation</h2>
<h2 id="conclusion">5. Conclusion</h2>
<ul>
<li>结果:来自30个BCI命令的正确计数的平均值为28.6。 BCI系统的平均ITR为58±9.6位min-1。</li>
<li></li>
</ul>
<h2 id="notes">6. Notes</h2>
<h2 id="references">References</h2>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>SSVEP</tag>
      </tags>
  </entry>
  <entry>
    <title>A multi-target brain-computer interface based on code modulated visual evoked potentials</title>
    <url>/2021/04/15/Paper/A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总结">0. 总结</h2>
<h2 id="研究目标">1. 研究目标</h2>
<h2 id="研究背景及问题陈述">2. 研究背景及问题陈述</h2>
<h3 id="bci研究">2.1 BCI研究</h3>
<ol type="1">
<li>提出了一种新的频率-相位联合调制方法，用0.5s的闪烁信号标记40个目标，并开发了一种使用单个校准数据的特定用户目标识别算法</li>
<li>Edelman等人。分别和同时使用具有感觉运动节律的二维光标控制任务和具有稳态视觉诱发电位(SSVEP)的视觉注意任务来研究认知灵活性的概念。他们发现，单独和联合执行这两项任务的精确度没有显著差异</li>
<li>Ortner等人的研究成果。应用异步SSVEP脑机接口进行矫形器控制。6名未经训练的受试者表现出良好的控制性，阳性预测值(PPV)在60%以上，所有受试者的总体PPV高达78%[5]。</li>
<li>Pfurtscheller等人的研究成果。进行了基于脑机接口的混合式矫形器的自定步操作的研究，其中有无基于图像的大脑开关，仅在需要控制时才激活基于SSVEP的四步矫形器，并在休息期间停用SSVEP脑机接口。这两种心理策略的结合显示，与单独使用SSVEP脑机接口相比，静息期的假阳性率要低得多。</li>
<li>孟等人。研究了使用非侵入性脑-机接口控制机械臂来完成抓取任务，发现受试者可以高精度地控制机械臂来执行需要多个自由度的任务[7]。</li>
<li>Xu等人。提出了一种创新的基于微型事件相关电位的脑-机接口范式，它使用了一种空码分多址(SCDMA)方案来减少视觉疲劳[8]。</li>
</ol>
<h3 id="vep">2.2 VEP</h3>
<p>基于VEP的BCI具有用户训练少和ITR高的特点</p>
<p>根据调制方法可分为：</p>
<ul>
<li>t-VEP 时间调制</li>
<li>f-VEP 频率调制</li>
<li>c-VEP 编码调制</li>
<li>s-VEP 空间调制</li>
</ul>
<p>其中f-VEP和c-VEP有更高的ITR，应用潜力大，但是c-VEP相对于f-VEP研究还不够深入</p>
<h3 id="c-vep">2.3 c-VEP</h3>
<p>现有c-VEP范例将所有刺激目标打包为一组，用原始伪随机二进制码及其循环移位码 或 相同长度的不同伪随机二进制码调制。前者只需训练一个目标来创建所有目标的模板。后者需要创建所有目标的模板。通常采用第一种以减少训练时间。</p>
<p>可利用的目标数目收调制码长的限制。例如，如果两个相邻刺激之间的时延为2比特，则63比特的M序列可以循环右移31次，并且最多提供32个刺激。</p>
<p>另一方面，影响ITR的主要因素之一是可选择目标的数量。高性能的脑机接口通常有大量的目标。因此，如何增加目标数目是c-VEP脑机接口的关键问题。</p>
<h2 id="研究方法">3. 研究方法</h2>
<p>在<a href="\2021\04\15\Paper\A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes">另一篇论文</a>的研究中，通过将现有的第一种目标调制方法与第二种基于视觉刺激分组调制的方法相结合，构建了一个48个目标的c-VEP BCI。在不显著增加训练时间的情况下，大幅增加刺激目标的数量和由此产生的ITR。</p>
<p>在本研究中，将目标群体的数量从三个扩展到四个，将目标排列的方法从<code>等效邻居原则</code>调整为<code>分开放置</code>，并应用了四种不同的数据预处理方法来分析c-VEP系统。每个目标组有16个刺激目标，共64个目标。对8个被试的实验数据的分类结果验证了该范式在增加刺激靶数和ITR方面的可行性和有效性。</p>
<h2 id="评估实验">4. 评估，实验</h2>
<h3 id="visual-stimulator">3.1 Visual stimulator</h3>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials/image-20210415114951381.png"></p>
<p>如图，有64给刺激分为四组，每组4x4块，每个刺激大小为<span class="math inline">\(140 \times 100\)</span>像素。水平距离10像素，垂直距离30像素。每组刺激由不同的伪随机二进制码(原始码)及其循环移位码调制。所有编码应正交或近似正交</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials/image-20210415123752379.png"></p>
<p>当受试者凝视感兴趣的目标时，大脑的枕叶会产生c-VEP信号。</p>
<h3 id="experimental-setup">3.2 Experimental setup</h3>
<p>8名被试。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials/image-20210415133134554.png" alt="image-20210415133134554"><figcaption aria-hidden="true">image-20210415133134554</figcaption>
</figure>
<h3 id="target-recognition">3.3 Target recognition</h3>
<h4 id="cca">1 CCA</h4>
<p>提取更多与目标识别相关的信息</p>
<h4 id="spatial-filter-estimation.">2 Spatial filter estimation.</h4>
<p>在c-VEP脑机接口系统中，用于目标识别的数据长度是一个完整的刺激周期，即单次试验的数据长度。</p>
<p>利用从每个目标组中的参考目标导出的训练数据来估计空间滤波器</p>
<p>本实验中，<span class="math inline">\(X(t)\)</span>是滤波后的<span class="math inline">\(2-40Hz\)</span>时间信号。<span class="math inline">\(X^n(t),n=1,2...N\)</span> 是单次实验数据。<span class="math inline">\(X^n(t) \in R^{C\times L}\)</span> ,L为数据长度（采样点），C是电极。<span class="math inline">\(L=floor(lc/fr.fs)=1066\)</span> .lc(编码长度=64bit)，fr(屏幕刷新率60Hz) ，fs（采样率1000Hz)</p>
<p>ERP均值为 <span class="math display">\[
{\over{S}}_{(t)} = \frac{1}{N}\sum_{n=1}^{N}X^n(t)
\]</span> 通过复制<span class="math inline">\(\hat{S}_r(t)\)</span> N 此得到 ERP成分 <span class="math inline">\(S_r(t)=[\hat{S}_r(t),\hat{S}_r(t)..\hat{S}_r(t)]\)</span></p>
<p>为了估计空间滤波器，将以单次试验为中心的数据<span class="math inline">\(X_r^n(t)\)</span>连接成连续数据<span class="math inline">\(X_r(t)= [X_r^1(t),X_r^2(t)...X_r^N(t)]\)</span></p>
<p><span class="math inline">\(S_r(t)和X_r(t) \in R^{C\times(N.L)}\)</span> ,将其作为CCA输入可得到第 i 组空间滤波器 <span class="math inline">\(w_{xi} \in R^{C\times 1}\)</span></p>
<h4 id="template-creating">3 Template creating</h4>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials/image-20210415161311177.png"></p>
<ol type="1">
<li>对第i个目标组，用空间滤波器对来自参考目标的多通道ERP信号进行滤波，得到以为参考模板<span class="math inline">\(T_{ir}(t)\)</span></li>
</ol>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials/image-20210415161629115.png"></p>
<ol start="2" type="1">
<li>计算时延</li>
</ol>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials/image-20210415161952699.png"></p>
<ol start="3" type="1">
<li>循环移位生成所有模板</li>
</ol>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials/image-20210415162030028.png"></p>
<h4 id="template-matching.">4 Template matching.</h4>
<p>通过测试信号和单个目标组中的所有模板之间的模板匹配，选取四个组的最佳结果。</p>
<p>度量方法有<code>normalized cross correlation (NCC),`` sum of absolute difference (SAD),</code> <code>sum of square difference (SSD)</code>, etc.本文采用相关方法</p>
<p>测试信号<span class="math inline">\(Y(t)\in R^{C\times L}\)</span> 先在<span class="math inline">\(2-40Hz\)</span> 进行时间滤波 ，然后用四个空间滤波器<span class="math inline">\(w_{xi}\)</span>进行空间滤波，生成4个一维向量<span class="math inline">\(y_i(t)=w_{xi}^TY(t)\)</span> ,<span class="math inline">\(y_i(t)\in R^{1\times L}\)</span></p>
<p>对于每一个组，<span class="math inline">\(y_i(t)\)</span> 与16个模板<span class="math inline">\(T_{ik}\)</span> 计算得到相关系数<span class="math inline">\(\rho_{ik}\)</span></p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials/image-20210415163603936.png"></p>
<p>第i组的最大值 <span class="math display">\[
\rho_{imax}= \max _k \rho_{ik}
\]</span></p>
<p>将四个最大系数的最大值确定为关注目标 <span class="math display">\[
ST=\max _i \rho_{imax}
\]</span></p>
<h3 id="performance-evaluation">3.4 Performance evaluation</h3>
<h4 id="itr">1 ITR</h4>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials/image-20210415164550190.png"></p>
<p>M是目标数，P是分类精度，T是一次选择的平均时间，包括视线转移时间和视觉刺激时间</p>
<h4 id="snr">2 SNR</h4>
<p>与f-VEP分析不同的是，到目前为止还没有一种确定c-VEP信号信噪比的方法。</p>
<p>本文采用 相似指数 （SMI）</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials/image-20210415164952928.png"></p>
<p><span class="math inline">\(\hat X\)</span> 是所有试次的均值，<span class="math inline">\(x_i\)</span> 是第 i 此测试实验。 <span class="math inline">\(S=\frac{\hat{X}^Tx_i}{X^T\hat{X}}X^T\)</span> ,<span class="math inline">\(N=x_i-\hat{X}\)</span></p>
<h4 id="statistical-analysis">3 Statistical analysis</h4>
<p>针对系统性能指标非正态分布的特点，采用Wilcoxon符号秩检验对中值差值显著性进行统计分析，研究了不同目标数和不同数据预处理方法对系统性能的影响。配对测试是在95%的置信水平下进行的。</p>
<h2 id="结论">5. 结论</h2>
<h3 id="auto--and-cross-correlation-of-c-vep-signals">1 Auto- and cross-correlation of c-VEP signals</h3>
<p>虽然c-VEP BCI中的视觉刺激作为二进制信号都是不相关的，但这并不能保证对这些刺激的反应也是不相关的，因为大脑是一个非线性动态系统。因此，刺激目标的可分性实际上取决于刺激响应(即，c-VEP信号)的正交性，而不是编码</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials/image-20210415170258948.png"></p>
<p>四个自相关函数中的每一个在时滞0处都有一个尖锐的中心峰值，在其他地方都有一个低旁瓣。中心峰值与最大旁瓣的比值足够大，可以保证在同一组中准确区分不同的目标。</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials/image-20210415170351280.png"></p>
<p>互相关函数在所有时间滞后时都具有较小的值。这意味着也很容易区分不同组中的目标。</p>
<h3 id="amplitude-spectrum-and-snr">2 Amplitude spectrum and SNR</h3>
<p>频谱分析是为了找出c-VEP信号的主要功率集中在哪个频段。主要能量基本上位于2-40 Hz的频率范围内。因此，在时间上对频率中的原始c-VEP信号进行滤波以降低噪声提高信噪比</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials/image-20210415171557406.png"></p>
<p>为了评估c-VEP信号的信噪比，探索了四种不同的数据预处理方法，即：</p>
<p>1)M1：未经时间滤波的原始单通道(Oz)信号；</p>
<p>2)M2：带时间滤波的单通道(Oz)信号；</p>
<p>3)M3：未经空间滤波的原始多通道信号；</p>
<p>4)M4：同时进行时间和空间滤波的多通道信号。</p>
<p>M4为c-VEP脑机接口系统中使用的方法。使用来自每个参考目标的训练信号来评估SMI，并且SNR是从四个参考目标导出的四个SMI的平均值。</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials/image-20210415172029255.png"></p>
<p><strong>(M4)时间滤波和空间滤波组合的信噪比改善效果最好。</strong></p>
<h3 id="correlation-coefficient">3 Correlation coefficient</h3>
<p><span class="math inline">\(CC_T\)</span> 匹配系数</p>
<p><span class="math inline">\(CC_M\)</span> 失配系数</p>
<p>M4得到的CCT和CCT与CCM之间的距离都是所有目标中最大的，这表明时间和空间滤波相结合的方法可以获得最好的检测精度。</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials/image-20210415184118296.png"></p>
<h3 id="classification-accuracy-and-itr">4 Classification accuracy and ITR</h3>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials/image-20210415184321563.png"></p>
<h2 id="笔记">6. 笔记</h2>
<p>ITR由三个参数决定，即分类精度、目标数量和检测时间。高ITR要求第一个参数高，第二个参数大，第三个参数短。然而，这三个参数并不是独立的，而是相互作用的，这使得脑-机接口系统的设计成为一项复杂的任务。</p>
<p>高的ITR主要归因于以下几个因素：</p>
<p>1)较多的刺激目标，</p>
<p>2)具有良好的自相关和互相关特性的四种不同的调制码，</p>
<p>3)结合时间和空间滤波的有效信号处理算法</p>
<p>4)用于目标识别的短数据段。</p>
<p>改进：</p>
<p>在本系统中，64个刺激目标被呈现在尺寸为24英寸(1920×1080像素)的面积受限的LCD监视器上，使得每个刺激目标的大小为140×100像素，这对于VEP BCI来说是次优的。以前的研究建议，对于尺寸为1920×1080像素的显示器，最佳刺激尺寸至少为170×170像素(视角为3.8˚)。因此，增加每个刺激目标的大小将提高检测精度和由此产生的ITR。考虑到个体的差异，选择特定于受试者的参数，例如通道位置、滤波器频带和训练试验的次数，对于提高个体的表现也是有用的。</p>
<p>用于目标识别的数据长度是一个刺激周期，即对于60 Hz的屏幕刷新率为1.066秒。使用<code>固定停止(FS)</code>策略的缺点是它没有考虑被试在BCI容量上的个体差异。最好使用不同的数据长度对目标进行分类，即采用<code>动态停止(DS)</code>策略，该长度由脑电特征的质量和每次试验的分类置信度确定。DS策略不仅可以提高分类精度，而且可以缩短目标识别的整体时间。最近的一项研究表明，即使对于高速SSVEP BCI，DS策略也可以进一步提高它们的性能[39]。因此，将DS策略纳入64个目标的c-VEP BCI将是未来研究的一个方向</p>
<h2 id="文章传送">文章传送：</h2>
<ol type="1">
<li><a href="\2021\04\15\通信\正交编码与伪随机序列">正交编码与伪随机序列</a></li>
<li><a href="\2021\04\15\Paper\A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes">一种基于分码分组调制增加刺激目标数的c-VEP脑机接口新范式</a></li>
<li><a href="\2021\04\15\Paper\Incorporation-of-dynamic-stopping-strategy-into-the-high-speed-SSVEP-based-BCIs">DS策略</a></li>
<li><a href="\2021\03\15\Paper\2.基于编码调制VEP的高速BCI">基于编码调制VEP的高速BCI</a></li>
</ol>
<h2 id="参考文献">参考文献</h2>
<ol type="1">
<li><a href="https://ieeexplore.ieee.org/document/8360166/">A Novel c-VEP BCI Paradigm for Increasing the Number of Stimulus T argets Based on Grouping Modulation With Different Codes</a></li>
</ol>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>c-VEP</tag>
        <tag>CCA</tag>
      </tags>
  </entry>
  <entry>
    <title>A Novel c-VEP BCI Paradigm for Increasing the Number of Stimulus T argets Based on Grouping Modulation With Different Codes</title>
    <url>/2021/04/15/Paper/A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总结">0. 总结</h2>
<h2 id="研究目标">1. 研究目标</h2>
<p>提出了一种新型c-VEP范式：分组编码调制</p>
<p>效果：增加了target和ITR</p>
<p>实现：</p>
<ol type="1">
<li>每个target用二进制伪随机码和循环移位码编码</li>
<li>对每组的所有target使用CCA进行空间滤波和产生模板</li>
<li>对每一组进行模板匹配找到相关系数最大的模板进行匹配</li>
</ol>
<p>实验设置：</p>
<p>​ 48个target分成3组</p>
<p>结论：</p>
<p>​ 尽管三个组的平均准确率低于单个组（91.67% vs 94.9%） 但ITR高于后者（181 bit/min vs 135.6 bit/min)</p>
<h2 id="研究背景及问题陈述">2. 研究背景及问题陈述</h2>
<p>EEG由于非侵入性收到关注</p>
<p>基于VEP的BCI可以检测枕区和顶叶的信号。</p>
<p>根据调制方法分为 ： <code>t-VEP</code> ,<code>f-VEP</code> ,<code>c-VEP</code></p>
<p>f-VEP 和 c-VEP有较高ITR ，更有潜力</p>
<p>然而 c-VEP 研究不多</p>
<blockquote>
<p>现有c-VEP BCI 系统中，有两种<code>目标调制方法</code>：</p>
</blockquote>
<table>
<thead>
<tr class="header">
<th>比较</th>
<th style="text-align: left;">一个源伪随机码和他的循环移位码</th>
<th>不同的伪随机码</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>相同点</td>
<td style="text-align: left;">都将目标打包成一组呈现</td>
<td></td>
</tr>
<tr class="even">
<td>优点</td>
<td style="text-align: left;">只需要训练一个目标（参考目标），创建模板训练时间短</td>
<td>目标数不受编码长度限制</td>
</tr>
<tr class="odd">
<td>缺点</td>
<td style="text-align: left;">可用目标数受到编码长度的影响</td>
<td>需要为每个目标创建模板，训练时间长</td>
</tr>
</tbody>
</table>
<p>对于64bit码长，时间延迟为2bit，只能循环移位31次，只能编码32个target</p>
<blockquote>
<p>目标数目是影响BCI性能的一个重要参数。</p>
</blockquote>
<ol type="1">
<li>一个高性能BCI通常以大量target</li>
<li>一些复杂应用(单词输入器)需要大量target</li>
</ol>
<blockquote>
<p>对<span class="math inline">\(f-VEP\)</span>,有许多方法提高目标数，</p>
</blockquote>
<ol type="1">
<li>frequency and phase mixed coding</li>
<li>dual-frequency stimulation</li>
<li>multiple frequencies sequential coding</li>
</ol>
<blockquote>
<p>对于c-VEP,本文提出了一个 <code>分组分码调制方法</code>,所有刺激目标被打包为几个组中，并且每个组用不同的伪随机码和循环移位码调制。每组只需训练一个目标，大大减少训练时间。</p>
</blockquote>
<p>本文将48个target分为三组，结果显示本范式有助于<code>提高target数量和ITR</code></p>
<h2 id="研究方法">3. 研究方法</h2>
<h3 id="目标调制">3.1 目标调制</h3>
<p>视觉刺激器如下：</p>
<p>每组16个刺激为灰色，周围20个互补的非目标刺激。采用<code>等效邻域原则</code>.</p>
<p><strong>这些非目标刺激的目的是确保目标刺激在左，右，上，下和对角线的方向上具有相等的邻居</strong></p>
<p>分组是target增多，使用第一种方法训练较少训练时间</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes/image-20210416111052828.png"></p>
<p>为了更好区分不同编码，编码之间应正交或近似正交。</p>
<p>三组需要三个伪随机码，每组一个。拥有良好的自相关性，每组16个目标近似正交</p>
<p>不同原始码互相关，不同组之间近似正交</p>
<p>任何满足正交性要求的编码都可用作调制源码（Golden codes)</p>
<blockquote>
<p><strong>调制码选择</strong></p>
</blockquote>
<p>伪随机M序列具有良好的自相关特性，这使得可以创建相同M序列的一组循环移位。因此，一组循环移位序列表现出良好的互相关特性，并且可以用于调制单个刺激组。</p>
<p>然而，不同的M序列不能保证良好的互相关性，因此它们的循环移位序列也没有。因此，它们不能用于调节多组刺激。</p>
<p>本文采用一对<code>Golay互补序列</code>和 <code>几乎完美自相关序列(APA)</code>作为三组刺激的源调制编码。他们有优秀的自相关和互相关性。原则上确保了由三个调制码及其循环移位码激励的不同目标的刺激信号之间的正交性。</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes/image-20210416153704652.png"></p>
<p>屏幕刷新率60Hz，码长64bit，刺激周期64/60=1.066s。</p>
<h3 id="目标识别">3.2 目标识别</h3>
<p>目标识别分为训练阶段和测试阶段，训练阶段用于创建模板，测试阶段将测试信号与三组的模板计算，选择相关系数最大的为目标。</p>
<p>为了提取更多信息，通常记录多个通道脑电数据。然而模板匹配是两个一维向量的比较。所以需要空域滤波将多维信号压缩到一维。</p>
<p>本研究使用CCA方法。</p>
<blockquote>
<p><a href="/2021/03/14/深度学习/典型相关分析(CCA)">典型相关分析 CCA</a></p>
</blockquote>
<p>CCA是一种多变量相关性分析方法，可发现两个多维数据集之间的潜在相关性。它为两个数据集创建一对线性组合，从而使两个组合之间的相关性最大化</p>
<p>X,Y为两个多维信号，x,y为canonical 变量。 <span class="math inline">\(x=X^TW_x\)</span>, <span class="math inline">\(y=Y^TW_y\)</span></p>
<p><span class="math inline">\(W_x,W_y\)</span> 可通过最大化x,y的相关系数<span class="math inline">\(\rho\)</span> 计算：</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes/image-20210416153640465.png"></p>
<blockquote>
<p>模板创建</p>
</blockquote>
<p>对第i组，选取目标r作为参考，被试通过注意参考目标N个刺激周期，获得原始数据。</p>
<p>该数据采集C个电极信息。先对2-30Hz信号时域滤波。然后分段（周期）减去均值确定中心。得到数据<span class="math inline">\(X_r^n(t),,n=1,2,...N\)</span>.<span class="math inline">\(X_r^n(t)\in R^{C\times L}\)</span>.L是采样点。</p>
<p>本文中，<span class="math inline">\(r=11\)</span>, <span class="math inline">\(C=9\)</span>, <span class="math inline">\(N=200\)</span>. 码长<span class="math inline">\(lc=64bits\)</span>, 屏幕刷新率<span class="math inline">\(fr=60Hz\)</span>, 采样率<span class="math inline">\(fs=1000Hz\)</span>,</p>
<p>所以<span class="math inline">\(L=floor(lc/fr.fs)=1066\)</span>.</p>
<p>通过平均<span class="math inline">\(X_r^n(t)\)</span> 得到模板<span class="math inline">\(\overline{S}_r(t)\in R^{C\times L}\)</span></p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes/image-20210416160806928.png"></p>
<p><span class="math inline">\(S_r(t)=[\overline{S}_r(t),\overline{S}_r(t),...,\overline{S}_r(t)]\)</span>, 复制N次</p>
<p><span class="math inline">\(X_r(t)=[X_r^1(t),X_r^1(t),...X_r^1(t)]\)</span>, 拼接N个周期数据</p>
<p><span class="math inline">\(S_r(t)和X_r(t)\)</span>都是<span class="math inline">\(C\times (N.L)\)</span> 矩阵。</p>
<p>作为CCA输入，得到第i组的<span class="math inline">\(C\times 1\)</span> 的空间滤波器<span class="math inline">\(w_{xi}\)</span></p>
<p>然后通过<span class="math inline">\(T_{ir}(t)=w_{xi}^T.\overline{S}_r(t)\)</span>得到一维模板矢量</p>
<p>所有目标的模板可通过循环移位获得 <span class="math display">\[
T_{ik}(t)=T_{ir}(t-b_s(\tau_k-\tau_r))  ,k=1,2,...16
\]</span> 其中 k是目标数，<span class="math inline">\(b_s=4\)</span> 是移位比特数。</p>
<p><span class="math inline">\(\tau_k-\tau_r=(k-r).fs/fr\)</span></p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes/image-20210416163334043.png"></p>
<blockquote>
<p>模板匹配</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes/image-20210416163523150.png"></p>
<p>与训练阶段相同，滤波，中心化，CCA得到<span class="math inline">\(y_i(t)=w_{xi}^T.Y(t)\)</span> .</p>
<p>计算皮尔逊相关</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes/image-20210416163936203.png"></p>
<p>选取每组的最大值</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes/image-20210416164006759.png"></p>
<p>三个最大值中的最大值几位注视目标</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes/image-20210416164053461.png"></p>
<h2 id="评估实验">4. 评估，实验</h2>
<h3 id="数据获取">数据获取</h3>
<p>分类准确度</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes/image-20210416165155231.png"></p>
<blockquote>
<p>离线实验</p>
</blockquote>
<p>收集数据创建模板</p>
<blockquote>
<p>模拟在线实验</p>
</blockquote>
<h2 id="结论">5. 结论</h2>
<h3 id="c-vep信号的自相关和互相关">1 c-VEP信号的自相关和互相关</h3>
<p>三个参考模板的自相关和互相关图</p>
<p>第一行自相关函数，中心峰与最大旁瓣之比足够大，可以确保在单个组中准确区分不同目标</p>
<p>第二行互相关函数，与自相关函数相比有短暂的时延，可以区分不同目标</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes/image-20210416165754847.png"></p>
<p><strong>注意</strong>，尽管目标刺激都作为二进制信号不相关，但这并不意味着对这些刺激的响应也不相关，因为大脑是一个非线性的动力系统。</p>
<h3 id="分类准确率">2 分类准确率</h3>
<p>见表II</p>
<h3 id="混淆矩阵">3 混淆矩阵</h3>
<p>可以看出，这些目标的分类精度较高，并且这些目标之间的准确性没有明显差异。 从矩阵中可以看出，目标6最经常与目标7混淆。但是，大多数目标与周围目标（包括四个边和四个对角线的目标）混淆了（见图1）。这种现象可能源于附近刺激物对目标刺激物的干扰。</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes/image-20210416175115623.png"></p>
<p>图b显示了单组受试者之间目标识别的平均混淆矩阵。</p>
<p>显然，每组的分类准确性很高，并且各组之间的准确性几乎没有差异。</p>
<p>组之间精度的良好平衡可能归因于三个调制序列的良好自相关和互相关特性。</p>
<p>每个组最常与相邻的组混淆。这种现象也可能是由于<code>附近群体的刺激干扰目标所致</code></p>
<h3 id="目标识别的数据长度">4 目标识别的数据长度</h3>
<p>分类精度和ITR用来评估该范式的性能</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes/image-20210416181053928.png"></p>
<p>M是目标数，P是检测精度，T是目标选择时间</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes/image-20210416181254026.png" alt="图5.平均精确度和平均ITR"><figcaption aria-hidden="true"><strong>图5.平均精确度和平均ITR</strong></figcaption>
</figure>
<h3 id="训练次数">5 训练次数</h3>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes/image-20210416182129371.png"></p>
<h3 id="模拟在线实验">6 模拟在线实验</h3>
<p>刺激数量有16提速到48，准确率小幅下降的同时，大大提高了ITRs</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/Paper/A%20Novel%20c-VEP%20BCI%20Paradigm%20for%20Increasing%20the%20Number%20of%20Stimulus%20T%20argets%20Based%20on%20Grouping%20Modulation%20With%20Different%20Codes/image-20210416182417845.png"></p>
<h2 id="笔记">6. 笔记</h2>
<ol type="1">
<li><p>伪随机M序列具有良好的自相关特性，这使得可以创建相同M序列的一组循环移位。 因此，一组循环移位序列表现出良好的互相关特性，并且可以用于调制单个刺激组。 然而，不同的M序列不能保证良好的互相关性，因此它们的循环移位序列也没有。 因此，它们不能用于调节多组刺激。 为了解决该问题，选择了一对Golay互补序列和几乎完美的自相关序列，以调制c-VEP BCI范式中的三组刺激。 它们表现出良好的自相关和良好的互相关，并且原则上确保了由三个调制码及其循环移位码激励的不同目标的刺激信号之间的正交性</p></li>
<li><p>为了将所有48个刺激目标在有限的区域内排列在监视器上，使用等效邻居的原理来设计视觉刺激器。 单个组中的十六个刺激紧密放置在一起以节省屏幕空间。 有了互补的非目标刺激，每个目标刺激和所有邻居都会保持固定时滞的关系。 由于中央凹视野之外的刺激也可能有助于VEP ，因此该原理利用了对目标及其邻居的诱发反应。 但这是在以下基础上建立的：<code>从人眼到所有目标的中心点的视角是相同的，并且等于在训练阶段用于模板数据获取的从人眼到参考目标的中心点的视角</code>。 在实践中，很难做到这一点，特别是对于具有大量目标刺激的视觉刺激器而言。 <code>结果</code>，由邻近刺激引起的诱发反应并不是一种有用的信号，而是一种噪声干扰。</p></li>
</ol>
<h2 id="文章传送">文章传送</h2>
<p><a href="\2021\04\15\Paper\A%20multi-target%20brain-computer%20interface%20based%20on%20code%20modulated%20visual%20evoked%20potentials">基于编码调制视觉诱发电位的多目标脑机接口</a></p>
<p><a href="/2021/03/15/Paper/2.基于编码调制VEP的高速BCI">基于编码调制VEP的高速BCI</a></p>
<h2 id="参考文献">参考文献</h2>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>c-VEP</tag>
        <tag>CCA</tag>
      </tags>
  </entry>
  <entry>
    <title>Incorporation of dynamic stopping strategy into the high-speed SSVEP-based BCIs</title>
    <url>/2021/04/15/Paper/Incorporation-of-dynamic-stopping-strategy-into-the-high-speed-SSVEP-based-BCIs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总结">0. 总结</h2>
<h2 id="研究目标">1. 研究目标</h2>
<h2 id="研究背景及问题陈述">2. 研究背景及问题陈述</h2>
<h2 id="研究方法">3. 研究方法</h2>
<h2 id="评估实验">4. 评估，实验</h2>
<h2 id="结论">5. 结论</h2>
<h2 id="笔记">6. 笔记</h2>
<h2 id="参考文献">参考文献</h2>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
  </entry>
  <entry>
    <title>Transfer Learning for EEG-Based Brain-Computer Interfaces; A Review of Progress Made Since 2016</title>
    <url>/2021/03/13/Paper/%E5%9F%BA%E4%BA%8E%E8%84%91%E7%94%B5%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%EF%BC%9A2016%E5%B9%B4%E4%BB%A5%E6%9D%A5%E7%A0%94%E7%A9%B6%E8%BF%9B%E5%B1%95%E7%BB%BC%E8%BF%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span>
<p><strong>脑机接口</strong>(BCI)使用户能够使用大脑信号直接与计算机通信。</p>
<p><strong>脑电</strong>(EEG)是最常见的非侵入性脑机接口(BCI)，对噪声/伪影敏感，且存在受试者/受试者内部的非平稳性。很难建立一个通用的模式识别模型。</p>
<p><strong>迁移学习</strong>用于减少校准工作量。</p>
<p>本文讨论了<strong>运动想象</strong>、<strong>事件相关电位</strong>、<strong>稳态视觉诱发电位</strong>、<strong>情感脑机接口</strong>、<strong>回归问题</strong>和<strong>对抗性攻击</strong>等六种范式及其应用。</p>
<p>索引-<strong>脑机接口</strong>、<strong>脑电图</strong>、<strong>迁移学习</strong>、<strong>领域适应</strong>、<strong>情感脑机接口</strong>、<strong>对抗性攻击</strong></p>
<h2 id="i.introduction">I.Introduction</h2>
<p>脑机接口应用：游戏、情绪识别、精神疲劳评估、警觉评估。etc</p>
<p>BCI类型：<strong>Non-invasive BCIs</strong>；Invasive BCIs；Partially invasive (semi-invasive) BCIs</p>
<p>本文研究非侵入式BCIs，safety, low cost, and convenience. most popular</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/13/Paper/%E5%9F%BA%E4%BA%8E%E8%84%91%E7%94%B5%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%EF%BC%9A2016%E5%B9%B4%E4%BB%A5%E6%9D%A5%E7%A0%94%E7%A9%B6%E8%BF%9B%E5%B1%95%E7%BB%BC%E8%BF%B0/image-20210215113147980.png"></p>
<ol type="1">
<li><p>Signal acquisition ： Used：wired connections and gel 。Currently, wireless connections and dry electrodes</p></li>
<li><p>Signal processing ： temporal filtering and spatial filtering.</p></li>
</ol>
<p>常用的空间滤波器包括公共空间模式(CSP)、独立分量分析(ICA)、盲源分离、xDAWN等。</p>
<p>3）Feature extraction：时域、频域、时频域、黎曼空间和/或功能性大脑连通性特征</p>
<ol start="4" type="1">
<li><p>Pattern recognition：分类；回归</p></li>
<li><p>Controller：其输出命令以控制外部设备</p></li>
</ol>
<p>当使用深度学习时，特征提取和模式识别可以集成到单个神经网络中，并且这两个组件同时自动优化。</p>
<p>基于EEG的BCI中有三种经典的分类范型：Motor imagery (MI)；Event-related potentials (ERP)；Steady-state visual evoked potentials (SSVEP)</p>
<h2 id="ii.迁移学习概念和场景">II.迁移学习概念和场景</h2>
<p>定义1：</p>
<h2 id="iii.tl-in-mi-based-bcis">III.TL in MI-Based BCIs</h2>
<p><strong>嵌入流形的知识转移</strong>(MEKT)方法:1.协方差矩阵质心对齐(CA)2.切线空间特征提取。3.映射矩阵识别。</p>
<p><strong>EEGNet</strong>。它可以应用于不同的脑机接口范例，用非常有限的数据进行训练，并产生神经生理学上可解释的特征。EEGNet在错误信息系统和事件相关事件的学科内和跨学科分类方面都取得了强劲的成果。</p>
<h2 id="iv.-tl-in-erp-based-bcis">IV. TL IN ERP-BASED BCIs</h2>
<p>SAN GAN</p>
<p>数据对齐：<strong>Euclidean Alignment (EA)方法</strong>，完全无监督，运算代价低，适用于传统机器学习和深度学习</p>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>脑电</tag>
        <tag>迁移学习</tag>
        <tag>综述</tag>
      </tags>
  </entry>
  <entry>
    <title>Transfer Learning for Motor Imagery Based Brain-Computer Interfaces - A Complete Pipeline</title>
    <url>/2021/04/14/Paper/%E5%9F%BA%E4%BA%8E%E8%BF%90%E5%8A%A8%E6%83%B3%E8%B1%A1%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%EF%BC%9A%E4%B8%80%E6%9D%A1%E5%AE%8C%E6%95%B4%E7%9A%84%E7%AE%A1%E9%81%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总结">0. 总结</h2>
<h2 id="研究目标">1. 研究目标</h2>
<p>本文提出在基于MI的BCI的所有三个组成部分(空间滤波、特征工程和分类)中都可以考虑TL。此外，在空间过滤之前专门添加数据对齐组件，以使来自不同主题的数据更加一致，从而促进后续的TL。</p>
<h2 id="研究背景及问题陈述">2. 研究背景及问题陈述</h2>
<h2 id="研究方法">3. 研究方法</h2>
<h2 id="评估实验">4. 评估，实验</h2>
<h2 id="结论">5. 结论</h2>
<h2 id="笔记">6. 笔记</h2>
<h2 id="参考文献">参考文献</h2>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>迁移学习</tag>
        <tag>运动想象</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual and Auditory Brain–Computer Interfaces</title>
    <url>/2021/04/13/Paper/%E8%A7%86%E8%A7%89%E5%92%8C%E5%90%AC%E8%A7%89-%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总结">0. 总结</h2>
<p>本综述旨在为探索新的范式和方法以改进当前的视觉和听觉脑-机接口技术提供有用的指导。</p>
<h2 id="研究目标">1. 研究目标</h2>
<p>本文涉及的v-BCI和a-BCI系统仅包括基于大脑对<code>外源性</code>视觉或听觉刺激的反应的BCI[例如稳态视觉诱发电位(SSVEP)和听觉稳态反应(ASSR)]以及与视觉或听觉刺激相关的内源性电位(例如视觉和听觉P300事件相关电位(ERPs))。</p>
<h2 id="研究背景及问题陈述">2. 研究背景及问题陈述</h2>
<p>V-BCI和a-BCI可分为凝视依赖系统和凝视非依赖系统。视线相关的v-BCI系统利用了脑电记录的高信噪比(SNR)和高信息传输率(ITR)。不依赖凝视的v-BCI和a-BCI系统可以为不能使用凝视依赖的BCI的闭锁患者提供相对较高的系统性能。由于高BCI性能依赖于可靠、可重复和可区分的脑信号，因此v-BCI和a-BCI系统可以提供稳健的系统性能。</p>
<p>当前的v-BCI和a-BCI系统缺乏统一的系统框架，部分原因是它们从概念开始就被分开研究。</p>
<p>本综述将集中于v-BCI和a-BCI系统的现状和未来挑战。为了将各种v-BCI和a-BCI系统统一在一个框架内，我们从电信系统中借用了<code>信号调制和多址</code>(MA)方法的概念</p>
<h2 id="脑信号">2.1 脑信号</h2>
<p>大脑信号可以受到外源性刺激或内源性心理活动的调节。如图1所示，v-BCI和a-BCI系统中的外源性刺激是视觉和听觉刺激，而内源性刺激可能是由用户的隐性注意或心理任务引起的。这些大脑反应可能发生在感觉、感知或认知层面。感觉是感觉系统对外界刺激信号的处理。视觉和听觉刺激产生的诱发电位(EP)反映了典型的感觉过程。知觉涉及到感官信息的组织、识别和解释。意识水平的感官知觉使个体能够感觉到他们周围的环境。认知过程包括注意、学习、推理、决策等。在脑-机接口系统中，上述三个阶段的大脑反应可以通过被试的自愿注意进行调制，从而可以对所传达的信息进行编码。调制的脑信号中的特征可以在时域、频域或空间域中提取。不同领域的特征组合可以显著提高分类精度，从而提高BCI性能。</p>
<h2 id="v-bci和a-bci的脑信号">2.2 V-BCI和a-BCI的脑信号</h2>
<h3 id="受外部刺激调制的大脑信号">1 受外部刺激调制的大脑信号：</h3>
<p>a)视觉诱发电位，VEP(瞬时VEP，SSVEP，运动VEP，编码调制VEP)；</p>
<p>b)听觉稳态反应(ASSR)</p>
<p>视觉诱发电位是大脑对视觉刺激的反应，可以在头皮的枕部区域以最大幅度记录下来</p>
<h3 id="内源性调制的大脑信号">2 内源性调制的大脑信号：</h3>
<p>​ a) response to oddball stimulus (auditory mismatch negativ-ity (MMN) [42], N200 and P300 [43]);</p>
<p>​ b) response to mental tasks [late positive components (LPC)];</p>
<p>​ c) response inhibition (No-Go N2) [45];</p>
<p>​ d) semantic processing (N400) [46];</p>
<p>​ e) attention-modulated brain signals (SSVEP , ASSR)</p>
<h2 id="研究方法">3. 研究方法</h2>
<h2 id="v-bci和a-bci中的多目标编码">3.1 V-BCI和A-BCI中的多目标编码</h2>
<h3 id="v-bci和a-bci中的信息流">1 V-BCI和a-BCI中的信息流</h3>
<p><code>通信系统</code>中的技术可以启发脑机接口设计的新思路。从本质上讲，BCI中的信息流与电信系统非常相似。为了表达不同的意图，大脑信号必须以某种方式进行调制，以便将意图嵌入的EEG信号解调成原始信息。同时，为了避免相互<code>干扰</code>，不同意图的调制脑信号应相互<code>正交</code>或接近正交。为此，调制的大脑信号可以按<code>时间/频率/代码/空间</code>分区排列。该策略类似于在电信系统中允许多个用户以最小的性能降级同时<code>共享带宽</code>的MA技术</p>
<p>有四种基本的移动接入方案：时分多址(TDMA)、频分多址(FDMA)、码分多址(CDMA)和空分多址(SDMA)。</p>
<p>在TDMA中，用户被分配到不同的时隙，在此期间他们拥有整个信道带宽。</p>
<p>在FDMA中，整个带宽被分成多个部分频带，并在用户之间分配。</p>
<p>在CDMA中，用户被分配单独的代码来调制他们的信号，这使得他们彼此不同。</p>
<p>SDMA将地理空间划分为更小的空间，并根据用户的空间位置区分用户。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/13/Paper/%E8%A7%86%E8%A7%89%E5%92%8C%E5%90%AC%E8%A7%89-%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210413145334099.png" alt="image-20210413145334099"><figcaption aria-hidden="true">image-20210413145334099</figcaption>
</figure>
<p>表I描述了BCI中使用的多目标接入方法的基本原理。在大多数基于ERP的BCI中，遵循TDMA原则，多个目标出现在不同的时隙。基于SSVEP的脑机接口是一种典型的<code>频分多址</code>系统，每个目标占用自己的频带，没有重叠。基于伪随机码调制的VEP的BCI以类似于CDMA方法的方式工作。SDMA方法已被应用于v-BCI的设计中，在v-BCI中，脑电信号被视场中的不同目标位置调制。此外，混合多址(HMA)方法最近被用于v-BCI研究以提高系统性能。</p>
<h3 id="v-bci和a-bci的分类">2 V-BCI和a-BCI的分类</h3>
<p>对所有v-BCI和a-BCI系统进行全面系统的分类(见表一)</p>
<p>v-BCI和a-BCI系统可以分为以下五组：</p>
<ol type="1">
<li><p>TDMA、</p></li>
<li><p>FDMA、</p></li>
<li><p>CDMA、</p></li>
<li><p>SDMA</p></li>
<li><p>HMA</p></li>
</ol>
<p>优点：</p>
<ol type="1">
<li>这种分类有三个主要优点。首先，它简化了对v-BCI和a-BCI系统设计和实现的理解，使BCI研究人员更容易将传统通信中的现有技术融入到这些系统中。</li>
<li>便于在v-BCI和a-BCI之间以及在使用不同EEG信号的系统之间进行比较</li>
<li>帮助转移通信系统中的现有方法和技术，以提高当前v-BCI和a-BCI系统的系统性能</li>
</ol>
<h2 id="挑战">4. 挑战</h2>
<p><strong>nonlinearity</strong> and <strong>nonstationarity</strong> 带来的影响</p>
<h2 id="解决脑机接口相关的电生理问题">4.1 解决脑机接口相关的电生理问题</h2>
<h3 id="脑电中的非线性">1 脑电中的非线性</h3>
<p>大脑是一个非线性系统，在这个系统中可以观察到神经集合的群体动力学。它的活动，如脑电信号，可以用非线性动态方法比线性方法更好地描述。</p>
<h3 id="脑电中的非平稳性">2 脑电中的非平稳性</h3>
<p>随着时间的推移，与不同精神和行为状态相关的大脑活动的非平稳性持续发生.</p>
<p>为了解决这个问题，已经开发了能够在在线BCI操作期间自动更新分类器的自适应分类方法。</p>
<p>零训练方法旨在通过整合多个会话或主题的信息来解决特征提取和分类中的非平稳性问题。</p>
<p>在较小的时间尺度内的另一个挑战是EEG信号的试验间非平稳性。试验之间的可变性可能导致单次试验EEG信号的SNR变化</p>
<p>使用先进的数据分析方法可以缓解非平稳问题。</p>
<h2 id="提高itr">4.2 提高ITR</h2>
<p>发展v-bci和a-bci技术的主要挑战之一是<code>性能瓶颈</code>，这在很大程度上归因于脑电信号的低信噪比(<span class="math inline">\(SNR\)</span>)。</p>
<p>度量（metric）：</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/13/Paper/%E8%A7%86%E8%A7%89%E5%92%8C%E5%90%AC%E8%A7%89-%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210413172426338.png"></p>
<p>M是选择的数量，P是目标检测的准确性，T(秒/选择)是选择的平均时间。</p>
<p>提高ITR的方法可以分别考虑M、P和T。</p>
<h3 id="提高目标检测精度">1.提高目标检测精度</h3>
<p>a 提高任务相关脑电信号的信噪比</p>
<p>b 最大化多个类的可分性。</p>
<p>为实现这些目标，应增加任务相关EEG信号中的特征的<code>幅度</code>和<code>维数</code>。</p>
<p>此外，先进的数据分析技术，如信号处理和机器学习方法，也被广泛应用于当前的脑-机接口系统中</p>
<h4 id="信噪比">1.1.信噪比</h4>
<p>a 先进的信号处理方法</p>
<p>b 空间滤波可以将多通道脑电信号投影到低维空间子空间，消除任务无关成分，提高任务相关脑电信号的信噪比 <span class="math inline">\(CCA\)</span>最大化SSVEP信号和预定义参考信号之间的相关性 <span class="math inline">\(ICA\)</span>将与任务相关的EEG分量与与任务无关的EEG分量和伪像分量分开</p>
<p>c 通过激发增强任务相关的EEG信号，在刺激设计中可以采用认知任务来产生更强的ERP信号</p>
<h4 id="多类的可分性">1.2 多类的可分性</h4>
<p>目标检测精度取决于多类的可分性。</p>
<p>在脑-机接口系统中，<code>机器学习技术</code>已被广泛用于提高目标检测精度。当前BCI中使用的技术包括用于<code>特征选择</code>、<code>特征组合</code>和<code>分类</code>的各种方法。在系统设计中，可以通过增加任务相关脑电信号中信息<code>特征的维数</code>来提高多类的可分性。</p>
<p>另一种有效的方法是在系统设计中采用<code>码分多址</code>(<span class="math inline">\(CDMA\)</span>)技术等复合编码方法。基于编码调制的视觉诱发电位的脑-机接口使用正交序列来产生可以通过互相关分析容易区分的视觉诱发电位信号</p>
<h3 id="增加分类数量">2.增加分类数量</h3>
<p>ITR高的BCI有大量的类，与其他BCI相比，v-BCI和a-BCI系统更能提供大量的类来实现复杂的应用</p>
<p>P300脑机接口系统通常使用TDMA方法对目标刺激进行编码</p>
<p>基于视觉诱发电位的脑机接口系统采用了频分多址(FDMA)和码分多址(CDMA)等多种激励编码方法</p>
<p>频率编码是SSVEP脑机接口中应用最广泛的方法。还使用多频编码方法来增加类别的数量</p>
<h3 id="缩短目标检测时间">3.缩短目标检测时间</h3>
<p>减少目标检测时间：</p>
<p>1 单次试验分类比试验平均效率高得多 （基于机器学习的单次试验分析）</p>
<p>2 自适应方法可以减少目标检测时间</p>
<p>3 优化的刺激呈现可以减少目标检测时间</p>
<p>​ 一种直接的方法是减少刺激呈现中两次闪光之间的ISI持续时间</p>
<p>​ 另一种方法是优化刺激编码方法</p>
<h2 id="实际应用">4.3 实际应用</h2>
<p>在实际的脑-机接口系统中需要解决以下问题：</p>
<ol type="1">
<li>易用性</li>
<li>低成本的硬件和软件</li>
<li>稳健的系统性能</li>
</ol>
<p>与其他不需要外界刺激的脑机接口相比，v-BCI和a-BCI系统在系统设计和实现方面提出了更大的挑战。</p>
<ol type="1">
<li><p>移动BCI平台的开发；</p></li>
<li><p>减少疲劳的方法；</p></li>
<li><p>异步系统控制的设计。</p></li>
</ol>
<p>总结了v-BCI和a-BCI系统的潜在应用。</p>
<h3 id="移动系统设计">1 移动系统设计</h3>
<p>移动脑-机接口平台技术可以在现实环境中实现和促进大量的脑-机接口应用。</p>
<p>三个主要挑战：</p>
<ol type="1">
<li>移动脑机接口需要针对脑电设备、数据处理平台和刺激设备的移动硬件解决方案</li>
<li>减少电极的数量</li>
<li>系统需要能够解决EEG信号中的伪影问题 （新兴的移动脑成像(MOBI)技术可以帮助解决这个问题。）</li>
</ol>
<h3 id="减少疲劳">2 减少疲劳</h3>
<p><code>精神疲劳</code>指的是由于长时间的认知活动而导致的暂时无法保持最佳认知表现。精神疲劳会导致不适和注意力下降，从而降低脑电信号的幅度</p>
<p>目前，视觉疲劳是v-BCI系统的最大缺点之一，严重阻碍了其在现实生活中的应用。例如，已经提出了不同类型的刺激模式，例如高频刺激、高占空比刺激和基于图像的刺激，用于在基于SSVEP的BCI中保持稳健性能的同时减少视觉疲劳</p>
<p>在另一项研究中，Honget 分别使用<span class="math inline">\(N200\)</span>(即运动开始VEP)和视觉<span class="math inline">\(P300\)</span>研究了两种v-BCI系统的疲劳效应。研究发现，<span class="math inline">\(N200\)</span>对重复试验引起的疲劳不敏感，而视觉<span class="math inline">\(P300\)</span>则表现出与视觉疲劳相关的显著波幅降低</p>
<h3 id="异步系统设计">3 异步系统设计</h3>
<p>大多数当前的<span class="math inline">\(v-BCI\)</span>和<span class="math inline">\(a-BCI\)</span>使用同步控制协议，其中控制周期由系统启动。然而，异步控制协议(其中用户对何时开始或停止使用系统做出自定进度的决定)更加灵活和自然.</p>
<p>异步控制中的一个重要问题是检测空闲状态。解决方法：</p>
<p>​ 首先，通过在刺激设计中加入额外的EEG特征，可以改善对空闲状态的检测。</p>
<p>​ 然后 可以用于有效地检测非控制状态</p>
<p>​ 其次，通过开发有效的计算方法来区分空闲和控制状态下的EEG信号，也可以改进空闲状态检测</p>
<h3 id="临床应用">4 临床应用</h3>
<p>由于具有ITR高、用户培训少等优点，v-BCI和a-BCI系统已被应用于许多临床应用，以帮助运动障碍患者与他们的环境进行沟通</p>
<p>在系统使用过程中，大多数v-BCI系统依靠眼睛的肌肉控制来凝视目标。对于能够移动眼睛的患者(例如，脊髓损伤患者)，这些依赖凝视的系统为传统辅助设备(如眼球跟踪系统)提供了另一种解决方案。尽管目前依赖凝视的BCI显示出比眼球跟踪系统更低的通信速度，但它们有一些独特的特性，使它们对用户具有吸引力。<code>例如</code>，基于SSVEP的BCI可以有大量的类别，可以完全免校准</p>
<p>对于完全闭锁的患者，只有独立的脑机接口系统才能满足他们的需求。典型的独立<span class="math inline">\(v-BCI\)</span>和<span class="math inline">\(a-BCI\)</span>系统包括使用选择性视觉注意的<span class="math inline">\(v-BCI\)</span>系统和使用选择性收听的<span class="math inline">\(a-BCI\)</span>系统。</p>
<p>目前，有几个原因限制了v-BCI和a-BCI在临床上的应用。首先，传统的辅助技术，如眼球跟踪系统，可以提供比视线相关的BCI更有效的控制。第二，基于SCP和运动图像的与凝视无关的脑机接口为闭锁患者提供了另一种脑机接口解决方案。第三，完全闭锁的患者通常在学习如何使用脑机接口系统方面有困难。研究人员和临床医生需要共同努力，以促进v-BCI和a-BCI的发展，使其更适用于临床。</p>
<h3 id="其它应用">5 其它应用</h3>
<p>V-BCI和a-BCI系统在许多非临床应用中也有潜力。最近，几项研究证明了利用脑-机接口来改善人类行为的概念。</p>
<p>例如，使用快速串行视觉呈现(RSVP)范式的P300BCI被用来改善人类在目标检测中的表现。其他非临床应用包括精神状态监测和视频游戏。通过解决上述挑战，v-BCI和a-BCI技术可以使更多的人群受益，无论他们是不是残疾患者。</p>
<h2 id="结论">5. 结论</h2>
<p>在建立和研究脑-机接口技术时，缺乏对潜在神经机制的知识仍然是一个挑战。</p>
<p>在BCI技术能够有效、可靠和负担得起，使大量的人在日常生活中受益之前，还有很长的路要走。</p>
<h2 id="笔记">6. 笔记</h2>
<h2 id="参考文献">参考文献</h2>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>综述</tag>
      </tags>
  </entry>
  <entry>
    <title>选择脑电图独立成分进行矫正的实用指南</title>
    <url>/2021/03/28/Paper/%E9%80%89%E6%8B%A9%E8%84%91%E7%94%B5%E5%9B%BE%E7%8B%AC%E7%AB%8B%E6%88%90%E5%88%86%E8%BF%9B%E8%A1%8C%E7%9F%AB%E6%AD%A3%E7%9A%84%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.researchgate.net/publication/273779893_A_Practical_Guide_to_the_Selection_of_Independent_Components_of_the_Electroencephalogram_for_Artifact_Correction">论文链接</a></p>
<h2 id="summary">0. Summary</h2>
<p>本文综述了<span class="math inline">\(ICA\)</span>分离出的五种典型的脑电伪影(眨眼、眼跳、肌肉噪声、不良通道和罕见事件)，以及目前自动化方法提供的几种检测这些伪影的方法。</p>
<span id="more"></span>
<h2 id="research-objectives">1. Research Objective(s)</h2>
<p>脑电信号中独立成分的选择；</p>
<h2 id="background-problem-statement">2. Background / Problem Statement</h2>
<h3 id="方法">2.1 方法</h3>
<p>用 ICA 分离和减去独立的成分；这种分量减法被广泛用于从EEG记录中去除诸如眨眼或肌肉活动之类的伪影</p>
<h3 id="常见伪影特征的特征说明">2.2 常见伪影特征的特征说明；</h3>
<ol type="1">
<li><p><strong>眼睛成分</strong></p>
<p>特点：</p>
<ol type="1">
<li>最容易识别</li>
<li>地形基本上平坦</li>
<li>排在前十几成分中</li>
</ol>
<p><code>眨眼</code></p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/28/Paper/%E9%80%89%E6%8B%A9%E8%84%91%E7%94%B5%E5%9B%BE%E7%8B%AC%E7%AB%8B%E6%88%90%E5%88%86%E8%BF%9B%E8%A1%8C%E7%9F%AB%E6%AD%A3%E7%9A%84%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/image-20210330101333947.png" alt="image-20210330101333947"></p>
<p><code>水平眼动</code></p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/28/Paper/%E9%80%89%E6%8B%A9%E8%84%91%E7%94%B5%E5%9B%BE%E7%8B%AC%E7%AB%8B%E6%88%90%E5%88%86%E8%BF%9B%E8%A1%8C%E7%9F%AB%E6%AD%A3%E7%9A%84%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/image-20210330105247161.png" alt="image-20210330105247161"><figcaption aria-hidden="true">image-20210330105247161</figcaption>
</figure>
<p><code>误认眼动</code></p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/28/Paper/%E9%80%89%E6%8B%A9%E8%84%91%E7%94%B5%E5%9B%BE%E7%8B%AC%E7%AB%8B%E6%88%90%E5%88%86%E8%BF%9B%E8%A1%8C%E7%9F%AB%E6%AD%A3%E7%9A%84%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/image-20210330105259247.png" alt="image-20210330105259247"><figcaption aria-hidden="true">image-20210330105259247</figcaption>
</figure></li>
<li><p><strong>肌肉成分</strong></p>
<p>​ 来自颈部、颌部和面部肌肉的强直性肌肉活动在电极帽边缘的电极上产生一种固定的活动。虽然受试者通常被要求坐着不动放松，但由于打哈欠或吞咽等原因导致的无法控制的姿势活动以及肌肉活动可能会发生，并被记录在脑电图中。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/28/Paper/%E9%80%89%E6%8B%A9%E8%84%91%E7%94%B5%E5%9B%BE%E7%8B%AC%E7%AB%8B%E6%88%90%E5%88%86%E8%BF%9B%E8%A1%8C%E7%9F%AB%E6%AD%A3%E7%9A%84%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/image-20210330110627420.png" alt="image-20210330110627420"><figcaption aria-hidden="true">image-20210330110627420</figcaption>
</figure></li>
<li><p><strong>坏通道</strong></p></li>
</ol>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/28/Paper/%E9%80%89%E6%8B%A9%E8%84%91%E7%94%B5%E5%9B%BE%E7%8B%AC%E7%AB%8B%E6%88%90%E5%88%86%E8%BF%9B%E8%A1%8C%E7%9F%AB%E6%AD%A3%E7%9A%84%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/image-20210330110923783.png" alt="image-20210330110923783"><figcaption aria-hidden="true">image-20210330110923783</figcaption>
</figure>
<ol start="4" type="1">
<li><p><strong>罕见事件</strong></p>
<p>B：事件发生在单个电极上</p>
<p>C: 事件发生在多个电极上</p></li>
</ol>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/28/Paper/%E9%80%89%E6%8B%A9%E8%84%91%E7%94%B5%E5%9B%BE%E7%8B%AC%E7%AB%8B%E6%88%90%E5%88%86%E8%BF%9B%E8%A1%8C%E7%9F%AB%E6%AD%A3%E7%9A%84%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/image-20210330120331346.png" alt="image-20210330120331346"><figcaption aria-hidden="true">image-20210330120331346</figcaption>
</figure>
<ol start="5" type="1">
<li><strong>模棱两可的成分</strong></li>
</ol>
<p>有的成分不能明确区分，反映信号的混合，应小心处理。见1-3最后图像。</p>
<h3 id="sasica插件">2.3 SASICA插件</h3>
<p><a href="https://github.com/dnacombo/SASICA">插件地址</a></p>
<p>用于伪像校正的脑电图独立分量的半自动选择</p>
<p><a href="https://sccn.ucsd.edu/wiki/EEGLAB_Plugins">使用说明</a></p>
<h3 id="其他插件">2.4 其他插件</h3>
<ol type="1">
<li>FETHER(全自动统计阈值脑电伪影剔除）</li>
<li>ADJUST(基于时空特征联合使用的脑电伪迹自动检测）</li>
<li>MARA(多重伪像去除算法)</li>
<li>CORRMAP：专门设计用于通过使用IC地图和用户选择的模板地图之间的相关程度来检测眼睛和心脏伪影的工具</li>
</ol>
<h2 id="methods">3. Method(s)</h2>
<h3 id="数据集预处理程序">3.1 数据集预处理程序：</h3>
<ol type="1">
<li>目测原始信号以排除数据的不良部分，</li>
<li>如表2所述的重新参考、下采样和滤波，</li>
<li>历元，</li>
<li>前刺激基线去除，</li>
<li>使用扩展Infomax算法(来自EEGLAB)的ICA。</li>
</ol>
<h3 id="任务和测量">3.2 任务和测量</h3>
<ul>
<li><p>Tools&gt;Select Components by MAP</p></li>
<li><p>检查每个组件以决定是否应该拒绝它</p></li>
<li><p>丢弃给定组件的“理由”：</p>
<p>“眨眼”、“扫视”、“肌肉”、“孤立通道”、“少数试验”(用于识别罕见事件)或“其他”中的任何一个。</p></li>
<li><p>三个专家们独立对所有训练数据集进行评级后，一起修改评级，直到达成共识。无法达成共识的组成部分被归类为“其他”。</p></li>
<li><p>两位专家(包括作者MC)使用相同的程序检查了13个测试数据集的920个组成部分，并一致将其分类</p></li>
</ul>
<h2 id="evaluation">4. Evaluation</h2>
<h2 id="conclusion">5. Conclusion</h2>
<p>到目前为止，ICA并不是唯一可用于校正伪迹的方法。许多其他方法允许在丢弃伪迹的同时潜在地保留神经信号。这些方法包括<code>低通滤波</code>、<code>回归方法</code>、<code>主成分分析</code>(Ille等人，2002；McMenamin等人，2009；Wallstrom等人，2004)、<code>信号空间投影</code>(Uusitalo和Ilmoniemi，1997)或<code>典型相关分析</code>(Clercq等人，2006)。但是ICA是一种强大的方法，它允许同时校正几种类型的伪迹。它用于去除EEG中的伪影，也用于去除脑磁图(MEG)数据中的伪影(Barbati等人，2004年；Parra等人，2005年)，以及伴随的功能性磁共振成像在EEG中产生的强伪影(Mantini等人，2007年)。</p>
<p>事实证明，它在矫正<code>眼部</code>(Jung等人，2000b)、<code>心脏</code>(Campos Viola等人，2009年)、<code>肌肉</code>(Creso-Garcia等人，2008年；McMenamin等人，2010年；Olbrich等人，2011年)或<code>发作性伪影</code>(Urrestarazu等人，2004年)方面是有用的。</p>
<p>ICA的也有缺陷。因此，如何正确地对伪迹进行分类是很重要的。</p>
<h2 id="notes">6. Notes</h2>
<ol type="1">
<li>EEG信号伪迹去除时发生的 I型和II型错误
<ul>
<li>I 丢失待检测的伪迹</li>
<li>II 错误分类非伪迹成分</li>
</ul></li>
</ol>
<h2 id="references">References</h2>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>伪迹</tag>
      </tags>
  </entry>
  <entry>
    <title>正交编码与伪随机序列</title>
    <url>/2021/04/15/%E9%80%9A%E4%BF%A1/%E6%AD%A3%E4%BA%A4%E7%BC%96%E7%A0%81%E4%B8%8E%E4%BC%AA%E9%9A%8F%E6%9C%BA%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="正交">1 正交</h1>
<p>M个周期为T的信号<span class="math inline">\(s_1(t)、s_2(t)、、s_m(t)\)</span>构成正交信号集，则 <span class="math display">\[
\int_o^T s_i(t)s_j(t)dt=0,i \neq j,i,j=1,2...M
\]</span></p>
<h1 id="正交编码">2 正交编码</h1>
<h2 id="互相关系数">2.1 互相关系数</h2>
<p>设长为n的编码码元只取+1，-1，x,y是其中两个码组</p>
<p><span class="math inline">\(x=(x_1,x_2,...x_n)\)</span> <span class="math inline">\(y=(y_1,y_2,...y_n)\)</span></p>
<p>则x,y的互相关系数定义为： <span class="math display">\[
\rho(x,y) =\frac{1}{n}\sum_{i=1}^{n}x_iy_i\\
=\frac{A-D}{A+D}
\]</span> A是相同码元个数，D是不同码元个数</p>
<p>此时 <span class="math inline">\(\rho\)</span> 有三种取值：</p>
<ol type="1">
<li><span class="math inline">\(\rho&gt;0\)</span></li>
<li><span class="math inline">\(\rho=0\)</span> 正交</li>
<li><span class="math inline">\(\rho&lt;0\)</span> 超正交（不同码元数多余相同码元数）</li>
</ol>
<h2 id="自相关系数">2.2 自相关系数</h2>
<p><span class="math display">\[
\rho _x(i) = \frac{1}{n}\sum_{i=1}^{n}x_ix_{i+j}
\]</span></p>
<p>下标按模n计算</p>
<h2 id="正交编码-1">2.3 正交编码</h2>
<p>若码组 <span class="math inline">\(x,y\in C\)</span> 且<span class="math inline">\(\rho(x,y)=0\)</span></p>
<p>则x,y 正交，C为正交编码集</p>
<p>即正交编码的任意两个码组是正交的</p>
<p>s1 （1 1 1 1 ）</p>
<p>s2 （1 1 -1 -1）</p>
<p>s3 （1 -1 -1 1）</p>
<p>s4 （1 -1 1 -1）</p>
<h2 id="超正交编码">2.4 超正交编码</h2>
<p>任何两个码组间均超正交，这种编码为超正交编码</p>
<p>s1 （1 -1 -1）</p>
<p>s2 （-1 1 1）</p>
<p>s3 （-1 1 -1）</p>
<h2 id="双正交编码">2.5 双正交编码</h2>
<p>由正交编码及其反码组成</p>
<p>（0 0 0 0）（1 1 1 1）</p>
<p>（0 0 1 1）（1 1 0 0）</p>
<p>（0 1 1 0）（1 0 0 1）</p>
<p>（0 1 0 1）（1 0 1 0）</p>
<h1 id="伪随机噪声">3 伪随机噪声</h1>
<p><code>特点</code>： 具有类似随机噪声的统计特性，同时由便于重复产生个处理</p>
<p><code>产生</code>: 线性/非线性反馈移位器</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/15/%E9%80%9A%E4%BF%A1/%E6%AD%A3%E4%BA%A4%E7%BC%96%E7%A0%81%E4%B8%8E%E4%BC%AA%E9%9A%8F%E6%9C%BA%E5%BA%8F%E5%88%97/image-20210415200954514.png"></p>
]]></content>
      <categories>
        <category>通信原理</category>
      </categories>
  </entry>
  <entry>
    <title>Day3职工管理系统</title>
    <url>/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本教程主要利用C++来实现一个基于多态的职工管理系统</p>
<span id="more"></span>
<h2 id="管理系统需求">1、管理系统需求</h2>
<p>职工管理系统可以用来管理公司内所有员工的信息</p>
<p>公司中职工分为三类：普通员工、经理、老板，显示信息时，需要显示职工编号、职工姓名、职工岗位、以及职责</p>
<p>普通员工职责：完成经理交给的任务</p>
<p>经理职责：完成老板交给的任务，并下发任务给员工</p>
<p>老板职责：管理公司所有事务</p>
<p>管理系统中需要实现的功能如下：</p>
<ul>
<li><p>退出管理程序：退出当前管理系统</p></li>
<li><p>增加职工信息：实现批量添加职工功能，将信息录入到文件中，职工信息为：职工编号、姓名、部门编号</p></li>
<li><p>显示职工信息：显示公司内部所有职工的信息</p></li>
<li><p>删除离职职工：按照编号删除指定的职工</p></li>
<li><p>修改职工信息：按照编号修改职工个人信息</p></li>
<li><p>查找职工信息：按照职工的编号或者职工的姓名进行查找相关的人员信息</p></li>
<li><p>按照编号排序：按照职工编号，进行排序，排序规则由用户指定</p></li>
<li><p>清空所有文档：清空文件中记录的所有职工信息 （清空前需要再次确认，防止误删）</p></li>
</ul>
<p>系统界面效果图如下：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546511409198.png" alt="1546511409198"><figcaption aria-hidden="true">1546511409198</figcaption>
</figure>
<p>需根据用户不同的选择，完成不同的功能！</p>
<h2 id="创建项目">2、创建项目</h2>
<p>创建项目步骤如下：</p>
<ul>
<li>创建新项目</li>
<li>添加文件</li>
</ul>
<h3 id="创建项目-1">2.1 创建项目</h3>
<p>打开vs2017后，点击创建新项目，创建新的C++项目</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544151201465.png" alt="1544151201465"><figcaption aria-hidden="true">1544151201465</figcaption>
</figure>
<p>填写项目名称以及项目路径，点击确定</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546349209805.png" alt="1546349209805"><figcaption aria-hidden="true">1546349209805</figcaption>
</figure>
<h3 id="添加文件">2.2 添加文件</h3>
<p>右键源文件，进行添加文件操作</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546349360960.png" alt="1546349360960"><figcaption aria-hidden="true">1546349360960</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546349421496.png" alt="1546349421496"><figcaption aria-hidden="true">1546349421496</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546349488752.png" alt="1546349488752"><figcaption aria-hidden="true">1546349488752</figcaption>
</figure>
<p>至此，项目已创建完毕</p>
<h2 id="创建管理类">3、创建管理类</h2>
<p>​ 管理类负责的内容如下：</p>
<ul>
<li>与用户的沟通菜单界面</li>
<li>对职工增删改查的操作</li>
<li>与文件的读写交互</li>
</ul>
<h3 id="创建文件">3.1创建文件</h3>
<p>在头文件和源文件的文件夹下分别创建workerManager.h 和 workerManager.cpp文件</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546349904944.png" alt="1546349904944"><figcaption aria-hidden="true">1546349904944</figcaption>
</figure>
<h3 id="头文件实现">3.2 头文件实现</h3>
<p>在workerManager.h中设计管理类</p>
<p>代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WorkerManager</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><br>	<span class="hljs-comment">//构造函数</span><br>	WorkerManager();<br><br>	<span class="hljs-comment">//析构函数</span><br>	~WorkerManager();<br><br>&#125;;<br></code></pre></td></tr></table></figure>
<h3 id="源文件实现">3.3 源文件实现</h3>
<p>在workerManager.cpp中将构造和析构函数空实现补全</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;workerManager.h&quot;</span></span><br><br>WorkerManager::WorkerManager()<br>&#123;<br>&#125;<br><br>WorkerManager::~WorkerManager()<br>&#123;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>至此职工管理类以创建完毕</p>
<h2 id="菜单功能">4、菜单功能</h2>
<p>功能描述：与用户的沟通界面</p>
<h3 id="添加成员函数">4.1 添加成员函数</h3>
<p>在管理类workerManager.h中添加成员函数 <code>void Show_Menu();</code></p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546351543942.png" alt="1546351543942"><figcaption aria-hidden="true">1546351543942</figcaption>
</figure>
<h3 id="菜单功能实现">4.2 菜单功能实现</h3>
<p>在管理类workerManager.cpp中实现 Show_Menu()函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::Show_Menu</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;********************************************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*********  欢迎使用职工管理系统！ **********&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*************  0.退出管理程序  *************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*************  1.增加职工信息  *************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*************  2.显示职工信息  *************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*************  3.删除离职职工  *************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*************  4.修改职工信息  *************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*************  5.查找职工信息  *************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*************  6.按照编号排序  *************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*************  7.清空所有文档  *************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;********************************************&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="测试菜单功能">4.3 测试菜单功能</h3>
<p>在职工管理系统.cpp中测试菜单功能</p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;workerManager.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	WorkerManager wm;<br><br>	wm.Show_Menu();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>运行效果如图：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546352771191.png" alt="1546352771191"><figcaption aria-hidden="true">1546352771191</figcaption>
</figure>
<h2 id="退出功能">5、退出功能</h2>
<h3 id="提供功能接口">5.1 提供功能接口</h3>
<p>在main函数中提供分支选择，提供每个功能接口</p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	WorkerManager wm;<br>	<span class="hljs-keyword">int</span> choice = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>	&#123;<br>		<span class="hljs-comment">//展示菜单</span><br>		wm.Show_Menu();<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入您的选择:&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">cin</span> &gt;&gt; choice;<br><br>		<span class="hljs-keyword">switch</span> (choice)<br>		&#123;<br>		<span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-comment">//退出系统</span><br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">//添加职工</span><br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">//显示职工</span><br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-comment">//删除职工</span><br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-comment">//修改职工</span><br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: <span class="hljs-comment">//查找职工</span><br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: <span class="hljs-comment">//排序职工</span><br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">case</span> <span class="hljs-number">7</span>: <span class="hljs-comment">//清空文件</span><br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">default</span>:<br>			system(<span class="hljs-string">&quot;cls&quot;</span>);<br>			<span class="hljs-keyword">break</span>;<br>		&#125;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="实现退出功能">5.2 实现退出功能</h3>
<p>在workerManager.h中提供退出系统的成员函数 <code>void exitSystem();</code></p>
<p>在workerManager.cpp中提供具体的功能实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::exitSystem</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;欢迎下次使用&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br>	<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="测试功能">5.3测试功能</h3>
<p>在main函数分支 0 选项中，调用退出程序的接口</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546353199424.png" alt="1546353199424"><figcaption aria-hidden="true">1546353199424</figcaption>
</figure>
<p>运行测试效果如图：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546353155490.png" alt="1546353155490"><figcaption aria-hidden="true">1546353155490</figcaption>
</figure>
<h2 id="创建职工类">6、创建职工类</h2>
<h3 id="创建职工抽象类">6.1 创建职工抽象类</h3>
<p>职工的分类为：普通员工、经理、老板</p>
<p>将三种职工抽象到一个类（worker）中,利用多态管理不同职工种类</p>
<p>职工的属性为：职工编号、职工姓名、职工所在部门编号</p>
<p>职工的行为为：岗位职责信息描述，获取岗位名称</p>
<p>头文件文件夹下 创建文件worker.h 文件并且添加如下代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">//职工抽象基类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Worker</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><br>	<span class="hljs-comment">//显示个人信息</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showInfo</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>	<span class="hljs-comment">//获取岗位名称</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-built_in">string</span> <span class="hljs-title">getDeptName</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><br>	<span class="hljs-keyword">int</span> m_Id; <span class="hljs-comment">//职工编号</span><br>	<span class="hljs-built_in">string</span> m_Name; <span class="hljs-comment">//职工姓名</span><br>	<span class="hljs-keyword">int</span> m_DeptId; <span class="hljs-comment">//职工所在部门名称编号</span><br>&#125;;<br></code></pre></td></tr></table></figure>
<h3 id="创建普通员工类">6.2 创建普通员工类</h3>
<p>普通员工类<strong>继承</strong>职工抽象类，并重写父类中纯虚函数</p>
<p>在头文件和源文件的文件夹下分别创建employee.h 和 employee.cpp文件</p>
<p>employee.h中代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;worker.h&quot;</span></span><br><br><span class="hljs-comment">//员工类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> :</span><span class="hljs-keyword">public</span> Worker<br>&#123;<br><span class="hljs-keyword">public</span>:<br><br>	<span class="hljs-comment">//构造函数</span><br>	Employee(<span class="hljs-keyword">int</span> id, <span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> dId);<br><br>	<span class="hljs-comment">//显示个人信息</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showInfo</span><span class="hljs-params">()</span></span>;<br><br>	<span class="hljs-comment">//获取职工岗位名称</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-built_in">string</span> <span class="hljs-title">getDeptName</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure>
<p>employee.cpp中代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;employee.h&quot;</span></span><br><br>Employee::Employee(<span class="hljs-keyword">int</span> id, <span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> dId)<br>&#123;<br>	<span class="hljs-keyword">this</span>-&gt;m_Id = id;<br>	<span class="hljs-keyword">this</span>-&gt;m_Name = name;<br>	<span class="hljs-keyword">this</span>-&gt;m_DeptId = dId;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Employee::showInfo</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;职工编号： &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Id<br>		&lt;&lt; <span class="hljs-string">&quot; \t职工姓名： &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Name<br>		&lt;&lt; <span class="hljs-string">&quot; \t岗位：&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;getDeptName()<br>		&lt;&lt; <span class="hljs-string">&quot; \t岗位职责：完成经理交给的任务&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">Employee::getDeptName</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;员工&quot;</span>);<br>&#125;<br><br><br></code></pre></td></tr></table></figure>
<h3 id="创建经理类">6.3 创建经理类</h3>
<p>经理类<strong>继承</strong>职工抽象类，并重写父类中纯虚函数，和普通员工类似</p>
<p>在头文件和源文件的文件夹下分别创建manager.h 和 manager.cpp文件</p>
<p>manager.h中代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;worker.h&quot;</span></span><br><br><span class="hljs-comment">//经理类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Manager</span> :</span><span class="hljs-keyword">public</span> Worker<br>&#123;<br><span class="hljs-keyword">public</span>:<br><br>	Manager(<span class="hljs-keyword">int</span> id, <span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> dId);<br><br>	<span class="hljs-comment">//显示个人信息</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showInfo</span><span class="hljs-params">()</span></span>;<br><br>	<span class="hljs-comment">//获取职工岗位名称</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-built_in">string</span> <span class="hljs-title">getDeptName</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure>
<p>manager.cpp中代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;manager.h&quot;</span></span><br><br>Manager::Manager(<span class="hljs-keyword">int</span> id, <span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> dId)<br>&#123;<br>	<span class="hljs-keyword">this</span>-&gt;m_Id = id;<br>	<span class="hljs-keyword">this</span>-&gt;m_Name = name;<br>	<span class="hljs-keyword">this</span>-&gt;m_DeptId = dId;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Manager::showInfo</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;职工编号： &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Id<br>		&lt;&lt; <span class="hljs-string">&quot; \t职工姓名： &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Name<br>		&lt;&lt; <span class="hljs-string">&quot; \t岗位：&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;getDeptName()<br>		&lt;&lt; <span class="hljs-string">&quot; \t岗位职责：完成老板交给的任务,并下发任务给员工&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">Manager::getDeptName</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;经理&quot;</span>);<br>&#125;<br><br><br></code></pre></td></tr></table></figure>
<h3 id="创建老板类">6.4 创建老板类</h3>
<p>老板类<strong>继承</strong>职工抽象类，并重写父类中纯虚函数，和普通员工类似</p>
<p>在头文件和源文件的文件夹下分别创建boss.h 和 boss.cpp文件</p>
<p>boss.h中代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;worker.h&quot;</span></span><br><br><span class="hljs-comment">//老板类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Boss</span> :</span><span class="hljs-keyword">public</span> Worker<br>&#123;<br><span class="hljs-keyword">public</span>:<br><br>	Boss(<span class="hljs-keyword">int</span> id, <span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> dId);<br><br>	<span class="hljs-comment">//显示个人信息</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showInfo</span><span class="hljs-params">()</span></span>;<br><br>	<span class="hljs-comment">//获取职工岗位名称</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-built_in">string</span> <span class="hljs-title">getDeptName</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure>
<p>boss.cpp中代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;boss.h&quot;</span></span><br><br>Boss::Boss(<span class="hljs-keyword">int</span> id, <span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> dId)<br>&#123;<br>	<span class="hljs-keyword">this</span>-&gt;m_Id = id;<br>	<span class="hljs-keyword">this</span>-&gt;m_Name = name;<br>	<span class="hljs-keyword">this</span>-&gt;m_DeptId = dId;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Boss::showInfo</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;职工编号： &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Id<br>		&lt;&lt; <span class="hljs-string">&quot; \t职工姓名： &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Name<br>		&lt;&lt; <span class="hljs-string">&quot; \t岗位：&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;getDeptName()<br>		&lt;&lt; <span class="hljs-string">&quot; \t岗位职责：管理公司所有事务&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">Boss::getDeptName</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;总裁&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="测试多态">6.5 测试多态</h3>
<p>在职工管理系统.cpp中添加测试函数，并且运行能够产生多态</p>
<p>测试代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;worker.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;employee.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;manager.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;boss.h&quot;</span></span><br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Worker * worker = <span class="hljs-literal">NULL</span>;<br>	worker = <span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">1</span>);<br>	worker-&gt;showInfo();<br>	<span class="hljs-keyword">delete</span> worker;<br>	<br>	worker = <span class="hljs-keyword">new</span> Manager(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">2</span>);<br>	worker-&gt;showInfo();<br>	<span class="hljs-keyword">delete</span> worker;<br><br>	worker = <span class="hljs-keyword">new</span> Boss(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">3</span>);<br>	worker-&gt;showInfo();<br>	<span class="hljs-keyword">delete</span> worker;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>运行效果如图：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546398236081.png" alt="1546398236081"><figcaption aria-hidden="true">1546398236081</figcaption>
</figure>
<p>测试成功后，测试代码可以注释保留，或者选择删除</p>
<h2 id="添加职工">7、添加职工</h2>
<p>功能描述：批量添加职工，并且保存到文件中</p>
<h3 id="功能分析">7.1 功能分析</h3>
<p>分析：</p>
<p>用户在批量创建时，可能会创建不同种类的职工</p>
<p>如果想将所有不同种类的员工都放入到一个数组中，可以将所有员工的指针维护到一个数组里</p>
<p>如果想在程序中维护这个不定长度的数组，可以将数组创建到堆区，并利用Worker **的指针维护</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546399491099.png" alt="1546399491099"><figcaption aria-hidden="true">1546399491099</figcaption>
</figure>
<h3 id="功能实现">7.2 功能实现</h3>
<p>在WokerManager.h头文件中添加成员属性 代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//记录文件中的人数个数</span><br><span class="hljs-keyword">int</span> m_EmpNum;<br><br><span class="hljs-comment">//员工数组的指针</span><br>Worker ** m_EmpArray;<br></code></pre></td></tr></table></figure>
<p>在WorkerManager构造函数中初始化属性</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++">WorkerManager::WorkerManager()<br>&#123;<br>	<span class="hljs-comment">//初始化人数</span><br>	<span class="hljs-keyword">this</span>-&gt;m_EmpNum = <span class="hljs-number">0</span>;<br><br>	<span class="hljs-comment">//初始化数组指针</span><br>	<span class="hljs-keyword">this</span>-&gt;m_EmpArray = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在workerManager.h中添加成员函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//增加职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add_Emp</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure>
<p>workerManager.cpp中实现该函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//增加职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::Add_Emp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入增加职工数量： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-keyword">int</span> addNum = <span class="hljs-number">0</span>;<br>	<span class="hljs-built_in">cin</span> &gt;&gt; addNum;<br><br>	<span class="hljs-keyword">if</span> (addNum &gt; <span class="hljs-number">0</span>)<br>	&#123;<br>		<span class="hljs-comment">//计算新空间大小</span><br>		<span class="hljs-keyword">int</span> newSize = <span class="hljs-keyword">this</span>-&gt;m_EmpNum + addNum;<br><br>		<span class="hljs-comment">//开辟新空间</span><br>		Worker ** newSpace = <span class="hljs-keyword">new</span> Worker*[newSize];<br><br>		<span class="hljs-comment">//将原空间下内容存放到新空间下</span><br>		<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_EmpArray != <span class="hljs-literal">NULL</span>)<br>		&#123;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;m_EmpNum; i++)<br>			&#123;<br>				newSpace[i] = <span class="hljs-keyword">this</span>-&gt;m_EmpArray[i];<br>			&#125;<br>		&#125;<br><br>		<span class="hljs-comment">//输入新数据</span><br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; addNum; i++)<br>		&#123;<br>			<span class="hljs-keyword">int</span> id;<br>			<span class="hljs-built_in">string</span> name;<br>			<span class="hljs-keyword">int</span> dSelect;<br><br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入第 &quot;</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; 个新职工编号：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>			<span class="hljs-built_in">cin</span> &gt;&gt; id;<br><br><br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入第 &quot;</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; 个新职工姓名：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>			<span class="hljs-built_in">cin</span> &gt;&gt; name;<br><br><br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请选择该职工的岗位：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;1、普通职工&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;2、经理&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;3、老板&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>			<span class="hljs-built_in">cin</span> &gt;&gt; dSelect;<br><br><br>			Worker * worker = <span class="hljs-literal">NULL</span>;<br>			<span class="hljs-keyword">switch</span> (dSelect)<br>			&#123;<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">//普通员工</span><br>				worker = <span class="hljs-keyword">new</span> Employee(id, name, <span class="hljs-number">1</span>);<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">//经理</span><br>				worker = <span class="hljs-keyword">new</span> Manager(id, name, <span class="hljs-number">2</span>);<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:  <span class="hljs-comment">//老板</span><br>				worker = <span class="hljs-keyword">new</span> Boss(id, name, <span class="hljs-number">3</span>);<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">default</span>:<br>				<span class="hljs-keyword">break</span>;<br>			&#125;<br><br><br>			newSpace[<span class="hljs-keyword">this</span>-&gt;m_EmpNum + i] = worker;<br>		&#125;<br><br>		<span class="hljs-comment">//释放原有空间</span><br>		<span class="hljs-keyword">delete</span>[] <span class="hljs-keyword">this</span>-&gt;m_EmpArray;<br><br>		<span class="hljs-comment">//更改新空间的指向</span><br>		<span class="hljs-keyword">this</span>-&gt;m_EmpArray = newSpace;<br><br>		<span class="hljs-comment">//更新新的个数</span><br>		<span class="hljs-keyword">this</span>-&gt;m_EmpNum = newSize;<br><br>		<span class="hljs-comment">//提示信息</span><br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;成功添加&quot;</span> &lt;&lt; addNum &lt;&lt; <span class="hljs-string">&quot;名新职工！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;输入有误&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br>	system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在WorkerManager.cpp的析构函数中，释放堆区数据</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++">WorkerManager::~WorkerManager()<br>&#123;<br>	<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_EmpArray != <span class="hljs-literal">NULL</span>)<br>	&#123;<br>		<span class="hljs-keyword">delete</span>[] <span class="hljs-keyword">this</span>-&gt;m_EmpArray;<br>	&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="测试添加">7.3 测试添加</h3>
<p>在main函数分支 1 选项中，调用添加职工接口</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546401705277.png" alt="1546401705277"><figcaption aria-hidden="true">1546401705277</figcaption>
</figure>
<p>效果如图：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546401763461.png" alt="1546401763461"><figcaption aria-hidden="true">1546401763461</figcaption>
</figure>
<p>至此，添加职工到程序中功能实现完毕</p>
<h2 id="文件交互---写文件">8、文件交互 - 写文件</h2>
<p>功能描述：对文件进行读写</p>
<p>​ 在上一个添加功能中，我们只是将所有的数据添加到了内存中，一旦程序结束就无法保存了</p>
<p>​ 因此文件管理类中需要一个与文件进行交互的功能，对于文件进行读写操作</p>
<h3 id="设定文件路径">8.1 设定文件路径</h3>
<p>首先我们将文件路径，在workerManager.h中添加宏常量,并且包含头文件 fstream</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  FILENAME <span class="hljs-meta-string">&quot;empFile.txt&quot;</span></span><br></code></pre></td></tr></table></figure>
<h3 id="成员函数声明">8.2 成员函数声明</h3>
<p>在workerManager.h中类里添加成员函数 <code>void save()</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//保存文件</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure>
<h3 id="保存文件功能实现">8.3 保存文件功能实现</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::save</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	ofstream ofs;<br>	ofs.open(FILENAME, ios::out);<br><br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;m_EmpNum; i++)<br>	&#123;<br>		ofs &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Id &lt;&lt; <span class="hljs-string">&quot; &quot;</span> <br>			&lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> <br>			&lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_DeptId &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	ofs.close();<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="保存文件功能测试">8.4 保存文件功能测试</h3>
<p>在添加职工功能中添加成功后添加保存文件函数</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546432469465.png" alt="1546432469465"><figcaption aria-hidden="true">1546432469465</figcaption>
</figure>
<p>再次运行代码，添加职工</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546401763461.png" alt="1546401763461"><figcaption aria-hidden="true">1546401763461</figcaption>
</figure>
<p>同级目录下多出文件，并且保存了添加的信息</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546432343078.png" alt="1546432343078"><figcaption aria-hidden="true">1546432343078</figcaption>
</figure>
<h2 id="文件交互---读文件">9、文件交互 - 读文件</h2>
<p>功能描述：将文件中的内容读取到程序中</p>
<p>虽然我们实现了添加职工后保存到文件的操作，但是每次开始运行程序，并没有将文件中数据读取到程序中</p>
<p>而我们的程序功能中还有清空文件的需求</p>
<p>因此构造函数初始化数据的情况分为三种</p>
<ol type="1">
<li>第一次使用，文件未创建</li>
<li>文件存在，但是数据被用户清空</li>
<li>文件存在，并且保存职工的所有数据</li>
</ol>
<h3 id="文件未创建">9.1 文件未创建</h3>
<p>在workerManager.h中添加新的成员属性 m_FileIsEmpty标志文件是否为空</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//标志文件是否为空</span><br><span class="hljs-keyword">bool</span> m_FileIsEmpty;<br></code></pre></td></tr></table></figure>
<p>修改WorkerManager.cpp中构造函数代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++">WorkerManager::WorkerManager()<br>&#123;<br>	ifstream ifs;<br>	ifs.open(FILENAME, ios::in);<br><br>	<span class="hljs-comment">//文件不存在情况</span><br>	<span class="hljs-keyword">if</span> (!ifs.is_open())<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;文件不存在&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//测试输出</span><br>		<span class="hljs-keyword">this</span>-&gt;m_EmpNum = <span class="hljs-number">0</span>;  <span class="hljs-comment">//初始化人数</span><br>		<span class="hljs-keyword">this</span>-&gt;m_FileIsEmpty = <span class="hljs-literal">true</span>; <span class="hljs-comment">//初始化文件为空标志</span><br>		<span class="hljs-keyword">this</span>-&gt;m_EmpArray = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//初始化数组</span><br>		ifs.close(); <span class="hljs-comment">//关闭文件</span><br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>删除文件后，测试文件不存在时初始化数据功能</p>
<h3 id="文件存在且数据为空">9.2 文件存在且数据为空</h3>
<p>在workerManager.cpp中的构造函数追加代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//文件存在，并且没有记录</span><br><span class="hljs-keyword">char</span> ch;<br>ifs &gt;&gt; ch;<br><span class="hljs-keyword">if</span> (ifs.eof())<br>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;文件为空!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-keyword">this</span>-&gt;m_EmpNum = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">this</span>-&gt;m_FileIsEmpty = <span class="hljs-literal">true</span>;<br>	<span class="hljs-keyword">this</span>-&gt;m_EmpArray = <span class="hljs-literal">NULL</span>;<br>	ifs.close();<br>	<span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>追加代码位置如图：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546435197575.png" alt="1546435197575"><figcaption aria-hidden="true">1546435197575</figcaption>
</figure>
<p>将文件创建后清空文件内容，并测试该情况下初始化功能</p>
<p>我们发现文件不存在或者为空清空 m_FileIsEmpty 判断文件是否为空的标志都为真，那何时为假？</p>
<p>成功添加职工后，应该更改文件不为空的标志</p>
<p>在<code>void WorkerManager::Add_Emp()</code>成员函数中添加：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//更新职工不为空标志</span><br><span class="hljs-keyword">this</span>-&gt;m_FileIsEmpty = <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546656256176.png" alt="1546656256176"><figcaption aria-hidden="true">1546656256176</figcaption>
</figure>
<h3 id="文件存在且保存职工数据">9.3 文件存在且保存职工数据</h3>
<h4 id="获取记录的职工人数">9.3.1 获取记录的职工人数</h4>
<p>在workerManager.h中添加成员函数 <code>int get_EmpNum();</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//统计人数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_EmpNum</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure>
<p>workerManager.cpp中实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">WorkerManager::get_EmpNum</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	ifstream ifs;<br>	ifs.open(FILENAME, ios::in);<br><br>	<span class="hljs-keyword">int</span> id;<br>	<span class="hljs-built_in">string</span> name;<br>	<span class="hljs-keyword">int</span> dId;<br><br>	<span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br><br>	<span class="hljs-keyword">while</span> (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; dId)<br>	&#123;<br>        <span class="hljs-comment">//记录人数</span><br>		num++;<br>	&#125;<br>	ifs.close();<br><br>	<span class="hljs-keyword">return</span> num;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在workerManager.cpp构造函数中继续追加代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> num =  <span class="hljs-keyword">this</span>-&gt;get_EmpNum();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;职工个数为：&quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">//测试代码</span><br><span class="hljs-keyword">this</span>-&gt;m_EmpNum = num;  <span class="hljs-comment">//更新成员属性 </span><br></code></pre></td></tr></table></figure>
<p>手动添加一些职工数据，测试获取职工数量函数</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546436429055.png" alt="1546436429055"><figcaption aria-hidden="true">1546436429055</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546436385793.png" alt="1546436385793"><figcaption aria-hidden="true">1546436385793</figcaption>
</figure>
<h4 id="初始化数组">9.3.2 初始化数组</h4>
<p>根据职工的数据以及职工数据，初始化workerManager中的Worker ** m_EmpArray 指针</p>
<p>在WorkerManager.h中添加成员函数 <code>void init_Emp();</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//初始化员工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init_Emp</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure>
<p>在WorkerManager.cpp中实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::init_Emp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	ifstream ifs;<br>	ifs.open(FILENAME, ios::in);<br><br>	<span class="hljs-keyword">int</span> id;<br>	<span class="hljs-built_in">string</span> name;<br>	<span class="hljs-keyword">int</span> dId;<br>	<br>	<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">while</span> (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; dId)<br>	&#123;<br>		Worker * worker = <span class="hljs-literal">NULL</span>;<br>		<span class="hljs-comment">//根据不同的部门Id创建不同对象</span><br>		<span class="hljs-keyword">if</span> (dId == <span class="hljs-number">1</span>)  <span class="hljs-comment">// 1普通员工</span><br>		&#123;<br>			worker = <span class="hljs-keyword">new</span> Employee(id, name, dId);<br>		&#125;<br>		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dId == <span class="hljs-number">2</span>) <span class="hljs-comment">//2经理</span><br>		&#123;<br>			worker = <span class="hljs-keyword">new</span> Manager(id, name, dId);<br>		&#125;<br>		<span class="hljs-keyword">else</span> <span class="hljs-comment">//总裁</span><br>		&#123;<br>			worker = <span class="hljs-keyword">new</span> Boss(id, name, dId);<br>		&#125;<br>		<span class="hljs-comment">//存放在数组中</span><br>		<span class="hljs-keyword">this</span>-&gt;m_EmpArray[index] = worker;<br>		index++;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在workerManager.cpp构造函数中追加代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//根据职工数创建数组</span><br><span class="hljs-keyword">this</span>-&gt;m_EmpArray = <span class="hljs-keyword">new</span> Worker *[<span class="hljs-keyword">this</span>-&gt;m_EmpNum];<br><span class="hljs-comment">//初始化职工</span><br>init_Emp();<br><br><span class="hljs-comment">//测试代码</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m_EmpNum; i++)<br>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;职工号： &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Id<br>		&lt;&lt; <span class="hljs-string">&quot; 职工姓名： &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Name<br>		&lt;&lt; <span class="hljs-string">&quot; 部门编号： &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_DeptId &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>运行程序，测试从文件中获取的数据</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546436938152.png" alt="1546436938152"><figcaption aria-hidden="true">1546436938152</figcaption>
</figure>
<p>至此初始化数据功能完毕，测试代码可以注释或删除掉！</p>
<h2 id="显示职工">10、显示职工</h2>
<p>功能描述：显示当前所有职工信息</p>
<h3 id="显示职工函数声明">10.1 显示职工函数声明</h3>
<p>在workerManager.h中添加成员函数 <code>void Show_Emp();</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//显示职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show_Emp</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure>
<h3 id="显示职工函数实现">10.2 显示职工函数实现</h3>
<p>在workerManager.cpp中实现成员函数 <code>void Show_Emp();</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//显示职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::Show_Emp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_FileIsEmpty)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;文件不存在或记录为空！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m_EmpNum; i++)<br>		&#123;<br>			<span class="hljs-comment">//利用多态调用接口</span><br>			<span class="hljs-keyword">this</span>-&gt;m_EmpArray[i]-&gt;showInfo();<br>		&#125;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br>	system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="测试显示职工">10.3 测试显示职工</h3>
<p>在main函数分支 2 选项中，调用显示职工接口</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546497336465.png" alt="1546497336465"><figcaption aria-hidden="true">1546497336465</figcaption>
</figure>
<p>测试时分别测试 文件为空和文件不为空两种情况</p>
<p>测试效果：</p>
<p>测试1-文件不存在或者为空情况</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546497082135.png" alt="1546497082135"><figcaption aria-hidden="true">1546497082135</figcaption>
</figure>
<p>测试2 - 文件存在且有记录情况</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546496947671.png" alt="1546496947671"><figcaption aria-hidden="true">1546496947671</figcaption>
</figure>
<p>测试完毕，至此，显示所有职工信息功能实现</p>
<h2 id="删除职工">11、删除职工</h2>
<p>功能描述：按照职工的编号进行删除职工操作</p>
<h3 id="删除职工函数声明">11.1 删除职工函数声明</h3>
<p>在workerManager.h中添加成员函数 <code>void Del_Emp();</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//删除职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Del_Emp</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure>
<h3 id="职工是否存在函数声明">11.2 职工是否存在函数声明</h3>
<p>很多功能都需要用到根据职工是否存在来进行操作如：删除职工、修改职工、查找职工</p>
<p>因此添加该公告函数，以便后续调用</p>
<p>在workerManager.h中添加成员函数 <code>int IsExist(int id);</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//按照职工编号判断职工是否存在,若存在返回职工在数组中位置，不存在返回-1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">IsExist</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></td></tr></table></figure>
<h3 id="职工是否存在函数实现">11.3 职工是否存在函数实现</h3>
<p>在workerManager.cpp中实现成员函数 <code>int IsExist(int id);</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">WorkerManager::IsExist</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">int</span> index = <span class="hljs-number">-1</span>;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;m_EmpNum; i++)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Id == id)<br>		&#123;<br>			index = i;<br><br>			<span class="hljs-keyword">break</span>;<br>		&#125;<br>	&#125;<br><br>	<span class="hljs-keyword">return</span> index;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="删除职工函数实现">11.4 删除职工函数实现</h3>
<p>在workerManager.cpp中实现成员函数 <code>void Del_Emp();</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//删除职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::Del_Emp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_FileIsEmpty)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;文件不存在或记录为空！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-comment">//按职工编号删除</span><br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入想要删除的职工号：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-keyword">int</span> id = <span class="hljs-number">0</span>;<br>		<span class="hljs-built_in">cin</span> &gt;&gt; id;<br><br>		<span class="hljs-keyword">int</span> index = <span class="hljs-keyword">this</span>-&gt;IsExist(id);<br><br>		<span class="hljs-keyword">if</span> (index != <span class="hljs-number">-1</span>)  <span class="hljs-comment">//说明index上位置数据需要删除</span><br>		&#123;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = index; i &lt; <span class="hljs-keyword">this</span>-&gt;m_EmpNum - <span class="hljs-number">1</span>; i++)<br>			&#123;<br>				<span class="hljs-keyword">this</span>-&gt;m_EmpArray[i] = <span class="hljs-keyword">this</span>-&gt;m_EmpArray[i + <span class="hljs-number">1</span>];<br>			&#125;<br>			<span class="hljs-keyword">this</span>-&gt;m_EmpNum--;<br><br>			<span class="hljs-keyword">this</span>-&gt;save(); <span class="hljs-comment">//删除后数据同步到文件中</span><br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;删除成功！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		&#125;<br>		<span class="hljs-keyword">else</span><br>		&#123;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;删除失败，未找到该职工&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		&#125;<br>	&#125;<br>	<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br>	system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="测试删除职工">11.5 测试删除职工</h3>
<p>在main函数分支 3 选项中，调用删除职工接口</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546502698622.png" alt="1546502698622"><figcaption aria-hidden="true">1546502698622</figcaption>
</figure>
<p>测试1 - 删除不存在职工情况</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546500324196.png" alt="1546500324196"><figcaption aria-hidden="true">1546500324196</figcaption>
</figure>
<p>测试2 - 删除存在的职工情况</p>
<p>删除成功提示图：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546500350526.png" alt="1546500350526"><figcaption aria-hidden="true">1546500350526</figcaption>
</figure>
<p>再次显示所有职工信息，确保已经删除</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546500361889.png" alt="1546500361889"><figcaption aria-hidden="true">1546500361889</figcaption>
</figure>
<p>查看文件中信息，再次核实员工已被完全删除</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546500383570.png" alt="1546500383570"><figcaption aria-hidden="true">1546500383570</figcaption>
</figure>
<p>至此，删除职工功能实现完毕！</p>
<h2 id="修改职工">12、修改职工</h2>
<p>功能描述：能够按照职工的编号对职工信息进行修改并保存</p>
<h3 id="修改职工函数声明">12.1 修改职工函数声明</h3>
<p>在workerManager.h中添加成员函数 <code>void Mod_Emp();</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//修改职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Mod_Emp</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure>
<h3 id="修改职工函数实现">12.2 修改职工函数实现</h3>
<p>在workerManager.cpp中实现成员函数 <code>void Mod_Emp();</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//修改职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::Mod_Emp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_FileIsEmpty)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;文件不存在或记录为空！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入修改职工的编号：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-keyword">int</span> id;<br>		<span class="hljs-built_in">cin</span> &gt;&gt; id;<br><br>		<span class="hljs-keyword">int</span> ret = <span class="hljs-keyword">this</span>-&gt;IsExist(id);<br>		<span class="hljs-keyword">if</span> (ret != <span class="hljs-number">-1</span>)<br>		&#123; <br>			<span class="hljs-comment">//查找到编号的职工</span><br><br>			<span class="hljs-keyword">delete</span> <span class="hljs-keyword">this</span>-&gt;m_EmpArray[ret];<br>			<br>			<span class="hljs-keyword">int</span> newId = <span class="hljs-number">0</span>;<br>			<span class="hljs-built_in">string</span> newName = <span class="hljs-string">&quot;&quot;</span>;<br>			<span class="hljs-keyword">int</span> dSelect = <span class="hljs-number">0</span>;<br><br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;查到： &quot;</span> &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot;号职工，请输入新职工号： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>			<span class="hljs-built_in">cin</span> &gt;&gt; newId;<br><br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入新姓名： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>			<span class="hljs-built_in">cin</span> &gt;&gt; newName;<br><br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入岗位： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;1、普通职工&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;2、经理&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;3、老板&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>			<span class="hljs-built_in">cin</span> &gt;&gt; dSelect;<br><br>			Worker * worker = <span class="hljs-literal">NULL</span>;<br>			<span class="hljs-keyword">switch</span> (dSelect)<br>			&#123;<br>			case1:<br>				worker = <span class="hljs-keyword">new</span> Employee(newId, newName, dSelect);<br>				<span class="hljs-keyword">break</span>;<br>			case2:<br>				worker = <span class="hljs-keyword">new</span> Manager(newId, newName, dSelect);<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>				worker = <span class="hljs-keyword">new</span> Boss(newId, newName, dSelect);<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">default</span>:<br>				<span class="hljs-keyword">break</span>;<br>			&#125;<br><br>			<span class="hljs-comment">//更改数据 到数组中</span><br>			<span class="hljs-keyword">this</span>-&gt;m_EmpArray[ret]= worker;<br>			<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;修改成功！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>			<span class="hljs-comment">//保存到文件中</span><br>			<span class="hljs-keyword">this</span>-&gt;save();<br>		&#125;<br>		<span class="hljs-keyword">else</span><br>		&#123;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;修改失败，查无此人&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		&#125;<br>	&#125;<br><br>	<span class="hljs-comment">//按任意键 清屏</span><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br>	system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="测试修改职工">12.3 测试修改职工</h3>
<p>在main函数分支 4 选项中，调用修改职工接口</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546502651922.png" alt="1546502651922"><figcaption aria-hidden="true">1546502651922</figcaption>
</figure>
<p>测试1 - 修改不存在职工情况</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546502759643.png" alt="1546502759643"><figcaption aria-hidden="true">1546502759643</figcaption>
</figure>
<p>测试2 - 修改存在职工情况，例如将职工 "李四" 改为 "赵四"</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546502830350.png" alt="1546502830350"><figcaption aria-hidden="true">1546502830350</figcaption>
</figure>
<p>修改后再次查看所有职工信息，并确认修改成功</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546502865443.png" alt="1546502865443"><figcaption aria-hidden="true">1546502865443</figcaption>
</figure>
<p>再次确认文件中信息也同步更新</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546502898653.png" alt="1546502898653"><figcaption aria-hidden="true">1546502898653</figcaption>
</figure>
<p>至此，修改职工功能已实现！</p>
<h2 id="查找职工">13、查找职工</h2>
<p>功能描述：提供两种查找职工方式，一种按照职工编号，一种按照职工姓名</p>
<h3 id="查找职工函数声明">13.1 查找职工函数声明</h3>
<p>在workerManager.h中添加成员函数 <code>void Find_Emp();</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//查找职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Find_Emp</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure>
<h3 id="查找职工函数实现">13.2 查找职工函数实现</h3>
<p>在workerManager.cpp中实现成员函数 <code>void Find_Emp();</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//查找职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::Find_Emp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_FileIsEmpty)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;文件不存在或记录为空！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入查找的方式：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;1、按职工编号查找&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;2、按姓名查找&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>		<span class="hljs-keyword">int</span> select = <span class="hljs-number">0</span>;<br>		<span class="hljs-built_in">cin</span> &gt;&gt; select;<br><br><br>		<span class="hljs-keyword">if</span> (select == <span class="hljs-number">1</span>) <span class="hljs-comment">//按职工号查找</span><br>		&#123;<br>			<span class="hljs-keyword">int</span> id;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入查找的职工编号：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>			<span class="hljs-built_in">cin</span> &gt;&gt; id;<br><br>			<span class="hljs-keyword">int</span> ret = IsExist(id);<br>			<span class="hljs-keyword">if</span> (ret != <span class="hljs-number">-1</span>)<br>			&#123;<br>				<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;查找成功！该职工信息如下：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>				<span class="hljs-keyword">this</span>-&gt;m_EmpArray[ret]-&gt;showInfo();<br>			&#125;<br>			<span class="hljs-keyword">else</span><br>			&#123;<br>				<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;查找失败，查无此人&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>			&#125;<br>		&#125;<br>		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(select == <span class="hljs-number">2</span>) <span class="hljs-comment">//按姓名查找</span><br>		&#123;<br>			<span class="hljs-built_in">string</span> name;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入查找的姓名：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>			<span class="hljs-built_in">cin</span> &gt;&gt; name;<br><br>			<span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;  <span class="hljs-comment">//查找到的标志</span><br>			<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m_EmpNum; i++)<br>			&#123;<br>				<span class="hljs-keyword">if</span> (m_EmpArray[i]-&gt;m_Name == name)<br>				&#123;<br>					<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;查找成功,职工编号为：&quot;</span><br>                           &lt;&lt; m_EmpArray[i]-&gt;m_Id<br>                           &lt;&lt; <span class="hljs-string">&quot; 号的信息如下：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>					<br>					flag = <span class="hljs-literal">true</span>;<br><br>					<span class="hljs-keyword">this</span>-&gt;m_EmpArray[i]-&gt;showInfo();<br>				&#125;<br>			&#125;<br>			<span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">false</span>)<br>			&#123;<br>				<span class="hljs-comment">//查无此人</span><br>				<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;查找失败，查无此人&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>			&#125;<br>		&#125;<br>		<span class="hljs-keyword">else</span><br>		&#123;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;输入选项有误&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		&#125;<br>	&#125;<br><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br>	system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="测试查找职工">13.3 测试查找职工</h3>
<p>在main函数分支 5 选项中，调用查找职工接口</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546504714318.png" alt="1546504714318"><figcaption aria-hidden="true">1546504714318</figcaption>
</figure>
<p>测试1 - 按照职工编号查找 - 查找不存在职工</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546504767229.png" alt="1546504767229"><figcaption aria-hidden="true">1546504767229</figcaption>
</figure>
<p>测试2 - 按照职工编号查找 - 查找存在职工</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546505046521.png" alt="1546505046521"><figcaption aria-hidden="true">1546505046521</figcaption>
</figure>
<p>测试3 - 按照职工姓名查找 - 查找不存在职工</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546505115610.png" alt="1546505115610"><figcaption aria-hidden="true">1546505115610</figcaption>
</figure>
<p>测试4 - 按照职工姓名查找 - 查找存在职工（如果出现重名，也一并显示，在文件中可以添加重名职工）</p>
<p>例如 添加两个王五的职工，然后按照姓名查找王五</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546507850441.png" alt="1546507850441"><figcaption aria-hidden="true">1546507850441</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546507760284.png" alt="1546507760284"><figcaption aria-hidden="true">1546507760284</figcaption>
</figure>
<p>至此，查找职工功能实现完毕！</p>
<h2 id="排序">14、排序</h2>
<p>功能描述：按照职工编号进行排序，排序的顺序由用户指定</p>
<h3 id="排序函数声明">14.1 排序函数声明</h3>
<p>在workerManager.h中添加成员函数 <code>void Sort_Emp();</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//排序职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Sort_Emp</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure>
<h3 id="排序函数实现">14.2 排序函数实现</h3>
<p>在workerManager.cpp中实现成员函数 <code>void Sort_Emp();</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//排序职工</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::Sort_Emp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_FileIsEmpty)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;文件不存在或记录为空！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		system(<span class="hljs-string">&quot;pause&quot;</span>);<br>		system(<span class="hljs-string">&quot;cls&quot;</span>);<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请选择排序方式： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;1、按职工号进行升序&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;2、按职工号进行降序&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>		<span class="hljs-keyword">int</span> select = <span class="hljs-number">0</span>;<br>		<span class="hljs-built_in">cin</span> &gt;&gt; select;<br><br><br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m_EmpNum; i++)<br>		&#123;<br>			<span class="hljs-keyword">int</span> minOrMax = i;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; m_EmpNum; j++)<br>			&#123;<br>				<span class="hljs-keyword">if</span> (select == <span class="hljs-number">1</span>) <span class="hljs-comment">//升序</span><br>				&#123;<br>					<span class="hljs-keyword">if</span> (m_EmpArray[minOrMax]-&gt;m_Id &gt; m_EmpArray[j]-&gt;m_Id)<br>					&#123;<br>						minOrMax = j;<br>					&#125;<br>				&#125;<br>				<span class="hljs-keyword">else</span>  <span class="hljs-comment">//降序</span><br>				&#123;<br>					<span class="hljs-keyword">if</span> (m_EmpArray[minOrMax]-&gt;m_Id &lt; m_EmpArray[j]-&gt;m_Id)<br>					&#123;<br>						minOrMax = j;<br>					&#125;<br>				&#125;<br>			&#125;<br><br>			<span class="hljs-keyword">if</span> (i != minOrMax)<br>			&#123;<br>				Worker * temp = m_EmpArray[i];<br>				m_EmpArray[i] = m_EmpArray[minOrMax];<br>				m_EmpArray[minOrMax] = temp;<br>			&#125;<br><br>		&#125;<br><br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;排序成功,排序后结果为：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-keyword">this</span>-&gt;save();<br>		<span class="hljs-keyword">this</span>-&gt;Show_Emp();<br>	&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="测试排序功能">14.3 测试排序功能</h3>
<p>在main函数分支 6 选项中，调用排序职工接口</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546510145181.png" alt="1546510145181"><figcaption aria-hidden="true">1546510145181</figcaption>
</figure>
<p>测试：</p>
<p>首先我们添加一些职工，序号是无序的，例如：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546658169987.png" alt="1546658169987"><figcaption aria-hidden="true">1546658169987</figcaption>
</figure>
<p>测试 - 升序排序</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546658190479.png" alt="1546658190479"><figcaption aria-hidden="true">1546658190479</figcaption>
</figure>
<p>文件同步更新</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546658273581.png" alt="1546658273581"><figcaption aria-hidden="true">1546658273581</figcaption>
</figure>
<p>测试 - 降序排序</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546658288936.png" alt="1546658288936"><figcaption aria-hidden="true">1546658288936</figcaption>
</figure>
<p>文件同步更新</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546658313704.png" alt="1546658313704"><figcaption aria-hidden="true">1546658313704</figcaption>
</figure>
<p>至此，职工按照编号排序的功能实现完毕！</p>
<h2 id="清空文件">15、清空文件</h2>
<p>功能描述：将文件中记录数据清空</p>
<h3 id="清空函数声明">15.1 清空函数声明</h3>
<p>在workerManager.h中添加成员函数 <code>void Clean_File();</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//清空文件</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Clean_File</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure>
<h3 id="清空函数实现">15.2 清空函数实现</h3>
<p>在workerManager.cpp中实现员函数 <code>void Clean_File();</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//清空文件</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WorkerManager::Clean_File</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;确认清空？&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;1、确认&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;2、返回&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-keyword">int</span> select = <span class="hljs-number">0</span>;<br>	<span class="hljs-built_in">cin</span> &gt;&gt; select;<br><br>	<span class="hljs-keyword">if</span> (select == <span class="hljs-number">1</span>)<br>	&#123;<br>		<span class="hljs-comment">//打开模式 ios::trunc 如果存在删除文件并重新创建</span><br>		<span class="hljs-function">ofstream <span class="hljs-title">ofs</span><span class="hljs-params">(FILENAME, ios::trunc)</span></span>;<br>		ofs.close();<br><br>		<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_EmpArray != <span class="hljs-literal">NULL</span>)<br>		&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;m_EmpNum; i++)<br>			&#123;<br>				<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_EmpArray[i] != <span class="hljs-literal">NULL</span>)<br>				&#123;<br>					<span class="hljs-keyword">delete</span> <span class="hljs-keyword">this</span>-&gt;m_EmpArray[i];<br>				&#125;<br>			&#125;<br>			<span class="hljs-keyword">this</span>-&gt;m_EmpNum = <span class="hljs-number">0</span>;<br>			<span class="hljs-keyword">delete</span>[] <span class="hljs-keyword">this</span>-&gt;m_EmpArray;<br>			<span class="hljs-keyword">this</span>-&gt;m_EmpArray = <span class="hljs-literal">NULL</span>;<br>			<span class="hljs-keyword">this</span>-&gt;m_FileIsEmpty = <span class="hljs-literal">true</span>;<br>		&#125;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;清空成功！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br>	system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="测试清空文件">15.3 测试清空文件</h3>
<p>在main函数分支 7 选项中，调用清空文件接口</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546511085541.png" alt="1546511085541"><figcaption aria-hidden="true">1546511085541</figcaption>
</figure>
<p>测试：确认清空文件</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546510976745.png" alt="1546510976745"><figcaption aria-hidden="true">1546510976745</figcaption>
</figure>
<p>再次查看文件中数据，记录已为空</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546510994196.png" alt="1546510994196"><figcaption aria-hidden="true">1546510994196</figcaption>
</figure>
<p>打开文件，里面数据已确保清空，该功能需要慎用！</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/29/C++/Day3%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1546511018517.png" alt="1546511018517"><figcaption aria-hidden="true">1546511018517</figcaption>
</figure>
<p>随着清空文件功能实现，本案例制作完毕 ^ _ ^ on给</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++实战</tag>
      </tags>
  </entry>
  <entry>
    <title>Day3时频分析</title>
    <url>/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="时域vs频域">时域vs频域</h1>
<ul>
<li>时域分析： 脑电波幅随时间的变化（如 刺激后 - 刺激前）。 ERP</li>
<li>频域分析：分析脑电信号各频段的频谱能量。
<ul>
<li>主要适用场景：静息态数据等。</li>
<li>对各被试、各通道、各分段的脑电信号做傅里叶变换，得到各个频率点上的能量，再做统计分析。</li>
<li>统计方式：
<ul>
<li>（1）沿着频率点统计：选择感兴趣的空间区域（通道），沿着频率点进行统计检验。</li>
<li>（2）沿着通道统计：选择感兴趣的频段，沿着通道进行统计检验。</li>
<li>（3）提取特定通道、特定频段的能量数值，进行统计检验。</li>
</ul></li>
</ul></li>
<li>时频分析
<ul>
<li>既有时域信息 又有频域信息</li>
</ul></li>
</ul>
<span id="more"></span>
<h1 id="频域分析code">频域分析code</h1>
<p>两组被试静息态EEG数据：</p>
<pre><code>    20个通道，采样率256Hz  ，2s一段</code></pre>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% Specify Basic information of different groups</span><br><br><span class="hljs-comment">% 声明各组数据所在文件夹</span><br>group1_dir = <span class="hljs-string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day3\cleaned_rest_data\group1&#x27;</span>;<br>group2_dir = <span class="hljs-string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day3\cleaned_rest_data\group2&#x27;</span>;<br><br><span class="hljs-comment">%提取各组数据的文件名</span><br>group1_files = dir([group1_dir, filesep, <span class="hljs-string">&#x27;*.set&#x27;</span>]);<br>group2_files = dir([group2_dir, filesep, <span class="hljs-string">&#x27;*.set&#x27;</span>]);<br><br><span class="hljs-comment">% 频域分析设置</span><br><span class="hljs-comment">%采样率</span><br>Fs = <span class="hljs-number">256</span>;<br><span class="hljs-comment">%分段的长度   256 * 2s</span><br>L = <span class="hljs-number">512</span>;<br><span class="hljs-comment">% T = 1/Fs;</span><br><span class="hljs-comment">% t = (0:L-1) * T;</span><br>NFFT = <span class="hljs-number">2</span>^<span class="hljs-built_in">nextpow2</span>(L);<br><span class="hljs-comment">% 创建频率列表f</span><br>f = Fs/<span class="hljs-number">2</span> * <span class="hljs-built_in">linspace</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,NFFT/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br><span class="hljs-comment">% f = linspace(0, Fs/2, NFFT/2 + 1);</span><br></code></pre></td></tr></table></figure>
<h1 id="问题">问题：</h1>
<h2 id="每组被试各频带的能量如何-组水平频谱图code">1. 每组被试各频带的能量如何？ （组水平频谱图）Code</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% Load and perform FFT transform on data of different groups</span><br><br><span class="hljs-comment">%对于组1的所有被试</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(group1_files)<br>    <span class="hljs-comment">%提取当前被试数据文件名</span><br>    subj_fn = group1_files(<span class="hljs-built_in">i</span>).name;<br>    <span class="hljs-comment">% fprintf(2,&#x27;now is processing %s \n&#x27;,subj_fn);</span><br>    <span class="hljs-comment">% 读取当前被试预处理后的数据</span><br>    EEG = pop_loadset([group1_dir, filesep, subj_fn]);<br>    <br>    <span class="hljs-comment">%对于所有通道</span><br>    <span class="hljs-comment">%EEG.data  (chl,times,epochs)</span><br>    <span class="hljs-keyword">for</span> ii=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">1</span>)<br>        <span class="hljs-comment">%对于所有分段</span><br>        <span class="hljs-keyword">for</span> jj=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">3</span>)<br>            <span class="hljs-comment">%提取第ii个通道第jj个分段 所有时间点的数据</span><br>            y = <span class="hljs-built_in">squeeze</span>(EEG.data(ii,:,jj));<br>            <span class="hljs-comment">%做FFT变换，求真实幅值(uV）</span><br>            <br><span class="hljs-comment">%             temp = fft(y,NFFT)/ L;</span><br><span class="hljs-comment">%             Y(jj,:) = 2*abs(temp(1:NFFT/2+1));</span><br><span class="hljs-comment">%             </span><br><span class="hljs-comment">%             % 做FFT变换，求功率（uV平方）</span><br><span class="hljs-comment">%             temp = 2 * abs(fft(y,NFFT)).^2/L;</span><br><span class="hljs-comment">%             Y(jj,:)  = temp(1:NFFT/2+1);</span><br><span class="hljs-comment">%           </span><br>            <span class="hljs-comment">%做FFT变换，求功率谱密度（PSD）（单位 uV平方/Hz）</span><br>            temp = <span class="hljs-number">2</span>*<span class="hljs-built_in">abs</span>(fft(y,NFFT)).^<span class="hljs-number">2</span>/L/Fs;<br>            Y(jj,:) = temp(<span class="hljs-number">1</span>:NFFT/<span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br><span class="hljs-comment">%             </span><br><span class="hljs-comment">%             % 做FFT变换，求功率谱密度（PSD）（单位 dB ）</span><br><span class="hljs-comment">%             temp = 2*abs(fft(y,NFFT)).^2/L/Fs;</span><br><span class="hljs-comment">%             Y(jj,:) = 10*log10(temp(1:NFFT/2+1));</span><br>            <br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-comment">% 数据汇总： 被试 * 通道 * 频率</span><br>        group1_FFT_power(<span class="hljs-built_in">i</span>,ii,:) = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(Y,<span class="hljs-number">1</span>)); clear Y;<br>    <span class="hljs-keyword">end</span><br>    fprintf(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;%s done \n&#x27;</span>,subj_fn);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(group2_files)<br>    subj_fn = group2_files(<span class="hljs-built_in">i</span>).name;<br>    EEG = pop_loadset([group2_dir, filesep, subj_fn]);<br>  <span class="hljs-comment">%  fprintf(&#x27;====now is processing %s --------\n&#x27;,subj_fn);</span><br><br>    <span class="hljs-keyword">for</span> ii=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> jj=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">3</span>)<br>            y = <span class="hljs-built_in">squeeze</span>(EEG.data(ii,:,jj));<br><span class="hljs-comment">%             temp = fft(y,NFFT)/ L;</span><br><span class="hljs-comment">%             Y(jj,:) = 2*abs(temp(1:NFFT/2+1));</span><br>            <br>            temp = <span class="hljs-number">2</span>*<span class="hljs-built_in">abs</span>(fft(y,NFFT)).^<span class="hljs-number">2</span>/L/Fs;<br>            Y(jj,:) = temp(<span class="hljs-number">1</span>:NFFT/<span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">end</span><br>        group2_FFT_power(<span class="hljs-built_in">i</span>,ii,:) = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(Y,<span class="hljs-number">1</span>)); clear Y;<br>    <span class="hljs-keyword">end</span><br>    fprintf(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;%s done \n&#x27;</span>,subj_fn);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">%% plot power and scalp maps</span><br><br><span class="hljs-comment">%找出小于30Hz的频率点的位置</span><br>f_idx = <span class="hljs-built_in">find</span>(f &lt;= <span class="hljs-number">30</span>);<br><span class="hljs-comment">%提取小于30Hz的频率值</span><br>f_plot = f(f_idx);<br><br><span class="hljs-built_in">figure</span>;<br>Cz = <span class="hljs-number">3</span>;<br><span class="hljs-comment">%提取所有被试Cz通道小于30Hz的power值、再做组平均，作为纵轴；f_plot作为横轴画图</span><br><span class="hljs-built_in">plot</span>(f_plot, <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(group1_FFT_power(:,Cz, f_idx),<span class="hljs-number">1</span>)),<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;linewidth&#x27;</span>,<span class="hljs-number">1.5</span>);<br><span class="hljs-built_in">hold</span> on;<br><span class="hljs-built_in">plot</span>(f_plot, <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(group2_FFT_power(:,Cz, f_idx),<span class="hljs-number">1</span>)),<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;linewidth&#x27;</span>,<span class="hljs-number">1.5</span>);<br>title(<span class="hljs-string">&#x27;Group level FFT&#x27;</span>, <span class="hljs-string">&#x27;fontsize&#x27;</span>, <span class="hljs-number">16</span>);<br>xlabel(<span class="hljs-string">&#x27;Frequency&#x27;</span>);<br><span class="hljs-comment">% ylabel(&#x27;Amplitude&#x27;);</span><br>ylabel(<span class="hljs-string">&#x27;PSD  (uV2/Hz)&#x27;</span>);<br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/1.png" alt="1"><figcaption aria-hidden="true">1</figcaption>
</figure>
<h2 id="每组被试alpha频段的能量在头皮都那些位置能量比较大-组水平地形图code">2. 每组被试Alpha频段的能量在头皮都那些位置能量比较大？ （组水平地形图）Code</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%定义感兴趣的频段（此处为alpha波段）</span><br>alpha_idx = <span class="hljs-built_in">find</span>((f &gt;=<span class="hljs-number">8</span>) &amp; (f&lt;=<span class="hljs-number">12</span>));<br><span class="hljs-comment">% 提取各组的所有被试、所有通道、alpha波段的power值，并对被试、波段做平均</span><br>group1_alpha_mag_avg = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">mean</span>(group1_FFT_power(:,:,alpha_idx),<span class="hljs-number">3</span>),<span class="hljs-number">1</span>));<br>group2_alpha_mag_avg = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">mean</span>(group2_FFT_power(:,:,alpha_idx),<span class="hljs-number">3</span>),<span class="hljs-number">1</span>));<br><br><span class="hljs-built_in">figure</span>;<br>subplot(<span class="hljs-number">121</span>); topoplot(group1_alpha_mag_avg, EEG.chanlocs,<span class="hljs-string">&#x27;maplimits&#x27;</span>,[<span class="hljs-number">0</span> <span class="hljs-number">4</span>]); title(<span class="hljs-string">&#x27;Group1&#x27;</span>, <span class="hljs-string">&#x27;fontsize&#x27;</span>, <span class="hljs-number">16</span>);<br>subplot(<span class="hljs-number">122</span>); topoplot(group2_alpha_mag_avg, EEG.chanlocs,<span class="hljs-string">&#x27;maplimits&#x27;</span>,[<span class="hljs-number">0</span> <span class="hljs-number">4</span>]); title(<span class="hljs-string">&#x27;Group2&#x27;</span>, <span class="hljs-string">&#x27;fontsize&#x27;</span>, <span class="hljs-number">16</span>);<br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/2.png" alt="2"><figcaption aria-hidden="true">2</figcaption>
</figure>
<h2 id="两组被试的频谱能量在那些频段存在显著差异code">3. 两组被试的频谱能量在那些频段存在显著差异？Code</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% Specify (ROI) channels and compare across frequency points</span><br><span class="hljs-comment">%选定感兴趣的通道</span><br>Pz = <span class="hljs-number">10</span>;<br><span class="hljs-comment">%挑选各组所有被试Pz通道所有频率点的power值</span><br><span class="hljs-comment">%被试 *  频率</span><br>group1_data = <span class="hljs-built_in">squeeze</span>(group1_FFT_power(:,Pz,:));<br>group2_data = <span class="hljs-built_in">squeeze</span>(group2_FFT_power(:,Pz,:));<br><br><span class="hljs-comment">%只分析30Hz以下的频段</span><br>f_idx = <span class="hljs-built_in">find</span>(f&lt;=<span class="hljs-number">30</span>);<br>f_band = f(f_idx);<br><span class="hljs-comment">%对于每一个频率点</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(f_band)<br>    <span class="hljs-comment">%挑选第一(二）组所有被试在第i个频率点上的power值</span><br>    data1 = group1_data(:,<span class="hljs-built_in">i</span>);<br>    data2 = group2_data(:,<span class="hljs-built_in">i</span>);<br>    <span class="hljs-comment">%做双样本T检验</span><br>    [h,p,ci,stat] = ttest2(data1,data2);<br>    <span class="hljs-comment">%存储p值、T值</span><br>    pvals(<span class="hljs-built_in">i</span>) = p;<br>    tvals(<span class="hljs-built_in">i</span>) = stat.tstat;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-built_in">figure</span>;<br><span class="hljs-built_in">plot</span>(f_band, pvals);<br>ylim([<span class="hljs-number">0</span> <span class="hljs-number">0.05</span>]);<br>xlim([<span class="hljs-number">0</span> <span class="hljs-number">30</span>]);<br>title(<span class="hljs-string">&#x27;P Values&#x27;</span>);<br>xlabel(<span class="hljs-string">&#x27;Frequency&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;p&#x27;</span>);<br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/3.png" alt="3"><figcaption aria-hidden="true">3</figcaption>
</figure>
<h2 id="两组被试alpha频段能量在头皮的那些区域存在显著差异code">4. 两组被试Alpha频段能量在头皮的那些区域存在显著差异？Code</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% Specify (ROI) frequency band and compare across channels</span><br>clear pvals tvals;<br><br><span class="hljs-comment">% 定义频域8 ~ 12Hz</span><br>f_ROI = <span class="hljs-built_in">find</span>((f&gt;=<span class="hljs-number">8</span>) &amp; (f&lt;=<span class="hljs-number">12</span>));<br><span class="hljs-comment">%提取 各组 所有被试 所有通道 alpha频段的power， 对频段做平均</span><br><span class="hljs-comment">% 被试 * 通道</span><br>group1_data = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(group1_FFT_power(:,:,f_ROI),<span class="hljs-number">3</span>));<br>group2_data = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(group2_FFT_power(:,:,f_ROI),<span class="hljs-number">3</span>));<br><br><span class="hljs-comment">%对于每一个通道</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:EEG.nbchan<br>    <span class="hljs-comment">%提取组一(组二）当前通道的power</span><br>    data1 = group1_data(:,<span class="hljs-built_in">i</span>);<br>    data2 = group2_data(:,<span class="hljs-built_in">i</span>);<br>    <span class="hljs-comment">% 双样本T检验</span><br>    [h,p,ci,stat] = ttest2(data1,data2);<br>    <span class="hljs-comment">% 存储p值、T值</span><br>    pvals(<span class="hljs-built_in">i</span>) = p;<br>    tvals(<span class="hljs-built_in">i</span>) = stat.tstat;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-built_in">figure</span>;<br>topoplot(tvals, EEG.chanlocs,<span class="hljs-string">&#x27;maplimits&#x27;</span>,[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>]); <br>title(<span class="hljs-string">&#x27;Alpha Band&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">16</span>);<br><br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/4-1616145095754.png" alt="4"><figcaption aria-hidden="true">4</figcaption>
</figure>
<h2 id="保存数据">保存数据</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% Save power of different frequency bands</span><br>group1_alpha_mag = double(<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(group1_FFT_power(:,:,alpha_idx),<span class="hljs-number">3</span>)));<br>group2_alpha_mag = double(<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(group2_FFT_power(:,:,alpha_idx),<span class="hljs-number">3</span>)));<br><br>save(<span class="hljs-string">&#x27;alpha_power.mat&#x27;</span>,<span class="hljs-string">&#x27;group1_alpha_mag&#x27;</span>,<span class="hljs-string">&#x27;group2_alpha_mag&#x27;</span>);<br>save(<span class="hljs-string">&#x27;group1_alpha.txt&#x27;</span>, <span class="hljs-string">&#x27;-ascii&#x27;</span>, <span class="hljs-string">&#x27;group1_alpha_mag&#x27;</span>);<br>save(<span class="hljs-string">&#x27;group2_alpha.txt&#x27;</span>, <span class="hljs-string">&#x27;-ascii&#x27;</span>, <span class="hljs-string">&#x27;group2_alpha_mag&#x27;</span>);<br></code></pre></td></tr></table></figure>
<h1 id="参数检验正态分布效果好">参数检验（正态分布效果好）：</h1>
<h2 id="t检验">T检验：</h2>
<ol type="1">
<li><p>单样本T检验： 一组被试数据 和 某个数值作比较 ttest</p></li>
<li><p>配对T检验： 一组被试两种不同条件的数据作比较（刺激1 vs 刺激2；干预前 vs 干预后） ttest</p></li>
<li><p>双样本T检验： 两个独立分组的被试的数据作比较 （实验组 vs 对照组） ttest2</p></li>
</ol>
<h1 id="方差分析">方差分析</h1>
<h2 id="f检验">F检验</h2>
<ol start="4" type="1">
<li><p>单因素方差分析： 多个(&gt;=2) 独立分组的被试的数据的比较 （实验组1 vs 实验组2 vs 对照组） anova1</p></li>
<li><p>单因素重复测量方差分析： 一组被试多种 (&gt;=2) 不同条件的数据的比较 （刺激1 vs 刺激2 vs 刺激3；前测 vs 中测 vs 后测）anova_rm</p></li>
<li><p>两因素方差分析： （疾病：患者、对照； 性别：男、女 问题： 患者相对于对照的变化，是否会随着性别的改变而改变？）anova2</p></li>
<li><p>两因素混合方差分析：（干预方式：干预组、对照组； 时间：前测、后测。 问题：后测相对于前测的差异 会不会 随着干预方式的改变而改变？） mixed_anova</p></li>
</ol>
<h1 id="非参数检验非正态分布效果好">非参数检验（非正态分布效果好）</h1>
<ol start="8" type="1">
<li>置换检验、BootStrap等</li>
</ol>
<h1 id="时频分析">时频分析</h1>
<p>一组被试，四种条件的ER数据</p>
<p>四种条件：L1,L2,L3,L4</p>
<p>通道数量59个 ，采样率1000Hz，3s一段（-1s — 2s）</p>
<h1 id="问题-1">问题：</h1>
<h2 id="各频带能量随时间变化如何刺激后相对于刺激前各频带有无能量变化变高-or-变低在那个频带code">1 各频带能量随时间变化如何？刺激后相对于刺激前各频带有无能量变化？（变高 or 变低？在那个频带？）Code</h2>
<p><strong>单个被试、单个通道时频变换结果的汇总</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 单个被试、单个通道时频变换结果的汇总</span><br> <br><span class="hljs-comment">%导入一例被试的数据</span><br>filename = <span class="hljs-string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day3\Example_data\1_LH.set&#x27;</span>; <br>EEG = pop_loadset(filename);<br><br><span class="hljs-comment">%提取某个通道的数据</span><br><span class="hljs-comment">%  x： 时间点*分段        （EEG.data  通道*时间点*分段）</span><br>x = <span class="hljs-built_in">squeeze</span>(EEG.data(<span class="hljs-number">29</span>,:,:)); <br><br><span class="hljs-comment">%分段时间范围</span><br>xtimes=EEG.times/<span class="hljs-number">1000</span>;  <br><span class="hljs-comment">%时频结果的  时间分辨率</span><br>t=EEG.times/<span class="hljs-number">1000</span>;<br><span class="hljs-comment">%时频结果的  频域分辨率</span><br>f=<span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<span class="hljs-number">30</span>;  <br><span class="hljs-comment">%数据采样率</span><br>Fs = EEG.srate;<br><span class="hljs-comment">%窗长   （如果分段时间较短，窗长可以适当缩短；</span><br><span class="hljs-comment">%在段的起始、结束处，时频变换的结果不是绝对精准的，因为做了补0操作）</span><br>winsize = <span class="hljs-number">0.200</span>; <br><span class="hljs-comment">%时频变换 （短时傅里叶变换）</span><br><span class="hljs-comment">%P ， 频率 *  时间 * 分段  （Power）</span><br>[S, P, F, U] = sub_stft(x, xtimes, t, f, Fs, winsize); <br><span class="hljs-comment">%P_data  分段平均后的结果   频率*时间</span><br>P_data=<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(P,<span class="hljs-number">3</span>)); <br><br><span class="hljs-comment">%对时频结果，减基线（凸显ERD/ERS）  </span><br><span class="hljs-comment">% 刺激后能量-刺激前能量</span><br><span class="hljs-comment">%选择基线范围，刺激前0.8 ~0.2毫秒，避免了窗长问题</span><br>t_pre_idx=<span class="hljs-built_in">find</span>((t&gt;=<span class="hljs-number">-0.8</span>)&amp;(t&lt;=<span class="hljs-number">-0.2</span>));<br><br><span class="hljs-comment">% 对于每一个频率点</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(P_data,<span class="hljs-number">1</span>)<br>    <span class="hljs-comment">%提取该频率点所有时刻的power</span><br>    temp_data=<span class="hljs-built_in">squeeze</span>(P_data(<span class="hljs-built_in">i</span>,:));<br>    <span class="hljs-comment">%该频率点所有时刻的power  减去   基线时间段的power的均值</span><br>    P_BC(<span class="hljs-built_in">i</span>,:)=temp_data-<span class="hljs-built_in">mean</span>(temp_data(t_pre_idx)); <br>    <span class="hljs-comment">%P_BC，基线校正后的结果，频率*时间点</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-built_in">figure</span>;  <br><span class="hljs-comment">%绘制 未做基线校正的时频图</span><br>subplot(<span class="hljs-number">211</span>); imagesc(t,f,P_data); axis xy; <br><span class="hljs-built_in">hold</span> on;  axis xy; colorbar;<br>xlabel(<span class="hljs-string">&#x27;Time (ms)&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>); ylabel(<span class="hljs-string">&#x27;Frequency (Hz)&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>); <br>title(<span class="hljs-string">&#x27;TFR (without baseline correction)&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">15</span>);<br><span class="hljs-comment">%绘制基线校正后的时频图</span><br>subplot(<span class="hljs-number">212</span>); imagesc(t,f,P_BC); axis xy; <br><span class="hljs-built_in">hold</span> on;  axis xy; colorbar; <span class="hljs-comment">%caxis([-0.8 2]);</span><br>xlabel(<span class="hljs-string">&#x27;Time (ms)&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>); ylabel(<span class="hljs-string">&#x27;Frequency (Hz)&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>); <br>title(<span class="hljs-string">&#x27;Baseline-corrected TFR&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">15</span>);<br><br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/1-1616159128073.png" alt="1"><figcaption aria-hidden="true">1</figcaption>
</figure>
<p><strong>单个被试、多个通道时频变换结果的汇总</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%%  time-frequency of single subject at several electrodes</span><br>clear;clc<br><span class="hljs-comment">%单个被试多个通道时频变换结果汇总</span><br><br>filename = <span class="hljs-string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day3\Example_data\1_LH.set&#x27;</span>; <br>EEG = pop_loadset(filename);<br><span class="hljs-keyword">for</span> nchan=<span class="hljs-number">1</span>:EEG.nbchan<br>    x = <span class="hljs-built_in">squeeze</span>(EEG.data(nchan,:,:)); <span class="hljs-comment">%3000*40</span><br>    xtimes=EEG.times/<span class="hljs-number">1000</span>;  <span class="hljs-comment">%3000点</span><br>    t=EEG.times/<span class="hljs-number">1000</span>;  <span class="hljs-comment">%时间3000点</span><br>    f=<span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<span class="hljs-number">30</span>;   <span class="hljs-comment">%频率30点</span><br>    Fs = EEG.srate;  <span class="hljs-comment">%采样率</span><br>    winsize = <span class="hljs-number">0.200</span>;   <br>    [S, P, F, U] = sub_stft(x, xtimes, t, f, Fs, winsize); <br>    <span class="hljs-comment">% 通道 *  频率 * 时间点</span><br>    P_data(nchan,:,:)=<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(P,<span class="hljs-number">3</span>));   <span class="hljs-comment">%P (30  3000 40) ==&gt;  (30  3000)</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">%对于每个通道、每个频率点  都做基线校正</span><br>t_pre_idx=<span class="hljs-built_in">find</span>((t&gt;=<span class="hljs-number">-0.8</span>)&amp;(t&lt;=<span class="hljs-number">-0.2</span>));<br><span class="hljs-comment">%对于每一个通道</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(P_data,<span class="hljs-number">1</span>)<br>    <span class="hljs-comment">%对于每一个频率点</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(P_data,<span class="hljs-number">2</span>)<br>        <br>        <span class="hljs-comment">%减基线</span><br>        temp_data=<span class="hljs-built_in">squeeze</span>(P_data(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>,:));<br>        P_BC(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>,:)=temp_data-<span class="hljs-built_in">mean</span>(temp_data(t_pre_idx)); <br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br>channel_plot=<span class="hljs-number">29</span>; <br><span class="hljs-built_in">figure</span>;  <br>subplot(<span class="hljs-number">211</span>); imagesc(t,f,<span class="hljs-built_in">squeeze</span>(P_data(channel_plot,:,:))); axis xy; <br><span class="hljs-built_in">hold</span> on;  axis xy; colorbar;<br>xlabel(<span class="hljs-string">&#x27;Time (ms)&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>); ylabel(<span class="hljs-string">&#x27;Frequency (Hz)&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>); <br>title(<span class="hljs-string">&#x27;TFR (without baseline correction)&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">15</span>);<br>subplot(<span class="hljs-number">212</span>); imagesc(t,f,<span class="hljs-built_in">squeeze</span>(P_BC(channel_plot,:,:))); axis xy; <br><span class="hljs-built_in">hold</span> on;  axis xy; colorbar; <span class="hljs-comment">%caxis([-0.8 2]);</span><br>xlabel(<span class="hljs-string">&#x27;Time (ms)&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>); ylabel(<span class="hljs-string">&#x27;Frequency (Hz)&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>); <br>title(<span class="hljs-string">&#x27;Baseline-corrected TFR&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">15</span>);<br><br>ROI1_t=[<span class="hljs-number">-0.8</span> <span class="hljs-number">-0.2</span>]; ROI1_f=[<span class="hljs-number">8</span> <span class="hljs-number">13</span>];<br>ROI1_t_idx=<span class="hljs-built_in">find</span>((t&gt;=ROI1_t(<span class="hljs-number">1</span>))&amp;(t&lt;=ROI1_t(<span class="hljs-number">2</span>)));<br>ROI1_f_idx=<span class="hljs-built_in">find</span>((f&gt;=ROI1_f(<span class="hljs-number">1</span>))&amp;(f&lt;=ROI1_f(<span class="hljs-number">2</span>)));<br>Pre_alpha=<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">mean</span>(P_data(:,ROI1_f_idx,ROI1_t_idx),<span class="hljs-number">2</span>),<span class="hljs-number">3</span>)); <br><br>ROI2_t=[<span class="hljs-number">1</span> <span class="hljs-number">1.5</span>];ROI2_f=[<span class="hljs-number">8</span> <span class="hljs-number">13</span>];<br>ROI2_t_idx=<span class="hljs-built_in">find</span>((t&gt;=ROI2_t(<span class="hljs-number">1</span>))&amp;(t&lt;=ROI2_t(<span class="hljs-number">2</span>)));<br>ROI2_f_idx=<span class="hljs-built_in">find</span>((f&gt;=ROI2_f(<span class="hljs-number">1</span>))&amp;(f&lt;=ROI2_f(<span class="hljs-number">2</span>)));<br>Post_alpha=<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">mean</span>(P_data(:,ROI2_f_idx,ROI2_t_idx),<span class="hljs-number">2</span>),<span class="hljs-number">3</span>));<br><br><span class="hljs-built_in">figure</span>; <br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>);<br>topoplot(Pre_alpha,EEG.chanlocs); <br>title(<span class="hljs-string">&#x27;Prestimulus alpha&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">10</span>);<br><br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>);<br>topoplot(Post_alpha,EEG.chanlocs); <br>title(<span class="hljs-string">&#x27;Postimulus alpha&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">10</span>);<br><br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>);<br>topoplot(Post_alpha-Pre_alpha,EEG.chanlocs); <br>title(<span class="hljs-string">&#x27;difference&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">10</span>);<br><br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/2-1616159291022.png" alt="2"><figcaption aria-hidden="true">2</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/3-1616159296791.png" alt="3"><figcaption aria-hidden="true">3</figcaption>
</figure>
<p><strong>多个被试、多个通道时频变换结果的汇总</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% time-frequency analysis of several subjects</span><br>clear;clc;<br>Subj=[<span class="hljs-number">1</span>:<span class="hljs-number">10</span>];<br><span class="hljs-comment">% 对于每个被试</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(Subj)<span class="hljs-comment">%;length(Subj)</span><br>    setname=strcat(num2str(<span class="hljs-built_in">i</span>),<span class="hljs-string">&#x27;_LH.set&#x27;</span>); <br>    setpath=<span class="hljs-string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day3\Example_data&#x27;</span>; <br>    EEG = pop_loadset(<span class="hljs-string">&#x27;filename&#x27;</span>,setname,<span class="hljs-string">&#x27;filepath&#x27;</span>,setpath); <br>    <span class="hljs-comment">% 对于每个通道</span><br>    <span class="hljs-keyword">for</span> nchan=<span class="hljs-number">1</span>:EEG.nbchan; <br>        x = <span class="hljs-built_in">squeeze</span>(EEG.data(nchan,:,:)); <span class="hljs-comment">%3000 * 40</span><br>        xtimes=EEG.times/<span class="hljs-number">1000</span>;  <br>        t=EEG.times/<span class="hljs-number">1000</span>;<br>        f=<span class="hljs-number">1</span>:<span class="hljs-number">0.5</span>:<span class="hljs-number">30</span>;<br>        Fs = EEG.srate;<br>        winsize = <span class="hljs-number">0.200</span>; <br>        [S, P, F, U] = sub_stft(x, xtimes, t, f, Fs, winsize); <br>        <span class="hljs-comment">%  被试*通道*频率*时间点</span><br>        P_data(<span class="hljs-built_in">i</span>,nchan,:,:)=<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(P,<span class="hljs-number">3</span>));   <span class="hljs-comment">%subs * chls * f * times</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">% 对于每个被试、每个通道、每个频率点，都做减基线的操作</span><br>t_pre_idx=<span class="hljs-built_in">find</span>((t&gt;=<span class="hljs-number">-0.8</span>)&amp;(t&lt;=<span class="hljs-number">-0.2</span>));<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(P_data,<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(P_data,<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">for</span> k=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(P_data,<span class="hljs-number">3</span>)<br>            temp_data=<span class="hljs-built_in">squeeze</span>(P_data(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>,k,:));<br>            P_BC(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>,k,:)=temp_data-<span class="hljs-built_in">mean</span>(temp_data(t_pre_idx)); <br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br>channel_plot=<span class="hljs-number">29</span>; <br><span class="hljs-built_in">figure</span>;  <br><span class="hljs-comment">% 对于多个被试汇总的结果，可以刻画组平均的时频图   第29通道的组平均（基线校正前）</span><br>subplot(<span class="hljs-number">211</span>); imagesc(t,f,<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(P_data(:,channel_plot,:,:),<span class="hljs-number">1</span>))); axis xy; <br><span class="hljs-built_in">hold</span> on;  axis xy; colorbar;<br>xlabel(<span class="hljs-string">&#x27;Time (ms)&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>); ylabel(<span class="hljs-string">&#x27;Frequency (Hz)&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>); <br>title(<span class="hljs-string">&#x27;TFR (without baseline correction)&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">15</span>);<br><span class="hljs-comment">% 第29通道的组平均（基线校正后）</span><br>subplot(<span class="hljs-number">212</span>); imagesc(t,f,<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(P_BC(:,channel_plot,:,:),<span class="hljs-number">1</span>))); axis xy; <br><span class="hljs-built_in">hold</span> on;  axis xy; colorbar; <span class="hljs-comment">%caxis([-0.8 2]);</span><br>xlabel(<span class="hljs-string">&#x27;Time (ms)&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>); ylabel(<span class="hljs-string">&#x27;Frequency (Hz)&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">12</span>); <br>title(<span class="hljs-string">&#x27;Baseline-corrected TFR&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">15</span>);<br><br>ROI1_t=[<span class="hljs-number">0.2</span> <span class="hljs-number">0.4</span>]; ROI1_f=[<span class="hljs-number">1</span> <span class="hljs-number">10</span>];<br>ROI1_t_idx=<span class="hljs-built_in">find</span>((t&gt;=ROI1_t(<span class="hljs-number">1</span>))&amp;(t&lt;=ROI1_t(<span class="hljs-number">2</span>)));<br>ROI1_f_idx=<span class="hljs-built_in">find</span>((f&gt;=ROI1_f(<span class="hljs-number">1</span>))&amp;(f&lt;=ROI1_f(<span class="hljs-number">2</span>)));<br><span class="hljs-comment">%多个被试结果汇总后，可以刻画 组平均地形图</span><br>TFD_plot=<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">mean</span>(P_BC(:,:,ROI1_f_idx,ROI1_t_idx),<span class="hljs-number">1</span>),<span class="hljs-number">3</span>),<span class="hljs-number">4</span>)); <br><span class="hljs-built_in">figure</span>; topoplot(TFD_plot,EEG.chanlocs); title(<span class="hljs-string">&#x27;ROI1 Magnitude&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">16</span>);<br><br>ROI2_t=[<span class="hljs-number">1.2</span> <span class="hljs-number">1.6</span>];ROI2_f=[<span class="hljs-number">8</span> <span class="hljs-number">13</span>];<br>ROI2_t_idx=<span class="hljs-built_in">find</span>((t&gt;=ROI2_t(<span class="hljs-number">1</span>))&amp;(t&lt;=ROI2_t(<span class="hljs-number">2</span>)));<br>ROI2_f_idx=<span class="hljs-built_in">find</span>((f&gt;=ROI2_f(<span class="hljs-number">1</span>))&amp;(f&lt;=ROI2_f(<span class="hljs-number">2</span>)));<br>TFD_plot=<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">mean</span>(P_BC(:,:,ROI2_f_idx,ROI2_t_idx),<span class="hljs-number">1</span>),<span class="hljs-number">3</span>),<span class="hljs-number">4</span>)); <br><span class="hljs-built_in">figure</span>; topoplot(TFD_plot,EEG.chanlocs); title(<span class="hljs-string">&#x27;ROI2 Magnitude&#x27;</span>,<span class="hljs-string">&#x27;fontsize&#x27;</span>,<span class="hljs-number">16</span>);<br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/3_1.png" alt="3_1"><figcaption aria-hidden="true">3_1</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/3_2.png" alt="3_2"><figcaption aria-hidden="true">3_2</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/3_3.png" alt="3_3"><figcaption aria-hidden="true">3_3</figcaption>
</figure>
<h2 id="不同条件的刺激-诱发的-能量的变化程度是否一致-code">2 不同条件的刺激 诱发的 能量的变化程度是否一致？ Code</h2>
<p><strong>比较L3 L4</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% time-frequency analysis  of multiple subjects and conditions</span><br><br><span class="hljs-comment">%对于每个被试</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(Subj)<br>    setname=strcat(num2str(<span class="hljs-built_in">i</span>),<span class="hljs-string">&#x27;_LH.set&#x27;</span>); <br>    setpath=<span class="hljs-string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day3\Example_data\&#x27;; </span><br><span class="hljs-string">    EEG= pop_loadset(&#x27;</span>filename&#x27;,setname,<span class="hljs-string">&#x27;filepath&#x27;</span>,setpath); <br>    EEG= eeg_checkset( EEG );<br>    <span class="hljs-comment">%对于每个条件</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(Cond)<br>        EEG_new = pop_epoch( EEG, Cond(<span class="hljs-built_in">j</span>), [<span class="hljs-number">-1</span>  <span class="hljs-number">2</span>], <span class="hljs-string">&#x27;newname&#x27;</span>, <span class="hljs-string">&#x27;Merged datasets pruned with ICA   epochs epochs&#x27;</span>, <span class="hljs-string">&#x27;epochinfo&#x27;</span>, <span class="hljs-string">&#x27;yes&#x27;</span>); <br>        EEG_new = eeg_checkset( EEG_new );<br>        EEG_new = pop_rmbase( EEG_new, [<span class="hljs-number">-1000</span>     <span class="hljs-number">0</span>]); <br>        EEG_new = eeg_checkset( EEG_new );<br>        <span class="hljs-comment">%对于每个通道</span><br>        <span class="hljs-keyword">for</span> nchan=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(EEG_new.data,<span class="hljs-number">1</span>)<br>            x = <span class="hljs-built_in">squeeze</span>(EEG_new.data(nchan,:,:)); <br>            xtimes=EEG_new.times/<span class="hljs-number">1000</span>; <br>            t=EEG_new.times/<span class="hljs-number">1000</span>;<br>            f=<span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<span class="hljs-number">30</span>; <br>            Fs = EEG.srate;<br>            winsize = <span class="hljs-number">0.200</span>; <br>            [S, P, F, U] = sub_stft(x, xtimes, t, f, Fs, winsize); <br>            <span class="hljs-comment">%被试 *  条件  *  通道 * 频率 * 时间</span><br>            P_data(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>,nchan,:,:)=<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(P,<span class="hljs-number">3</span>));<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span>    <br><span class="hljs-keyword">end</span><br><br>t_pre_idx=<span class="hljs-built_in">find</span>((t&gt;=<span class="hljs-number">-0.8</span>)&amp;(t&lt;=<span class="hljs-number">-0.2</span>));<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(P_data,<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(P_data,<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">for</span> ii=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(P_data,<span class="hljs-number">3</span>)<br>            <span class="hljs-keyword">for</span> jj=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(P_data,<span class="hljs-number">4</span>)<br>                temp_data=<span class="hljs-built_in">squeeze</span>(P_data(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>,ii,jj,:));<br>                P_BC(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>,ii,jj,:)=temp_data-<span class="hljs-built_in">mean</span>(temp_data(t_pre_idx));<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-built_in">figure</span>;<br>imagesc(t,f, <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(P_data(:,<span class="hljs-number">3</span>,<span class="hljs-number">29</span>,:,:))));<br>axis xy;<br><span class="hljs-built_in">figure</span>;s<br>imagesc(t,f,<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(P_BC(:,<span class="hljs-number">3</span>,<span class="hljs-number">29</span>,:,:))));<br>axis xy;<br><br>t_idx = <span class="hljs-built_in">find</span>((t&gt;=<span class="hljs-number">1</span>) &amp; (t&lt;=<span class="hljs-number">1.5</span>));<br>f_idx = <span class="hljs-built_in">find</span>((f&gt;=<span class="hljs-number">8</span>) &amp; (f&lt;=<span class="hljs-number">13</span>));<br><span class="hljs-built_in">figure</span>;<br>topoplot(<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">mean</span>(P_BC(:,<span class="hljs-number">3</span>,:,f_idx,t_idx),<span class="hljs-number">1</span>),<span class="hljs-number">4</span>),<span class="hljs-number">5</span>)), EEG.chanlocs, <span class="hljs-string">&#x27;maplimits&#x27;</span>,[<span class="hljs-number">-1</span> <span class="hljs-number">0.5</span>]);<br><br></code></pre></td></tr></table></figure>
<p>基线校正前</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/4_1-1616205411027.png" alt="4_1"><figcaption aria-hidden="true">4_1</figcaption>
</figure>
<p>基线校正后</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/4_2-1616205415448.png" alt="4_2"><figcaption aria-hidden="true">4_2</figcaption>
</figure>
<p>地形图</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/4_3-1616205418497.png" alt="4_3"><figcaption aria-hidden="true">4_3</figcaption>
</figure>
<p>T检验 anova</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% ttest for each time-frequency point</span><br><br><span class="hljs-comment">% P_data: 被试 * 条件 * 通道 * 频率 * 时间点</span><br><span class="hljs-comment">% 提取所有被试、所有条件、13号通道（空间ROI、Cz）、所有频率、所有时间的power</span><br><span class="hljs-comment">%: data_test： 被试 *  条件 * 频率 *  时间点</span><br>data_test=<span class="hljs-built_in">squeeze</span>(P_data(:,:,<span class="hljs-number">13</span>,:,:)); <span class="hljs-comment">%% select the data at Cz, data_test: subj*cond*frequency*time</span><br><span class="hljs-comment">%对于每一个频率点</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(data_test,<span class="hljs-number">3</span>)<br>    <span class="hljs-comment">%对于每一个时间点</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(data_test,<span class="hljs-number">4</span>)<br>        <span class="hljs-comment">% 挑选第一种条件的数据</span><br>        data_1=<span class="hljs-built_in">squeeze</span>(data_test(:,<span class="hljs-number">3</span>,<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)); <span class="hljs-comment">%% select condition L3 for each time-frequency point</span><br>        <span class="hljs-comment">%挑选第二种条件的数据</span><br>        data_2=<span class="hljs-built_in">squeeze</span>(data_test(:,<span class="hljs-number">4</span>,<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)); <span class="hljs-comment">%% select condition L4 for each time-frequency point</span><br>        <span class="hljs-comment">% 配对T检验</span><br>        [h,p,ci,stats]=ttest(data_1,data_2); <span class="hljs-comment">%% ttest comparison</span><br>        <span class="hljs-comment">% 存储第i个频率点、第j个时间点的p值</span><br>        P_ttest(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=p; <span class="hljs-comment">%% save the p value from ttest</span><br>        <span class="hljs-comment">%  存储T值</span><br>        T_ttest(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=stats.tstat; <span class="hljs-comment">%% save the t value from ttest</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-comment">%对于每一个时频点</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(data_test,<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(data_test,<span class="hljs-number">4</span>)<br>        <span class="hljs-comment">% 挑选所有条件的数据</span><br>        data_anova=<span class="hljs-built_in">squeeze</span>(data_test(:,:,<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)); <span class="hljs-comment">%% select the data at time-frequency point</span><br>        <span class="hljs-comment">%重复测量方差分析</span><br>        [p, <span class="hljs-built_in">table</span>] = anova_rm(data_anova,<span class="hljs-string">&#x27;off&#x27;</span>);  <span class="hljs-comment">%% perform repeated measures ANOVA</span><br>        <span class="hljs-comment">%存储各时频点的p值</span><br>        P_anova(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=p(<span class="hljs-number">1</span>); <span class="hljs-comment">%% save the data from ANOVA</span><br>        <span class="hljs-comment">% 存储F值</span><br>         F_anova(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=<span class="hljs-built_in">table</span>&#123;<span class="hljs-number">2</span>,<span class="hljs-number">5</span>&#125;; <span class="hljs-comment">%% F value from ANOVA</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%% T检验</span><br><span class="hljs-built_in">figure</span>;<br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>imagesc(t,f,<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">mean</span>(P_BC(:,:,<span class="hljs-number">13</span>,:,:),<span class="hljs-number">1</span>),<span class="hljs-number">2</span>)));<br>axis xy; title(<span class="hljs-string">&#x27;Power Baseline Corrected&#x27;</span>); colorbar();<br><br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>imagesc(t,f,P_ttest);<br>axis xy; title(<span class="hljs-string">&#x27;P values&#x27;</span>);colorbar();<br><br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br>imagesc(t,f,T_ttest);<br>axis xy; title(<span class="hljs-string">&#x27;T values&#x27;</span>);colorbar();<br><br><span class="hljs-comment">%% Visualization</span><br><span class="hljs-built_in">figure</span>;<br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>imagesc(t,f,<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">mean</span>(P_BC(:,:,<span class="hljs-number">13</span>,:,:),<span class="hljs-number">1</span>),<span class="hljs-number">2</span>)));<br>axis xy; title(<span class="hljs-string">&#x27;Power Baseline Corrected&#x27;</span>); colorbar();<br><br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>imagesc(t,f,P_anova);<br>axis xy; title(<span class="hljs-string">&#x27;P values&#x27;</span>);colorbar();<br><br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br>imagesc(t,f,F_anova);<br>axis xy; title(<span class="hljs-string">&#x27;F values&#x27;</span>);colorbar();<br></code></pre></td></tr></table></figure>
<p>ttest</p>
<ol type="1">
<li>刺激后相对于刺激前能量变化</li>
<li>看显著差异</li>
<li>L4 &gt; L3</li>
</ol>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/5.png" alt="5"><figcaption aria-hidden="true">5</figcaption>
</figure>
<p>anova</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/6.png" alt="6"><figcaption aria-hidden="true">6</figcaption>
</figure>
<h2 id="如果不同条件诱发的-特定频段能量的变化程度-不一致那么这种不一致主要体现在头皮的哪些区域-code">3 如果不同条件诱发的 特定频段能量的变化程度 不一致，那么这种不一致主要体现在头皮的哪些区域？ Code</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%%  stastics across channels</span><br>t_idx = <span class="hljs-built_in">find</span>((t&gt;=<span class="hljs-number">1</span>) &amp; (t&lt;=<span class="hljs-number">1.5</span>));<br>f_idx = <span class="hljs-built_in">find</span>((f&gt;=<span class="hljs-number">8</span>) &amp; (f&lt;=<span class="hljs-number">13</span>));<br>data_test=<span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">mean</span>(P_BC(:,:,:,f_idx,t_idx),<span class="hljs-number">4</span>),<span class="hljs-number">5</span>)); <br><span class="hljs-comment">% ttest</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:EEG.nbchan<br>    data1 = data_test(:,<span class="hljs-number">3</span>,<span class="hljs-built_in">i</span>);<br>    data2 = data_test(:,<span class="hljs-number">4</span>,<span class="hljs-built_in">i</span>);<br>    [~,p,~,stat] = ttest(data1,data2);<br>    Pvals_ch(<span class="hljs-built_in">i</span>) = p;<br>    Tvals_ch(<span class="hljs-built_in">i</span>) = stat.tstat;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-built_in">figure</span>;<br>topoplot(Tvals_ch, EEG.chanlocs);<br><br><span class="hljs-comment">% anova</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:EEG.nbchan<br>    data_anova = data_test(:,:,<span class="hljs-built_in">i</span>);<br>    [p, <span class="hljs-built_in">table</span>] = anova_rm(data_anova,<span class="hljs-string">&#x27;off&#x27;</span>);<br>    Pvals_anova(<span class="hljs-built_in">i</span>) = p(<span class="hljs-number">1</span>);<br>    Fvals_anova(<span class="hljs-built_in">i</span>) = <span class="hljs-built_in">table</span>&#123;<span class="hljs-number">2</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-built_in">figure</span>;<br>topoplot(Fvals_anova, EEG.chanlocs);<br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/6_1.png" alt="6_1"><figcaption aria-hidden="true">6_1</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/6_2.png" alt="6_2"><figcaption aria-hidden="true">6_2</figcaption>
</figure>
<p>多重比较校正</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/image-20210320111644312.png" alt="image-20210320111644312"><figcaption aria-hidden="true">image-20210320111644312</figcaption>
</figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% fdr correction to account for multiple comparisons</span><br><br><span class="hljs-comment">%对配对T检验的结果 做FDR校正（p_fdr1 ： fdr显著性阈值； p_masked，表示p值是否通过校正</span><br>[p_fdr1, p_masked] = fdr(P_ttest, <span class="hljs-number">0.05</span>); <span class="hljs-comment">%% fdr correction for p values from ttest</span><br><span class="hljs-comment">% 绘制p值图（时间横轴、频率为纵轴）； 只显示通过校正的结果</span><br><span class="hljs-built_in">figure</span>; imagesc(t,f,P_ttest); axis xy; caxis([<span class="hljs-number">0</span> p_fdr1]); <br><br><span class="hljs-comment">% 对方差分析的结果做FDR 校正</span><br>[p_fdr2, p_masked] = fdr(P_anova, <span class="hljs-number">0.05</span>);<span class="hljs-comment">%% fdr correction for p values from ANOVA</span><br><span class="hljs-built_in">figure</span>; imagesc(t,f,P_anova); axis xy; caxis([<span class="hljs-number">0</span> p_fdr2]); <span class="hljs-comment">% 颜色限制caxis</span><br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>fMRI dead fish</p>
</blockquote>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/7_1.png" alt="7_1"><figcaption aria-hidden="true">7_1</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/19/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/7_2.png" alt="7_2"><figcaption aria-hidden="true">7_2</figcaption>
</figure>
<h1 id="tips">Tips</h1>
<p>振幅：<span class="math inline">\(\mu V\)</span></p>
<p>功率：<span class="math inline">\({(\mu V )}^2\)</span> 时频分析</p>
<p>功率谱密度(PSD): <span class="math inline">\({(\mu V )}^2 /Hz\)</span></p>
<p>​ db: <span class="math inline">\(10log_{10}{PSD}\)</span></p>
]]></content>
      <categories>
        <category>脑电</category>
      </categories>
  </entry>
  <entry>
    <title>Day4功能连接</title>
    <url>/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="功能连接">1 功能连接</h1>
<p>相关(时域) ——-fft——&gt; 相干(频域)</p>
<span id="more"></span>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/image-20210320150338896.png" alt="image-20210320150338896"><figcaption aria-hidden="true">image-20210320150338896</figcaption>
</figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab">clear all; close all; clc<br><br><span class="hljs-comment">%% 指定相关信息</span><br>Data_Dir = uigetdir([],<span class="hljs-string">&#x27;Path of the EEG datasets&#x27;</span>); <span class="hljs-comment">%指定待分析的脑电数据所在的路径；可以是预处理后的分段脑电数据。也可以是CSD转换后的分段数据；建议一个条件或一个组别一个文件夹，每个文件夹分别运行该代码</span><br>Output_Dir = uigetdir([],<span class="hljs-string">&#x27;Path to store the measures&#x27;</span>);<span class="hljs-comment">%计算得到的指标文件保存的路径</span><br><br>band = inputdlg(<span class="hljs-string">&#x27;the limits of band&#x27;</span>);<span class="hljs-comment">%指定所要分析的频率的范围（单位是Hz）</span><br>band = str2num(band&#123;<span class="hljs-number">1</span>&#125;); <span class="hljs-comment">%将band变量由字符转换为数值；注意：运行本脚本时MATLAB的路径中不应该有HERMES工具箱</span><br><br>bandname = inputdlg(<span class="hljs-string">&#x27;the name of the band you computed&#x27;</span>); <span class="hljs-comment">% 指定前述待分析的频段的名称</span><br>bandname = bandname&#123;<span class="hljs-number">1</span>&#125;;<br><br>prefix = inputdlg(<span class="hljs-string">&#x27;the prefix of computed measures&#x27;</span>);<span class="hljs-comment">%指定保存的指标文件的前缀，建议是条件名或组别名</span><br>prefix = prefix&#123;<span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-comment">%% 获取EEG数据路径中包含的set文件</span><br>Dir_Data = dir(fullfile(Data_Dir,<span class="hljs-string">&#x27;*.set&#x27;</span>)); <br>FileNames = &#123;Dir_Data.name&#125;;<br><br><span class="hljs-comment">%% compute 1st measure (coherence)</span><br><span class="hljs-keyword">for</span> subj = <span class="hljs-number">1</span>:<span class="hljs-built_in">numel</span>(FileNames)  <br>    EEG = pop_loadset(<span class="hljs-string">&#x27;filename&#x27;</span>,FileNames&#123;<span class="hljs-number">1</span>,subj&#125;,<span class="hljs-string">&#x27;filepath&#x27;</span>,Data_Dir); <span class="hljs-comment">% 载入某个被试的数据</span><br>    EEG = eeg_checkset( EEG );<br>    N = EEG.pnts; <span class="hljs-comment">%每段的长度（点数）</span><br>    SampleRate = EEG.srate;<span class="hljs-comment">%取样率</span><br>    NFFT = <span class="hljs-number">2</span>^<span class="hljs-built_in">nextpow2</span>(N);<span class="hljs-comment">%大于每段长度的、最小的2的N次方</span><br>    Freq = SampleRate/<span class="hljs-number">2</span>*<span class="hljs-built_in">linspace</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,NFFT/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<span class="hljs-comment">%频率轴 </span><br>    <span class="hljs-keyword">for</span> chan = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> epochs = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">3</span>)<br>            ffts(:,chan,epochs) = fft(hanning(N).*<span class="hljs-built_in">squeeze</span>(EEG.data(chan,:,epochs))&#x27;,NFFT);<span class="hljs-comment">% 对该被试每个电极的每个分段进行FFT            </span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">for</span> x = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">for</span> y = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">1</span>)<br>                fx = <span class="hljs-built_in">squeeze</span>(ffts(:,x,:));<br>                Pxx = fx.*<span class="hljs-built_in">conj</span>(fx)/N;<br>                MeanPx = <span class="hljs-built_in">mean</span>(Pxx,<span class="hljs-number">2</span>); <span class="hljs-comment">% 计算coherence时，x电极的power</span><br>                fy = <span class="hljs-built_in">squeeze</span>(ffts(:,y,:));<br>                Pyy = fy.*<span class="hljs-built_in">conj</span>(fy)/N; <br>                MeanPy = <span class="hljs-built_in">mean</span>(Pyy,<span class="hljs-number">2</span>); <span class="hljs-comment">% 计算coherence时，y电极的power</span><br>                Pxy = fx.*<span class="hljs-built_in">conj</span>(fy)/N;<br>                MeanPxy = <span class="hljs-built_in">mean</span>(Pxy,<span class="hljs-number">2</span>); <span class="hljs-comment">%% Sxy，上述两个电极的交叉谱</span><br>                C = (<span class="hljs-built_in">abs</span>(MeanPxy).^<span class="hljs-number">2</span>)./(MeanPx.*MeanPy); <span class="hljs-comment">% 相干</span><br>                coh(:,x,y,subj) = C; <span class="hljs-comment">% coherence，频率*电极*电极*被试</span><br>            <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    clear ffts<br><span class="hljs-keyword">end</span><br>coh = coh(<span class="hljs-number">1</span>:NFFT/<span class="hljs-number">2</span> + <span class="hljs-number">1</span>,:,:,:);  <br><br>idx = dsearchn(Freq&#x27;, band&#x27;); <span class="hljs-comment">%确定频段上下限在Freq即频率轴中的位置</span><br>coh = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(coh(idx(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>):idx(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>),:,:,:),<span class="hljs-number">1</span>));<span class="hljs-comment">%计算某个频段的平均coh</span><br><br>save(strcat(Output_Dir,<span class="hljs-string">&#x27;\&#x27;,prefix,&#x27;</span>_<span class="hljs-string">&#x27;,bandname,&#x27;</span>_coh.mat&#x27;),<span class="hljs-string">&#x27;coh&#x27;</span>);<br><br><span class="hljs-comment">%% 2nd and 3rd measures (phase-locking value and phase lag index)   </span><br><span class="hljs-keyword">for</span> subj = <span class="hljs-number">1</span>:<span class="hljs-built_in">numel</span>(FileNames)<br>    EEG = pop_loadset(<span class="hljs-string">&#x27;filename&#x27;</span>,FileNames&#123;<span class="hljs-number">1</span>,subj&#125;,<span class="hljs-string">&#x27;filepath&#x27;</span>,Data_Dir);<br>    EEG = eeg_checkset( EEG );<br>    eeg_filtered = eegfilt(<span class="hljs-built_in">reshape</span>(EEG.data, [<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">1</span>) <span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">2</span>)*<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">3</span>)]),...<br>                   EEG.srate,band(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),band(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),<span class="hljs-number">0</span>,<span class="hljs-number">3</span>*<span class="hljs-built_in">fix</span>(EEG.srate/band(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;fir1&#x27;</span>,<span class="hljs-number">0</span>); <span class="hljs-comment">% 对载入的数据进行带通滤波；使用eegfilt进行带通滤波时需要将分段数据重新变为连续数据 </span><br>         <br>    <span class="hljs-keyword">for</span> channels = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">1</span>)<br>        band_phase(channels,:) = <span class="hljs-built_in">angle</span>(hilbert(eeg_filtered(channels,:))); <span class="hljs-comment">%逐个分段进行Hilbert变换，并提取相位</span><br>    <span class="hljs-keyword">end</span>    <br>    perc10w =  <span class="hljs-built_in">floor</span>(<span class="hljs-built_in">size</span>(band_phase,<span class="hljs-number">2</span>)*<span class="hljs-number">0.1</span>);<span class="hljs-comment">% 确定数据长度10%是多少个样本点</span><br>    band_phase = band_phase(:,perc10w+<span class="hljs-number">1</span>:<span class="hljs-keyword">end</span>-perc10w); <span class="hljs-comment">%因Hilbert变换对数据首尾相位估算不准确，顾去掉前10%和后10%样本点的相位</span><br>    epoch_num = <span class="hljs-built_in">floor</span>(<span class="hljs-built_in">size</span>(band_phase,<span class="hljs-number">2</span>)/<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">2</span>)); <span class="hljs-comment">% 确定剩余的样本点如果转换为分段数据，可以分成多少段</span><br>    band_phase = band_phase(:,<span class="hljs-number">1</span>:epoch_num*<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">2</span>)); <span class="hljs-comment">% 依据可以分成的段数，截取数据</span><br>    band_phase = <span class="hljs-built_in">reshape</span>(band_phase,[<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">1</span>) <span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">2</span>) epoch_num]);<span class="hljs-comment">% 将数据重新转换为三维：电极*样本点*分段</span><br>    <br>    <span class="hljs-keyword">for</span> x = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(band_phase,<span class="hljs-number">1</span>)<br>         <span class="hljs-keyword">for</span> y = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(band_phase,<span class="hljs-number">1</span>)<br>             <span class="hljs-keyword">for</span> epochs = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(band_phase,<span class="hljs-number">3</span>)<br>                 x_phase = <span class="hljs-built_in">squeeze</span>(band_phase(x,:,epochs)); <span class="hljs-comment">% 提取电极对中第一个电极在某个分段的相位</span><br>                 y_phase = <span class="hljs-built_in">squeeze</span>(band_phase(y,:,epochs)); <span class="hljs-comment">% 提取电极对中第二个电极在某个分段的相位</span><br>                 rp = x_phase - y_phase; <span class="hljs-comment">% 计算两个电极在某个分段的相位差</span><br>                 <span class="hljs-comment">%%% PLV</span><br>                 sub_plv(x,y,epochs) = <span class="hljs-built_in">abs</span>(sum(<span class="hljs-built_in">exp</span>(<span class="hljs-number">1</span><span class="hljs-built_in">i</span>*rp))/<span class="hljs-built_in">length</span>(rp)); <span class="hljs-comment">% 计算某个被试某个电极对在某个分段的PLV</span><br>                 <span class="hljs-comment">%%% PLI</span><br>                 sub_pli(x,y,epochs) = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">sign</span>((<span class="hljs-built_in">abs</span>(rp)- <span class="hljs-built_in">pi</span>).*rp))); <span class="hljs-comment">% 计算某个被试某个电极对在某个分段的PLI</span><br>             <span class="hljs-keyword">end</span><br>         <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>   pli(:,:,subj) = <span class="hljs-built_in">mean</span>(sub_pli,<span class="hljs-number">3</span>); <span class="hljs-comment">% 对该被试各个分段的PLI计算平均值；pli变量维度是电极*电极*被试</span><br>   plv(:,:,subj) = <span class="hljs-built_in">mean</span>(sub_plv,<span class="hljs-number">3</span>); <span class="hljs-comment">% 对该被试各个分段的PLV计算平均值；plv变量维度是电极*电极*被试</span><br>   clear band_phase sub_pli sub_plv<br><span class="hljs-keyword">end</span><br><br>save(strcat(Output_Dir,<span class="hljs-string">&#x27;\&#x27;,prefix,&#x27;</span>_<span class="hljs-string">&#x27;,bandname,&#x27;</span>_plv.mat&#x27;),<span class="hljs-string">&#x27;plv&#x27;</span>);<br>save(strcat(Output_Dir,<span class="hljs-string">&#x27;\&#x27;,prefix,&#x27;</span>_<span class="hljs-string">&#x27;,bandname,&#x27;</span>_pli.mat&#x27;),<span class="hljs-string">&#x27;pli&#x27;</span>);<br><br><span class="hljs-comment">%% compute 4th measure (weighted phase lag index)</span><br><span class="hljs-keyword">for</span> subj = <span class="hljs-number">1</span>:<span class="hljs-built_in">numel</span>(FileNames)<br>    EEG = pop_loadset(<span class="hljs-string">&#x27;filename&#x27;</span>,FileNames&#123;<span class="hljs-number">1</span>,subj&#125;,<span class="hljs-string">&#x27;filepath&#x27;</span>,Data_Dir);<br>    EEG = eeg_checkset( EEG );<br>    eeg_filtered = eegfilt(<span class="hljs-built_in">reshape</span>(EEG.data, [<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">1</span>) <span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">2</span>)*<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">3</span>)]),...<br>                   EEG.srate,band(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),band(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),<span class="hljs-number">0</span>,<span class="hljs-number">3</span>*<span class="hljs-built_in">fix</span>(EEG.srate/band(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;fir1&#x27;</span>,<span class="hljs-number">0</span>); <br>    <br>    <span class="hljs-keyword">for</span> channels = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">1</span>)<br>        band_hilbert(channels,:) = hilbert(eeg_filtered(channels,:)); <span class="hljs-comment">% 对该被试每个通道的信号进行hilbert变换，得到解析信号（a + b*i）；计算wPLI不需要提取相位</span><br>    <span class="hljs-keyword">end</span> <br>    perc10w =  <span class="hljs-built_in">floor</span>(<span class="hljs-built_in">size</span>(band_hilbert,<span class="hljs-number">2</span>)*<span class="hljs-number">0.1</span>);<br>    band_hilbert = band_hilbert(:,perc10w+<span class="hljs-number">1</span>:<span class="hljs-keyword">end</span>-perc10w);<br>    epoch_num = <span class="hljs-built_in">floor</span>(<span class="hljs-built_in">size</span>(band_hilbert,<span class="hljs-number">2</span>)/<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">2</span>));<br>    band_hilbert = band_hilbert(:,<span class="hljs-number">1</span>:epoch_num*<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">2</span>));<br>    band_hilbert = <span class="hljs-built_in">reshape</span>(band_hilbert,[<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">1</span>) <span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">2</span>) epoch_num]); <br>    <br>    <span class="hljs-keyword">for</span> x = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(band_hilbert,<span class="hljs-number">1</span>)<br>         <span class="hljs-keyword">for</span> y = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(band_hilbert,<span class="hljs-number">1</span>)<br>             <span class="hljs-keyword">for</span> epochs = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(band_hilbert,<span class="hljs-number">3</span>)<br>                 x_hilbert = band_hilbert(x,:,epochs);<br>                 y_hilbert = band_hilbert(y,:,epochs);<br>                 crossspec = x_hilbert.* <span class="hljs-built_in">conj</span>(y_hilbert); <span class="hljs-comment">% 交叉谱</span><br>                 crossspec_imag = <span class="hljs-built_in">imag</span>(crossspec); <span class="hljs-comment">% 交叉谱的虚部</span><br>                 sub_wpli(x,y,epochs) = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">mean</span>(crossspec_imag))/<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">abs</span>(crossspec_imag)); <span class="hljs-comment">% 计算某个被试某个电极对在某个分段的wPLI</span><br>             <span class="hljs-keyword">end</span><br>         <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    wpli(:,:,subj) = <span class="hljs-built_in">mean</span>(sub_wpli,<span class="hljs-number">3</span>); <br>    clear band_hilbert sub_wpli<br><span class="hljs-keyword">end</span><br>wpli(<span class="hljs-built_in">isnan</span>(wpli)) = <span class="hljs-number">0</span>;<span class="hljs-comment">% 因为对角线上的wpli数值为nan，故进行这个操作</span><br>save(strcat(Output_Dir,<span class="hljs-string">&#x27;\&#x27;,prefix,&#x27;</span>_<span class="hljs-string">&#x27;,bandname,&#x27;</span>_wpli.mat&#x27;),<span class="hljs-string">&#x27;wpli&#x27;</span>);  <br><span class="hljs-comment">%% plot  所有被试 </span><br><span class="hljs-built_in">figure</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(plv,<span class="hljs-number">3</span>)<br>    subj_fc = plv(:,:,<span class="hljs-built_in">i</span>);<br>    subplot(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-built_in">i</span>);<br>    imagesc(subj_fc);<br>    title([<span class="hljs-string">&#x27;subj&#x27;</span>,num2str(<span class="hljs-built_in">i</span>)]);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">%% 组平均</span><br>group1_fc = <span class="hljs-built_in">mean</span>(plv,<span class="hljs-number">3</span>);<br><span class="hljs-built_in">figure</span>;<br>imagesc(group1_fc);<br>title(<span class="hljs-string">&#x27;Group-Average  FC&#x27;</span>);<br></code></pre></td></tr></table></figure>
<p>相干</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/相干.png" alt="相干"><figcaption aria-hidden="true">相干</figcaption>
</figure>
<p>Group1</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/group1-1616230975680.png" alt="group1"><figcaption aria-hidden="true">group1</figcaption>
</figure>
<p>Group 1 组平均</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/group1_组平均-1616230993912.png" alt="group1_组平均"><figcaption aria-hidden="true">group1_组平均</figcaption>
</figure>
<h1 id="绘图code">2 绘图Code</h1>
<p>​</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab">clc;clear all;close all<br><br>measures_path = <span class="hljs-string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day4\demo_data\rest_fc\&#x27;;</span><br><span class="hljs-string">channel_number = 20;</span><br><span class="hljs-string">%%  绘制coherence</span><br><span class="hljs-string">coh1 = importdata(strcat(measures_path,&#x27;</span>group1_alpha_coh.mat&#x27;)); <span class="hljs-comment">% 载入第一组被试的coh，并将其赋值给coh1变量，维度是电极*电极*被试</span><br>coh2 = importdata(strcat(measures_path,<span class="hljs-string">&#x27;group2_alpha_coh.mat&#x27;</span>)); <span class="hljs-comment">% 载入第一组被试的coh，并将其赋值给coh2变量，维度是电极*电极*被试</span><br><br>coh1_avg = <span class="hljs-built_in">mean</span>(coh1,<span class="hljs-number">3</span>); <span class="hljs-comment">% 计算第一组被试组平均的coh</span><br>coh2_avg = <span class="hljs-built_in">mean</span>(coh2,<span class="hljs-number">3</span>); <span class="hljs-comment">% 计算第二组被试组平均的coh</span><br><br>coh12_avg = [coh1_avg;coh2_avg]; <span class="hljs-comment">% 将第一组和第二组被试的组平均coh合并为coh12_avg</span><br>coh12_avg = <span class="hljs-built_in">sort</span>(coh12_avg(:),<span class="hljs-string">&#x27;ascend&#x27;</span>); <span class="hljs-comment">%将coh12_avg中的coherence值从小到大排列</span><br>coh12_avg = coh12_avg(<span class="hljs-number">1</span>:<span class="hljs-keyword">end</span><span class="hljs-number">-2</span>*channel_number); <span class="hljs-comment">%对于coherence指标来说，连接矩阵对角线元素数值为1；由于两组被试组平均连接矩阵维度均为电极*电极，顾coh12_avg变量中会有2*电极数目个数值1；此处将对角线上的1删除</span><br><br><span class="hljs-built_in">figure</span>;<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);imagesc(coh1_avg);caxis([<span class="hljs-built_in">min</span>(coh12_avg) <span class="hljs-built_in">max</span>(coh12_avg)]);colorbar; <span class="hljs-comment">% 第一个子图绘制第一组被试组平均的coh</span><br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);imagesc(coh2_avg);caxis([<span class="hljs-built_in">min</span>(coh12_avg) <span class="hljs-built_in">max</span>(coh12_avg)]);colorbar; <span class="hljs-comment">% 第二个子图绘制第一组被试组平均的coh</span><br><br><span class="hljs-comment">%%  绘制PLV （解释参考coherence）</span><br>plv1 = importdata(strcat(measures_path,<span class="hljs-string">&#x27;group1_alpha_plv.mat&#x27;</span>));<br>plv2 = importdata(strcat(measures_path,<span class="hljs-string">&#x27;group2_alpha_plv.mat&#x27;</span>));<br><br>plv1_avg = <span class="hljs-built_in">mean</span>(plv1,<span class="hljs-number">3</span>);<br>plv2_avg = <span class="hljs-built_in">mean</span>(plv2,<span class="hljs-number">3</span>);<br><br>plv12_avg = [plv1_avg;plv2_avg]; <br>plv12_avg = <span class="hljs-built_in">sort</span>(plv12_avg(:),<span class="hljs-string">&#x27;ascend&#x27;</span>);<br>plv12_avg = plv12_avg(<span class="hljs-number">1</span>:<span class="hljs-keyword">end</span><span class="hljs-number">-2</span>*channel_number);<br><br><span class="hljs-built_in">figure</span>;<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);imagesc(plv1_avg);caxis([<span class="hljs-built_in">min</span>(plv12_avg) <span class="hljs-built_in">max</span>(plv12_avg)]);colorbar;<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);imagesc(plv2_avg);caxis([<span class="hljs-built_in">min</span>(plv12_avg) <span class="hljs-built_in">max</span>(plv12_avg)]);colorbar;<br><br><span class="hljs-comment">%%  绘制PLI （解释参考coherence）</span><br>pli1 = importdata(strcat(measures_path,<span class="hljs-string">&#x27;group1_alpha_pli.mat&#x27;</span>));<br>pli2 = importdata(strcat(measures_path,<span class="hljs-string">&#x27;group2_alpha_pli.mat&#x27;</span>));<br><br>pli1_avg = <span class="hljs-built_in">mean</span>(pli1,<span class="hljs-number">3</span>);<br>pli2_avg = <span class="hljs-built_in">mean</span>(pli2,<span class="hljs-number">3</span>);<br><br>pli12_avg = [pli1_avg;pli2_avg]; <br>pli12_avg = <span class="hljs-built_in">sort</span>(pli12_avg(:),<span class="hljs-string">&#x27;descend&#x27;</span>); <span class="hljs-comment">%降序排序</span><br>pli12_avg = pli12_avg(<span class="hljs-number">1</span>:<span class="hljs-keyword">end</span><span class="hljs-number">-2</span>*channel_number); <span class="hljs-comment">% 将对角线上的0去掉</span><br><br><span class="hljs-built_in">figure</span>;<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);imagesc(pli1_avg);caxis([<span class="hljs-built_in">min</span>(pli12_avg) <span class="hljs-built_in">max</span>(pli12_avg)]);colorbar;<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);imagesc(pli2_avg);caxis([<span class="hljs-built_in">min</span>(pli12_avg) <span class="hljs-built_in">max</span>(pli12_avg)]);colorbar;<br><br><span class="hljs-comment">%%  绘制wPLI （解释参考coherence）</span><br>wpli1 = importdata(strcat(measures_path,<span class="hljs-string">&#x27;group1_alpha_wpli.mat&#x27;</span>));<br>wpli2 = importdata(strcat(measures_path,<span class="hljs-string">&#x27;group2_alpha_wpli.mat&#x27;</span>));<br><br>wpli1_avg = <span class="hljs-built_in">mean</span>(wpli1,<span class="hljs-number">3</span>);<br>wpli2_avg = <span class="hljs-built_in">mean</span>(wpli2,<span class="hljs-number">3</span>);<br><br>wpli12_avg = [wpli1_avg;wpli2_avg]; <br>wpli12_avg = <span class="hljs-built_in">sort</span>(wpli12_avg(:),<span class="hljs-string">&#x27;descend&#x27;</span>); <span class="hljs-comment">%降序排序</span><br>wpli12_avg = wpli12_avg(<span class="hljs-number">1</span>:<span class="hljs-keyword">end</span><span class="hljs-number">-2</span>*channel_number); <span class="hljs-comment">% 将对角线上的0去掉</span><br><br><span class="hljs-built_in">figure</span>;<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);imagesc(wpli1_avg);caxis([<span class="hljs-built_in">min</span>(wpli12_avg) <span class="hljs-built_in">max</span>(wpli12_avg)]);colorbar;<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);imagesc(wpli2_avg);caxis([<span class="hljs-built_in">min</span>(wpli12_avg) <span class="hljs-built_in">max</span>(wpli12_avg)]);colorbar;<br></code></pre></td></tr></table></figure>
<h1 id="连边分析">3 连边分析</h1>
<p>连通图</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 支持双样本T检验 和  配对T 检验</span><br><br>clc;clear all;close all<br><br><span class="hljs-comment">%% 指定相关信息</span><br>[filename1, pathname1, filterindex] = uigetfile(<span class="hljs-string">&#x27;*.mat&#x27;</span>, <span class="hljs-string">&#x27;Pick the mat file of measures of one condition (group)&#x27;</span>); <span class="hljs-comment">% 指定第一个条件或组别的指标文件</span><br>[filename2, pathname2, filterindex] = uigetfile(<span class="hljs-string">&#x27;*.mat&#x27;</span>, <span class="hljs-string">&#x27;Pick the mat file of measures of the other condition (group)&#x27;</span>); <span class="hljs-comment">% 指定第二个条件或组别的指标文件</span><br><br>[filename3, pathname3, filterindex] = uigetfile(<span class="hljs-string">&#x27;*.set&#x27;</span>, <span class="hljs-string">&#x27;Pick an eeglab file used to computed the measures&#x27;</span>); <span class="hljs-comment">% 因为要绘制电极与电极间连接图，因此需要知道电极坐标信息；这里随便载入某个被试的脑电数据</span><br><br>test_type = inputdlg(<span class="hljs-string">&#x27;Test Type? Paired t-test = 1 Independent t-test = 0&#x27;</span>); <span class="hljs-comment">% 指定检验的类型</span><br>test_type = str2num(test_type&#123;<span class="hljs-number">1</span>&#125;);<br><br>name1 = inputdlg(<span class="hljs-string">&#x27;the name of one condition (group)&#x27;</span>); <span class="hljs-comment">% 指定第一个条件或者组别的名称</span><br>name1 = name1&#123;<span class="hljs-number">1</span>&#125;;<br><br>name2 = inputdlg(<span class="hljs-string">&#x27;the name of the other condition (group)&#x27;</span>); <span class="hljs-comment">% 指定第二个条件或者组别的名称</span><br>name2 = name2&#123;<span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-comment">%% 载入某个eeglab格式脑电数据，获取该实验脑电数据的相关信息</span><br>EEG = pop_loadset(<span class="hljs-string">&#x27;filename&#x27;</span>,filename3,<span class="hljs-string">&#x27;filepath&#x27;</span>,pathname3);<br>chanlocs = EEG.chanlocs; <span class="hljs-comment">% 将通道位置信息保存在 chanlocs变量中</span><br>channel_number = <span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">1</span>); <span class="hljs-comment">% 获取电极数目</span><br>fc_number = channel_number*(channel_number<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>; <span class="hljs-comment">% 获取电极对的数目</span><br><br><span class="hljs-comment">%% 确定每个电极对分别对应哪两个电极</span><br>pairs = <span class="hljs-built_in">nchoosek</span>(<span class="hljs-number">1</span>:channel_number,<span class="hljs-number">2</span>); <br><br><span class="hljs-comment">%% 载入两个条件（或组别）的指标</span><br>A_fc  = importdata(strcat(pathname1,filename1)); <span class="hljs-comment">% 载入第一个条件或者第一组被试的功能连接矩阵，维度是电极*电极*被试</span><br>B_fc  = importdata(strcat(pathname2,filename2)); <span class="hljs-comment">% 载入第二个条件或者第二组被试的功能连接矩阵，维度是电极*电极*被试</span><br><br><span class="hljs-comment">%% 分别绘制两个条件（或组别）的总平均连通图</span><br>A_fc_avg = <span class="hljs-built_in">mean</span>(A_fc,<span class="hljs-number">3</span>); <span class="hljs-comment">% 对被试维度求平均，得到第一个条件或者组别的组平均水平连接矩阵，维度是电极*电极</span><br>A_fc_avg2 = <span class="hljs-built_in">zeros</span>(fc_number,<span class="hljs-number">1</span>); <span class="hljs-comment">% 对被试维度求平均，得到第二个条件或者组别的组平均水平连接矩阵，维度是电极*电极</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:fc_number<br>    A_fc_avg2(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>) = A_fc_avg(pairs(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>),pairs(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>));<span class="hljs-comment">% 提取连接矩阵上三角的功能连接值</span><br><span class="hljs-keyword">end</span>  <br><br>B_fc_avg = <span class="hljs-built_in">mean</span>(B_fc,<span class="hljs-number">3</span>);<br>B_fc_avg2 = <span class="hljs-built_in">zeros</span>(fc_number,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:fc_number<br>    B_fc_avg2(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>) = B_fc_avg(pairs(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>),pairs(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>));<br><span class="hljs-keyword">end</span>  <br><br>AB_fc_avg2 = [A_fc_avg2; B_fc_avg2];<br><br>ds.chanPairs = pairs;  <br>ds.connectStrength = A_fc_avg2; <br>ds.connectStrengthLimits = [<span class="hljs-built_in">min</span>(AB_fc_avg2) <span class="hljs-built_in">max</span>(AB_fc_avg2)];<br><span class="hljs-built_in">figure</span>;title(name1);topoplot_connect(ds, chanlocs); <br><br>ds.chanPairs = pairs;  <br>ds.connectStrength = B_fc_avg2; <br>ds.connectStrengthLimits = [<span class="hljs-built_in">min</span>(AB_fc_avg2) <span class="hljs-built_in">max</span>(AB_fc_avg2)];<br><span class="hljs-built_in">figure</span>;title(name2);topoplot_connect(ds, chanlocs); <br><br><span class="hljs-comment">%% 两个条件（或组别）间统计分析</span><br><span class="hljs-keyword">for</span>  <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:fc_number   <br>    A_fc_2(<span class="hljs-built_in">i</span>,:) = A_fc(pairs(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>),pairs(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>),:);<br>    B_fc_2(<span class="hljs-built_in">i</span>,:) = B_fc(pairs(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>),pairs(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>),:);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">if</span> test_type == <span class="hljs-number">1</span> <span class="hljs-comment">% paired</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:fc_number <br>       [~,p_right(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>)] = ttest(A_fc_2(<span class="hljs-built_in">i</span>,:),B_fc_2(<span class="hljs-built_in">i</span>,:),<span class="hljs-number">0.05</span>,<span class="hljs-string">&#x27;right&#x27;</span>);<br>       [~,p_left(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>)] = ttest(A_fc_2(<span class="hljs-built_in">i</span>,:),B_fc_2(<span class="hljs-built_in">i</span>,:),<span class="hljs-number">0.05</span>,<span class="hljs-string">&#x27;left&#x27;</span>);<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span>  <span class="hljs-comment">% indpendent</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:fc_number <br>       [~,p_right(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>)] = ttest2(A_fc_2(<span class="hljs-built_in">i</span>,:),B_fc_2(<span class="hljs-built_in">i</span>,:),<span class="hljs-number">0.05</span>,<span class="hljs-string">&#x27;right&#x27;</span>);<br>       [~,p_left(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>)] = ttest2(A_fc_2(<span class="hljs-built_in">i</span>,:),B_fc_2(<span class="hljs-built_in">i</span>,:),<span class="hljs-number">0.05</span>,<span class="hljs-string">&#x27;left&#x27;</span>);<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br>[~,h_right] = fdr(p_right,<span class="hljs-number">0.05</span>);<br>idx_right = <span class="hljs-built_in">find</span>(h_right == <span class="hljs-number">1</span>);<br>[~,h_left] = fdr(p_left,<span class="hljs-number">0.05</span>);<br>idx_left = <span class="hljs-built_in">find</span>(h_left == <span class="hljs-number">1</span>);<br><br>ds.chanPairs = pairs(idx_right,:); <br>ds.connectStrength = h_right(idx_right,<span class="hljs-number">1</span>);<br>ds.connectStrengthLimits = [<span class="hljs-number">0</span> <span class="hljs-number">1</span>];<br><span class="hljs-built_in">figure</span>;title(strcat(<span class="hljs-string">&#x27;significant pairs: &#x27;</span>,name1,<span class="hljs-string">&#x27;&gt;&#x27;</span>,name2));<br>topoplot_connect(ds, chanlocs);<br><br>ds.chanPairs = pairs(idx_left,:); <br>ds.connectStrength = h_left(idx_left,<span class="hljs-number">1</span>);<br>ds.connectStrengthLimits = [<span class="hljs-number">0</span> <span class="hljs-number">1</span>];<br><span class="hljs-built_in">figure</span>;title(strcat(<span class="hljs-string">&#x27;significant pairs: &#x27;</span>,name1,<span class="hljs-string">&#x27;&lt;&#x27;</span>,name2));<br>topoplot_connect(ds, chanlocs);<br><br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/1-1616237455788.png" alt="1"><figcaption aria-hidden="true">1</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/2-1616237467594.png" alt="2"><figcaption aria-hidden="true">2</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/3-1616237472787.png" alt="3"><figcaption aria-hidden="true">3</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/4.png" alt="4"><figcaption aria-hidden="true">4</figcaption>
</figure>
<h1 id="图论分析">4 图论分析</h1>
<p>全局</p>
<ul>
<li>网络的平均路径长度(长程)</li>
<li>全局效率</li>
<li>网络平均集群系数(近程)</li>
<li>网络平均局部效率(近程)</li>
<li>小世界属性(远 近)</li>
</ul>
<p>局部</p>
<ul>
<li><p>节点集群系数(近程)</p></li>
<li><p>局部效率（近程）</p></li>
<li><p>节点效率(远程)</p></li>
<li><p>节点度(重要性)</p></li>
<li><p>节点介数(重要性)</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 分段</span><br>fc_data = importdata(<span class="hljs-string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day4\demo_data\rest_fc\group2_alpha_coh.mat&#x27;</span>);<br>group = <span class="hljs-string">&#x27;group2&#x27;</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(fc_data,<span class="hljs-number">3</span>)<br>    subj_data = fc_data(:,:,<span class="hljs-built_in">i</span>);<br>    save([group, <span class="hljs-string">&#x27;_subj&#x27;</span>,num2str(<span class="hljs-built_in">i</span>),<span class="hljs-string">&#x27;.mat&#x27;</span>], <span class="hljs-string">&#x27;subj_data&#x27;</span>);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>
<p>启动 GRETNA</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab">gretna<br></code></pre></td></tr></table></figure></li>
</ul>
<h1 id="任务态功能连通性分析">5 任务态功能连通性分析</h1>
<p>相位差 —-&gt; PLV</p>
<p><strong>任务态FC测试数据：</strong></p>
<ul>
<li><p>两种条件： go nogo</p></li>
<li><p>采样率 250Hz（4ms采一个数据）</p></li>
<li><p>通道数量：32个</p></li>
<li><p>分段时间范围 ： -1 ~ 1.996s</p></li>
</ul>
<p><strong>问题：</strong></p>
<p>（1）刺激后相对于刺激前，通道之间的连通性有无变化？如有变化，go 、nogo诱发的变化程度是否一致？若不一致，体现在哪些时频区域？</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab">clc;clear all; close all;<br><br><span class="hljs-comment">%% 指定相关信息</span><br>Data_Dir = uigetdir([],<span class="hljs-string">&#x27;Path of the EEG datasets&#x27;</span>); <span class="hljs-comment">% 指定脑电数据所在的路径</span><br>Output_Dir = uigetdir([],<span class="hljs-string">&#x27;Path to store the measures&#x27;</span>); <span class="hljs-comment">% 指定生成的指标保存的路径</span><br><br>f_roi = inputdlg(<span class="hljs-string">&#x27;the frequencies of interest&#x27;</span>);<span class="hljs-comment">% STFT分析的频率点</span><br>f_roi = str2num(f_roi&#123;<span class="hljs-number">1</span>&#125;);<br><br>winsize = inputdlg(<span class="hljs-string">&#x27;the winsize of STFT (in seconds)&#x27;</span>); <span class="hljs-comment">% STFT分析的时间窗</span><br>winsize = str2num(winsize&#123;<span class="hljs-number">1</span>&#125;);<br><br>prefix = inputdlg(<span class="hljs-string">&#x27;the prefix of computed measures&#x27;</span>); <span class="hljs-comment">% 所要计算的指标的名称前缀；建议是条件名或组别名</span><br>prefix = prefix&#123;<span class="hljs-number">1</span>&#125;;<br><span class="hljs-comment">%% 计算PLV/PLI/wPLI</span><br>Dir_Data = dir(fullfile(Data_Dir,<span class="hljs-string">&#x27;*.set&#x27;</span>));  <br>filenames = &#123;Dir_Data.name&#125;;<br><br><span class="hljs-keyword">for</span> subj = <span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(filenames)<br>    subj<br>    EEG = pop_loadset(<span class="hljs-string">&#x27;filename&#x27;</span>,filenames&#123;<span class="hljs-number">1</span>, subj&#125;,<span class="hljs-string">&#x27;filepath&#x27;</span>,Data_Dir);<br>    EEG = eeg_checkset( EEG );<br>    <span class="hljs-comment">% STFT</span><br>    Fs = EEG.srate;<br>    xtimes = EEG.times/<span class="hljs-number">1000</span>;<br>    t = EEG.times/<span class="hljs-number">1000</span>;   <br>    <br>    <span class="hljs-keyword">for</span> nch = <span class="hljs-number">1</span>:EEG.nbchan<br>       [S, P, F, U] = sub_stft(<span class="hljs-built_in">squeeze</span>(EEG.data(nch,:,:)), xtimes, t, f_roi, Fs, winsize);   <span class="hljs-comment">%对某个被试的数据逐个通道进行STFT </span><br>       S_subject(:,:,:,nch) = S; <span class="hljs-comment">% 将该被试STFT后的解析信号赋值给S_subject 维度是频率*时间*试次*通道</span><br>       clear P S F U<br>    <span class="hljs-keyword">end</span>    <br>    <span class="hljs-comment">%</span><br>    angle_subject = <span class="hljs-built_in">angle</span>(S_subject); <span class="hljs-comment">% 提取相位   </span><br>    <span class="hljs-keyword">for</span> x = <span class="hljs-number">1</span>:EEG.nbchan<br>        <span class="hljs-keyword">for</span> y = <span class="hljs-number">1</span>:EEG.nbchan<br>            <span class="hljs-keyword">if</span> x &gt;= y <span class="hljs-comment">% 因PLV PLI和wPLI均为无向指标，顾这里只是计算电极*电极的连接矩阵的下三角</span><br>                <span class="hljs-comment">% PLV &amp; PLI </span><br>                tempx = <span class="hljs-built_in">squeeze</span>(angle_subject(:,:,:,x));<br>                tempy = <span class="hljs-built_in">squeeze</span>(angle_subject(:,:,:,y));<br>                relative_phase = tempx - tempy;<br>                plv(:,:,x,y,subj) = <span class="hljs-built_in">abs</span>(sum(<span class="hljs-built_in">exp</span>(<span class="hljs-number">1</span><span class="hljs-built_in">i</span>*relative_phase),<span class="hljs-number">3</span>)/<span class="hljs-built_in">size</span>(relative_phase,<span class="hljs-number">3</span>));<br>                pli(:,:,x,y,subj) = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">sign</span>((<span class="hljs-built_in">abs</span>(relative_phase)- <span class="hljs-built_in">pi</span>).*relative_phase),<span class="hljs-number">3</span>));<br>                <span class="hljs-comment">% wPLI               </span><br>                tempx2 = <span class="hljs-built_in">squeeze</span>(S_subject(:,:,:,x));<br>                tempy2 = <span class="hljs-built_in">squeeze</span>(S_subject(:,:,:,y));<br>                crossspec = tempx2.* <span class="hljs-built_in">conj</span>(tempy2);<br>                crossspec_imag = <span class="hljs-built_in">imag</span>(crossspec);<br>                wpli(:,:,x,y,subj) = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">mean</span>(crossspec_imag,<span class="hljs-number">3</span>))./<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">abs</span>(crossspec_imag),<span class="hljs-number">3</span>);<br>           <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span>    <br>    clear angle_subject tempx tempy tempx2 tempy2 relative_phase S_subject crossspec crossspec_imag<br>    <br>    waitbar(subj/<span class="hljs-built_in">length</span>(filenames))   <br><span class="hljs-keyword">end</span><br><br>wpli(<span class="hljs-built_in">isnan</span>(wpli)) = <span class="hljs-number">0</span>;<br>save(strcat(Output_Dir,<span class="hljs-string">&#x27;\&#x27;,prefix,&#x27;</span>_plv.mat&#x27;),<span class="hljs-string">&#x27;plv&#x27;</span>);<br>save(strcat(Output_Dir,<span class="hljs-string">&#x27;\&#x27;,prefix,&#x27;</span>_pli.mat&#x27;),<span class="hljs-string">&#x27;pli&#x27;</span>);<br>save(strcat(Output_Dir,<span class="hljs-string">&#x27;\&#x27;,prefix,&#x27;</span>_wpli.mat&#x27;),<span class="hljs-string">&#x27;wpli&#x27;</span>);             <br></code></pre></td></tr></table></figure>
<p>（2） go /nogo条件诱发的 连通性的变化的差异 主要体现在哪些连边上呢？</p>
<p>tf_fc_test.m</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab">clc;clear all;close all<br><br><span class="hljs-comment">%% 指定相关信息</span><br>channel_pair = inputdlg(<span class="hljs-string">&#x27;The channel pair to be test (e.g., [6 5])&#x27;</span>);<br>channel_pair = str2num(channel_pair&#123;<span class="hljs-number">1</span>&#125;);<br><br>time_axis = inputdlg(<span class="hljs-string">&#x27;The time axis of TFR (in ms)&#x27;</span>);<br>time_axis = str2num(time_axis&#123;<span class="hljs-number">1</span>&#125;);<br><br>f_axis = inputdlg(<span class="hljs-string">&#x27;The frequency axis of TFR (in Hz)&#x27;</span>);<br>f_axis = str2num(f_axis&#123;<span class="hljs-number">1</span>&#125;);<br><br>baseline = inputdlg(<span class="hljs-string">&#x27;The baseline limits (in ms)&#x27;</span>);<br>baseline = str2num(baseline&#123;<span class="hljs-number">1</span>&#125;);<br><br>test_type = inputdlg(<span class="hljs-string">&#x27;Test Type? Paired t-test = 1 Independent t-test = 0&#x27;</span>);<br>test_type = str2num(test_type&#123;<span class="hljs-number">1</span>&#125;);<br><br>name1 = inputdlg(<span class="hljs-string">&#x27;the name of one condition (group)&#x27;</span>);<br>name1 = name1&#123;<span class="hljs-number">1</span>&#125;;<br><br>name2 = inputdlg(<span class="hljs-string">&#x27;the name of the other condition (group)&#x27;</span>);<br>name2 = name2&#123;<span class="hljs-number">1</span>&#125;;<br><br><br><span class="hljs-comment">%% 载入数据</span><br>[filename1, pathname1, filterindex] = uigetfile(<span class="hljs-string">&#x27;*.mat&#x27;</span>, <span class="hljs-string">&#x27;Pick the mat file of measures of one condition (group)&#x27;</span>);<br>[filename2, pathname2, filterindex] = uigetfile(<span class="hljs-string">&#x27;*.mat&#x27;</span>, <span class="hljs-string">&#x27;Pick the mat file of measures of the other condition (group)&#x27;</span>);<br>A_fc = importdata(strcat(pathname1,filename1));<br>B_fc = importdata(strcat(pathname2,filename2));<br><br><span class="hljs-comment">%% 提取感兴趣电极对的数据，并进行基线矫正</span><br>A_fc_x = <span class="hljs-built_in">squeeze</span>(A_fc(:,:,channel_pair(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),channel_pair(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),:));<br>B_fc_x = <span class="hljs-built_in">squeeze</span>(B_fc(:,:,channel_pair(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),channel_pair(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),:));<br>clear A_fc B_fc<br><br>A_fc_x = A_fc_x - <span class="hljs-built_in">repmat</span>(<span class="hljs-built_in">mean</span>(A_fc_x(:,time_axis &gt;= baseline(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) &amp; time_axis &lt;= baseline(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),:),<span class="hljs-number">2</span>),[<span class="hljs-number">1</span> <span class="hljs-built_in">length</span>(time_axis) <span class="hljs-number">1</span>]);<br>B_fc_x = B_fc_x - <span class="hljs-built_in">repmat</span>(<span class="hljs-built_in">mean</span>(B_fc_x(:,time_axis &gt;= baseline(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) &amp; time_axis &lt;= baseline(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),:),<span class="hljs-number">2</span>),[<span class="hljs-number">1</span> <span class="hljs-built_in">length</span>(time_axis) <span class="hljs-number">1</span>]);<br><br><span class="hljs-comment">%% 对逐个时频点进行t检验，并使用FDR矫正</span><br><span class="hljs-keyword">if</span> test_type == <span class="hljs-number">1</span> <span class="hljs-comment">% paired</span><br>    <span class="hljs-keyword">for</span> f = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(A_fc_x,<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> t = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(A_fc_x,<span class="hljs-number">2</span>)<br>            [~,p(f,t)] = ttest(<span class="hljs-built_in">squeeze</span>(A_fc_x(f,t,:)),<span class="hljs-built_in">squeeze</span>(B_fc_x(f,t,:)));<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span>  <span class="hljs-comment">% indpendent</span><br>    <span class="hljs-keyword">for</span> f = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(A_fc_x,<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> t = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(A_fc_x,<span class="hljs-number">2</span>)<br>            [~,p(f,t)] = ttest2(<span class="hljs-built_in">squeeze</span>(A_fc_x(f,t,:)),<span class="hljs-built_in">squeeze</span>(B_fc_x(f,t,:)));<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>    <br>    <br>[~, p_masked] = fdr(p,<span class="hljs-number">0.05</span>);<br><br><span class="hljs-comment">%% 绘图</span><br>A_fc_x_mean = <span class="hljs-built_in">mean</span>(A_fc_x,<span class="hljs-number">3</span>);<br>B_fc_x_mean = <span class="hljs-built_in">mean</span>(B_fc_x,<span class="hljs-number">3</span>);<br><br><span class="hljs-built_in">figure</span>;<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>); imagesc(time_axis,f_axis,A_fc_x_mean);axis xy; colorbar;title(name1)<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>); imagesc(time_axis,f_axis,B_fc_x_mean);axis xy; colorbar;title(name2)<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>); imagesc(time_axis,f_axis,p);axis xy; colorbar;title(<span class="hljs-string">&#x27;uncorrected p value&#x27;</span>)<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>); imagesc(time_axis,f_axis,p_masked);axis xy; colorbar;title(<span class="hljs-string">&#x27;significant area after FDR&#x27;</span>)<br><br></code></pre></td></tr></table></figure>
<p><strong>通道 5 6 差异</strong></p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/1-1616248267478.png" alt="1"><figcaption aria-hidden="true">1</figcaption>
</figure>
<p>未过0.05 FDR校正 矫正次数 30*750 （大）</p>
<p>tf_roi_fc_test.m</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab">clc;clear all;close all<br><br><span class="hljs-comment">%% 指定相关信息</span><br>time_axis = inputdlg(<span class="hljs-string">&#x27;The time axis of TFR (in ms)&#x27;</span>);<br>time_axis = str2num(time_axis&#123;<span class="hljs-number">1</span>&#125;);<br><br>f_axis = inputdlg(<span class="hljs-string">&#x27;The frequency axis of TFR (in Hz)&#x27;</span>);<br>f_axis = str2num(f_axis&#123;<span class="hljs-number">1</span>&#125;);<br><span class="hljs-comment">% limits  输入上下限</span><br>baseline = inputdlg(<span class="hljs-string">&#x27;The baseline limits (in ms)&#x27;</span>);<br>baseline = str2num(baseline&#123;<span class="hljs-number">1</span>&#125;);<br><br>t_roi = inputdlg(<span class="hljs-string">&#x27;The temporal limits of TF-ROI (in ms)&#x27;</span>);<br>t_roi = str2num(t_roi&#123;<span class="hljs-number">1</span>&#125;);<br><br>f_roi = inputdlg(<span class="hljs-string">&#x27;The spectral limits of TF-ROI (in Hz)&#x27;</span>);<br>f_roi = str2num(f_roi&#123;<span class="hljs-number">1</span>&#125;);<br><br>test_type = inputdlg(<span class="hljs-string">&#x27;Test Type? Paired t-test = 1 Independent t-test = 0&#x27;</span>);<br>test_type = str2num(test_type&#123;<span class="hljs-number">1</span>&#125;);<br><br>name1 = inputdlg(<span class="hljs-string">&#x27;the name of one condition (group)&#x27;</span>);<br>name1 = name1&#123;<span class="hljs-number">1</span>&#125;;<br><br>name2 = inputdlg(<span class="hljs-string">&#x27;the name of the other condition (group)&#x27;</span>);<br>name2 = name2&#123;<span class="hljs-number">1</span>&#125;;<br><br>[filename3, pathname3, filterindex] = uigetfile(<span class="hljs-string">&#x27;*.set&#x27;</span>, <span class="hljs-string">&#x27;Pick an eeglab file used to computed the measures&#x27;</span>);<br><br><span class="hljs-comment">%% 载入数据，并提取TF-ROI的指标，并将TF-ROI数据保存在current folder下</span><br>[filename1, pathname1, filterindex] = uigetfile(<span class="hljs-string">&#x27;*.mat&#x27;</span>, <span class="hljs-string">&#x27;Pick the mat file of measures of one condition (group)&#x27;</span>);<br>[filename2, pathname2, filterindex] = uigetfile(<span class="hljs-string">&#x27;*.mat&#x27;</span>, <span class="hljs-string">&#x27;Pick the mat file of measures of the other condition (group)&#x27;</span>);<br>A_fc = importdata(strcat(pathname1,filename1));<br>B_fc = importdata(strcat(pathname2,filename2));<br><br>A_fc = A_fc - <span class="hljs-built_in">repmat</span>(<span class="hljs-built_in">mean</span>(A_fc(:,time_axis &gt;= baseline(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) &amp; time_axis &lt;= baseline(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),:,:,:),<span class="hljs-number">2</span>),[<span class="hljs-number">1</span> <span class="hljs-built_in">length</span>(time_axis) <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>]);<br>B_fc = B_fc - <span class="hljs-built_in">repmat</span>(<span class="hljs-built_in">mean</span>(B_fc(:,time_axis &gt;= baseline(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) &amp; time_axis &lt;= baseline(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),:,:,:),<span class="hljs-number">2</span>),[<span class="hljs-number">1</span> <span class="hljs-built_in">length</span>(time_axis) <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>]);<br><br>A_fc_roi = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">mean</span>(A_fc(f_axis &gt;= f_roi(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) &amp; f_axis &lt;= f_roi(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),time_axis &gt;= t_roi(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) &amp; time_axis &lt;= t_roi(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),:,:,:),<span class="hljs-number">1</span>),<span class="hljs-number">2</span>));<br>B_fc_roi = <span class="hljs-built_in">squeeze</span>(<span class="hljs-built_in">mean</span>(<span class="hljs-built_in">mean</span>(B_fc(f_axis &gt;= f_roi(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) &amp; f_axis &lt;= f_roi(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),time_axis &gt;= t_roi(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) &amp; time_axis &lt;= t_roi(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),:,:,:),<span class="hljs-number">1</span>),<span class="hljs-number">2</span>));<br><br>fc_roi&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125; = A_fc_roi;<br>fc_roi&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125; = B_fc_roi;<br>save fc_roi.mat fc_roi  t_roi f_roi<br><br><span class="hljs-comment">%% 载入某个eeglab格式脑电数据，获取该实验脑电数据的相关信息</span><br>EEG = pop_loadset(<span class="hljs-string">&#x27;filename&#x27;</span>,filename3,<span class="hljs-string">&#x27;filepath&#x27;</span>,pathname3);<br>chanlocs = EEG.chanlocs;<br>channel_number = <span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">1</span>);<br>fc_number = channel_number*(channel_number<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>;<br><br><span class="hljs-comment">%% 确定每个电极对分别对应哪两个电极</span><br>pairs = <span class="hljs-built_in">nchoosek</span>(<span class="hljs-number">1</span>:channel_number,<span class="hljs-number">2</span>); <br>pairs = pairs(:,[<span class="hljs-number">2</span> <span class="hljs-number">1</span>]); <span class="hljs-comment">% 因PS_computation计算的是下三角（行数值大于列数值），但是pairs是第一列小于第二列数值（行数值小于列数字），顾这里将第一列和第二列置换 </span><br><br><span class="hljs-comment">%% 分别绘制两个条件（或组别）的总平均连通图</span><br>A_avg = <span class="hljs-built_in">mean</span>(A_fc_roi,<span class="hljs-number">3</span>);<br>A_avg2 = <span class="hljs-built_in">zeros</span>(fc_number,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:fc_number<br>    A_avg2(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>) = A_avg(pairs(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>),pairs(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>));<br><span class="hljs-keyword">end</span>  <br><br>B_avg = <span class="hljs-built_in">mean</span>(B_fc_roi,<span class="hljs-number">3</span>);<br>B_avg2 = <span class="hljs-built_in">zeros</span>(fc_number,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:fc_number<br>    B_avg2(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>) = B_avg(pairs(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>),pairs(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>));<br><span class="hljs-keyword">end</span>  <br><br>AB_avg2 = [A_avg2; B_avg2];<br><br>ds.chanPairs = pairs;  <br>ds.connectStrength = A_avg2; <br>ds.connectStrengthLimits = [<span class="hljs-built_in">min</span>(AB_avg2) <span class="hljs-built_in">max</span>(AB_avg2)];<br><span class="hljs-built_in">figure</span>;title(name1);topoplot_connect(ds, chanlocs); <br><br>ds.chanPairs = pairs;  <br>ds.connectStrength = B_avg2; <br>ds.connectStrengthLimits = [<span class="hljs-built_in">min</span>(AB_avg2) <span class="hljs-built_in">max</span>(AB_avg2)];<br><span class="hljs-built_in">figure</span>;title(name2);topoplot_connect(ds, chanlocs);  <br><span class="hljs-comment">%% 两个条件（或组别）间统计分析</span><br><span class="hljs-keyword">for</span>  <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:fc_number   <br>    A_fc_roi_2(<span class="hljs-built_in">i</span>,:) = A_fc_roi(pairs(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>),pairs(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>),:);<br>    B_fc_roi_2(<span class="hljs-built_in">i</span>,:) = B_fc_roi(pairs(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>),pairs(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>),:);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">if</span> test_type == <span class="hljs-number">1</span> <span class="hljs-comment">% paired</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:fc_number <br>       [~,p_right(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>)] = ttest(A_fc_roi_2(<span class="hljs-built_in">i</span>,:),B_fc_roi_2(<span class="hljs-built_in">i</span>,:),<span class="hljs-number">0.05</span>,<span class="hljs-string">&#x27;right&#x27;</span>);<br>       [~,p_left(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>)] = ttest(A_fc_roi_2(<span class="hljs-built_in">i</span>,:),B_fc_roi_2(<span class="hljs-built_in">i</span>,:),<span class="hljs-number">0.05</span>,<span class="hljs-string">&#x27;left&#x27;</span>);<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span>  <span class="hljs-comment">% indpendent</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:fc_number <br>       [~,p_right(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>)] = ttest2(A_fc_roi_2(<span class="hljs-built_in">i</span>,:),B_fc_roi_2(<span class="hljs-built_in">i</span>,:),<span class="hljs-number">0.05</span>,<span class="hljs-string">&#x27;right&#x27;</span>);<br>       [~,p_left(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>)] = ttest2(A_fc_roi_2(<span class="hljs-built_in">i</span>,:),B_fc_roi_2(<span class="hljs-built_in">i</span>,:),<span class="hljs-number">0.05</span>,<span class="hljs-string">&#x27;left&#x27;</span>);<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br>[~,h_right] = fdr(p_right,<span class="hljs-number">0.05</span>);<br>idx_right = <span class="hljs-built_in">find</span>(h_right == <span class="hljs-number">1</span>);<br>[~,h_left] = fdr(p_left,<span class="hljs-number">0.05</span>);<br>idx_left = <span class="hljs-built_in">find</span>(h_left == <span class="hljs-number">1</span>);<br><br>ds.chanPairs = pairs(idx_right,:); <br>ds.connectStrength = h_right(idx_right,<span class="hljs-number">1</span>);<br>ds.connectStrengthLimits = [<span class="hljs-number">0</span> <span class="hljs-number">1</span>];<br><span class="hljs-built_in">figure</span>;title(strcat(<span class="hljs-string">&#x27;significant pairs: &#x27;</span>,name1,<span class="hljs-string">&#x27;&gt;&#x27;</span>,name2));topoplot_connect(ds, chanlocs);<br><br>ds.chanPairs = pairs(idx_left,:); <br>ds.connectStrength = h_left(idx_left,<span class="hljs-number">1</span>);<br>ds.connectStrengthLimits = [<span class="hljs-number">0</span> <span class="hljs-number">1</span>];<br><span class="hljs-built_in">figure</span>;title(strcat(<span class="hljs-string">&#x27;significant pairs: &#x27;</span>,name1,<span class="hljs-string">&#x27;&lt;&#x27;</span>,name2));topoplot_connect(ds, chanlocs);<br><br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/21/%E6%80%9D%E5%BD%B1%E5%9F%B9%E8%AE%AD/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/image-20210320220603717.png" alt="image-20210320220603717"><figcaption aria-hidden="true">image-20210320220603717</figcaption>
</figure>
<p><strong>空间滤波</strong></p>
<p>过滤切向电流</p>
<p>(可选操作)</p>
<p>compute_CSDdata.m</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab">clc;clear all;close all<br><br><span class="hljs-comment">%% 指定需要计算CSD的EEGLAB格式文件所在的路径及CSD输出的路径（输出路径中保存的EEGLAB格式文件保存的是CSD而非EEG）</span><br>Data_Dir = uigetdir([],<span class="hljs-string">&#x27;Path of the EEG datasets&#x27;</span>); <span class="hljs-comment">% 弹出对话框要求制定数据所在路径</span><br>Output_Dir = uigetdir([],<span class="hljs-string">&#x27;Path of the computed CSD datasets&#x27;</span>); <span class="hljs-comment">% 弹出对话框要求制定生成的CSD数据集所在的路径</span><br><br><span class="hljs-comment">%% 获取电极排布信息（空间坐标）</span><br>Dir_Data = dir(fullfile(Data_Dir,<span class="hljs-string">&#x27;*.set&#x27;</span>));  <span class="hljs-comment">% 在Dir_Data变量中存储脑电数据文件夹中所有set文件的信息</span><br>filenames = &#123;Dir_Data.name&#125;; <span class="hljs-comment">% 将数据文件夹中所有set文件的名称返回给filenames变量 </span><br>EEG = pop_loadset(<span class="hljs-string">&#x27;filename&#x27;</span>,filenames&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<span class="hljs-string">&#x27;filepath&#x27;</span>,Data_Dir);<span class="hljs-comment">% 因我们需要知道数据中有哪些电极，顾载入上述set文件中的第一个（其实随便一个文件都行）</span><br>electrodes = &#123;EEG.chanlocs.labels&#125;&#x27;; <span class="hljs-comment">% 将上述载入的脑电数据中电极的名称返回给electrodes变量</span><br>Montage = ExtractMontage(<span class="hljs-string">&#x27;10-5-System_Mastoids_EGI129.csd&#x27;</span>,electrodes); <br><span class="hljs-comment">% 在10-5-System_Mastoids_EGI129.csd文件中，检索前述所有电极的坐标。</span><br><span class="hljs-comment">% 顾应该在使用本脚本前查阅该文件确定自己的数据各个电极是否可以在此文件中找到坐标。如找不到应该事先将该电极删除</span><br><br><span class="hljs-comment">%% 计算 G 和 H 矩阵</span><br>[G,H] = GetGH(Montage);<br><br><span class="hljs-comment">%% 对每个数据计算CSD</span><br><span class="hljs-keyword">for</span> f = <span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(filenames)<br>    EEG = pop_loadset(<span class="hljs-string">&#x27;filename&#x27;</span>,filenames&#123;<span class="hljs-number">1</span>,f&#125;,<span class="hljs-string">&#x27;filepath&#x27;</span>,Data_Dir); <span class="hljs-comment">% 载入待转换的脑电数据</span><br>    EEG = eeg_checkset( EEG );     <br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(EEG.data,<span class="hljs-number">3</span>)<br>        D = <span class="hljs-built_in">squeeze</span>(EEG.data(:,:,<span class="hljs-built_in">i</span>));<br>        X = CSD (D, G, H); <span class="hljs-comment">% 每个分段分别进行转换得到CSD</span><br>        CSDdata(:,:,<span class="hljs-built_in">i</span>) = X;<br>    <span class="hljs-keyword">end</span><br>    EEG.data = CSDdata; <span class="hljs-comment">% 将转换后生成的CSD赋值给EEG变量的域data</span><br>    EEG = eeg_checkset( EEG );<br>    EEG = pop_saveset(EEG,<span class="hljs-string">&#x27;filename&#x27;</span>,filenames&#123;<span class="hljs-number">1</span>,f&#125;,<span class="hljs-string">&#x27;filepath&#x27;</span>,Output_Dir);<span class="hljs-comment">%保存CSD；此时CSD以set文件保存</span><br>    clear CSDdata<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>脑电</category>
      </categories>
  </entry>
  <entry>
    <title>A New Generation of Brain-Computer Interface Based on Riemannian Geometry</title>
    <url>/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总结">0. 总结</h2>
<p>通用<span class="math inline">\(MDM\)</span>距离。用黎曼平均代替算术平均。用黎曼距离代替算术距离，更好的处理<span class="math inline">\(SPD\)</span>矩阵。</p>
<span id="more"></span>
<h2 id="研究目的">1. 研究目的</h2>
<p>提出新一代基于黎曼几何的脑机接口处理框架</p>
<h2 id="背景与问题说明">2. 背景与问题说明</h2>
<h2 id="背景">2.1背景</h2>
<ul>
<li>脑电信号的处理和分类算法，主要是<code>脑电逆解</code>与<code>对角化方法</code>,比如：<span class="math inline">\(CSP\)</span>，<span class="math inline">\(CCA\)</span>,<span class="math inline">\(ICA\)</span>，以及变种和组合。基于这些工具的新方法只能带来适度的改进，并不能显著提高可靠性。</li>
<li>目前三种主要的脑-机接口模式，即运动图像(MI)、稳态诱发电位(<span class="math inline">\(SSEP\)</span>),<span class="math inline">\(P300\)</span>中的每一种都被专用的预处理、信号处理和分类工具处理。</li>
<li>现有的范式分为两类：一类遵循“硬机器学习(<span class="math inline">\(hard machine-learning\)</span>)”方法，另一类使用“空间滤波”来提高信噪比，然后使用简单的分类算法。
<ul>
<li>硬机器学习,泛化能力好，但是需要大量数据以及计算复杂</li>
<li>空间过滤的情况正好相反，其糟糕的泛化能力可以通过快速训练和较低的计算成本来弥补。</li>
</ul></li>
<li>因此，有人建议将预处理、特征提取和分类不作为独立的过程，而是一个整体</li>
</ul>
<h2 id="脑-机接口处理和分类应具备特点">2.2 脑-机接口处理和分类应具备特点：</h2>
<p>精确、可靠、泛化、快速学习、通用、算法简单、计算效率高、多用户、</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210405162412788.png"></p>
<p>​ 新一代脑机接口的概念</p>
<h2 id="方法">3. 方法</h2>
<p>假设：$x(t)R^N $ 是N个电极的零均值脑电时间向量</p>
<p>​ <span class="math inline">\(X_z\in R^{N.T}\)</span> 是T个样本组成的实验，带通滤波后也被认为是零均值的</p>
<p>​ 属于类z的样本协方差矩阵为 <span class="math display">\[
C_z=1/(T-1)(X_zX_z^T)
\]</span> ​ 假设为多元高斯分布，则Wishart矩阵Σ是数据分布的唯一参数，假设每个类别都是唯一的，如下所示</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210405165117009.png"></p>
<h2 id="分类框架">3.1 分类框架</h2>
<p>在脑-机接口操作中，我们有许多带标签的训练数据，属于类z <span class="math inline">\(\in\)</span> {1-Z}。分类就是将无标签的实验x分配给z中的一类。通过计算该样本与z类的每一个平均样本协方差<span class="math inline">\(M_1,M_2,...M_Z\)</span> ,将被标记的样本分给 平均值最接近的类。</p>
<p>因此需要一个适当的度量来估计基于已标记试验的类别均值，并评估未标记试验与均值之间的距离</p>
<hr>
<p><span class="math display">\[Universal MDM BCI Classifier (3) \]</span></p>
<ol type="1">
<li><p>给定每个类<span class="math inline">\(z\in{1…Z}\)</span>多个训练试验<span class="math inline">\(X_z\)</span>进行适当的预处理，估计适当形式的协方差矩阵<span class="math inline">\(C_z\)</span>，并估计其<span class="math inline">\(Z\)</span>类均值<span class="math inline">\(M_1...M_Z.\)</span></p></li>
<li><p>对于未知试验X进行相同的预处理，估计相同形式的协方差矩阵C，并根据</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210405170848138.png"> （3）</p>
<p>将其分配给类别k。即通过距离<span class="math inline">\(\delta_R\)</span>确定最接近的协方差矩阵。</p></li>
</ol>
<hr>
<p>最小平均距离分类器</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210405171634755.png"></p>
<p>以2x2 的协方差矩阵为例，2x2协方差矩阵有三个非冗余元素，即两个过程<span class="math inline">\(x_1(t)\)</span>和<span class="math inline">\(x_2(t)\)</span>的方差及其协方差。每个协方差矩阵表示为3D空间中的一个点。A类的训练(标记)试验用球体表示，B类用金字塔表示。集合平均值分别为<span class="math inline">\(M_A\)</span>和<span class="math inline">\(M_B\)</span> ,未分类的协方差矩阵<span class="math inline">\(C\)</span>。通过<span class="math inline">\(\delta_R\)</span>将其分给距离最近的类。</p>
<p><code>将平均值定义为算术平均值，将距离定义为欧几里得距离会产生非常差的分类精度</code></p>
<p>黎曼几何提供了处理对称正定矩阵(<span class="math inline">\(SPD\)</span>)的自然框架，结构化协方差矩阵就是这种类型。根据数据定义适当的嵌入相关信息的<span class="math inline">\(SPD\)</span>矩阵是我们的工作，将电生理学知识与数学形式联系起来。</p>
<h2 id="智能初始化跨被试和跨会话泛化">3.2 智能初始化(跨被试和跨会话泛化)</h2>
<p>脑-机接口处理链应该既具有快速的自适应能力，又具有良好的跨会话和跨主题的泛化能力。与最先进的方法相比，这就是黎曼框架被证明具有优势的地方。</p>
<p>如何在第一次会话之后以最佳方式混合跨主题和跨会话初始化，以及应该使用数据库的哪一部分来初始化给定用户的分类器，这些在很大程度上都是未探索的主题，例如，两个权重之和为1。换句话说，将这两个分类器组合起来产生一个新的分类器。通用分类器在会话开始时的权重为1，并且随着会话的进行，权重越来越小。对于天真的用户，单个分类器在会话开始时的权重为零。对于可以获得来自先前会话的数据的用户，初始权重可以与训练数据量成比例地提高。在任何情况下，单个分类器的权重都会随着会话的进行而上升，并在会话结束时接近1。无论有没有监督，这两个平行的分类器应该如何随着时间的推移而进化，这是一个有趣而不是微不足道的研究课题。</p>
<h2 id="自适应">3.3 自适应</h2>
<p>在给定初始值的情况下，我们希望学习单个分类参数，以达到最佳性能，并适应环境变化、心理状态变化和任何其他可能影响分类性能的中间条件。我们也希望尽快做到这一点。为了做到这一点，我们实际上建立了两个并行分类<span class="math inline">\(MDM\)</span>算法，一个是通用的，唯一基于迁移学习(即数据库)，另一个是个体的，后者是有监督的或无监督的。我们这里考虑的是有监督的情况。分类器输出将由两个分类器的加权和给出。</p>
<p>因此，与其他类型的分类器不同的是，多个<span class="math inline">\(MDM\)</span>分类器可以通过组合多个距离方便地组合在一起，保证了分类输出的稳定性和一致性。</p>
<h2 id="运动想象的分类">3.4 运动想象的分类</h2>
<p>如(1)中定义的样本协方差矩阵仅包含空间信息。对角线元素保持每个电极上信号的方差，而非对角线元素保持所有电极对之间的协方差。</p>
<p>因此，对运动想象(MI)试验进行分类就足够了，因为不同类别的MI试验确实产生了不同的(头皮)空间模式，这种模式完全嵌入到样本协方差矩阵的结构中。</p>
<p>对于MI，我们<code>不需要扩展数据的定义</code>，只需设置 <span class="math display">\[
X_z^{MI}=X_z              \\    (4)
\]</span> 在基于MI的脑机接口的情况下，有和运动想象任务一样多的class(包括相关的训练试验)。如果需要，可以添加无运动图像类。唯一预处理步骤是对运动图像进行带通滤波 (例如，8-30 Hz)。然后，<span class="math inline">\(MDM\)</span>算法(3)使用按照(1)的协方差矩阵的规则形式来应用。</p>
<p>广泛的测试已经证明，<span class="math inline">\(MDM\)</span>方法对于运动图像数据是可靠、稳健和准确的。</p>
<h2 id="事件相关电位的分类">3.5 事件相关电位的分类</h2>
<p>对于基于事件相关电位的脑-机接口，由于事件相关电位的特征幅度比背景脑电信号小得多，所以标准样本协方差矩阵的效率不高，因此单个试验的协方差矩阵所包含的空间结构<code>不能提供足够</code>的分类信息。事实上，协方差矩阵根本<code>不包含任何时间信息</code>，如果我们考虑随机洗牌试验<span class="math inline">\(X_z\)</span>的样本，样本协方差矩阵(1)不变，这是很容易实现的.</p>
<p>然而，<span class="math inline">\(ERP\)</span>有一个特定的<code>时间特征</code>；正是这个特征将一个<span class="math inline">\(ERP\)</span>与另一个<span class="math inline">\(ERP\)</span>区分开来，或者将ERP与没有<span class="math inline">\(ERP\)</span>区分开来，所以这是我们需要提取并嵌入到“协方差矩阵”中的信息。为此，让我们再次考虑一系列实验<span class="math inline">\(X_z\)</span>，z属于类{1...Z}。在这种情况下，每个类对应一个不同的<span class="math inline">\(ERP\)</span>，并且通常添加一个非<span class="math inline">\(ERP\)</span>类。例如，在基于<span class="math inline">\(P300\)</span>的<span class="math inline">\(BCI\)</span>中，一个类是包含<span class="math inline">\(P300\)</span>的目标类，另一个是非目标类(Z=2)。现在让我们来构建超级实验</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210406095159507.png"></p>
<p>其中，<span class="math inline">\(\hat{X}_{}(1)...\hat{X}_{}(Z)\)</span>是在训练数据、用户的先前会话或甚至在每个类的其他用户的数据库(迁移学习)上获得的总平均<span class="math inline">\(ERP\)</span>；我们将这些超平均<span class="math inline">\(ERP\)</span>称为时间原型。我们为每个类指定一个原型。请注意，我们在括号中引入了索引(Z)，以突出显示与实验<span class="math inline">\(X_z\)</span>的第Z个训练的不同之处。现在，对于训练试验<span class="math inline">\(X_z\)</span>，超级试验的协方差矩阵具有以下块结构：</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210406101436853.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210406101447299.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210406101459427.png"></p>
<p>(7)中的<span class="math inline">\(N*N\)</span>对角块对于分类都没有用处，因为它们基于固定的原型，不会在一次又一次的试验中改变</p>
<p><span class="math inline">\(X_zX_z^T\)</span>该矩阵包含试验的空间信息，如我们所说，它对分类没有什么用处。</p>
<p>(6)中的试验和Z原型之间的交叉协方差，即这些块包含时间协方差。请注意，现在调整试验样本确实会扰乱这些协方差。<code>这些块包含用于分类的相关信息</code>，因为只有在试验类别与原型类别重合的块中，交叉协方差才会很大。根据(6)在训练数据上构造的“超”协方差矩阵<span class="math inline">\(C_z\)</span>的平均值，我们用<span class="math inline">\(M_1 ...M_z\)</span>表示，具有与<span class="math inline">\(C_z\)</span>相同的结构。然后，对于未标记的试验<span class="math inline">\(X\)</span>，我们根据(5)构造超级试验，并且根据(6)构造相应的协方差矩阵<span class="math inline">\(C\)</span>，其中在两个试验中X替换<span class="math inline">\(X_z\)</span>。然后，像以前一样使用<span class="math inline">\(MDM\)</span>(3)进行分类。唯一需要的<code>预处理</code>是过滤包含<span class="math inline">\(ERP\)</span>的频带通区中的数据，通常为<span class="math inline">\(1-16 Hz\)</span>。通带区域的准确选择并不是<span class="math inline">\(ERP\)</span>分类的关键。我们实验室的广泛测试表明，<code>该方法是可靠和健壮的，比最新的跨被试和跨会话的方法具有更好的通用性，并且易于快速适应。</code></p>
<p>值得一提的是，我们通常只处理<span class="math inline">\(ERP\)</span>的存在和不存在，就像基于<span class="math inline">\(P300\)</span>的BCI的情况一样，其中只有两类，目标类(<span class="math inline">\(P300\)</span>存在)和非目标类(<span class="math inline">\(P300\)</span>非存在)。在这种情况下，可以使用由下式给出的SuperTrial(5)的简化版本</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210406104149833.png"></p>
<p>其中<span class="math inline">\({\over{X}}_{(+)}^{T}\)</span>是P300(目标类)的时间原型，其中“+”表示目标类，“-”表示非目标类。对于训练试验<span class="math inline">\(X_z\)</span>，超级试验的协方差矩阵现在具有更简单的块结构：</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210406104837860.png"></p>
<p>同理 <span class="math inline">\(X_zX_z^T\)</span> 和 <span class="math inline">\({\over{X}}_{(+)}^{}{\over{X}}_{(+)}^{T}\)</span> 对分类无用。</p>
<p>如果试验与目标有关，原型和试验<span class="math inline">\({\hat{X}}_{(+)}^{} X_z^T\)</span>之间的时间协方差将很大，如果不与目标有关，则时间协方差较小，因此(10)足以有效地对目标试验和非目标试验进行分类。</p>
<p>最后，请注意，在基于<span class="math inline">\(P300\)</span>的<span class="math inline">\(BCI\)</span>中，我们在几次<span class="math inline">\(P300\)</span>试验之后进行分类，也就是说，在所有元素重复几次闪烁之后,分类要么基于重复的累积距离和，要么基于通过重复计算的平均试验获得的单个距离，这两种方法是等价的。</p>
<h2 id="稳态诱发电位的分类">3.6 稳态诱发电位的分类</h2>
<p>同样的<span class="math inline">\(MDM\)</span>方法也可以用于<span class="math inline">\(SSEP\)</span>数据分类。这里我们以稳态视觉诱发电位(<span class="math inline">\(SSVEP\)</span>)为例。这里的Z类代表F个不同的闪烁频率，如果需要，还可以添加一个无闪烁类。在这种情况下，相关的信息是在视觉皮层中产生振荡的频率的多样性，而不同频率的空间模式可能是相同的。为了更好地利用频率分集，我们构造了超级实验。</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210406112949621.png"></p>
<p>其中，<span class="math inline">\(X_(f)^T\)</span>是在带通区中针对闪烁频率 f<span class="math inline">\(\in\)</span> {1，…F}滤波的试验。更简单地说，人们可以使用傅里叶共谱(Bloomfield，2000)来获得准确的闪烁频率。超试(11)的协方差矩阵具有如下块结构：</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210406113726132.png"></p>
<p>N×N对角线块保存F个频率的协方差矩阵。当将未标记的试验与不同类别的平均值进行比较时，只有以与试验的频率相对应的频率为索引的块的平均值才会具有较大的值。因此，<code>对角块将对分类有用</code>。另一方面，非对角线块保留了频率之间的交叉协方差，因此意义不是很大。我们可以将它们归零，因为生成的矩阵</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210406114606970.png"></p>
<p>仍然是对称正定的。给定训练数据，我们估计类均值<span class="math inline">\(M_1,...M_z\)</span>。对于未标记的轨迹<span class="math inline">\(X\)</span>，我们使用(11)计算超级轨迹，其中<span class="math inline">\(X\)</span>替换<span class="math inline">\(X_z\)</span>，然后使用(13)计算协方差 矩阵<span class="math inline">\(C\)</span>。最后，我们再次使用算法(3)来分配无标签试验。所需的<code>唯一预处理</code>是对对应于<span class="math inline">\(SSVEP\)</span>闪烁频率的频率中的数据进行滤波，或者等效地估计<span class="math inline">\(F\)</span>个闪烁频率处的傅立叶共谱。请注意，如果<span class="math inline">\(SSVEP\)</span>的相位是已知的，这要归功于精确的数据标记，就像Jia等人所做的那样。(2011)，或者使用编码调制(Bin等人，2011)，人们可以利用频率和时间信息，构建一个超级试验，混合这里用于<span class="math inline">\(ERP\)</span>(5)和<span class="math inline">\(SSVEP\)</span>(11)的策略。</p>
<h2 id="多用户设置中的分类">3.7 多用户设置中的分类</h2>
<p>多用户环境中的分类最后，让我们看看所提出的框架如何容易地扩展到多用户的情况。在多用户<span class="math inline">\(BCI\)</span>中，多个用户同时使用同一界面进行交互(Bonnet、Lotte和Lécuyer；袁等人，2013年；Schultze-Kraft等人，2013年)。这种设置的有趣之处在于，在理论上，如果有足够的受试者数量，我们可以在单次试验中获得100%准确率的<span class="math inline">\(BCI\)</span>；我们可以在单个试验的受试者之间做同样的事情，而不是对所有试验的数据或分类分数进行平均。我们实际上可以走得更远，不仅可以利用众多的试验，还可以利用它们在受试者之间预期的同步性。让我们以基于<span class="math inline">\(P300\)</span>的<span class="math inline">\(BCI\)</span>为例。其他模式的发展与此类似。正如我们已经看到的，对于使用基于<span class="math inline">\(P300\)</span>的脑-机接口的单个受试者，超级试验有形式(9)。对于多用户(<span class="math inline">\(MU\)</span>)情况，z <span class="math inline">\(\in\)</span> {+，-}(其中+是目标类，-是非目标类)的试验由下式给出</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210406144824536.png"></p>
<p>其中M是受试者的数量，N是EEG传感器的数量。请注意，对于(9)中的单用户情况，时间原型仍然只是一个，因为它同样适用于所有用户。示例情况M=2的(14)的协方差矩阵具有形式</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210406144904066.png"></p>
<p>块<span class="math inline">\(\hat{X}_{(+)}\hat{X}_{(+)}^T\in R^{N \times N}\)</span> 是时间原型的协方差矩阵。这在不同的试验中不会改变，没有分类的价值。</p>
<p>非对角线块<span class="math inline">\(X_{1z}\hat{X}_{(+)}^T\)</span>和<span class="math inline">\(X_{2z}\hat{X}_{(+)}^T\)</span>(或它们的转置)保持了受试者的试验和原型之间的协方差，并与(6)中的分类相关；唯一的区别是，不是只有一个这样的协方差，现在我们<code>有两个协方差，相应地增加了分类能力</code>。</p>
<p>此外，现在考虑非对角线区块<span class="math inline">\(X_{2z}X_{(1z)}^T\)</span>。(或它的转置<span class="math inline">\(X_{1z}X_{(2z)}^T\)</span>)保持了两个受试者试验之间的协方差；由于<span class="math inline">\(P300\)</span>反应是同步的，所以这个协方差只对目标试验是大的，因此它持有一些对<code>分类有用</code>的信息。</p>
<p>请注意，基于(15)的分类并不等同于简单地将每个人的数据相加或组合。这就是我们将(15)的<span class="math inline">\(X_{1z}X_{(2z)}^T\)</span>和<span class="math inline">\(X_{2z}X_{(1z)}^T\)</span>的非对角线块归零所得到的结果。在这里，我们实际上还利用了<span class="math inline">\(ERP\)</span>响应的同步性和两个受试者的同步响应的协方差。这同样适用于两个以上的用户，其中所有成对的跨主题协方差都可以被利用。因此，目前的<span class="math inline">\(Riamannian\)</span>框架是一种真正的多用户方法，类似于联合盲源分离(Anderson等人，2012年；Congedo等人，2012年；Li等人，2009年；Vía等人，2011年)。</p>
<h2 id="评价">4. 评价</h2>
<h2 id="运动图像脑机接口数据">4.1 运动图像脑机接口数据</h2>
<p>我们已经将MDM方法应用于格拉茨理工大学知识发现研究所(脑机接口实验室)提供的<span class="math inline">\(BCI\)</span>竞赛IV(2008)的数据集2a。该数据集包括9名受试者，这些受试者参与了一个四类(Z=4)的基于两次运动想象的脑-机接口实验。这四门课分别是右手、左手、脚、舌头。脑电数据由集中在感觉运动区及其周围的22个电极采集。试验在8-30 Hz范围内进行带通滤波。每项试验中的两秒钟数据用于分析。我们既考虑了每个类别相对于其他类别的二进制分类-这是最先进的公共空间模式(<span class="math inline">\(CSP\)</span>)做得更好的地方(Lotte等人，2007年)-也考虑了真正的多类别情况，其中四个类别被一起处理。<span class="math inline">\(MDM\)</span>处理二进制和多类情况的方式都一样好。</p>
<p>我们展示了离线分析的结果，以将<span class="math inline">\(MDM\)</span>与最先进的竞争对手进行比较。对于<code>二值分类</code>，我们比较了<span class="math inline">\(MDM\)</span>和<span class="math inline">\(CSP+LDA\)</span>(线性判别分析)分类算法(Lotte and Guan，2011)2.保留了三对<span class="math inline">\(CSP\)</span>滤波器。这是使用此方法设置的唯一参数。对于<code>多类分类</code>，我们将<span class="math inline">\(MDM\)</span>与Grosse-Wentrup和Buss(2008)提出的<span class="math inline">\(BSS\)</span>方法进行了比较。他们的方法包括四类协方差矩阵的近似联合对角化(<span class="math inline">\(AJD\)</span>)、使用互信息准则选择八个最佳滤波器和稀疏<span class="math inline">\(Logistic\)</span>回归(LR)分类器。对于这种方法，还必须设置过滤器的数量。另一方面，<span class="math inline">\(MDM\)</span>方法是完全自动的。结果与跨会话性能有关，即算法在一个会话上进行训练，在另一个会话上进行测试。与同一会话中的交叉验证相比，这是一个更困难的试验台。</p>
<p>结果根据所有受试者的准确率(正确分类试验的百分比)，两次会话，一次对另一次，所有方法的结果如表1所示。机会水平为25%。我们统计比较了<span class="math inline">\(MDM\)</span>和最新竞争对手在正确率分类试验(准确率)方面的平均表现。对于多类别分类，与<span class="math inline">\(bss+LR\)</span>方法(配对t检验(17)=1.9p=0.074，双尾)相比，<span class="math inline">\(MDM\)</span>被证明在18个会话的平均值上略微领先。对于所有二分类的平均值，<span class="math inline">\(MDM\)</span>和<span class="math inline">\(CSP+LDA\)</span>方法之间没有差异。</p>
<p>在Gouy-Pailler等人中。(2010)在试验过程中，我们利用<span class="math inline">\(ERD/ERS\)</span>的非平稳性，开发了一种用于运动图像分类的盲源分离(<span class="math inline">\(BSS\)</span>)方法。Grosse-Wentrup和Buss(2008)提出的方法是我们研究的起点。Gouy-Pailler等人发展的非平稳性推广。(2010)得到的是估计试验内连续时间间隔中的几个协方差矩阵，并同时对角化所有类别的所有这些矩阵。结果表明，该方法优于Grosse-Wentrup和Buss(2008)的方法。Gouy-Pailler等人获得的平均值(SD)。(2010)的交叉精确度为63.8(12.28)。这一平均值与表1中报告的平均值直接相当，并不明显优于<span class="math inline">\(MDM\)</span>多分类。我们的结论是，<span class="math inline">\(MI\)</span>数据的<span class="math inline">\(MDM\)</span>的性能与文献中发现的最复杂的方法一样好，但它是完全自动的(不需要设置参数)，并且尊重下一代<span class="math inline">\(BCI\)</span>的要求。</p>
<p><code>MDM方法的性能对于表现良好的受试者或多或少是相等的，而对于表现较差的受试者则更好(参见图表下角的点的位置)。这种行为源于黎曼度量的健壮性(附录A)。</code></p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210406151240842.png"></p>
<h2 id="p300-bci数据">4.2 P300 BCI数据</h2>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210406153008264.png"></p>
<h2 id="离线结果经典训练-测试模式">4.3 离线结果：“经典”训练-测试模式</h2>
<p>配对t检验表明，<span class="math inline">\(MDM\)</span>法测得的平均<span class="math inline">\(AUC\)</span>值明显优于<span class="math inline">\(SWLDA\)</span>法(t(55)=3.377，p=0.001)，与XDAWN法测得的平均AUC值相当。</p>
<h2 id="离线结果跨主体初始化">4.4 离线结果：跨主体初始化</h2>
<p>结果表明，<span class="math inline">\(MDM\)</span>获得的平均<span class="math inline">\(AUC\)</span>值略高于<span class="math inline">\(SWLDA\)</span>(t(55)=1.676，p=0.099)和<span class="math inline">\(XDAWN\)</span>(t(55)=1.755，p=0.085)的平均<span class="math inline">\(AUC\)</span>值。</p>
<h2 id="离线结果跨会话初始化">4.5 离线结果：跨会话初始化</h2>
<p>!(4.基于黎曼几何的新一代脑机接口/image-20210406152700662.png)</p>
<h2 id="在线结果适应">4.6 在线结果：适应</h2>
<p>这些结果表明，我们的自适应系统在没有校准的情况下，性能相当于传统第一次会话上的有校准的系统。</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210406152625863.png"></p>
<h2 id="稳态视觉诱发电位数据">4.7 稳态视觉诱发电位数据</h2>
<p>我们使用8次交叉验证程序应用MDM，并使用1s、2s、3s、4s、5s和6s作为数据段持续时间。从1s到6s的平均分类正确率分别为：53.125%、75%、87.5%、93.75%、100%、100%。</p>
<h2 id="结论">5. 结论</h2>
<p>基于这些结果，我们得出结论：<span class="math inline">\(MDM\)</span>分类算法确实普遍具有<code>快速学习</code>能力，并且易于<code>转移学习</code>。此外，我们已经测试的自适应分类方案在第一次大脑入侵者(游戏）的几个级别之后已经被证明是有效的；然后，平均不到两次重复就足以摧毁目标(图7)，与最先进的技术相比，这是一个显著的结果。应该记住，这一结果在完全适应模式下是可能的，这要归功于大脑入侵者的监督操作模式。即使将这种自适应链直接转换到<span class="math inline">\(p300\)</span>拼写器上也是可能的，但仍有一些困难需要解决。</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210406152017995.png"></p>
<p>不管协方差矩阵是如何定义的，我们使用黎曼框架提出的分类算法对于我们所考虑的<code>所有三种BCI模态都是相同的</code>。此外，它仍然非常<code>简单</code>。请注意，在任何时候都没有要调优的参数；它都是<code>确定</code>性的，完全没有参数。这与复杂的机器学习方法(如支持向量机)形成对比，在支持向量机中，一个或多个参数必须例如通过交叉验证来学习(Lotte等人，2007年)。出于这个原因，我们声称我们所描绘的战略是真正普遍的。事实上<code>，MDM分类的简单性、快速学习的能力(几乎不需要训练数据)以及良好的跨学科和跨会话的泛化，使这一策略成为构建新一代BCI的非常好的候选者。</code></p>
<p>这样的BCI将使用远程海量数据库进行智能初始化，并将在使用的第一分钟快速而有效地适应用户。它们将是可靠的，坚固的，并将保持良好的性能。在分析和尝试了文献中可以找到的几种策略之后，我们认为黎曼框架是一个很好的候选者，因为它是唯一具有我们在引言中列出的所有必要性质(A)-h)的策略。</p>
<p>在Barachant等人中。(2012A)我们已经证明，使用黎曼框架映射切线空间中的协方差矩阵，并在切线空间中应用特征选择+<span class="math inline">\(LDA\)</span>，运动图像分类可以比表1中所示的结果有显著改善。在Barachant等人中。(2012B)使用嵌入黎曼核的支持向量机。这两种方法的性能优于最先进的方法，但它们需要调整参数。在Barachant等人中。(2010b)我们映射了切线空间中的协方差矩阵，应用了点的监督投影(带自动正则化的正则化<span class="math inline">\(LDA\)</span>)以增加类可分性，然后将数据重新映射到<span class="math inline">\(MDM\)</span>应用的黎曼流形中。这种方法不需要调优参数，但与简单的MDM相比，它仍然更加复杂。因此，在黎曼框架中使用更复杂的分类方法，可能会找到一种超越现有技术的方法，但只能以牺牲BCI的人体工程学要求为代价。类似的结果也适用于其他脑机接口模式。在我们看来，简单的<span class="math inline">\(MDM\)</span>方法是准确性、稳健性和人体工程学之间的一种很好的折衷，因此可以考虑作为一个新的标准的起点，以便建立一个适合大范围脑-机接口应用的新标准。进一步的研究将在基于黎曼几何的分类方法的复杂性和该方法在实际在线操作中的有效性/可用性之间找到最佳的权衡。选择成为<span class="math inline">\(BCI\)</span>数据基准的方法不需要像<span class="math inline">\(MDM\)</span>那样调整参数，并且应该保持快速学习和良好的转移学习能力。</p>
<p>请注意，我们在(5)和(9)中定义的时间原型可以以任何合理的方式定义，也就是说，它们可以由模型、期望、猜测等给出。这种构造嵌入空间和时间信息的协方差矩阵的方法非常灵活，因此我们相信它将在其他应用和其他研究领域中有用。</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/15/Paper/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/image-20210406153248039.png"></p>
<p>形式(13)的协方差矩阵的图像。对执行<span class="math inline">\(SSVEP\)</span>实验的对象计算协方差矩阵。数据采集在6个电极上。矩阵的每个对角块是数据的6x6协方差矩阵，该矩阵围绕用于刺激的三个闪烁频率(12、15和20 Hz)进行大幅带通滤波。图中表示的四个矩阵是“休息”类(无闪烁)和具有三个闪烁频率的试验的总平均值。请注意，对于每个类别，只有与实际闪烁频率相对应的块具有较高的值。对于非<span class="math inline">\(SSVEP\)</span>(<span class="math inline">\(REST\)</span>)数据，没有一个区块具有高值；这足以对属于四类中的任何一类的油井试验进行分类。</p>
<h2 id="notes">6. Notes</h2>
<h2 id="references">References</h2>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>黎曼几何</tag>
      </tags>
  </entry>
  <entry>
    <title>To train or not to train? A survey on training of feature extraction methods for SSVEP-based BCIs</title>
    <url>/2021/04/08/Paper/%E8%AE%AD%E7%BB%83%E8%BF%98%E6%98%AF%E4%B8%8D%E8%AE%AD%E7%BB%83%EF%BC%9F%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E8%AE%AD%E7%BB%83%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总结">0. 总结</h2>
<p>基于SSVEP的脑机接口特征提取方法以及训练或不训练的比较</p>
<h2 id="研究目标">1. 研究目标</h2>
<p>本文综述了各种最新的SSVEP特征提取方法</p>
<h2 id="研究背景及问题陈述">2. 研究背景及问题陈述</h2>
<p>脑机接口(BCI)允许通过大脑信号直接控制应用程序，消除了对外围神经系统的依赖，为运动能力受限的人(如老年人或身体残疾的人)提供了可访问性，并为健康的人提供了替代的访问方法。基于与外部刺激相关的诱发电位的BCI，例如稳态视觉诱发电位(SSVEP)，与依赖于感觉运动节奏的自愿调制的BCI相比，不需要密集的用户训练。</p>
<p>因此，基于SSVEP的脑机接口的大部分研究都集中在通过提出新的特征提取和分类方法来提高系统性能。</p>
<p>通过基于训练的特征提取算法从标注的数据中提取具有脑模式个性化特征的脑电特征，以优化用户的系统性能。讨论这些不同特征提取方法的训练要求的比较</p>
<p><strong>SSVEP是对以特定频率闪烁的重复视觉刺激做出反应而诱发的电位。</strong>这种神经反应由视觉刺激的基频和谐波的振荡活动组成，在大脑的<strong>枕区</strong>表现突出。基于SSVEP的BCI通过唯一地将闪烁的视觉刺激(每个具有不同频率)与特定命令相关联来利用该响应。这些刺激被呈现给用户，<strong>用户可以通过关注相应的刺激来选择命令</strong>。BCI<strong>识别</strong>EEG信号中的SSVEP响应，并生成特定命令以<strong>控制</strong>软件应用程序或外部设备。基于SSVEP的异步BCI还必须能够区分预期控制状态或无控制状态，以允许用户独立于任何提示以自定步调方式控制BCI，其中无控制状态，也称为非刺激、空闲或休息状态，是用户不打算执行任何BCI命令的时段。</p>
<p>存在各种不需要任何训练的SSVEP检测技术，例如功率谱密度分析(<code>PSDA</code>)、最小能量组合(<code>MEC</code>)和典型相关分析(<code>CCA</code>)。然而，鉴于潜在神经活动的复杂性，EEG信号是<strong>高度特定于受试者</strong>的，不仅在不同的个体之间，而且由于视觉疲劳、实验用户界面和环境的变化以及电极的移动等因素，在个体的同一会话中也有相当大的<strong>差异</strong>。为了减少自发背景EEG活动对SSVEP响应的干扰，结合专门表征用户SSVEP响应的用户训练数据显著提高检测性能。通过训练发现的特定于受试者的参数，如最佳电极位置和刺激频率，也被证明在系统性能方面是有益的。然而，特定学科系统中的这些优化技术可能会导致长时间和疲惫的培训课程，从而降低BCI的实用性，特别是对长期用户而言。为此，最近引入了利用转移学习方法的与对象无关的系统，其中由来自几个对象的SSVEP数据训练的方法被转移到新的对象，从而减少或消除了对每个用户长时间训练的需要。</p>
<p><strong>CCA列表</strong></p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/08/Paper/%E8%AE%AD%E7%BB%83%E8%BF%98%E6%98%AF%E4%B8%8D%E8%AE%AD%E7%BB%83%EF%BC%9F%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E8%AE%AD%E7%BB%83%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0/image-20210408095615027.png" alt="特征提取方法列表"><figcaption aria-hidden="true">特征提取方法列表</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/08/Paper/%E8%AE%AD%E7%BB%83%E8%BF%98%E6%98%AF%E4%B8%8D%E8%AE%AD%E7%BB%83%EF%BC%9F%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E8%AE%AD%E7%BB%83%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0/image-20210408100657180.png" alt="image-20210408100657180"><figcaption aria-hidden="true">image-20210408100657180</figcaption>
</figure>
<ul>
<li>无需培训的方法。不需要任何训练数据，以便新用户可以立即开始使用BCI</li>
<li>针对特定被试的训练方法。需要来自特定用户的训练数据来搜索最佳特定于被试的特征。</li>
<li>独立于被试的训练方法。需要来自不同被试的训练数据来定义适合一般用户的固定系统参数</li>
</ul>
<p>本文的主要贡献是：</p>
<p>(I)详细的总结，包括每个特征提取算法的简要数学描述，为文献中发现的基于SSVEP的BCI的最新技术的基本概念提供指南；</p>
<p>(Ii)将基于SSVEP的方法的训练要求分类为上述三类；</p>
<p>(Iii)对SSVEP特征提取方法的训练要求进行比较回顾，</p>
<h2 id="研究方法">3. 研究方法</h2>
<h2 id="ssvep特征提取模型">3.1 SSVEP特征提取模型</h2>
<p>本文讨论的所有特征提取方法在表2中被分类为<strong>免训练的</strong>、<strong>特定于被试</strong>的或<strong>独立于被试</strong>的。根据SSVEP特征是从单个还是多个EEG通道中提取出来，这些方法也被分为两类；其中，基于单通道的方法可以分别<strong>从每个通道提取一个特征</strong>，而基于多通道的方法需要<strong>多个通道来提取最有效的特征</strong>。此外，基于模型的方法与数据驱动的方法是不同的；其中基于模型的特征提取方法假定SSVEP信号的<strong>特定数学模型</strong>，而数据驱动的方法仅通过分析BCI系统的<strong>EEG数据</strong>来提取特征</p>
<p><strong>SSVEP模型</strong> <span class="math display">\[
y_n(t)=\sum_{h=1}^{H}a_{n,h}sin(2\pi hft +b_{n,h})+e_n(t)
\]</span> <span class="math inline">\(y_n(t)\)</span> 是第<span class="math inline">\(n\)</span>个电极与参考电极之间的电压差在时间<span class="math inline">\(t\)</span>上的信号</p>
<p>该线性模型由两个分量组成，分别对应于SSVEP<strong>响应信号</strong>和噪声信号。诱发的SSVEP响应信号由频率为刺激频率<span class="math inline">\(f\)</span>的倍数的正弦的总和组成，</p>
<p><span class="math inline">\(H\)</span>表示所考虑的谐波频率的数目，并且每个正弦由其振幅<span class="math inline">\(a_{n,h}\)</span>和相移<span class="math inline">\(b_{n,h}\)</span>来定义。</p>
<p>噪声信号<span class="math inline">\(e_{n}(t)\)</span>表示与SSVEP响应无关的所有信息，诸如环境噪声、例如来自肌肉和眼睛伪影的自然物理干扰，以及除刺激锁定的基波和谐波之外的任何其他大脑活动。</p>
<p>以采样频率<span class="math inline">\(F_s\)</span>采样的<span class="math inline">\(T\)</span>个样本的时间段的EEG信号的模型以<strong>矢量形式</strong>表示如下 <span class="math display">\[
\mathbf{y}_n = \mathbf{X}_f\mathbf{g}_n+\mathbf{e}_n
\]</span> <span class="math inline">\(\mathbf{y}_n=[y_n(1)...y_n(T)]^T\)</span> 是包含一个时间段中<strong>第n个</strong>电极的EEG信号的<span class="math inline">\(T\times 1\)</span> 向量，<span class="math inline">\(\mathbf{e}_n\)</span> 是相同形状的噪音。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/08/Paper/%E8%AE%AD%E7%BB%83%E8%BF%98%E6%98%AF%E4%B8%8D%E8%AE%AD%E7%BB%83%EF%BC%9F%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E8%AE%AD%E7%BB%83%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0/image-20210408104145550.png" alt="image-20210408104145550"><figcaption aria-hidden="true">image-20210408104145550</figcaption>
</figure>
<p><span class="math inline">\(\mathbf{X}_f\)</span>是<span class="math inline">\(T\times 2H\)</span> 的信息矩阵，<span class="math inline">\(\mathbf{g}_n\)</span> 是包含振幅<span class="math inline">\(a_{n,h}\)</span>和相位<span class="math inline">\(b_{n,h}\)</span> 的 <span class="math inline">\(2T \times 1\)</span> 矩阵</p>
<blockquote>
<p>此处矩阵维度应有问题？？？？[T,2H] @[2T ,1] ？？</p>
</blockquote>
<p>对于从<strong>多个电极N记录的一组EEG信号</strong>，模型定义为： <span class="math display">\[
\mathbf{Y}=\mathbf{X}_f\mathbf{G}+\mathbf{E}
\]</span> <span class="math inline">\(\mathbf{G}\)</span> 是包含振幅和相位 <span class="math inline">\(2T \times N\)</span> 矩阵,<span class="math inline">\(\mathbf{Y}=[y_1...y_N]^T\)</span> 是包含一个时间段中n个电极的EEG信号的<span class="math inline">\(T\times N\)</span> 矩阵，<span class="math inline">\(\mathbf{e}_n\)</span> 是相同形状的噪音。</p>
<h2 id="免训练方法">3.2 免训练方法</h2>
<p>不利用任何训练数据来提取SSVEP特征的方法</p>
<p>当使用基于SSVEP的脑-机接口系统时，预测用户关注的目标的预测频率<span class="math inline">\(f^*\)</span>满足如下特征提取函数</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/08/Paper/%E8%AE%AD%E7%BB%83%E8%BF%98%E6%98%AF%E4%B8%8D%E8%AE%AD%E7%BB%83%EF%BC%9F%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E8%AE%AD%E7%BB%83%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0/image-20210408110159149.png" alt="image-20210408110159149"><figcaption aria-hidden="true">image-20210408110159149</figcaption>
</figure>
<p><span class="math inline">\(f_i\)</span>表示刺激i的频率，F表示刺激数量</p>
<h3 id="基于单通道的方法">3.2.1 基于单通道的方法</h3>
<p>从一组或一对电极获得的单个EEG通道提取SSVEP信息。例如：<strong>单极组合</strong>，其中测量来自单个电极的电压；<strong>双极组合</strong>，其中测量两个紧密放置的电极之间的电压差；以及<strong>平均组合</strong>，其中测量多个电极信号的平均值。</p>
<h4 id="功率谱密度分析psda">1.功率谱密度分析(PSDA)</h4>
<p>基于脑电信号频谱分析的PSDA是SSVEP检测中应用<strong>最广泛</strong>的特征提取方法之一。这种基于模型的技术使用傅立叶变换将EEG信号从<strong>时域变换到频域</strong>，并从得到的频谱内容中提取特定的SSVEP特征。<strong>功率谱密度表示不同频率分量的总功率分布</strong>。在与刺激的基频及其谐波相对应的频率分量处，预计会有较大的功率振幅，代表SSVEP响应。</p>
<p>基于傅立叶变换的方法，如离散傅立叶变换(<code>DFT</code>)、快速傅立叶变换(<code>FFT</code>)和小波变换(<code>WT</code>)已被用于估计感兴趣频率处的功率值以进行SSVEP检测。可以从PSD估计信噪比(SNR)，以进一步增强SSVEP活动的功率，同时降低背景EEG噪声分量，从而允许更清楚地识别SSVEP响应。</p>
<p>有各种方法用于在不需要训练数据的情况下估计噪声功率，例如，估计非目标刺激时的功率，或者拟合自回归(AR)模型以在SSVEP频率中内插噪声功率。根据闪烁刺激对应的基频和谐波的PSD或SNR值构造特征向量。经常使用谐波和判决(HSD)方法，其中计算每个刺激的谐波功率值之和并用于构造SSVEP特征向量。</p>
<h4 id="希尔伯特-黄变换hht">2.希尔伯特-黄变换(HHT)</h4>
<p>HHT包括<strong>经验模式分解</strong>(EMD)和<strong>希尔伯特变换</strong>(HT)的应用，<strong>用于从非线性和非静态脑电信号中提取SSVEP特征</strong>。</p>
<p>EMD试图通过迭代地进行移位过程来将EEG信号分解成有限数量的<strong>固有模式函数</strong>(IMF)。包含SSVEP响应的EEG信号y被分解成不同的IMF。每个IMF是数据驱动函数，其表示具有随时间变化的振幅和频率的振荡函数可以表示非平稳信号的局部特征。计算所有与SSVP相关的IMF中的瞬时频率分量，并且该瞬时频率分量可以用作识别目标闪烁刺激的特征。在HHT中，对每个IMF分量应用希尔伯特变换以获得希尔伯特谱[25]。每个频带的能量可以从该频谱中获得，并用作检测SSVEP响应的特征。</p>
<h3 id="多通道空间滤波方法">3.2.2 多通道空间滤波方法</h3>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/08/Paper/%E8%AE%AD%E7%BB%83%E8%BF%98%E6%98%AF%E4%B8%8D%E8%AE%AD%E7%BB%83%EF%BC%9F%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E8%AE%AD%E7%BB%83%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0/image-20210408111930995.png" alt="image-20210408111930995"><figcaption aria-hidden="true">image-20210408111930995</figcaption>
</figure>
<p>下面讨论几种从多通道脑电信号中提取SSVEP信息的空间滤波方法。图1说明了这些方法的SSVEP检测过程，它们都采用SSVEP模型。每种特征提取方法的目的都是为了找到最佳的特征值<span class="math inline">\(Ψ(Y，X_F)\)</span>，以优化目标刺激频率的预测精度。</p>
<h4 id="最小能量组合mec和最大对比度组合mcc">1.最小能量组合(MEC)和最大对比度组合(MCC)</h4>
<p>==未完==</p>
<p>这两种方法不需要训练数据来进行特征选择或噪声估计。都找到了一种组合多电极信号的最优空间滤波器来增强脑电信号中的SSVEP信息。具体地说，由s表示的信道数据矢量被定义为<span class="math inline">\(Y_n\)</span>的线性组合，如下所示： <span class="math display">\[
\mathbf{s}=\sum_{n=1}^Nw_n\mathbf{y}_n=\mathbf{Yw}
\]</span> 多个通道S表示为： <span class="math display">\[
\mathbf{S=YW},\mathbf{S}=[s_1,...s_C]
\]</span> C是通道数量，W是<span class="math inline">\(N\times C\)</span>的权重矩阵</p>
<p>一旦从脑电信号和参考信号的组合构造空间滤波的通道，就估计每个通道中的SSVEP信号功率，并将其用作SSVEP特征，如图1中的<span class="math inline">\(Ψ(Y，X_F)\)</span>所示。</p>
<p>权重矩阵W的选择取决于所使用的具体多通道检测方法，下面将对其进行描述</p>
<p><strong>MEC方法以在增强SSVEP信息的同时最小化干扰信号的方式组合多个信号</strong>。该方法基于识别高方差信号分量的主成分分析(PCA)。MEC假设刺激频率<span class="math inline">\(X_f\)</span>是目标刺激，并试图消除任何其他干扰信号以获得更强的SNR用于SSVEP检测。这是通过首先从所有采集的电极信号Y中移除由具有频率f的刺激产生的任何潜在SSVEP活动来实现的，具体而言是通过将它们投影到SSVEP模型矩阵XF的正交补码上：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/08/Paper/%E8%AE%AD%E7%BB%83%E8%BF%98%E6%98%AF%E4%B8%8D%E8%AE%AD%E7%BB%83%EF%BC%9F%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E8%AE%AD%E7%BB%83%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0/image-20210411124439551.png" alt="image-20210411124439551"><figcaption aria-hidden="true">image-20210411124439551</figcaption>
</figure>
<h4 id="典型相关分析cca">2.典型相关分析CCA</h4>
<p>CCA是一种多变量统计方法，用于发现两组数据之间的潜在相关性。</p>
<p>设<span class="math inline">\(Y\)</span>和<span class="math inline">\(X\)</span>是分别表示多通道EEG信号和SSVEP参考信号的两个多维变量。CCA找到它们的线性组合<span class="math inline">\(y=Y^TW_y\)</span>和<span class="math inline">\(x=X^TW_x\)</span>，使得两个正则变量<span class="math inline">\(y\)</span>和<span class="math inline">\(x\)</span>之间的相关性最大化。权重向量<span class="math inline">\(W_y\)</span>和<span class="math inline">\(W_x\)</span>通过求解以下优化问题来找到：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/08/Paper/%E8%AE%AD%E7%BB%83%E8%BF%98%E6%98%AF%E4%B8%8D%E8%AE%AD%E7%BB%83%EF%BC%9F%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E8%AE%AD%E7%BB%83%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0/image-20210411124946620.png" alt="image-20210411124946620"><figcaption aria-hidden="true">image-20210411124946620</figcaption>
</figure>
<h4 id="多变量同步指数msi">3.多变量同步指数(MSI)</h4>
<p>多通道EEG信号与由刺激频率定义的一组参考信号之间的同步估计被用作用于检测目标频率的指标。所使用的同步指标，称为<code>S-估计器</code>，是基于多变量信号的相关矩阵的归一化特征值的熵的非线性同步度量。该方法要求目标刺激的参考信号与混合脑电记录同步。最大的同步索引表示具有最高相关性的两组信号。然后，选择产生该相关性的参考信号的刺激频率作为目标刺激。</p>
<p>首先将EEG信号<span class="math inline">\(Y\)</span>和参考信号<span class="math inline">\(X_f\)</span>的矩阵归一化为具有零均值和单位方差，并且相关矩阵估计如下</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/08/Paper/%E8%AE%AD%E7%BB%83%E8%BF%98%E6%98%AF%E4%B8%8D%E8%AE%AD%E7%BB%83%EF%BC%9F%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E8%AE%AD%E7%BB%83%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0/image-20210411131845938.png"></p>
<p>其中<span class="math inline">\(C_{YY}=\frac{1}{T}YY^T\)</span>,<span class="math inline">\(C_{X_fX_f}=\frac{1}{T}X_fX_f^T\)</span>,<span class="math inline">\(C_{YX_f}=C_{X_fY}=\frac{1}{T}YX_f^T\)</span>.</p>
<p>为了减小自相关对同步度量的影响，应用了以下线性变换</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/08/Paper/%E8%AE%AD%E7%BB%83%E8%BF%98%E6%98%AF%E4%B8%8D%E8%AE%AD%E7%BB%83%EF%BC%9F%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E8%AE%AD%E7%BB%83%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0/image-20210412111947874.png"></p>
<p>抵消自相关后，变换后的相关矩阵由下式给出：</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/08/Paper/%E8%AE%AD%E7%BB%83%E8%BF%98%E6%98%AF%E4%B8%8D%E8%AE%AD%E7%BB%83%EF%BC%9F%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E8%AE%AD%E7%BB%83%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0/image-20210412112037070.png"></p>
<p>设<span class="math inline">\(\lambda_1,\lambda_2,...\lambda_P\)</span> 为矩阵<span class="math inline">\(C_{}^{&#39;}\)</span> 的特征值</p>
<p>计算两组信号之间的同步指数SI为：</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/08/Paper/%E8%AE%AD%E7%BB%83%E8%BF%98%E6%98%AF%E4%B8%8D%E8%AE%AD%E7%BB%83%EF%BC%9F%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E8%AE%AD%E7%BB%83%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0/image-20210412112537599.png"></p>
<p><span class="math inline">\(\lambda_i&#39;\)</span>的<span class="math inline">\(C&#39;\)</span>第i个归一化特征值。对于两组不相关的信号，<span class="math inline">\(C_{YX_f}=C_{X_fY}=0\)</span>，当两组信号完全相关时，SI=1，因为<span class="math inline">\(C’\)</span>在主对角线上会有1，在其他地方会有0。对于后一种情况，只有一个归一化特征值是1，而其他特征值是零。估计来自多个脑电信号Y的信号与每个参考信号<span class="math inline">\(X_f\)</span>之间的同步指数，并将其用于计算图1中的SSVEP特征<span class="math inline">\(Ψ(Y，X_f)\)</span>。</p>
<h4 id="似然比检验lrt">4.似然比检验(LRT)</h4>
<p>LRT方法找出两组多元变量的独立性。</p>
<h4 id="双偏最小二乘法d-pls">5.双偏最小二乘法(D-PLS)</h4>
<p>偏最小二乘(PLS)是一种用于SSVEP检测的多元线性回归方法，它直接计算多维因变量对多维自变量的回归。该模型估计了两个信号之间复杂的因果关系，并在非正态分布和小样本条件下提取相关性最大的潜在变量。</p>
<h2 id="关于免训法的探讨">3.3 关于免训法的探讨</h2>
<h3 id="基于单通道的免培训方法">1.基于单通道的免培训方法</h3>
<p>基于PSDA的最简单的检测方法操作在单个EEG通道的组合上，这些通道必须事先选择和配置。在几项研究中发现，由于消除了常见的滋扰信号，双极方法在两个脑电图电极上取得了不同的效果。这是可行的，因为设计BCI只需要两个电极，但是不同用户的最佳配对可能不同。此外，在实践中，同一用户的电极的确切位置在不同的会话中也可能略有不同。因此，所有用户的固定双极组合可能会显著影响PSDA的性能，因此可能缺乏稳健性。这些单通道方法对噪声敏感，可能需要更多的数据用于SSVEP识别，并且计算时间较长，特别是在HHT的情况下，这可能限制基于SSVEP的BCI的实时性能。</p>
<h3 id="多通道免培训方式">2.多通道免培训方式</h3>
<p>多通道检测方法受益于多个信号的优化组合，从而克服了这些限制。对于这些方法，不需要信道选择过程，并且实现了对噪声的更强的鲁棒性</p>
<h3 id="两种免训方法的比较">3.两种免训方法的比较</h3>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/08/Paper/%E8%AE%AD%E7%BB%83%E8%BF%98%E6%98%AF%E4%B8%8D%E8%AE%AD%E7%BB%83%EF%BC%9F%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E8%AE%AD%E7%BB%83%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0/image-20210412115210598.png"></p>
<h2 id="针对特定被试的培训方法">3.4 针对特定被试的培训方法</h2>
<p>介绍需要特定用户培训数据的SSVEP检测最常用的技术</p>
<h3 id="平均最大对比度组合amcc">1.平均最大对比度组合(AMCC)</h3>
<h3 id="cca扩展">2.CCA扩展</h3>
<h4 id="相位约束典型相关分析p-cca">2.1 相位约束典型相关分析(p-CCA)</h4>
<h4 id="基于个体模板的典型相关分析it-cca">2.2 基于个体模板的典型相关分析(IT-CCA)</h4>
<h4 id="组合典型相关分析combinedcca">2.3 组合典型相关分析(CombinedCCA)</h4>
<h4 id="多向典型相关分析mwaycca和l1正则化多向典型相关分析l1-mcca">2.4 多向典型相关分析(MwayCCA)和L1正则化多向典型相关分析(L1-MCCA)</h4>
<h4 id="多集典型相关分析msetcca">2.5 多集典型相关分析(MsetCCA)</h4>
<h4 id="多层相关最大化mcm">2.6 多层相关最大化(MCM)</h4>
<h3 id="公共特征分析cfa">3.公共特征分析(CFA)</h3>
<h3 id="多元线性回归mlr">4.多元线性回归(MLR)</h3>
<h3 id="公共空间模式分析acsp">5.公共空间模式分析(ACSP)</h3>
<h3 id="task相关成分分析trca">6.TASK相关成分分析(TRCA)</h3>
<h3 id="关于特定用户训练方法的探讨">7.关于特定用户训练方法的探讨</h3>
<h4 id="特定用户的训练时间">7.1 特定用户的训练时间</h4>
<h4 id="针对分类的特定用户训练">7.2 针对分类的特定用户训练</h4>
<h4 id="特征提取的特定用户训练cca扩展">7.3 特征提取的特定用户训练：CCA扩展</h4>
<h4 id="特征提取的特定用户训练其他方法">7.4 特征提取的特定用户训练：其他方法</h4>
<h4 id="特定用户训练方法的比较">7.5 特定用户训练方法的比较</h4>
<h2 id="独立于用户的培训方法">3.5 独立于用户的培训方法</h2>
<h3 id="最小绝对收缩和选择操作lasso">5.1 最小绝对收缩和选择操作(LASSO)</h3>
<h3 id="滤波器组典型相关分析fbcca">5.2 滤波器组典型相关分析(FBCCA)</h3>
<h3 id="基于转移模板的典型相关分析tt-cca和基于转移的组合典型相关分析combated-tcca">5.3 基于转移模板的典型相关分析(TT-CCA)和基于转移的组合典型相关分析(Combated-TCCA)</h3>
<h3 id="关于独立用户训练方法的探讨">5.4 关于独立用户训练方法的探讨</h3>
<h4 id="模型参数由独立于对象的训练数据定义">1 模型参数由独立于对象的训练数据定义。</h4>
<h4 id="迁移学习方法">2 迁移学习方法</h4>
<h4 id="独立用户训练方法的比较">3 独立用户训练方法的比较</h4>
<h2 id="评估实验">4. 评估，实验</h2>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/08/Paper/%E8%AE%AD%E7%BB%83%E8%BF%98%E6%98%AF%E4%B8%8D%E8%AE%AD%E7%BB%83%EF%BC%9F%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E8%AE%AD%E7%BB%83%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0/image-20210412121019420.png"></p>
<h2 id="结论">5. 结论</h2>
<p>本文为基于SSVEP的脑机接口中使用的特征提取算法的基本概念和训练要求提供了参考。很明显，就BCI的实用性而言，不需要个人用户进行任何培训的方法是最好的选择。然而，就BCI性能而言，包含训练数据的特征提取方法的性能优于无训练的方法。</p>
<h2 id="笔记">6. 笔记</h2>
<h2 id="参考文献">参考文献</h2>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>SSVEP</tag>
        <tag>特征提取</tag>
      </tags>
  </entry>
  <entry>
    <title>Day1C++</title>
    <url>/2021/03/26/C++/Day1C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>C++基础知识</p>
<span id="more"></span>
<h2 id="c初识">1 C++初识</h2>
<h3 id="第一个c程序">1.1 第一个C++程序</h3>
<p>编写一个C++程序总共分为4个步骤</p>
<ul>
<li>创建项目</li>
<li>创建文件</li>
<li>编写代码</li>
<li>运行程序</li>
</ul>
<h4 id="创建项目">1.1.1 创建项目</h4>
<pre><code>Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</code></pre>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1C/1541383178746.png" alt="1541383178746"><figcaption aria-hidden="true">1541383178746</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1C/1541384366413.png" alt="1541384366413"><figcaption aria-hidden="true">1541384366413</figcaption>
</figure>
<h4 id="创建文件">1.1.2 创建文件</h4>
<p>右键源文件，选择添加-&gt;新建项</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1C/1541383817248.png" alt="1541383817248"><figcaption aria-hidden="true">1541383817248</figcaption>
</figure>
<p>给C++文件起个名称，然后点击添加即可。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1C/1541384140042.png" alt="1541384140042"><figcaption aria-hidden="true">1541384140042</figcaption>
</figure>
<h4 id="编写代码">1.1.3 编写代码</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Hello world&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="运行程序">1.1.4 运行程序</h4>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1C/1541384818688.png" alt="1541384818688"><figcaption aria-hidden="true">1541384818688</figcaption>
</figure>
<h3 id="注释">1.2 注释</h3>
<p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p>
<p><strong>两种格式</strong></p>
<ol type="1">
<li><strong>单行注释</strong>：<code>// 描述信息</code>
<ul>
<li>通常放在一行代码的上方，或者一条语句的末尾，对该行代码说明</li>
</ul></li>
<li><strong>多行注释</strong>： <code>/* 描述信息 */</code>
<ul>
<li>通常放在一段代码的上方，对该段代码做整体说明</li>
</ul></li>
</ol>
<blockquote>
<p>提示：编译器在编译代码时，会忽略注释的内容</p>
</blockquote>
<h3 id="变量">1.3 变量</h3>
<p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p>
<p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//变量的定义</span><br>	<span class="hljs-comment">//语法：数据类型  变量名 = 初始值</span><br><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p>
</blockquote>
<h3 id="常量">1.4 常量</h3>
<p><strong>作用</strong>：用于记录程序中不可更改的数据</p>
<p>C++定义常量两种方式</p>
<ol type="1">
<li><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code>
<ul>
<li>通常在文件上方定义，表示一个常量</li>
</ul></li>
<li><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code>
<ul>
<li>通常在变量定义前加关键字const，修饰该变量为常量，不可修改</li>
</ul></li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//1、宏常量</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> day 7</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;一周里总共有 &quot;</span> &lt;&lt; day &lt;&lt; <span class="hljs-string">&quot; 天&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-comment">//day = 8;  //报错，宏常量不可以修改</span><br><br>	<span class="hljs-comment">//2、const修饰变量</span><br>	<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> month = <span class="hljs-number">12</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;一年里总共有 &quot;</span> &lt;&lt; month &lt;&lt; <span class="hljs-string">&quot; 个月份&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-comment">//month = 24; //报错，常量是不可以修改的</span><br>	<br>	<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="关键字">1.5 关键字</h3>
<p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p>
<ul>
<li><strong>在定义变量或者常量时候，不要用关键字</strong></li>
</ul>
<p>C++关键字如下：</p>
<table>
<thead>
<tr class="header">
<th>asm</th>
<th>do</th>
<th>if</th>
<th>return</th>
<th>typedef</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>auto</td>
<td>double</td>
<td>inline</td>
<td>short</td>
<td>typeid</td>
</tr>
<tr class="even">
<td>bool</td>
<td>dynamic_cast</td>
<td>int</td>
<td>signed</td>
<td>typename</td>
</tr>
<tr class="odd">
<td>break</td>
<td>else</td>
<td>long</td>
<td>sizeof</td>
<td>union</td>
</tr>
<tr class="even">
<td>case</td>
<td>enum</td>
<td>mutable</td>
<td>static</td>
<td>unsigned</td>
</tr>
<tr class="odd">
<td>catch</td>
<td>explicit</td>
<td>namespace</td>
<td>static_cast</td>
<td>using</td>
</tr>
<tr class="even">
<td>char</td>
<td>export</td>
<td>new</td>
<td>struct</td>
<td>virtual</td>
</tr>
<tr class="odd">
<td>class</td>
<td>extern</td>
<td>operator</td>
<td>switch</td>
<td>void</td>
</tr>
<tr class="even">
<td>const</td>
<td>false</td>
<td>private</td>
<td>template</td>
<td>volatile</td>
</tr>
<tr class="odd">
<td>const_cast</td>
<td>float</td>
<td>protected</td>
<td>this</td>
<td>wchar_t</td>
</tr>
<tr class="even">
<td>continue</td>
<td>for</td>
<td>public</td>
<td>throw</td>
<td>while</td>
</tr>
<tr class="odd">
<td>default</td>
<td>friend</td>
<td>register</td>
<td>true</td>
<td></td>
</tr>
<tr class="even">
<td>delete</td>
<td>goto</td>
<td>reinterpret_cast</td>
<td>try</td>
<td></td>
</tr>
</tbody>
</table>
<p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p>
<h3 id="标识符命名规则">1.6 标识符命名规则</h3>
<p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p>
<ul>
<li>标识符不能是关键字</li>
<li>标识符只能由字母、数字、下划线组成</li>
<li>第一个字符必须为字母或下划线</li>
<li>标识符中字母区分大小写</li>
</ul>
<blockquote>
<p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p>
</blockquote>
<h2 id="数据类型">2 数据类型</h2>
<p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p>
<h3 id="整型">2.1 整型</h3>
<p><strong>作用</strong>：整型变量表示的是<code>整数类型</code>的数据</p>
<p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p>
<table>
<thead>
<tr class="header">
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th>取值范围</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>short(短整型)</td>
<td>2字节</td>
<td>(-2^15 ~ 2^15-1)</td>
</tr>
<tr class="even">
<td>int(整型)</td>
<td>4字节</td>
<td>(-2^31 ~ 2^31-1)</td>
</tr>
<tr class="odd">
<td>long(长整形)</td>
<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>
<td>(-2^31 ~ 2^31-1)</td>
</tr>
<tr class="even">
<td>long long(长长整形)</td>
<td>8字节</td>
<td>(-2^63 ~ 2^63-1)</td>
</tr>
</tbody>
</table>
<h3 id="sizeof关键字">2.2 sizeof关键字</h3>
<p><strong>作用：</strong>利用sizeof关键字可以统计数据类型所占内存大小</p>
<p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;short 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">short</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;int 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">long</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;long long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p><strong>整型结论</strong>：<code>short &lt; int &lt;= long &lt;= long long</code></p>
</blockquote>
<h3 id="实型浮点型">2.3 实型（浮点型）</h3>
<p><strong>作用</strong>：用于表示<code>小数</code></p>
<p>浮点型变量分为两种：</p>
<ol type="1">
<li>单精度float</li>
<li>双精度double</li>
</ol>
<p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p>
<table>
<thead>
<tr class="header">
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th><strong>有效数字范围</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>float</td>
<td>4字节</td>
<td>7位有效数字</td>
</tr>
<tr class="even">
<td>double</td>
<td>8字节</td>
<td>15～16位有效数字</td>
</tr>
</tbody>
</table>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">float</span> f1 = <span class="hljs-number">3.14f</span>;<br>	<span class="hljs-keyword">double</span> d1 = <span class="hljs-number">3.14</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; f1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; d1&lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;float  sizeof = &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(f1) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;double sizeof = &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(d1) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//科学计数法</span><br>	<span class="hljs-keyword">float</span> f2 = <span class="hljs-number">3e2</span>; <span class="hljs-comment">// 3 * 10 ^ 2 </span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f2 = &quot;</span> &lt;&lt; f2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-keyword">float</span> f3 = <span class="hljs-number">3e-2</span>;  <span class="hljs-comment">// 3 * 0.1 ^ 2</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f3 = &quot;</span> &lt;&lt; f3 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="字符型">2.4 字符型</h3>
<p><strong>作用：</strong>字符型变量用于显示单个字符</p>
<p><strong>语法：</strong><code>char ch = 'a';</code></p>
<blockquote>
<p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p>
</blockquote>
<blockquote>
<p>注意2：单引号内只能有一个字符，不可以是字符串</p>
</blockquote>
<ul>
<li>C和C++中字符型变量只占用1个字节。</li>
<li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li>
</ul>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	<br>	<span class="hljs-keyword">char</span> ch = <span class="hljs-string">&#x27;a&#x27;</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//ch = &quot;abcde&quot;; //错误，不可以用双引号</span><br>	<span class="hljs-comment">//ch = &#x27;abcde&#x27;; //错误，单引号内只能引用一个字符</span><br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; (<span class="hljs-keyword">int</span>)ch &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">//查看字符a对应的ASCII码</span><br>	ch = <span class="hljs-number">97</span>; <span class="hljs-comment">//可以直接用ASCII给字符型变量赋值</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>ASCII码表格：</p>
<table>
<thead>
<tr class="header">
<th><strong>ASCII</strong>值</th>
<th><strong>控制字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>NUT</td>
<td>32</td>
<td>(space)</td>
<td>64</td>
<td>@</td>
<td>96</td>
<td>、</td>
</tr>
<tr class="even">
<td>1</td>
<td>SOH</td>
<td>33</td>
<td>!</td>
<td>65</td>
<td>A</td>
<td>97</td>
<td>a</td>
</tr>
<tr class="odd">
<td>2</td>
<td>STX</td>
<td>34</td>
<td>"</td>
<td>66</td>
<td>B</td>
<td>98</td>
<td>b</td>
</tr>
<tr class="even">
<td>3</td>
<td>ETX</td>
<td>35</td>
<td>#</td>
<td>67</td>
<td>C</td>
<td>99</td>
<td>c</td>
</tr>
<tr class="odd">
<td>4</td>
<td>EOT</td>
<td>36</td>
<td>$</td>
<td>68</td>
<td>D</td>
<td>100</td>
<td>d</td>
</tr>
<tr class="even">
<td>5</td>
<td>ENQ</td>
<td>37</td>
<td>%</td>
<td>69</td>
<td>E</td>
<td>101</td>
<td>e</td>
</tr>
<tr class="odd">
<td>6</td>
<td>ACK</td>
<td>38</td>
<td>&amp;</td>
<td>70</td>
<td>F</td>
<td>102</td>
<td>f</td>
</tr>
<tr class="even">
<td>7</td>
<td>BEL</td>
<td>39</td>
<td>,</td>
<td>71</td>
<td>G</td>
<td>103</td>
<td>g</td>
</tr>
<tr class="odd">
<td>8</td>
<td>BS</td>
<td>40</td>
<td>(</td>
<td>72</td>
<td>H</td>
<td>104</td>
<td>h</td>
</tr>
<tr class="even">
<td>9</td>
<td>HT</td>
<td>41</td>
<td>)</td>
<td>73</td>
<td>I</td>
<td>105</td>
<td>i</td>
</tr>
<tr class="odd">
<td>10</td>
<td>LF</td>
<td>42</td>
<td>*</td>
<td>74</td>
<td>J</td>
<td>106</td>
<td>j</td>
</tr>
<tr class="even">
<td>11</td>
<td>VT</td>
<td>43</td>
<td>+</td>
<td>75</td>
<td>K</td>
<td>107</td>
<td>k</td>
</tr>
<tr class="odd">
<td>12</td>
<td>FF</td>
<td>44</td>
<td>,</td>
<td>76</td>
<td>L</td>
<td>108</td>
<td>l</td>
</tr>
<tr class="even">
<td>13</td>
<td>CR</td>
<td>45</td>
<td>-</td>
<td>77</td>
<td>M</td>
<td>109</td>
<td>m</td>
</tr>
<tr class="odd">
<td>14</td>
<td>SO</td>
<td>46</td>
<td>.</td>
<td>78</td>
<td>N</td>
<td>110</td>
<td>n</td>
</tr>
<tr class="even">
<td>15</td>
<td>SI</td>
<td>47</td>
<td>/</td>
<td>79</td>
<td>O</td>
<td>111</td>
<td>o</td>
</tr>
<tr class="odd">
<td>16</td>
<td>DLE</td>
<td>48</td>
<td>0</td>
<td>80</td>
<td>P</td>
<td>112</td>
<td>p</td>
</tr>
<tr class="even">
<td>17</td>
<td>DCI</td>
<td>49</td>
<td>1</td>
<td>81</td>
<td>Q</td>
<td>113</td>
<td>q</td>
</tr>
<tr class="odd">
<td>18</td>
<td>DC2</td>
<td>50</td>
<td>2</td>
<td>82</td>
<td>R</td>
<td>114</td>
<td>r</td>
</tr>
<tr class="even">
<td>19</td>
<td>DC3</td>
<td>51</td>
<td>3</td>
<td>83</td>
<td>S</td>
<td>115</td>
<td>s</td>
</tr>
<tr class="odd">
<td>20</td>
<td>DC4</td>
<td>52</td>
<td>4</td>
<td>84</td>
<td>T</td>
<td>116</td>
<td>t</td>
</tr>
<tr class="even">
<td>21</td>
<td>NAK</td>
<td>53</td>
<td>5</td>
<td>85</td>
<td>U</td>
<td>117</td>
<td>u</td>
</tr>
<tr class="odd">
<td>22</td>
<td>SYN</td>
<td>54</td>
<td>6</td>
<td>86</td>
<td>V</td>
<td>118</td>
<td>v</td>
</tr>
<tr class="even">
<td>23</td>
<td>TB</td>
<td>55</td>
<td>7</td>
<td>87</td>
<td>W</td>
<td>119</td>
<td>w</td>
</tr>
<tr class="odd">
<td>24</td>
<td>CAN</td>
<td>56</td>
<td>8</td>
<td>88</td>
<td>X</td>
<td>120</td>
<td>x</td>
</tr>
<tr class="even">
<td>25</td>
<td>EM</td>
<td>57</td>
<td>9</td>
<td>89</td>
<td>Y</td>
<td>121</td>
<td>y</td>
</tr>
<tr class="odd">
<td>26</td>
<td>SUB</td>
<td>58</td>
<td>:</td>
<td>90</td>
<td>Z</td>
<td>122</td>
<td>z</td>
</tr>
<tr class="even">
<td>27</td>
<td>ESC</td>
<td>59</td>
<td>;</td>
<td>91</td>
<td>[</td>
<td>123</td>
<td>{</td>
</tr>
<tr class="odd">
<td>28</td>
<td>FS</td>
<td>60</td>
<td>&lt;</td>
<td>92</td>
<td>/</td>
<td>124</td>
<td>|</td>
</tr>
<tr class="even">
<td>29</td>
<td>GS</td>
<td>61</td>
<td>=</td>
<td>93</td>
<td>]</td>
<td>125</td>
<td>}</td>
</tr>
<tr class="odd">
<td>30</td>
<td>RS</td>
<td>62</td>
<td>&gt;</td>
<td>94</td>
<td>^</td>
<td>126</td>
<td>`</td>
</tr>
<tr class="even">
<td>31</td>
<td>US</td>
<td>63</td>
<td>?</td>
<td>95</td>
<td>_</td>
<td>127</td>
<td>DEL</td>
</tr>
</tbody>
</table>
<p>ASCII 码大致由以下<strong>两部分组</strong>成：</p>
<ul>
<li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li>
<li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li>
</ul>
<h3 id="转义字符">2.5 转义字符</h3>
<p><strong>作用：</strong>用于表示一些不能显示出来的ASCII字符</p>
<p>现阶段我们常用的转义字符有：<code>\n  \\  \t</code></p>
<table>
<thead>
<tr class="header">
<th><strong>转义字符</strong></th>
<th><strong>含义</strong></th>
<th><strong>ASCII</strong>码值（十进制）</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td>警报</td>
<td>007</td>
</tr>
<tr class="even">
<td> 退格(BS) ，将当前位置移到前一列</td>
<td>008</td>
<td></td>
</tr>
<tr class="odd">
<td> 换页(FF)，将当前位置移到下页开头</td>
<td>012</td>
<td></td>
</tr>
<tr class="even">
<td>***</td>
<td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td>
<td><strong>010</strong></td>
</tr>
<tr class="odd">
<td> 回车(CR) ，将当前位置移到本行开头</td>
<td>013</td>
<td></td>
</tr>
<tr class="even">
<td>**</td>
<td><strong>水平制表(HT) （跳到下一个TAB位置）</strong></td>
<td><strong>009</strong></td>
</tr>
<tr class="odd">
<td> 垂直制表(VT)</td>
<td>011</td>
<td></td>
</tr>
<tr class="even">
<td><strong>\\</strong></td>
<td><strong>代表一个反斜线字符""</strong></td>
<td><strong>092</strong></td>
</tr>
<tr class="odd">
<td>'</td>
<td>代表一个单引号（撇号）字符</td>
<td>039</td>
</tr>
<tr class="even">
<td>"</td>
<td>代表一个双引号字符</td>
<td>034</td>
</tr>
<tr class="odd">
<td>?</td>
<td>代表一个问号</td>
<td>063</td>
</tr>
<tr class="even">
<td>\0</td>
<td>数字0</td>
<td>000</td>
</tr>
<tr class="odd">
<td></td>
<td>8进制转义字符，d范围0~7</td>
<td>3位8进制</td>
</tr>
<tr class="even">
<td></td>
<td>16进制转义字符，h范围0<sub>9，a</sub>f，A~F</td>
<td>3位16进制</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	<br>	<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\\&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\tHello&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="字符串型">2.6 字符串型</h3>
<p><strong>作用</strong>：用于表示一串字符</p>
<p><strong>两种风格</strong></p>
<ol type="1">
<li><p><strong>C风格字符串</strong>： <code>char 变量名[] = "字符串值"</code></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">char</span> str1[] = <span class="hljs-string">&quot;hello world&quot;</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; str1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>注意：C风格的字符串要用双引号括起来</p>
</blockquote>
<ol type="1">
<li><p><strong>C++风格字符串</strong>： <code>string  变量名 = "字符串值"</code></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>注意：C++风格字符串，需要加入头文件<code>#include\&lt;string&gt;</code></p>
</blockquote>
<h3 id="布尔类型-bool">2.7 布尔类型 bool</h3>
<p><strong>作用：</strong>布尔数据类型代表真或假的值</p>
<p>bool类型只有两个值：</p>
<ul>
<li>true --- 真（本质是1）</li>
<li>false --- 假（本质是0）</li>
</ul>
<p><strong>bool类型占1个字节大小</strong></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 1</span><br><br>	flag = <span class="hljs-literal">false</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 0</span><br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;size of bool = &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">bool</span>) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//1</span><br>	<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="数据的输入">2.8 数据的输入</h3>
<p><strong>作用：用于从键盘获取数据</strong></p>
<p><strong>关键字：</strong>cin</p>
<p><strong>语法：</strong> <code>cin &gt;&gt; 变量</code></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>	<span class="hljs-comment">//整型输入</span><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入整型变量：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cin</span> &gt;&gt; a;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//浮点型输入</span><br>	<span class="hljs-keyword">double</span> d = <span class="hljs-number">0</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入浮点型变量：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cin</span> &gt;&gt; d;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; d &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//字符型输入</span><br>	<span class="hljs-keyword">char</span> ch = <span class="hljs-number">0</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入字符型变量：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cin</span> &gt;&gt; ch;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//字符串型输入</span><br>	<span class="hljs-built_in">string</span> str;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入字符串型变量：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cin</span> &gt;&gt; str;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//布尔类型输入</span><br>	<span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入布尔型变量：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cin</span> &gt;&gt; flag;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br>	<span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="运算符">3 运算符</h2>
<p><strong>作用：</strong>用于执行代码的运算</p>
<p>本章我们主要讲解以下几类运算符：</p>
<table>
<thead>
<tr class="header">
<th><strong>运算符类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>算术运算符</td>
<td>用于处理四则运算</td>
</tr>
<tr class="even">
<td>赋值运算符</td>
<td>用于将表达式的值赋给变量</td>
</tr>
<tr class="odd">
<td>比较运算符</td>
<td>用于表达式的比较，并返回一个真值或假值</td>
</tr>
<tr class="even">
<td>逻辑运算符</td>
<td>用于根据表达式的值返回真值或假值</td>
</tr>
</tbody>
</table>
<h3 id="算术运算符">3.1 算术运算符</h3>
<p><strong>作用</strong>：用于处理四则运算</p>
<p>算术运算符包括以下符号：</p>
<table>
<thead>
<tr class="header">
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>+</td>
<td>正号</td>
<td>+3</td>
<td>3</td>
</tr>
<tr class="even">
<td>-</td>
<td>负号</td>
<td>-3</td>
<td>-3</td>
</tr>
<tr class="odd">
<td>+</td>
<td>加</td>
<td>10 + 5</td>
<td>15</td>
</tr>
<tr class="even">
<td>-</td>
<td>减</td>
<td>10 - 5</td>
<td>5</td>
</tr>
<tr class="odd">
<td>*</td>
<td>乘</td>
<td>10 * 5</td>
<td>50</td>
</tr>
<tr class="even">
<td>/</td>
<td>除</td>
<td>10 / 5</td>
<td>2</td>
</tr>
<tr class="odd">
<td>%</td>
<td>取模(取余)</td>
<td>10 % 3</td>
<td>1</td>
</tr>
<tr class="even">
<td>++</td>
<td>前置递增</td>
<td>a=2; b=++a;</td>
<td>a=3; b=3;</td>
</tr>
<tr class="odd">
<td>++</td>
<td>后置递增</td>
<td>a=2; b=a++;</td>
<td>a=3; b=2;</td>
</tr>
<tr class="even">
<td>--</td>
<td>前置递减</td>
<td>a=2; b=--a;</td>
<td>a=1; b=1;</td>
</tr>
<tr class="odd">
<td>--</td>
<td>后置递减</td>
<td>a=2; b=a--;</td>
<td>a=1; b=2;</td>
</tr>
</tbody>
</table>
<p><strong>示例1：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//加减乘除</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> a1 = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b1 = <span class="hljs-number">3</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; a1 + b1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; a1 - b1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; a1 * b1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; a1 / b1 &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">//两个整数相除结果依然是整数</span><br><br>	<span class="hljs-keyword">int</span> a2 = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b2 = <span class="hljs-number">20</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; a2 / b2 &lt;&lt; <span class="hljs-built_in">endl</span>; <br><br>	<span class="hljs-keyword">int</span> a3 = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b3 = <span class="hljs-number">0</span>;<br>	<span class="hljs-comment">//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0</span><br><br><br>	<span class="hljs-comment">//两个小数可以相除</span><br>	<span class="hljs-keyword">double</span> d1 = <span class="hljs-number">0.5</span>;<br>	<span class="hljs-keyword">double</span> d2 = <span class="hljs-number">0.25</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; d1 / d2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：在除法运算中，除数不能为0</p>
</blockquote>
<p><strong>示例2：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//取模</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> a1 = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b1 = <span class="hljs-number">3</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">10</span> % <span class="hljs-number">3</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-keyword">int</span> a2 = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b2 = <span class="hljs-number">20</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; a2 % b2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-keyword">int</span> a3 = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b3 = <span class="hljs-number">0</span>;<br><br>	<span class="hljs-comment">//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0</span><br><br>	<span class="hljs-comment">//两个小数不可以取模</span><br>	<span class="hljs-keyword">double</span> d1 = <span class="hljs-number">3.14</span>;<br>	<span class="hljs-keyword">double</span> d2 = <span class="hljs-number">1.1</span>;<br><br>	<span class="hljs-comment">//cout &lt;&lt; d1 % d2 &lt;&lt; endl;</span><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：只有整型变量可以进行取模运算</p>
</blockquote>
<p><strong>示例3：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//递增</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//后置递增</span><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	a++; <span class="hljs-comment">//等价于a = a + 1</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 11</span><br><br>	<span class="hljs-comment">//前置递增</span><br>	<span class="hljs-keyword">int</span> b = <span class="hljs-number">10</span>;<br>	++b;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 11</span><br><br>	<span class="hljs-comment">//区别</span><br>	<span class="hljs-comment">//前置递增先对变量进行++，再计算表达式</span><br>	<span class="hljs-keyword">int</span> a2 = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b2 = ++a2 * <span class="hljs-number">10</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; b2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//后置递增先计算表达式，后对变量进行++</span><br>	<span class="hljs-keyword">int</span> a3 = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b3 = a3++ * <span class="hljs-number">10</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; b3 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p>
</blockquote>
<h3 id="赋值运算符">3.2 赋值运算符</h3>
<p><strong>作用：</strong>用于将表达式的值赋给变量</p>
<p>赋值运算符包括以下几个符号：</p>
<table>
<thead>
<tr class="header">
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>=</td>
<td>赋值</td>
<td>a=2; b=3;</td>
<td>a=2; b=3;</td>
</tr>
<tr class="even">
<td>+=</td>
<td>加等于</td>
<td>a=0; a+=2;</td>
<td>a=2;</td>
</tr>
<tr class="odd">
<td>-=</td>
<td>减等于</td>
<td>a=5; a-=3;</td>
<td>a=2;</td>
</tr>
<tr class="even">
<td>*=</td>
<td>乘等于</td>
<td>a=2; a*=2;</td>
<td>a=4;</td>
</tr>
<tr class="odd">
<td>/=</td>
<td>除等于</td>
<td>a=4; a/=2;</td>
<td>a=2;</td>
</tr>
<tr class="even">
<td>%=</td>
<td>模等于</td>
<td>a=3; a%2;</td>
<td>a=1;</td>
</tr>
</tbody>
</table>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//赋值运算符</span><br><br>	<span class="hljs-comment">// =</span><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	a = <span class="hljs-number">100</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">// +=</span><br>	a = <span class="hljs-number">10</span>;<br>	a += <span class="hljs-number">2</span>; <span class="hljs-comment">// a = a + 2;</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">// -=</span><br>	a = <span class="hljs-number">10</span>;<br>	a -= <span class="hljs-number">2</span>; <span class="hljs-comment">// a = a - 2</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">// *=</span><br>	a = <span class="hljs-number">10</span>;<br>	a *= <span class="hljs-number">2</span>; <span class="hljs-comment">// a = a * 2</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">// /=</span><br>	a = <span class="hljs-number">10</span>;<br>	a /= <span class="hljs-number">2</span>;  <span class="hljs-comment">// a = a / 2;</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">// %=</span><br>	a = <span class="hljs-number">10</span>;<br>	a %= <span class="hljs-number">2</span>;  <span class="hljs-comment">// a = a % 2;</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="比较运算符">3.3 比较运算符</h3>
<p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p>
<p>比较运算符有以下符号：</p>
<table>
<thead>
<tr class="header">
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>==</td>
<td>相等于</td>
<td>4 == 3</td>
<td>0</td>
</tr>
<tr class="even">
<td>!=</td>
<td>不等于</td>
<td>4 != 3</td>
<td>1</td>
</tr>
<tr class="odd">
<td>&lt;</td>
<td>小于</td>
<td>4 &lt; 3</td>
<td>0</td>
</tr>
<tr class="even">
<td>&gt;</td>
<td>大于</td>
<td>4 &gt; 3</td>
<td>1</td>
</tr>
<tr class="odd">
<td>&lt;=</td>
<td>小于等于</td>
<td>4 &lt;= 3</td>
<td>0</td>
</tr>
<tr class="even">
<td>&gt;=</td>
<td>大于等于</td>
<td>4 &gt;= 1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; (a == b) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 0 </span><br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; (a != b) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 1</span><br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; (a &gt; b) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 0</span><br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; (a &lt; b) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 1</span><br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; (a &gt;= b) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 0</span><br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; (a &lt;= b) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 1</span><br>	<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>注意：C和C++ 语言的比较运算中， “真”用数字“1”来表示， “假”用数字“0”来表示。</p>
</blockquote>
<h3 id="逻辑运算符">3.4 逻辑运算符</h3>
<p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p>
<p>逻辑运算符有以下符号：</p>
<table>
<thead>
<tr class="header">
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>!</td>
<td>非</td>
<td>!a</td>
<td>如果a为假，则!a为真； 如果a为真，则!a为假。</td>
</tr>
<tr class="even">
<td>&amp;&amp;</td>
<td>与</td>
<td>a &amp;&amp; b</td>
<td>如果a和b都为真，则结果为真，否则为假。</td>
</tr>
<tr class="odd">
<td>||</td>
<td>或</td>
<td>a || b</td>
<td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td>
</tr>
</tbody>
</table>
<p><strong>示例1：</strong>逻辑非</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//逻辑运算符  --- 非</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; !a &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 0</span><br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; !!a &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 1</span><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结： 真变假，假变真</p>
</blockquote>
<p><strong>示例2：</strong>逻辑与</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//逻辑运算符  --- 与</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b = <span class="hljs-number">10</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">// 1</span><br><br>	a = <span class="hljs-number">10</span>;<br>	b = <span class="hljs-number">0</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">// 0 </span><br><br>	a = <span class="hljs-number">0</span>;<br>	b = <span class="hljs-number">0</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">// 0</span><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：<code>逻辑与</code>运算符总结： <strong>同真为真，其余为假</strong></p>
</blockquote>
<p><strong>示例3：</strong>逻辑或</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//逻辑运算符  --- 或</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b = <span class="hljs-number">10</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">// 1</span><br><br>	a = <span class="hljs-number">10</span>;<br>	b = <span class="hljs-number">0</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">// 1 </span><br><br>	a = <span class="hljs-number">0</span>;<br>	b = <span class="hljs-number">0</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">// 0</span><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p><code>逻辑或</code>运算符总结： <strong>同假为假，其余为真</strong></p>
</blockquote>
<h2 id="程序流程结构">4 程序流程结构</h2>
<p>C/C++支持最基本的三种程序运行结构：<strong>顺序结构、选择结构、循环结构</strong></p>
<ul>
<li>顺序结构：程序按顺序执行，不发生跳转</li>
<li>选择结构：依据条件是否满足，有选择的执行相应功能</li>
<li>循环结构：依据条件是否满足，循环多次执行某段代码</li>
</ul>
<h3 id="选择结构">4.1 选择结构</h3>
<h4 id="if语句">4.1.1 if语句</h4>
<p><strong>作用：</strong>执行满足条件的语句</p>
<p>if语句的三种形式</p>
<ul>
<li><p>单行格式if语句</p></li>
<li><p>多行格式if语句</p></li>
<li><p>多条件的if语句</p></li>
</ul>
<ol type="1">
<li><p>单行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1C/clip_image002.png" alt="img"><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//选择结构-单行if语句</span><br>	<span class="hljs-comment">//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印</span><br><br>	<span class="hljs-keyword">int</span> score = <span class="hljs-number">0</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入一个分数：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cin</span> &gt;&gt; score;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;您输入的分数为： &quot;</span> &lt;&lt; score &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//if语句</span><br>	<span class="hljs-comment">//注意事项，在if判断语句后面，不要加分号</span><br>	<span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">600</span>)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;我考上了一本大学！！！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>注意：if条件表达式后不要加分号</p>
</blockquote>
<ol start="2" type="1">
<li>多行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li>
</ol>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1C/clip_image002-1541662519170.png" alt="img"><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> score = <span class="hljs-number">0</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入考试分数：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cin</span> &gt;&gt; score;<br><br>	<span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">600</span>)<br>	&#123;<br>		e<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;我未考上一本大学&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>多条件的if语句：<code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li>
</ol>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1C/clip_image002-1541662566808.png" alt="img"><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++">	<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> score = <span class="hljs-number">0</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入考试分数：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cin</span> &gt;&gt; score;<br><br>	<span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">600</span>)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;我考上了一本大学&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">500</span>)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;我考上了二本大学&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">400</span>)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;我考上了三本大学&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;我未考上本科&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p>
<p>案例需求：</p>
<ul>
<li>提示用户输入一个高考考试分数，根据分数做如下判断</li>
<li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li>
<li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> score = <span class="hljs-number">0</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入考试分数：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cin</span> &gt;&gt; score;<br><br>	<span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">600</span>)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;我考上了一本大学&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">700</span>)<br>		&#123;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;我考上了北大&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		&#125;<br>		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">650</span>)<br>		&#123;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;我考上了清华&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		&#125;<br>		<span class="hljs-keyword">else</span><br>		&#123;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;我考上了人大&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		&#125;<br>		<br>	&#125;<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">500</span>)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;我考上了二本大学&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">400</span>)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;我考上了三本大学&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;我未考上本科&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>练习案例：</strong> 三只小猪称体重</p>
<p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1C/三只小猪.jpg" alt="三只小猪"></p>
<h4 id="三目运算符">4.1.2 三目运算符</h4>
<p><strong>作用：</strong> 通过三目运算符实现简单的判断</p>
<p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p>
<p><strong>解释：</strong></p>
<p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p>
<p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>	<span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;<br><br>	c = a &gt; b ? a : b;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//C++中三目运算符返回的是变量,可以继续赋值</span><br><br>	(a &gt; b ? a : b) = <span class="hljs-number">100</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p>
</blockquote>
<h4 id="switch语句">4.1.3 switch语句</h4>
<p><strong>作用：</strong>执行多条件分支语句</p>
<p><strong>语法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">switch</span>(表达式)<br><br>&#123;<br><br>	<span class="hljs-keyword">case</span> 结果<span class="hljs-number">1</span>：执行语句;<span class="hljs-keyword">break</span>;<br><br>	<span class="hljs-keyword">case</span> 结果<span class="hljs-number">2</span>：执行语句;<span class="hljs-keyword">break</span>;<br><br>	...<br><br>	<span class="hljs-keyword">default</span>:执行语句;<span class="hljs-keyword">break</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//请给电影评分 </span><br>	<span class="hljs-comment">//10 ~ 9   经典   </span><br>	<span class="hljs-comment">// 8 ~ 7   非常好</span><br>	<span class="hljs-comment">// 6 ~ 5   一般</span><br>	<span class="hljs-comment">// 5分以下 烂片</span><br><br>	<span class="hljs-keyword">int</span> score = <span class="hljs-number">0</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请给电影打分&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cin</span> &gt;&gt; score;<br><br>	<span class="hljs-keyword">switch</span> (score)<br>	&#123;<br>	<span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>	<span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;经典&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-keyword">break</span>;<br>	<span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;非常好&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-keyword">break</span>;<br>	<span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>	<span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;一般&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-keyword">break</span>;<br>	<span class="hljs-keyword">default</span>:<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;烂片&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-keyword">break</span>;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>注意1：switch语句中表达式类型只能是整型或者字符型</p>
</blockquote>
<blockquote>
<p>注意2：case里如果没有break，那么程序会一直向下执行</p>
</blockquote>
<blockquote>
<p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p>
</blockquote>
<h3 id="循环结构">4.2 循环结构</h3>
<h4 id="while循环语句">4.2.1 while循环语句</h4>
<p><strong>作用：</strong>满足循环条件，执行循环语句</p>
<p><strong>语法：</strong><code>while(循环条件)&#123; 循环语句 &#125;</code></p>
<p><strong>解释：</strong>只要循环条件的结果为真，就执行循环语句</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1C/clip_image002-1541668640382.png" alt="img"><figcaption aria-hidden="true">img</figcaption>
</figure>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">while</span> (num &lt; <span class="hljs-number">10</span>)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		num++;<br>	&#125;<br>	<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p>
</blockquote>
<p><strong>while循环练习案例：</strong>猜数字</p>
<p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1C/猜数字.jpg" alt="猜数字"><figcaption aria-hidden="true">猜数字</figcaption>
</figure>
<h4 id="do...while循环语句">4.2.2 do...while循环语句</h4>
<p><strong>作用：</strong> 满足循环条件，执行循环语句</p>
<p><strong>语法：</strong> <code>do&#123; 循环语句 &#125; while(循环条件);</code></p>
<p><strong>注意：</strong>与while的区别在于<strong>do...while会先执行一次循环语句</strong>，再判断循环条件</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1C/clip_image002-1541671163478.png" alt="img"><figcaption aria-hidden="true">img</figcaption>
</figure>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br><br>	<span class="hljs-keyword">do</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		num++;<br><br>	&#125; <span class="hljs-keyword">while</span> (num &lt; <span class="hljs-number">10</span>);<br>	<br>	<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：与while循环区别在于，do...while先执行一次循环语句，再判断循环条件</p>
</blockquote>
<p><strong>练习案例：水仙花数</strong></p>
<p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p>
<p>例如：1^3 + 5^3+ 3^3 = 153</p>
<p>请利用do...while语句，求出所有3位数中的水仙花数</p>
<h4 id="for循环语句">4.2.3 for循环语句</h4>
<p><strong>作用：</strong> 满足循环条件，执行循环语句</p>
<p><strong>语法：</strong><code>for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>详解：</strong></p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1C/1541673704101.png" alt="1541673704101"><figcaption aria-hidden="true">1541673704101</figcaption>
</figure>
<blockquote>
<p>注意：for循环中的表达式，要用分号进行分隔</p>
</blockquote>
<blockquote>
<p>总结：while , do...while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p>
</blockquote>
<p><strong>练习案例：敲桌子</strong></p>
<p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1C/timg.gif" alt="timg"><figcaption aria-hidden="true">timg</figcaption>
</figure>
<h4 id="嵌套循环">4.2.4 嵌套循环</h4>
<p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p>
<p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1C/1541676003486.png" alt="1541676003486"><figcaption aria-hidden="true">1541676003486</figcaption>
</figure>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//外层循环执行1次，内层循环执行1轮</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)<br>		&#123;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>		&#125;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>练习案例：</strong>乘法口诀表</p>
<p>案例描述：利用嵌套循环，实现九九乘法表</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1C/0006018857256120_b.jpg" alt="0006018857256120_b"><figcaption aria-hidden="true">0006018857256120_b</figcaption>
</figure>
<h3 id="跳转语句">4.3 跳转语句</h3>
<h4 id="break语句">4.3.1 break语句</h4>
<p><strong>作用:</strong> 用于跳出选择结构或者循环结构</p>
<p>break使用的时机：</p>
<ul>
<li>出现在switch条件语句中，作用是终止case并跳出switch</li>
<li>出现在循环语句中，作用是跳出当前的循环语句</li>
<li>出现在嵌套循环中，跳出最近的内层循环语句</li>
</ul>
<p><strong>示例1：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-comment">//1、在switch 语句中使用break</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请选择您挑战副本的难度：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;1、普通&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;2、中等&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;3、困难&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br><br>	<span class="hljs-built_in">cin</span> &gt;&gt; num;<br><br>	<span class="hljs-keyword">switch</span> (num)<br>	&#123;<br>	<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;您选择的是普通难度&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-keyword">break</span>;<br>	<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;您选择的是中等难度&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-keyword">break</span>;<br>	<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;您选择的是困难难度&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-keyword">break</span>;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>示例2：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-comment">//2、在循环语句中用break</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>)<br>		&#123;<br>			<span class="hljs-keyword">break</span>; <span class="hljs-comment">//跳出循环语句</span><br>		&#125;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>示例3：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-comment">//在嵌套循环语句中使用break，退出内层循环</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)<br>		&#123;<br>			<span class="hljs-keyword">if</span> (j == <span class="hljs-number">5</span>)<br>			&#123;<br>				<span class="hljs-keyword">break</span>;<br>			&#125;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>		&#125;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="continue语句">4.3.2 continue语句</h4>
<p><strong>作用：</strong>在<strong>循环语句</strong>中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>		&#123;<br>			<span class="hljs-keyword">continue</span>;<br>		&#125;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>注意：continue并没有使整个循环终止，而break会跳出循环</p>
</blockquote>
<h4 id="goto语句">4.3.3 goto语句</h4>
<p><strong>作用：</strong>可以无条件跳转语句</p>
<p><strong>语法：</strong> <code>goto 标记;</code></p>
<p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;1&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-keyword">goto</span> FLAG;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;2&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;3&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;4&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	FLAG:<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;5&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p>
</blockquote>
<h2 id="数组">5 数组</h2>
<h3 id="概述">5.1 概述</h3>
<p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p>
<p><strong>特点1：</strong>数组中的每个数据元素都是相同的数据类型</p>
<p><strong>特点2：</strong>数组是由连续的内存位置组成的</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1C/1541748375356.png" alt="1541748375356"><figcaption aria-hidden="true">1541748375356</figcaption>
</figure>
<h3 id="一维数组">5.2 一维数组</h3>
<h4 id="一维数组定义方式">5.2.1 一维数组定义方式</h4>
<p>一维数组定义的三种方式：</p>
<ol type="1">
<li><code>数据类型  数组名[ 数组长度 ];</code></li>
<li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li>
<li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li>
</ol>
<p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//定义方式1</span><br>	<span class="hljs-comment">//数据类型 数组名[元素个数];</span><br>	<span class="hljs-keyword">int</span> score[<span class="hljs-number">10</span>];<br><br>	<span class="hljs-comment">//利用下标赋值</span><br>	score[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;<br>	score[<span class="hljs-number">1</span>] = <span class="hljs-number">99</span>;<br>	score[<span class="hljs-number">2</span>] = <span class="hljs-number">85</span>;<br><br>	<span class="hljs-comment">//利用下标输出</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; score[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; score[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; score[<span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br>	<span class="hljs-comment">//第二种定义方式</span><br>	<span class="hljs-comment">//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;</span><br>	<span class="hljs-comment">//如果&#123;&#125;内不足10个数据，剩余数据用0补全</span><br>	<span class="hljs-keyword">int</span> score2[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">100</span>, <span class="hljs-number">90</span>,<span class="hljs-number">80</span>,<span class="hljs-number">70</span>,<span class="hljs-number">60</span>,<span class="hljs-number">50</span>,<span class="hljs-number">40</span>,<span class="hljs-number">30</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span> &#125;;<br>	<br>	<span class="hljs-comment">//逐个输出</span><br>	<span class="hljs-comment">//cout &lt;&lt; score2[0] &lt;&lt; endl;</span><br>	<span class="hljs-comment">//cout &lt;&lt; score2[1] &lt;&lt; endl;</span><br><br>	<span class="hljs-comment">//一个一个输出太麻烦，因此可以利用循环进行输出</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; score2[i] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	<span class="hljs-comment">//定义方式3</span><br>	<span class="hljs-comment">//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;</span><br>	<span class="hljs-keyword">int</span> score3[] = &#123; <span class="hljs-number">100</span>,<span class="hljs-number">90</span>,<span class="hljs-number">80</span>,<span class="hljs-number">70</span>,<span class="hljs-number">60</span>,<span class="hljs-number">50</span>,<span class="hljs-number">40</span>,<span class="hljs-number">30</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span> &#125;;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; score3[i] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p>
</blockquote>
<blockquote>
<p>总结2：数组中下标是从0开始索引</p>
</blockquote>
<h4 id="一维数组数组名">5.2.2 一维数组数组名</h4>
<p>一维数组名称的<strong>用途</strong>：</p>
<ol type="1">
<li>可以统计整个数组在内存中的长度</li>
<li>可以获取数组在内存中的首地址</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//数组名用途</span><br>	<span class="hljs-comment">//1、可以获取整个数组占用内存空间大小</span><br>	<span class="hljs-keyword">int</span> arr[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span> &#125;;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;整个数组所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(arr) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;每个元素所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;数组的元素个数为： &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//2、可以通过数组名获取到数组首地址</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;数组首地址为： &quot;</span> &lt;&lt; (<span class="hljs-keyword">int</span>)arr &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;数组中第一个元素地址为： &quot;</span> &lt;&lt; (<span class="hljs-keyword">int</span>)&amp;arr[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;数组中第二个元素地址为： &quot;</span> &lt;&lt; (<span class="hljs-keyword">int</span>)&amp;arr[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//arr = 100; 错误，数组名是常量，因此不可以赋值</span><br><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>注意：数组名是常量，不可以赋值</p>
</blockquote>
<blockquote>
<p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p>
</blockquote>
<blockquote>
<p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p>
</blockquote>
<p><strong>练习案例1</strong>：五只小猪称体重</p>
<p><strong>案例描述：</strong></p>
<p>在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};</p>
<p>找出并打印最重的小猪体重。</p>
<p><strong>练习案例2：</strong>数组元素逆置</p>
<p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p>
<p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p>
<h4 id="冒泡排序">5.2.3 冒泡排序</h4>
<p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p>
<ol type="1">
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li>
<li>重复以上的步骤，每次比较次数-1，直到不需要比较</li>
</ol>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1C/1541905327273.png" alt="1541905327273"><figcaption aria-hidden="true">1541905327273</figcaption>
</figure>
<p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> arr[<span class="hljs-number">9</span>] = &#123; <span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span> &#125;;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span> - <span class="hljs-number">1</span>; i++)<br>	&#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span> - <span class="hljs-number">1</span> - i; j++)<br>		&#123;<br>			<span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])<br>			&#123;<br>				<span class="hljs-keyword">int</span> temp = arr[j];<br>				arr[j] = arr[j + <span class="hljs-number">1</span>];<br>				arr[j + <span class="hljs-number">1</span>] = temp;<br>			&#125;<br>		&#125;<br>	&#125;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>    <br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="二维数组">5.3 二维数组</h3>
<p>二维数组就是在一维数组上，多加一个维度。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/26/C++/Day1C/1541905559138.png" alt="1541905559138"><figcaption aria-hidden="true">1541905559138</figcaption>
</figure>
<h4 id="二维数组定义方式">5.3.1 二维数组定义方式</h4>
<p>二维数组定义的四种方式：</p>
<ol type="1">
<li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li>
<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li>
<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>
<li><code>数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>
</ol>
<blockquote>
<p>建议：以上4种定义方式，利用第二种更加直观，提高代码的可读性</p>
</blockquote>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//方式1  </span><br>	<span class="hljs-comment">//数组类型 数组名 [行数][列数]</span><br>	<span class="hljs-keyword">int</span> arr[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];<br>	arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>	arr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>	arr[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;<br>	arr[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">4</span>;<br>	arr[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">5</span>;<br>	arr[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">6</span>;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)<br>	&#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)<br>		&#123;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; arr[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>		&#125;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	<span class="hljs-comment">//方式2 </span><br>	<span class="hljs-comment">//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</span><br>	<span class="hljs-keyword">int</span> arr2[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] =<br>	&#123;<br>		&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>		&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>	&#125;;<br><br>	<span class="hljs-comment">//方式3</span><br>	<span class="hljs-comment">//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span><br>	<span class="hljs-keyword">int</span> arr3[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span> &#125;; <br><br>	<span class="hljs-comment">//方式4 </span><br>	<span class="hljs-comment">//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span><br>	<span class="hljs-keyword">int</span> arr4[][<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span> &#125;;<br>	<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p>
</blockquote>
<h4 id="二维数组数组名">5.3.2 二维数组数组名</h4>
<ul>
<li>查看二维数组所占内存空间</li>
<li>获取二维数组首地址</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//二维数组数组名</span><br>	<span class="hljs-keyword">int</span> arr[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] =<br>	&#123;<br>		&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>		&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>	&#125;;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;二维数组大小： &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(arr) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;二维数组一行大小： &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;二维数组元素大小： &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;二维数组行数： &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;二维数组列数： &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]) / <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//地址</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;二维数组首地址：&quot;</span> &lt;&lt; arr &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;二维数组第一行地址：&quot;</span> &lt;&lt; arr[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;二维数组第二行地址：&quot;</span> &lt;&lt; arr[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;二维数组第一个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;二维数组第二个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结1：二维数组名就是这个数组的首地址</p>
</blockquote>
<blockquote>
<p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p>
</blockquote>
<h4 id="二维数组应用案例"><strong>5.3.3 二维数组应用案例</strong></h4>
<p><strong>考试成绩统计：</strong></p>
<p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p>
<table>
<thead>
<tr class="header">
<th></th>
<th>语文</th>
<th>数学</th>
<th>英语</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>张三</td>
<td>100</td>
<td>100</td>
<td>100</td>
</tr>
<tr class="even">
<td>李四</td>
<td>90</td>
<td>50</td>
<td>100</td>
</tr>
<tr class="odd">
<td>王五</td>
<td>60</td>
<td>70</td>
<td>80</td>
</tr>
</tbody>
</table>
<p><strong>参考答案：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> scores[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>] =<br>	&#123;<br>		&#123;<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>&#125;,<br>		&#123;<span class="hljs-number">90</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>&#125;,<br>		&#123;<span class="hljs-number">60</span>,<span class="hljs-number">70</span>,<span class="hljs-number">80</span>&#125;,<br>	&#125;;<br><br>	<span class="hljs-built_in">string</span> names[<span class="hljs-number">3</span>] = &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span> &#125;;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>	&#123;<br>		<span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)<br>		&#123;<br>			sum += scores[i][j];<br>		&#125;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; names[i] &lt;&lt; <span class="hljs-string">&quot;同学总成绩为： &quot;</span> &lt;&lt; sum &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="函数">6 函数</h2>
<h3 id="概述-1">6.1 概述</h3>
<p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p>
<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>
<h3 id="函数的定义">6.2 函数的定义</h3>
<p>函数的定义一般主要有5个步骤：</p>
<p>1、返回值类型</p>
<p>2、函数名</p>
<p>3、参数表列</p>
<p>4、函数体语句</p>
<p>5、return 表达式</p>
<p><strong>语法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++">返回值类型 函数名 （参数列表）<br>&#123;<br><br>       函数体语句<br><br>       <span class="hljs-keyword">return</span>表达式<br><br>&#125;<br></code></pre></td></tr></table></figure>
<ul>
<li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li>
<li>函数名：给函数起个名称</li>
<li>参数列表：使用该函数时，传入的数据</li>
<li>函数体语句：花括号内的代码，函数内需要执行的语句</li>
<li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li>
</ul>
<p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数定义</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1, <span class="hljs-keyword">int</span> num2)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">int</span> sum = num1 + num2;<br>	<span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="函数的调用">6.3 函数的调用</h3>
<p><strong>功能：</strong>使用定义好的函数</p>
<p><strong>语法：</strong><code>函数名（参数）</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数定义</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1, <span class="hljs-keyword">int</span> num2)</span> <span class="hljs-comment">//定义中的num1,num2称为形式参数，简称形参</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">int</span> sum = num1 + num2;<br>	<span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b = <span class="hljs-number">10</span>;<br>	<span class="hljs-comment">//调用add函数</span><br>	<span class="hljs-keyword">int</span> sum = add(a, b);<span class="hljs-comment">//调用时的a，b称为实际参数，简称实参</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	a = <span class="hljs-number">100</span>;<br>	b = <span class="hljs-number">100</span>;<br><br>	sum = add(a, b);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p>
</blockquote>
<h3 id="值传递">6.4 值传递</h3>
<ul>
<li>所谓值传递，就是函数调用时实参将数值传入给形参</li>
<li>值传递时，如果形参发生，并不会影响实参</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1, <span class="hljs-keyword">int</span> num2)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;交换前：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-keyword">int</span> temp = num1;<br>	num1 = num2;<br>	num2 = temp;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;交换后：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//return ; 当函数声明时候，不需要返回值，可以不写return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br><br>	swap(a, b);<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mian中的 a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mian中的 b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结： 值传递时，形参是修饰不了实参的</p>
</blockquote>
<h3 id="函数的常见样式"><strong>6.5 函数的常见样式</strong></h3>
<p>常见的函数样式有4种</p>
<ol type="1">
<li>无参无返</li>
<li>有参无返</li>
<li>无参有返</li>
<li>有参有返</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数常见样式</span><br><span class="hljs-comment">//1、 无参无返</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//void a = 10; //无类型不可以创建变量,原因无法分配内存</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;this is test01&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-comment">//test01(); 函数调用</span><br>&#125;<br><br><span class="hljs-comment">//2、 有参无返</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;this is test02&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//3、无参有返</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;this is test03 &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>&#125;<br><br><span class="hljs-comment">//4、有参有返</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">test04</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;this is test04 &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-keyword">int</span> sum = a + b;<br>	<span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="函数的声明">6.6 函数的声明</h3>
<p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>
<ul>
<li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//声明可以多次，定义只能一次</span><br><span class="hljs-comment">//声明</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>;<br><span class="hljs-comment">//定义</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">100</span>;<br>	<span class="hljs-keyword">int</span> b = <span class="hljs-number">200</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; max(a, b) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="函数的分文件编写">6.7 函数的分文件编写</h3>
<p><strong>作用：</strong>让代码结构更加清晰</p>
<p>函数分文件编写一般有4个步骤</p>
<ol type="1">
<li>创建后缀名为.h的头文件<br>
</li>
<li>创建后缀名为.cpp的源文件</li>
<li>在头文件中写函数的声明</li>
<li>在源文件中写函数的定义</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//swap.h文件</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">//实现两个数字交换的函数声明</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>;<br><br></code></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//swap.cpp文件</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;swap.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">int</span> temp = a;<br>	a = b;<br>	b = temp;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//main函数文件</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;swap.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">100</span>;<br>	<span class="hljs-keyword">int</span> b = <span class="hljs-number">200</span>;<br>	swap(a, b);<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h2 id="指针">7 指针</h2>
<h3 id="指针的基本概念">7.1 指针的基本概念</h3>
<p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p>
<ul>
<li>内存编号是从0开始记录的，一般用十六进制数字表示</li>
<li>可以利用指针变量保存地址</li>
</ul>
<h3 id="指针变量的定义和使用">7.2 指针变量的定义和使用</h3>
<p>指针变量定义语法： <code>数据类型 * 变量名；</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//1、指针的定义</span><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>; <span class="hljs-comment">//定义整型变量a</span><br>	<br>	<span class="hljs-comment">//指针定义语法： 数据类型 * 变量名 ;</span><br>	<span class="hljs-keyword">int</span> * p;<br><br>	<span class="hljs-comment">//指针变量赋值</span><br>	p = &amp;a; <span class="hljs-comment">//指针指向变量a的地址</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; &amp;a &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//打印数据a的地址</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">//打印指针变量p</span><br><br>	<span class="hljs-comment">//2、指针的使用</span><br>	<span class="hljs-comment">//通过*操作指针变量指向的内存</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*p = &quot;</span> &lt;&lt; *p &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>指针变量和普通变量的区别</p>
<ul>
<li>普通变量存放的是数据,指针变量存放的是地址</li>
<li>指针变量可以通过" * "操作符，操作指针变量指向的内存空间，这个过程称为解引用</li>
</ul>
<blockquote>
<p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p>
</blockquote>
<blockquote>
<p>总结2：利用指针可以记录地址</p>
</blockquote>
<blockquote>
<p>总结3：对指针变量解引用，可以操作指针指向的内存</p>
</blockquote>
<h3 id="指针所占内存空间">7.3 指针所占内存空间</h3>
<p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><br>	<span class="hljs-keyword">int</span> * p;<br>	p = &amp;a; <span class="hljs-comment">//指针指向数据a的地址</span><br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//* 解引用</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(p) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span> *) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">float</span> *) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">double</span> *) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：所有指针类型在32位操作系统下是4个字节</p>
</blockquote>
<h3 id="空指针和野指针">7.4 空指针和野指针</h3>
<p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p>
<p><strong>用途：</strong>初始化指针变量</p>
<p><strong>注意：</strong>空指针指向的内存是不可以访问的</p>
<p><strong>示例1：空指针</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//指针变量p指向内存地址编号为0的空间</span><br>	<span class="hljs-keyword">int</span> * p = <span class="hljs-literal">NULL</span>;<br><br>	<span class="hljs-comment">//访问空指针报错 </span><br>	<span class="hljs-comment">//内存编号0 ~255为系统占用内存，不允许用户访问</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>
<p><strong>示例2：野指针</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//指针变量p指向内存地址编号为0x1100的空间</span><br>	<span class="hljs-keyword">int</span> * p = (<span class="hljs-keyword">int</span> *)<span class="hljs-number">0x1100</span>;<br><br>	<span class="hljs-comment">//访问野指针报错 </span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p>
</blockquote>
<h3 id="const修饰指针">7.5 const修饰指针</h3>
<p>const修饰指针有三种情况</p>
<ol type="1">
<li>const修饰指针 --- 常量指针</li>
<li>const修饰常量 --- 指针常量</li>
<li>const即修饰指针，又修饰常量</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b = <span class="hljs-number">10</span>;<br><br>	<span class="hljs-comment">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span><br>	<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> * p1 = &amp;a; <br>	p1 = &amp;b; <span class="hljs-comment">//正确</span><br>	<span class="hljs-comment">//*p1 = 100;  报错</span><br>	<br><br>	<span class="hljs-comment">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span><br>	<span class="hljs-keyword">int</span> * <span class="hljs-keyword">const</span> p2 = &amp;a;<br>	<span class="hljs-comment">//p2 = &amp;b; //错误</span><br>	*p2 = <span class="hljs-number">100</span>; <span class="hljs-comment">//正确</span><br><br>    <span class="hljs-comment">//const既修饰指针又修饰常量</span><br>	<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> * <span class="hljs-keyword">const</span> p3 = &amp;a;<br>	<span class="hljs-comment">//p3 = &amp;b; //错误</span><br>	<span class="hljs-comment">//*p3 = 100; //错误</span><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p>
</blockquote>
<h3 id="指针和数组">7.6 指针和数组</h3>
<p><strong>作用：</strong>利用指针访问数组中元素</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> arr[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span> &#125;;<br><br>	<span class="hljs-keyword">int</span> * p = arr;  <span class="hljs-comment">//指向数组的指针</span><br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;第一个元素： &quot;</span> &lt;&lt; arr[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;指针访问第一个元素： &quot;</span> &lt;&lt; *p &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		<span class="hljs-comment">//利用指针遍历数组</span><br>		<span class="hljs-built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		p++;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="指针和函数">7.7 指针和函数</h3>
<p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//值传递</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a ,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">int</span> temp = a;<br>	a = b; <br>	b = temp;<br>&#125;<br><span class="hljs-comment">//地址传递</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> * p1, <span class="hljs-keyword">int</span> *p2)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">int</span> temp = *p1;<br>	*p1 = *p2;<br>	*p2 = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>	swap1(a, b); <span class="hljs-comment">// 值传递不会改变实参</span><br><br>	swap2(&amp;a, &amp;b); <span class="hljs-comment">//地址传递会改变实参</span><br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p>
</blockquote>
<h3 id="指针数组函数">7.8 指针、数组、函数</h3>
<p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>
<p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//冒泡排序函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> * arr, <span class="hljs-keyword">int</span> len)</span>  <span class="hljs-comment">//int * arr 也可以写为int arr[]</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)<br>	&#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++)<br>		&#123;<br>			<span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])<br>			&#123;<br>				<span class="hljs-keyword">int</span> temp = arr[j];<br>				arr[j] = arr[j + <span class="hljs-number">1</span>];<br>				arr[j + <span class="hljs-number">1</span>] = temp;<br>			&#125;<br>		&#125;<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//打印数组函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> arr[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span> &#125;;<br>	<span class="hljs-keyword">int</span> len = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>);<br><br>	bubbleSort(arr, len);<br><br>	printArray(arr, len);<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p>
</blockquote>
<h2 id="结构体">8 结构体</h2>
<h3 id="结构体基本概念">8.1 结构体基本概念</h3>
<p>结构体属于用户<code>自定义的数据类型</code>，允许用户存储不同的数据类型</p>
<h3 id="结构体定义和使用">8.2 结构体定义和使用</h3>
<p><strong>语法：</strong><code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p>
<p>通过结构体创建变量的方式有三种：</p>
<ul>
<li>struct 结构体名 变量名</li>
<li>struct 结构体名 变量名 = { 成员1值 ， 成员2值...}</li>
<li>定义结构体时顺便创建变量</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//结构体定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-comment">//成员列表</span><br>	<span class="hljs-built_in">string</span> name;  <span class="hljs-comment">//姓名</span><br>	<span class="hljs-keyword">int</span> age;      <span class="hljs-comment">//年龄</span><br>	<span class="hljs-keyword">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;stu3; <span class="hljs-comment">//结构体变量创建方式3 </span><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//结构体变量创建方式1</span><br>	<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> <span class="hljs-title">stu1</span>;</span> <span class="hljs-comment">//struct 关键字可以省略</span><br><br>	stu1.name = <span class="hljs-string">&quot;张三&quot;</span>;<br>	stu1.age = <span class="hljs-number">18</span>;<br>	stu1.score = <span class="hljs-number">100</span>;<br>	<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; stu1.name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; stu1.age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu1.score &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//结构体变量创建方式2</span><br>	<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> <span class="hljs-title">stu2</span> =</span> &#123; <span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-number">60</span> &#125;;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; stu2.name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; stu2.age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu2.score &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br>	stu3.name = <span class="hljs-string">&quot;王五&quot;</span>;<br>	stu3.age = <span class="hljs-number">18</span>;<br>	stu3.score = <span class="hljs-number">80</span>;<br>	<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; stu3.name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; stu3.age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu3.score &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结1：定义结构体时的关键字是struct，不可省略</p>
</blockquote>
<blockquote>
<p>总结2：创建结构体变量时，关键字struct可以省略</p>
</blockquote>
<blockquote>
<p>总结3：结构体变量利用操作符 ''.'' 访问成员</p>
</blockquote>
<h3 id="结构体数组">8.3 结构体数组</h3>
<p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p>
<p><strong>语法：</strong><code>struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//结构体定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-comment">//成员列表</span><br>	<span class="hljs-built_in">string</span> name;  <span class="hljs-comment">//姓名</span><br>	<span class="hljs-keyword">int</span> age;      <span class="hljs-comment">//年龄</span><br>	<span class="hljs-keyword">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	<br>	<span class="hljs-comment">//结构体数组</span><br>	<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> <span class="hljs-title">arr</span>[3]=</span><br>	&#123;<br>		&#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">80</span> &#125;,<br>		&#123;<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-number">60</span> &#125;,<br>		&#123;<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">70</span> &#125;<br>	&#125;;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; arr[i].age &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; arr[i].score &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="结构体指针">8.4 结构体指针</h3>
<p><strong>作用：</strong>通过指针访问结构体中的成员</p>
<ul>
<li>利用操作符 <code>-&gt;</code>可以通过结构体指针访问结构体属性</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//结构体定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-comment">//成员列表</span><br>	<span class="hljs-built_in">string</span> name;  <span class="hljs-comment">//姓名</span><br>	<span class="hljs-keyword">int</span> age;      <span class="hljs-comment">//年龄</span><br>	<span class="hljs-keyword">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	<br>	<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> <span class="hljs-title">stu</span> =</span> &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">100</span>, &#125;;<br>	<br>	<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> * <span class="hljs-title">p</span> =</span> &amp;stu;<br>	<br>	p-&gt;score = <span class="hljs-number">80</span>; <span class="hljs-comment">//指针通过 -&gt; 操作符可以访问成员</span><br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p>
</blockquote>
<h3 id="结构体嵌套结构体">8.5 结构体嵌套结构体</h3>
<p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p>
<p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//学生结构体定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-comment">//成员列表</span><br>	<span class="hljs-built_in">string</span> name;  <span class="hljs-comment">//姓名</span><br>	<span class="hljs-keyword">int</span> age;      <span class="hljs-comment">//年龄</span><br>	<span class="hljs-keyword">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;;<br><br><span class="hljs-comment">//教师结构体定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">teacher</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">//成员列表</span><br>	<span class="hljs-keyword">int</span> id; <span class="hljs-comment">//职工编号</span><br>	<span class="hljs-built_in">string</span> name;  <span class="hljs-comment">//教师姓名</span><br>	<span class="hljs-keyword">int</span> age;   <span class="hljs-comment">//教师年龄</span><br>	<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> <span class="hljs-title">stu</span>;</span> <span class="hljs-comment">//子结构体 学生</span><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">teacher</span> <span class="hljs-title">t1</span>;</span><br>	t1.id = <span class="hljs-number">10000</span>;<br>	t1.name = <span class="hljs-string">&quot;老王&quot;</span>;<br>	t1.age = <span class="hljs-number">40</span>;<br><br>	t1.stu.name = <span class="hljs-string">&quot;张三&quot;</span>;<br>	t1.stu.age = <span class="hljs-number">18</span>;<br>	t1.stu.score = <span class="hljs-number">100</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;教师 职工编号： &quot;</span> &lt;&lt; t1.id &lt;&lt; <span class="hljs-string">&quot; 姓名： &quot;</span> &lt;&lt; t1.name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; t1.age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;辅导学员 姓名： &quot;</span> &lt;&lt; t1.stu.name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; t1.stu.age &lt;&lt; <span class="hljs-string">&quot; 考试分数： &quot;</span> &lt;&lt; t1.stu.score &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p>
<h3 id="结构体做函数参数">8.6 结构体做函数参数</h3>
<p><strong>作用：</strong>将结构体作为参数向函数中传递</p>
<p>传递方式有两种：</p>
<ul>
<li>值传递</li>
<li>地址传递</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//学生结构体定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-comment">//成员列表</span><br>	<span class="hljs-built_in">string</span> name;  <span class="hljs-comment">//姓名</span><br>	<span class="hljs-keyword">int</span> age;      <span class="hljs-comment">//年龄</span><br>	<span class="hljs-keyword">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;;<br><br><span class="hljs-comment">//值传递</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printStudent</span><span class="hljs-params">(student stu )</span></span><br><span class="hljs-function"></span>&#123;<br>	stu.age = <span class="hljs-number">28</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//地址传递</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printStudent2</span><span class="hljs-params">(student *stu)</span></span><br><span class="hljs-function"></span>&#123;<br>	stu-&gt;age = <span class="hljs-number">28</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; stu-&gt;age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	student stu = &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">100</span>&#125;;<br>	<span class="hljs-comment">//值传递</span><br>	printStudent(stu);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//地址传递</span><br>	printStudent2(&amp;stu);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p>
</blockquote>
<h3 id="结构体中-const使用场景">8.7 结构体中 const使用场景</h3>
<p><strong>作用：</strong>用const来防止误操作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//学生结构体定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-comment">//成员列表</span><br>	<span class="hljs-built_in">string</span> name;  <span class="hljs-comment">//姓名</span><br>	<span class="hljs-keyword">int</span> age;      <span class="hljs-comment">//年龄</span><br>	<span class="hljs-keyword">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;;<br><br><span class="hljs-comment">//const使用场景</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printStudent</span><span class="hljs-params">(<span class="hljs-keyword">const</span> student *stu)</span> <span class="hljs-comment">//加const防止函数体中的误操作</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//stu-&gt;age = 100; //操作失败，因为加了const修饰</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; stu-&gt;age &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	student stu = &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">100</span> &#125;;<br><br>	printStudent(&amp;stu);<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="结构体案例">8.8 结构体案例</h3>
<h4 id="案例1">8.8.1 案例1</h4>
<p><strong>案例描述：</strong></p>
<p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p>
<p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p>
<p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p>
<p>最终打印出老师数据以及老师所带的学生数据。</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-built_in">string</span> name;<br>	<span class="hljs-keyword">int</span> score;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Teacher</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-built_in">string</span> name;<br>	Student sArray[<span class="hljs-number">5</span>];<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">allocateSpace</span><span class="hljs-params">(Teacher tArray[] , <span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">string</span> tName = <span class="hljs-string">&quot;教师&quot;</span>;<br>	<span class="hljs-built_in">string</span> sName = <span class="hljs-string">&quot;学生&quot;</span>;<br>	<span class="hljs-built_in">string</span> nameSeed = <span class="hljs-string">&quot;ABCDE&quot;</span>;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>	&#123;<br>		tArray[i].name = tName + nameSeed[i];<br>		<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++)<br>		&#123;<br>			tArray[i].sArray[j].name = sName + nameSeed[j];<br>			tArray[i].sArray[j].score = rand() % <span class="hljs-number">61</span> + <span class="hljs-number">40</span>;<br>		&#125;<br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printTeachers</span><span class="hljs-params">(Teacher tArray[], <span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; tArray[i].name &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++)<br>		&#123;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\t姓名：&quot;</span> &lt;&lt; tArray[i].sArray[j].name &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; tArray[i].sArray[j].score &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		&#125;<br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	srand((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)time(<span class="hljs-literal">NULL</span>)); <span class="hljs-comment">//随机数种子 头文件 #include &lt;ctime&gt;</span><br><br>	Teacher tArray[<span class="hljs-number">3</span>]; <span class="hljs-comment">//老师数组</span><br><br>	<span class="hljs-keyword">int</span> len = <span class="hljs-keyword">sizeof</span>(tArray) / <span class="hljs-keyword">sizeof</span>(Teacher);<br><br>	allocateSpace(tArray, len); <span class="hljs-comment">//创建数据</span><br><br>	printTeachers(tArray, len); <span class="hljs-comment">//打印数据</span><br>	<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="案例2">8.8.2 案例2</h4>
<p><strong>案例描述：</strong></p>
<p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p>
<p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p>
<p>五名英雄信息如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++">&#123;<span class="hljs-string">&quot;刘备&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;关羽&quot;</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;张飞&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;赵云&quot;</span>,<span class="hljs-number">21</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;貂蝉&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&quot;女&quot;</span>&#125;,<br></code></pre></td></tr></table></figure>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//英雄结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hero</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-built_in">string</span> name;<br>	<span class="hljs-keyword">int</span> age;<br>	<span class="hljs-built_in">string</span> sex;<br>&#125;;<br><span class="hljs-comment">//冒泡排序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(hero arr[] , <span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)<br>	&#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++)<br>		&#123;<br>			<span class="hljs-keyword">if</span> (arr[j].age &gt; arr[j + <span class="hljs-number">1</span>].age)<br>			&#123;<br>				hero temp = arr[j];<br>				arr[j] = arr[j + <span class="hljs-number">1</span>];<br>				arr[j + <span class="hljs-number">1</span>] = temp;<br>			&#125;<br>		&#125;<br>	&#125;<br>&#125;<br><span class="hljs-comment">//打印数组</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printHeros</span><span class="hljs-params">(hero arr[], <span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="hljs-string">&quot; 性别： &quot;</span> &lt;&lt; arr[i].sex &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; arr[i].age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hero</span> <span class="hljs-title">arr</span>[5] =</span><br>	&#123;<br>		&#123;<span class="hljs-string">&quot;刘备&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>		&#123;<span class="hljs-string">&quot;关羽&quot;</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>		&#123;<span class="hljs-string">&quot;张飞&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>		&#123;<span class="hljs-string">&quot;赵云&quot;</span>,<span class="hljs-number">21</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>		&#123;<span class="hljs-string">&quot;貂蝉&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&quot;女&quot;</span>&#125;,<br>	&#125;;<br><br>	<span class="hljs-keyword">int</span> len = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(hero); <span class="hljs-comment">//获取数组元素个数</span><br><br>	bubbleSort(arr, len); <span class="hljs-comment">//排序</span><br><br>	printHeros(arr, len); <span class="hljs-comment">//打印</span><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>Day2Cpp核心编程</title>
    <url>/2021/03/28/C++/Day2Cpp%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本阶段主要针对C++<code>面向对象</code>编程技术做详细讲解，探讨C++中的核心和精髓。</p>
<span id="more"></span>
<h2 id="内存分区模型">1 内存分区模型</h2>
<p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p>
<ul>
<li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li>
<li>全局区：存放全局变量和静态变量以及常量</li>
<li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li>
<li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li>
</ul>
<p><strong>内存四区意义：</strong></p>
<p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p>
<h3 id="程序运行前">1.1 程序运行前</h3>
<p>在程序编译后，生成了exe可执行程序，<strong>未执行该程序前</strong>分为两个区域</p>
<p><strong>代码区：</strong></p>
<p>存放 CPU 执行的机器指令</p>
<p>代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p>
<p>代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p>
<p><strong>全局区：</strong></p>
<p>全局变量和静态变量存放在此.</p>
<p>全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p>
<p><code>该区域的数据在程序结束后由操作系统释放</code>.</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//全局变量</span><br><span class="hljs-keyword">int</span> g_a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> g_b = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//全局常量</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> c_g_a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> c_g_b = <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//局部变量</span><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b = <span class="hljs-number">10</span>;<br><br>	<span class="hljs-comment">//打印地址</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;局部变量a地址为： &quot;</span> &lt;&lt; (<span class="hljs-keyword">int</span>)&amp;a &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;局部变量b地址为： &quot;</span> &lt;&lt; (<span class="hljs-keyword">int</span>)&amp;b &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;全局变量g_a地址为： &quot;</span> &lt;&lt;  (<span class="hljs-keyword">int</span>)&amp;g_a &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;全局变量g_b地址为： &quot;</span> &lt;&lt;  (<span class="hljs-keyword">int</span>)&amp;g_b &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//静态变量</span><br>	<span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> s_a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> s_b = <span class="hljs-number">10</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;静态变量s_a地址为： &quot;</span> &lt;&lt; (<span class="hljs-keyword">int</span>)&amp;s_a &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;静态变量s_b地址为： &quot;</span> &lt;&lt; (<span class="hljs-keyword">int</span>)&amp;s_b &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;字符串常量地址为： &quot;</span> &lt;&lt; (<span class="hljs-keyword">int</span>)&amp;<span class="hljs-string">&quot;hello world&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;字符串常量地址为： &quot;</span> &lt;&lt; (<span class="hljs-keyword">int</span>)&amp;<span class="hljs-string">&quot;hello world1&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;全局常量c_g_a地址为： &quot;</span> &lt;&lt; (<span class="hljs-keyword">int</span>)&amp;c_g_a &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;全局常量c_g_b地址为： &quot;</span> &lt;&lt; (<span class="hljs-keyword">int</span>)&amp;c_g_b &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> c_l_a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> c_l_b = <span class="hljs-number">10</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;局部常量c_l_a地址为： &quot;</span> &lt;&lt; (<span class="hljs-keyword">int</span>)&amp;c_l_a &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;局部常量c_l_b地址为： &quot;</span> &lt;&lt; (<span class="hljs-keyword">int</span>)&amp;c_l_b &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>打印结果：</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/03/28/C++/Day2Cpp%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/1545017602518.png"></p>
<p>总结：</p>
<ul>
<li>C++中在程序运行前分为全局区和代码区</li>
<li>代码区特点是共享和只读</li>
<li>全局区中存放全局变量、静态变量、常量</li>
<li>常量区中存放 const修饰的全局常量 和 字符串常量</li>
</ul>
<h3 id="程序运行后">1.2 程序运行后</h3>
<p><strong>栈区：</strong></p>
<p>由编译器自动分配释放, 存放函数的参数值,局部变量等</p>
<p>注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> * <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">return</span> &amp;a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> *p = func();<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>堆区：</strong></p>
<p>由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p>
<p>在C++中主要利用new在堆区开辟内存</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>(<span class="hljs-number">10</span>);<br>	<span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> *p = func();<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong></p>
<p>堆区数据由程序员管理开辟和释放</p>
<p>堆区数据利用new关键字进行开辟内存</p>
<h3 id="new操作符">1.3 new操作符</h3>
<p>C++中利用<code>new</code>操作符在堆区开辟数据</p>
<p>堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 <code>delete</code></p>
<p>语法：<code>new 数据类型</code></p>
<p>利用new创建的数据，会返回该数据对应的类型的指针</p>
<p><strong>示例1： 基本语法</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>(<span class="hljs-number">10</span>);<br>	<span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> *p = func();<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//利用delete释放堆区数据</span><br>	<span class="hljs-keyword">delete</span> p;<br><br>	<span class="hljs-comment">//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问</span><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>示例2：开辟数组</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//堆区开辟数组</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span>* arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		arr[i] = i + <span class="hljs-number">100</span>;<br>	&#125;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-comment">//释放数组 delete 后加 []</span><br>	<span class="hljs-keyword">delete</span>[] arr;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h2 id="引用">2 引用</h2>
<h3 id="引用的基本使用">2.1 引用的基本使用</h3>
<p><strong>作用： </strong>给变量起别名</p>
<p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> &amp;b = a;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	b = <span class="hljs-number">100</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="引用注意事项">2.2 引用注意事项</h3>
<ul>
<li>引用必须初始化</li>
<li>引用在初始化后，不可以改变</li>
</ul>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>	<span class="hljs-comment">//int &amp;c; //错误，引用必须初始化</span><br>	<span class="hljs-keyword">int</span> &amp;c = a; <span class="hljs-comment">//一旦初始化后，就不可以更改</span><br>	c = b; <span class="hljs-comment">//这是赋值操作，不是更改引用</span><br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="引用做函数参数">2.3 引用做函数参数</h3>
<p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参</p>
<p><strong>优点：</strong>可以简化指针修改实参</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//1. 值传递</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mySwap01</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>	<span class="hljs-keyword">int</span> temp = a;<br>	a = b;<br>	b = temp;<br>&#125;<br><br><span class="hljs-comment">//2. 地址传递</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mySwap02</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* a, <span class="hljs-keyword">int</span>* b)</span> </span>&#123;<br>	<span class="hljs-keyword">int</span> temp = *a;<br>	*a = *b;<br>	*b = temp;<br>&#125;<br><br><span class="hljs-comment">//3. 引用传递</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mySwap03</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; a, <span class="hljs-keyword">int</span>&amp; b)</span> </span>&#123;<br>	<span class="hljs-keyword">int</span> temp = a;<br>	a = b;<br>	b = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br><br>	mySwap01(a, b);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	mySwap02(&amp;a, &amp;b);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	mySwap03(a, b);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p>
</blockquote>
<h3 id="引用做函数返回值">2.4 引用做函数返回值</h3>
<p>作用：引用是可以作为函数的返回值存在的</p>
<p>注意：<strong>不要返回局部变量引用</strong></p>
<p>用法：函数调用作为左值</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//返回局部变量引用</span><br><span class="hljs-function"><span class="hljs-keyword">int</span>&amp; <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>; <span class="hljs-comment">//局部变量</span><br>	<span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-comment">//返回静态变量引用</span><br><span class="hljs-function"><span class="hljs-keyword">int</span>&amp; <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">20</span>;<br>	<span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//不能返回局部变量的引用</span><br>	<span class="hljs-keyword">int</span>&amp; ref = test01();<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//如果函数做左值，那么必须返回引用</span><br>	<span class="hljs-keyword">int</span>&amp; ref2 = test02();<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	test02() = <span class="hljs-number">1000</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>​</p>
<h3 id="引用的本质">2.5 引用的本质</h3>
<p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p>
<p>讲解示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//发现是引用，转换为 int* const ref = &amp;a;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; ref)</span></span>&#123;<br>	ref = <span class="hljs-number">100</span>; <span class="hljs-comment">// ref是引用，转换为*ref = 100</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>    <br>    <span class="hljs-comment">//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改</span><br>	<span class="hljs-keyword">int</span>&amp; ref = a; <br>	ref = <span class="hljs-number">20</span>; <span class="hljs-comment">//内部发现ref是引用，自动帮我们转换为: *ref = 20;</span><br>    <br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;ref:&quot;</span> &lt;&lt; ref &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>	func(a);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p>
<h3 id="常量引用">2.6 常量引用</h3>
<p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p>
<p>在函数形参列表中，可以加<code>const修饰形参</code>，防止形参改变实参</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//引用使用的场景，通常用来修饰形参</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showValue</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; v)</span> </span>&#123;<br>	<span class="hljs-comment">//v += 10;</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误</span><br>	<span class="hljs-comment">//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;</span><br>	<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; ref = <span class="hljs-number">10</span>;<br><br>	<span class="hljs-comment">//ref = 100;  //加入const后不可以修改变量</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; ref &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//函数中利用常量引用防止误操作修改实参</span><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	showValue(a);<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="函数提高">3 函数提高</h2>
<h3 id="函数默认参数">3.1 函数默认参数</h3>
<p>在C++中，函数的形参列表中的形参是可以有默认值的。</p>
<p>语法：<code>返回值类型  函数名 （参数= 默认值）&#123;&#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b = <span class="hljs-number">10</span>, <span class="hljs-keyword">int</span> c = <span class="hljs-number">10</span>)</span> </span>&#123;<br>	<span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><br><span class="hljs-comment">//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span><br><span class="hljs-comment">//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>, <span class="hljs-keyword">int</span> b = <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>	<span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;ret = &quot;</span> &lt;&lt; func(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;ret = &quot;</span> &lt;&lt; func(<span class="hljs-number">100</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="函数占位参数">3.2 函数占位参数</h3>
<p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p>
<p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p>
<p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数占位参数 ，占位参数也可以有默认参数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span>)</span> </span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;this is func&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	func(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>); <span class="hljs-comment">//占位参数必须填补</span><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="函数重载">3.3 函数重载</h3>
<h4 id="函数重载概述">3.3.1 函数重载概述</h4>
<p><strong>作用：</strong>函数名可以相同，提高复用性</p>
<p><strong>函数重载满足条件：</strong></p>
<ul>
<li>同一个作用域下</li>
<li>函数名称相同</li>
<li>函数参数<strong>类型不同</strong> 或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li>
</ul>
<p><strong>注意:</strong> 函数的返回值不可以作为函数重载的条件</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数重载需要函数都在同一个作用域下</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;func 的调用！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;func (int a) 的调用！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;func (double a)的调用！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a ,<span class="hljs-keyword">double</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;func (int a ,double b) 的调用！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a ,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;func (double a ,int b)的调用！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//函数返回值不可以作为函数重载条件</span><br><span class="hljs-comment">//int func(double a, int b)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//	cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	func();<br>	func(<span class="hljs-number">10</span>);<br>	func(<span class="hljs-number">3.14</span>);<br>	func(<span class="hljs-number">10</span>,<span class="hljs-number">3.14</span>);<br>	func(<span class="hljs-number">3.14</span> , <span class="hljs-number">10</span>);<br>	<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="函数重载注意事项">3.3.2 函数重载注意事项</h4>
<ul>
<li>引用作为重载条件</li>
<li>函数重载碰到函数默认参数</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数重载注意事项</span><br><span class="hljs-comment">//1、引用作为重载条件</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;func (int &amp;a) 调用 &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;a)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;func (const int &amp;a) 调用 &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><br><span class="hljs-comment">//2、函数重载碰到函数默认参数</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b = <span class="hljs-number">10</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;func2(int a, int b = 10) 调用&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;func2(int a) 调用&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	<br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	func(a); <span class="hljs-comment">//调用无const</span><br>	func(<span class="hljs-number">10</span>);<span class="hljs-comment">//调用有const</span><br><br><br>	<span class="hljs-comment">//func2(10); //碰到默认参数产生歧义，需要避免</span><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="类和对象"><strong>4</strong> 类和对象</h2>
<p>C++面向对象的三大特性为：<code>封装、继承、多态</code></p>
<p>C++认为万事万物都皆为对象，对象上有其属性和行为</p>
<p><strong>例如：</strong></p>
<pre><code>人可以作为对象，属性有姓名、年龄、身高、体重...，行为有走、跑、跳、吃饭、唱歌...

车也可以作为对象，属性有轮胎、方向盘、车灯...,行为有载人、放音乐、放空调...

具有相同性质的==对象==，我们可以抽象称为==类==，人属于人类，车属于车类</code></pre>
<h3 id="封装">4.1 封装</h3>
<h4 id="封装的意义">4.1.1 封装的意义</h4>
<p>封装是C++面向对象三大特性之一</p>
<p>封装的意义：</p>
<ul>
<li>将属性和行为作为一个整体，表现生活中的事物</li>
<li>将属性和行为加以权限控制</li>
</ul>
<p><strong>封装意义一：</strong></p>
<pre><code>在设计类的时候，属性和行为写在一起，表现事物</code></pre>
<p><strong>语法：</strong> <code>class 类名&#123;   访问权限： 属性  / 行为  &#125;;</code></p>
<p><strong>示例1：</strong>设计一个圆类，求圆的周长</p>
<p><strong>示例代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//圆周率</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-number">3.14</span>;<br><br><span class="hljs-comment">//1、封装的意义</span><br><span class="hljs-comment">//将属性和行为作为一个整体，用来表现生活中的事物</span><br><br><span class="hljs-comment">//封装一个圆类，求圆的周长</span><br><span class="hljs-comment">//class代表设计一个类，后面跟着的是类名</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:  <span class="hljs-comment">//访问权限  公共的权限</span><br><br>	<span class="hljs-comment">//属性</span><br>	<span class="hljs-keyword">int</span> m_r;<span class="hljs-comment">//半径</span><br><br>	<span class="hljs-comment">//行为</span><br>	<span class="hljs-comment">//获取到圆的周长</span><br>	<span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">calculateZC</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-comment">//2 * pi  * r</span><br>		<span class="hljs-comment">//获取圆的周长</span><br>		<span class="hljs-keyword">return</span>  <span class="hljs-number">2</span> * PI * m_r;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//通过圆类，创建圆的对象</span><br>	<span class="hljs-comment">// c1就是一个具体的圆</span><br>	Circle c1;<br>	c1.m_r = <span class="hljs-number">10</span>; <span class="hljs-comment">//给圆对象的半径 进行赋值操作</span><br><br>	<span class="hljs-comment">//2 * pi * 10 = = 62.8</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;圆的周长为： &quot;</span> &lt;&lt; c1.calculateZC() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>示例2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p>
<p><strong>示例2代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//学生类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(<span class="hljs-built_in">string</span> name)</span> </span>&#123;<br>		m_name = name;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setID</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>		m_id = id;<br>	&#125;<br><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showStudent</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;name:&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="hljs-string">&quot; ID:&quot;</span> &lt;&lt; m_id &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">string</span> m_name;<br>	<span class="hljs-keyword">int</span> m_id;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	Student stu;<br>	stu.setName(<span class="hljs-string">&quot;德玛西亚&quot;</span>);<br>	stu.setID(<span class="hljs-number">250</span>);<br>	stu.showStudent();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p><strong>封装意义二：</strong></p>
<p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p>
<p>访问权限有三种：</p>
<ol type="1">
<li>public 公共权限<br>
</li>
<li>protected 保护权限</li>
<li>private 私有权限</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//三种权限</span><br><span class="hljs-comment">//公共权限  public     类内可以访问  类外可以访问</span><br><span class="hljs-comment">//保护权限  protected  类内可以访问  类外不可以访问</span><br><span class="hljs-comment">//私有权限  private    类内可以访问  类外不可以访问</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-comment">//姓名  公共权限</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">string</span> m_Name;<br><br>	<span class="hljs-comment">//汽车  保护权限</span><br><span class="hljs-keyword">protected</span>:<br>	<span class="hljs-built_in">string</span> m_Car;<br><br>	<span class="hljs-comment">//银行卡密码  私有权限</span><br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-keyword">int</span> m_Password;<br><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		m_Name = <span class="hljs-string">&quot;张三&quot;</span>;<br>		m_Car = <span class="hljs-string">&quot;拖拉机&quot;</span>;<br>		m_Password = <span class="hljs-number">123456</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	Person p;<br>	p.m_Name = <span class="hljs-string">&quot;李四&quot;</span>;<br>	<span class="hljs-comment">//p.m_Car = &quot;奔驰&quot;;  //保护权限类外访问不到</span><br>	<span class="hljs-comment">//p.m_Password = 123; //私有权限类外访问不到</span><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="struct和class区别">4.1.2 struct和class区别</h4>
<p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p>
<p>区别：</p>
<ul>
<li>struct 默认权限为公共</li>
<li>class 默认权限为私有</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-keyword">int</span>  m_A; <span class="hljs-comment">//默认是私有权限</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">C2</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-keyword">int</span> m_A;  <span class="hljs-comment">//默认是公共权限</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	C1 c1;<br>	c1.m_A = <span class="hljs-number">10</span>; <span class="hljs-comment">//错误，访问权限是私有</span><br><br>	C2 c2;<br>	c2.m_A = <span class="hljs-number">10</span>; <span class="hljs-comment">//正确，访问权限是公共</span><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="成员属性设置为私有">4.1.3 成员属性设置为私有</h4>
<p><strong>优点1：</strong>将所有成员属性设置为私有，可以自己控制读写权限</p>
<p><strong>优点2：</strong>对于写权限，我们可以检测数据的有效性</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><br>	<span class="hljs-comment">//姓名设置可读可写</span><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(<span class="hljs-built_in">string</span> name)</span> </span>&#123;<br>		m_Name = name;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> m_Name;<br>	&#125;<br><br><br>	<span class="hljs-comment">//获取年龄 </span><br>	<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-keyword">return</span> m_Age;<br>	&#125;<br>	<span class="hljs-comment">//设置年龄</span><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>		<span class="hljs-keyword">if</span> (age &lt; <span class="hljs-number">0</span> || age &gt; <span class="hljs-number">150</span>) &#123;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;你个老妖精!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>			<span class="hljs-keyword">return</span>;<br>		&#125;<br>		m_Age = age;<br>	&#125;<br><br>	<span class="hljs-comment">//情人设置为只写</span><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setLover</span><span class="hljs-params">(<span class="hljs-built_in">string</span> lover)</span> </span>&#123;<br>		m_Lover = lover;<br>	&#125;<br><br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-built_in">string</span> m_Name; <span class="hljs-comment">//可读可写  姓名</span><br>	<br>	<span class="hljs-keyword">int</span> m_Age; <span class="hljs-comment">//只读  年龄</span><br><br>	<span class="hljs-built_in">string</span> m_Lover; <span class="hljs-comment">//只写  情人</span><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	Person p;<br>	<span class="hljs-comment">//姓名设置</span><br>	p.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; p.getName() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//年龄设置</span><br>	p.setAge(<span class="hljs-number">50</span>);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;年龄： &quot;</span> &lt;&lt; p.getAge() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//情人设置</span><br>	p.setLover(<span class="hljs-string">&quot;苍井&quot;</span>);<br>	<span class="hljs-comment">//cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取</span><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>练习案例1：设计立方体类</strong></p>
<p>设计立方体类(Cube)</p>
<p>求出立方体的面积和体积</p>
<p>分别用全局函数和成员函数判断两个立方体是否相等。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/28/C++/Day2Cpp%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/1545533548532.png" alt="1545533548532"><figcaption aria-hidden="true">1545533548532</figcaption>
</figure>
<p><strong>练习案例2：点和圆的关系</strong></p>
<p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/28/C++/Day2Cpp%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/1545533829184.png" alt="1545533829184"><figcaption aria-hidden="true">1545533829184</figcaption>
</figure>
<h3 id="对象的初始化和清理">4.2 对象的初始化和清理</h3>
<ul>
<li>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li>
<li>C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li>
</ul>
<h4 id="构造函数和析构函数">4.2.1 构造函数和析构函数</h4>
<p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p>
<pre><code>一个对象或者变量没有初始状态，对其使用后果是未知

同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</code></pre>
<p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p>
<p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p>
<p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p>
<ul>
<li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li>
<li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li>
</ul>
<p><strong>构造函数语法：</strong><code>类名()&#123;&#125;</code></p>
<ol type="1">
<li>构造函数，没有返回值也不写void</li>
<li>函数名称与类名相同</li>
<li>构造函数可以有参数，因此可以发生重载</li>
<li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li>
</ol>
<p><strong>析构函数语法：</strong> <code>~类名()&#123;&#125;</code></p>
<ol type="1">
<li>析构函数，没有返回值也不写void</li>
<li>函数名称与类名相同,在名称前加上符号 ~</li>
<li>析构函数不可以有参数，因此不可以发生重载</li>
<li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-comment">//构造函数</span><br>	Person()<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Person的构造函数调用&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-comment">//析构函数</span><br>	~Person()<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Person的析构函数调用&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Person p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	<br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="构造函数的分类及调用">4.2.2 构造函数的分类及调用</h4>
<p>两种分类方式：</p>
<ul>
<li>按参数分为： 有参构造和无参构造、</li>
<li>按类型分为： 普通构造和拷贝构造</li>
</ul>
<p>三种调用方式：</p>
<ul>
<li><p>括号法</p></li>
<li><p>显示法</p></li>
<li><p>隐式转换法</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//1、构造函数分类</span><br><span class="hljs-comment">// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数</span><br><span class="hljs-comment">// 按照类型分类分为 普通构造和拷贝构造</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-comment">//无参（默认）构造函数</span><br>	Person() &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-comment">//有参构造函数</span><br>	Person(<span class="hljs-keyword">int</span> a) &#123;<br>		age = a;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-comment">//拷贝构造函数</span><br>	Person(<span class="hljs-keyword">const</span> Person&amp; p) &#123;<br>		age = p.age;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-comment">//析构函数</span><br>	~Person() &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">int</span> age;<br>&#125;;<br><br><span class="hljs-comment">//2、构造函数的调用</span><br><span class="hljs-comment">//调用无参构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>	Person p; <span class="hljs-comment">//调用无参构造函数</span><br>&#125;<br><br><span class="hljs-comment">//调用有参的构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//2.1  括号法，常用</span><br>	<span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>	<span class="hljs-comment">//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</span><br>	<span class="hljs-comment">//Person p2();</span><br><br>	<span class="hljs-comment">//2.2 显式法</span><br>	Person p2 = Person(<span class="hljs-number">10</span>); <br>	Person p3 = Person(p2);<br>	<span class="hljs-comment">//Person(10)单独写就是匿名对象  当前行结束之后，马上析构</span><br><br>	<span class="hljs-comment">//2.3 隐式转换法</span><br>	Person p4 = <span class="hljs-number">10</span>; <span class="hljs-comment">// Person p4 = Person(10); </span><br>	Person p5 = p4; <span class="hljs-comment">// Person p5 = Person(p4); </span><br><br>	<span class="hljs-comment">//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明</span><br>	<span class="hljs-comment">//Person p5(p4);</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br>	<span class="hljs-comment">//test02();</span><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="拷贝构造函数调用时机">4.2.3 拷贝构造函数调用时机</h4>
<p>C++中拷贝构造函数调用时机通常有三种情况</p>
<ul>
<li>使用一个已经创建完毕的对象来初始化一个新对象</li>
<li>值传递的方式给函数参数传值</li>
<li>以值方式返回局部对象</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person() &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		mAge = <span class="hljs-number">0</span>;<br>	&#125;<br>	Person(<span class="hljs-keyword">int</span> age) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		mAge = age;<br>	&#125;<br>	Person(<span class="hljs-keyword">const</span> Person&amp; p) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		mAge = p.mAge;<br>	&#125;<br>	<span class="hljs-comment">//析构函数在释放内存之前调用</span><br>	~Person() &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">int</span> mAge;<br>&#125;;<br><br><span class="hljs-comment">//1. 使用一个已经创建完毕的对象来初始化一个新对象</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-function">Person <span class="hljs-title">man</span><span class="hljs-params">(<span class="hljs-number">100</span>)</span></span>; <span class="hljs-comment">//p对象已经创建完毕</span><br>	<span class="hljs-function">Person <span class="hljs-title">newman</span><span class="hljs-params">(man)</span></span>; <span class="hljs-comment">//调用拷贝构造函数</span><br>	Person newman2 = man; <span class="hljs-comment">//拷贝构造</span><br><br>	<span class="hljs-comment">//Person newman3;</span><br>	<span class="hljs-comment">//newman3 = man; //不是调用拷贝构造函数，赋值操作</span><br>&#125;<br><br><span class="hljs-comment">//2. 值传递的方式给函数参数传值</span><br><span class="hljs-comment">//相当于Person p1 = p;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">(Person p1)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>	Person p; <span class="hljs-comment">//无参构造函数</span><br>	doWork(p);<br>&#125;<br><br><span class="hljs-comment">//3. 以值方式返回局部对象</span><br><span class="hljs-function">Person <span class="hljs-title">doWork2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Person p1;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; (<span class="hljs-keyword">int</span> *)&amp;p1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-keyword">return</span> p1;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Person p = doWork2();<br>	<span class="hljs-built_in">cout</span> &lt;&lt; (<span class="hljs-keyword">int</span> *)&amp;p &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//test01();</span><br>	<span class="hljs-comment">//test02();</span><br>	test03();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="构造函数调用规则">4.2.4 构造函数调用规则</h4>
<p>默认情况下，c++编译器至少给一个类添加3个函数</p>
<p>1．默认构造函数(无参，函数体为空)</p>
<p>2．默认析构函数(无参，函数体为空)</p>
<p>3．默认拷贝构造函数，对属性进行值拷贝</p>
<p>构造函数调用规则如下：</p>
<ul>
<li><p>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</p></li>
<li><p>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</p></li>
</ul>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-comment">//无参（默认）构造函数</span><br>	Person() &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-comment">//有参构造函数</span><br>	Person(<span class="hljs-keyword">int</span> a) &#123;<br>		age = a;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-comment">//拷贝构造函数</span><br>	Person(<span class="hljs-keyword">const</span> Person&amp; p) &#123;<br>		age = p.age;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-comment">//析构函数</span><br>	~Person() &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">int</span> age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">18</span>)</span></span>;<br>	<span class="hljs-comment">//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作</span><br>	<span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(p1)</span></span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;p2的年龄为： &quot;</span> &lt;&lt; p2.age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造</span><br>	Person p1; <span class="hljs-comment">//此时如果用户自己没有提供默认构造，会出错</span><br>	<span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>; <span class="hljs-comment">//用户提供的有参</span><br>	<span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(p2)</span></span>; <span class="hljs-comment">//此时如果用户没有提供拷贝构造，编译器会提供</span><br><br>	<span class="hljs-comment">//如果用户提供拷贝构造，编译器不会提供其他构造函数</span><br>	Person p4; <span class="hljs-comment">//此时如果用户自己没有提供默认构造，会出错</span><br>	<span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>; <span class="hljs-comment">//此时如果用户自己没有提供有参，会出错</span><br>	<span class="hljs-function">Person <span class="hljs-title">p6</span><span class="hljs-params">(p5)</span></span>; <span class="hljs-comment">//用户自己提供拷贝构造</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="深拷贝与浅拷贝">4.2.5 深拷贝与浅拷贝</h4>
<p>深浅拷贝是面试经典问题，也是常见的一个坑</p>
<p>浅拷贝：简单的赋值拷贝操作</p>
<p>深拷贝：在堆区重新申请空间，进行拷贝操作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-comment">//无参（默认）构造函数</span><br>	Person() &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-comment">//有参构造函数</span><br>	Person(<span class="hljs-keyword">int</span> age ,<span class="hljs-keyword">int</span> height) &#123;<br>		<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>		m_age = age;<br>		m_height = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>(height);<br>		<br>	&#125;<br>	<span class="hljs-comment">//拷贝构造函数  </span><br>	Person(<span class="hljs-keyword">const</span> Person&amp; p) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-comment">//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题</span><br>		m_age = p.m_age;<br>		m_height = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>(*p.m_height);<br>		<br>	&#125;<br><br>	<span class="hljs-comment">//析构函数</span><br>	~Person() &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-keyword">if</span> (m_height != <span class="hljs-literal">NULL</span>)<br>		&#123;<br>			<span class="hljs-keyword">delete</span> m_height;<br>		&#125;<br>	&#125;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">int</span> m_age;<br>	<span class="hljs-keyword">int</span>* m_height;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">18</span>, <span class="hljs-number">180</span>)</span></span>;<br><br>	<span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(p1)</span></span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;p1的年龄： &quot;</span> &lt;&lt; p1.m_age &lt;&lt; <span class="hljs-string">&quot; 身高： &quot;</span> &lt;&lt; *p1.m_height &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;p2的年龄： &quot;</span> &lt;&lt; p2.m_age &lt;&lt; <span class="hljs-string">&quot; 身高： &quot;</span> &lt;&lt; *p2.m_height &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p>
</blockquote>
<h4 id="初始化列表">4.2.6 初始化列表</h4>
<p><strong>作用：</strong></p>
<p>C++提供了初始化列表语法，用来初始化属性</p>
<p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><br>	<span class="hljs-comment">////传统方式初始化</span><br>	<span class="hljs-comment">//Person(int a, int b, int c) &#123;</span><br>	<span class="hljs-comment">//	m_A = a;</span><br>	<span class="hljs-comment">//	m_B = b;</span><br>	<span class="hljs-comment">//	m_C = c;</span><br>	<span class="hljs-comment">//&#125;</span><br><br>	<span class="hljs-comment">//初始化列表方式初始化</span><br>	Person(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c) :m_A(a), m_B(b), m_C(c) &#123;&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintPerson</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mA:&quot;</span> &lt;&lt; m_A &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mB:&quot;</span> &lt;&lt; m_B &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mC:&quot;</span> &lt;&lt; m_C &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-keyword">int</span> m_A;<br>	<span class="hljs-keyword">int</span> m_B;<br>	<span class="hljs-keyword">int</span> m_C;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-function">Person <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</span></span>;<br>	p.PrintPerson();<br><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="类对象作为类成员">4.2.7 类对象作为类成员</h4>
<p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p>
<p>例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> &#123;</span>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span><br><span class="hljs-class">&#123;</span><br>    A a；<br>&#125;<br></code></pre></td></tr></table></figure>
<p>B类中有对象A作为成员，A为对象成员</p>
<p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	Phone(<span class="hljs-built_in">string</span> name)<br>	&#123;<br>		m_PhoneName = name;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Phone构造&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	~Phone()<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Phone析构&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	<span class="hljs-built_in">string</span> m_PhoneName;<br><br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><br>	<span class="hljs-comment">//初始化列表可以告诉编译器调用哪一个构造函数</span><br>	Person(<span class="hljs-built_in">string</span> name, <span class="hljs-built_in">string</span> pName) :m_Name(name), m_Phone(pName)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Person构造&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	~Person()<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Person析构&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">playGame</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; m_Name &lt;&lt; <span class="hljs-string">&quot; 使用&quot;</span> &lt;&lt; m_Phone.m_PhoneName &lt;&lt; <span class="hljs-string">&quot; 牌手机! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	<span class="hljs-built_in">string</span> m_Name;<br>	Phone m_Phone;<br><br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//当类中成员是其他类对象时，我们称该成员为 对象成员</span><br>	<span class="hljs-comment">//构造的顺序是 ：先调用对象成员的构造，再调用本类构造</span><br>	<span class="hljs-comment">//析构顺序与构造相反</span><br>	<span class="hljs-function">Person <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-string">&quot;张三&quot;</span> , <span class="hljs-string">&quot;苹果X&quot;</span>)</span></span>;<br>	p.playGame();<br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="静态成员">4.2.8 静态成员</h4>
<p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p>
<p>静态成员分为：</p>
<ul>
<li>静态成员变量
<ul>
<li>所有对象共享同一份数据</li>
<li>在编译阶段分配内存</li>
<li>类内声明，类外初始化</li>
</ul></li>
<li>静态成员函数
<ul>
<li>所有对象共享同一个函数</li>
<li>静态成员函数只能访问静态成员变量</li>
</ul></li>
</ul>
<p><strong>示例1 ：</strong>静态成员变量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br>	<br><span class="hljs-keyword">public</span>:<br><br>	<span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m_A; <span class="hljs-comment">//静态成员变量</span><br><br>	<span class="hljs-comment">//静态成员变量特点：</span><br>	<span class="hljs-comment">//1 在编译阶段分配内存</span><br>	<span class="hljs-comment">//2 类内声明，类外初始化</span><br>	<span class="hljs-comment">//3 所有对象共享同一份数据</span><br><br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m_B; <span class="hljs-comment">//静态成员变量也是有访问权限的</span><br>&#125;;<br><span class="hljs-keyword">int</span> Person::m_A = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> Person::m_B = <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//静态成员变量两种访问方式</span><br><br>	<span class="hljs-comment">//1、通过对象</span><br>	Person p1;<br>	p1.m_A = <span class="hljs-number">100</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	Person p2;<br>	p2.m_A = <span class="hljs-number">200</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//共享同一份数据</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;p2.m_A = &quot;</span> &lt;&lt; p2.m_A &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//2、通过类名</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;m_A = &quot;</span> &lt;&lt; Person::m_A &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br>	<span class="hljs-comment">//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>示例2：</strong>静态成员函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><br><span class="hljs-keyword">public</span>:<br><br>	<span class="hljs-comment">//静态成员函数特点：</span><br>	<span class="hljs-comment">//1 程序共享一个函数</span><br>	<span class="hljs-comment">//2 静态成员函数只能访问静态成员变量</span><br>	<br>	<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;func调用&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		m_A = <span class="hljs-number">100</span>;<br>		<span class="hljs-comment">//m_B = 100; //错误，不可以访问非静态成员变量</span><br>	&#125;<br><br>	<span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m_A; <span class="hljs-comment">//静态成员变量</span><br>	<span class="hljs-keyword">int</span> m_B; <span class="hljs-comment">// </span><br><span class="hljs-keyword">private</span>:<br><br>	<span class="hljs-comment">//静态成员函数也是有访问权限的</span><br>	<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;func2调用&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><span class="hljs-keyword">int</span> Person::m_A = <span class="hljs-number">10</span>;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//静态成员变量两种访问方式</span><br><br>	<span class="hljs-comment">//1、通过对象</span><br>	Person p1;<br>	p1.func();<br><br>	<span class="hljs-comment">//2、通过类名</span><br>	Person::func();<br><br><br>	<span class="hljs-comment">//Person::func2(); //私有权限访问不到</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="c对象模型和this指针">4.3 C++对象模型和this指针</h3>
<h4 id="成员变量和成员函数分开存储">4.3.1 成员变量和成员函数分开存储</h4>
<p>在C++中，类内的成员变量和成员函数分开存储</p>
<p>只有非静态成员变量才属于类的对象上</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person() &#123;<br>		mA = <span class="hljs-number">0</span>;<br>	&#125;<br>	<span class="hljs-comment">//非静态成员变量占对象空间</span><br>	<span class="hljs-keyword">int</span> mA;<br>	<span class="hljs-comment">//静态成员变量不占对象空间</span><br>	<span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> mB; <br>	<span class="hljs-comment">//函数也不占对象空间，所有函数共享一个函数实例</span><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mA:&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mA &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-comment">//静态成员函数也不占对象空间</span><br>	<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sfunc</span><span class="hljs-params">()</span> </span>&#123;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(Person) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="this指针概念">4.3.2 this指针概念</h4>
<p>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p>
<p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p>
<p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p>
<p>c++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong></p>
<p>this指针是隐含每一个非静态成员函数内的一种指针</p>
<p>this指针不需要定义，直接使用即可</p>
<p>this指针的用途：</p>
<ul>
<li>当形参和成员变量同名时，可用this指针来区分</li>
<li>在类的非静态成员函数中返回对象本身，可使用return *this</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><br>	Person(<span class="hljs-keyword">int</span> age)<br>	&#123;<br>		<span class="hljs-comment">//1、当形参和成员变量同名时，可用this指针来区分</span><br>		<span class="hljs-keyword">this</span>-&gt;age = age;<br>	&#125;<br><br>	<span class="hljs-function">Person&amp; <span class="hljs-title">PersonAddPerson</span><span class="hljs-params">(Person p)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">this</span>-&gt;age += p.age;<br>		<span class="hljs-comment">//返回对象本身</span><br>		<span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>	&#125;<br><br>	<span class="hljs-keyword">int</span> age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;p1.age = &quot;</span> &lt;&lt; p1.age &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>	p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="空指针访问成员函数">4.3.3 空指针访问成员函数</h4>
<p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p>
<p>如果用到this指针，需要加以判断保证代码的健壮性</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//空指针访问成员函数</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShowClassName</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;我是Person类!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShowPerson</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == <span class="hljs-literal">NULL</span>) &#123;<br>			<span class="hljs-keyword">return</span>;<br>		&#125;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; mAge &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">int</span> mAge;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Person * p = <span class="hljs-literal">NULL</span>;<br>	p-&gt;ShowClassName(); <span class="hljs-comment">//空指针，可以调用成员函数</span><br>	p-&gt;ShowPerson();  <span class="hljs-comment">//但是如果成员函数中用到了this指针，就不可以了</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="const修饰成员函数">4.3.4 const修饰成员函数</h4>
<p><strong>常函数：</strong></p>
<ul>
<li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li>
<li>常函数内不可以修改成员属性</li>
<li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li>
</ul>
<p><strong>常对象：</strong></p>
<ul>
<li>声明对象前加const称该对象为常对象</li>
<li>常对象只能调用常函数</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person() &#123;<br>		m_A = <span class="hljs-number">0</span>;<br>		m_B = <span class="hljs-number">0</span>;<br>	&#125;<br><br>	<span class="hljs-comment">//this指针的本质是一个指针常量，指针的指向不可修改</span><br>	<span class="hljs-comment">//如果想让指针指向的值也不可以修改，需要声明常函数</span><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShowPerson</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<br>		<span class="hljs-comment">//const Type* const pointer;</span><br>		<span class="hljs-comment">//this = NULL; //不能修改指针的指向 Person* const this;</span><br>		<span class="hljs-comment">//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的</span><br><br>		<span class="hljs-comment">//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量</span><br>		<span class="hljs-keyword">this</span>-&gt;m_B = <span class="hljs-number">100</span>;<br>	&#125;<br><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MyFunc</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<br>		<span class="hljs-comment">//mA = 10000;</span><br>	&#125;<br><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">int</span> m_A;<br>	<span class="hljs-keyword">mutable</span> <span class="hljs-keyword">int</span> m_B; <span class="hljs-comment">//可修改 可变的</span><br>&#125;;<br><br><br><span class="hljs-comment">//const修饰对象  常对象</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-keyword">const</span> Person person; <span class="hljs-comment">//常量对象  </span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; person.m_A &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-comment">//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问</span><br>	person.m_B = <span class="hljs-number">100</span>; <span class="hljs-comment">//但是常对象可以修改mutable修饰成员变量</span><br><br>	<span class="hljs-comment">//常对象访问成员函数</span><br>	person.MyFunc(); <span class="hljs-comment">//常对象不能调用const的函数</span><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="友元">4.4 友元</h3>
<p>生活中你的家有客厅(Public)，有你的卧室(Private)</p>
<p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p>
<p>但是呢，你也可以允许你的好闺蜜好基友进去。</p>
<p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p>
<p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p>
<p>友元的关键字为 <code>friend</code></p>
<p>友元的三种实现</p>
<ul>
<li>全局函数做友元</li>
<li>类做友元</li>
<li>成员函数做友元</li>
</ul>
<h4 id="全局函数做友元">4.4.1 全局函数做友元</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Building</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-comment">//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容</span><br>	<span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-keyword">void</span> <span class="hljs-title">goodGay</span><span class="hljs-params">(Building * building)</span></span>;<br><br><span class="hljs-keyword">public</span>:<br><br>	Building()<br>	&#123;<br>		<span class="hljs-keyword">this</span>-&gt;m_SittingRoom = <span class="hljs-string">&quot;客厅&quot;</span>;<br>		<span class="hljs-keyword">this</span>-&gt;m_BedRoom = <span class="hljs-string">&quot;卧室&quot;</span>;<br>	&#125;<br><br><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">string</span> m_SittingRoom; <span class="hljs-comment">//客厅</span><br><br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-built_in">string</span> m_BedRoom; <span class="hljs-comment">//卧室</span><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">goodGay</span><span class="hljs-params">(Building * building)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Building b;<br>	goodGay(&amp;b);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="类做友元">4.4.2 类做友元</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Building</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">goodGay</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><br>	goodGay();<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">visit</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>	Building *building;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Building</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-comment">//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容</span><br>	<span class="hljs-keyword">friend</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">goodGay</span>;</span><br><br><span class="hljs-keyword">public</span>:<br>	Building();<br><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">string</span> m_SittingRoom; <span class="hljs-comment">//客厅</span><br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-built_in">string</span> m_BedRoom;<span class="hljs-comment">//卧室</span><br>&#125;;<br><br>Building::Building()<br>&#123;<br>	<span class="hljs-keyword">this</span>-&gt;m_SittingRoom = <span class="hljs-string">&quot;客厅&quot;</span>;<br>	<span class="hljs-keyword">this</span>-&gt;m_BedRoom = <span class="hljs-string">&quot;卧室&quot;</span>;<br>&#125;<br><br>goodGay::goodGay()<br>&#123;<br>	building = <span class="hljs-keyword">new</span> Building;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">goodGay::visit</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	goodGay gg;<br>	gg.visit();<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="成员函数做友元">4.4.3 成员函数做友元</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Building</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">goodGay</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><br>	goodGay();<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">visit</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//只让visit函数作为Building的好朋友，可以发访问Building中私有内容</span><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">visit2</span><span class="hljs-params">()</span></span>; <br><br><span class="hljs-keyword">private</span>:<br>	Building *building;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Building</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-comment">//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容</span><br>	<span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-keyword">void</span> <span class="hljs-title">goodGay::visit</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">public</span>:<br>	Building();<br><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">string</span> m_SittingRoom; <span class="hljs-comment">//客厅</span><br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-built_in">string</span> m_BedRoom;<span class="hljs-comment">//卧室</span><br>&#125;;<br><br>Building::Building()<br>&#123;<br>	<span class="hljs-keyword">this</span>-&gt;m_SittingRoom = <span class="hljs-string">&quot;客厅&quot;</span>;<br>	<span class="hljs-keyword">this</span>-&gt;m_BedRoom = <span class="hljs-string">&quot;卧室&quot;</span>;<br>&#125;<br><br>goodGay::goodGay()<br>&#123;<br>	building = <span class="hljs-keyword">new</span> Building;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">goodGay::visit</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">goodGay::visit2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-comment">//cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	goodGay  gg;<br>	gg.visit();<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="运算符重载">4.5 运算符重载</h3>
<p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p>
<h4 id="加号运算符重载">4.5.1 加号运算符重载</h4>
<p>作用：实现两个自定义数据类型相加的运算</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person() &#123;&#125;;<br>	Person(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)<br>	&#123;<br>		<span class="hljs-keyword">this</span>-&gt;m_A = a;<br>		<span class="hljs-keyword">this</span>-&gt;m_B = b;<br>	&#125;<br>	<span class="hljs-comment">//成员函数实现 + 号运算符重载</span><br>	Person <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> Person&amp; p) &#123;<br>		Person temp;<br>		temp.m_A = <span class="hljs-keyword">this</span>-&gt;m_A + p.m_A;<br>		temp.m_B = <span class="hljs-keyword">this</span>-&gt;m_B + p.m_B;<br>		<span class="hljs-keyword">return</span> temp;<br>	&#125;<br><br><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">int</span> m_A;<br>	<span class="hljs-keyword">int</span> m_B;<br>&#125;;<br><br><span class="hljs-comment">//全局函数实现 + 号运算符重载</span><br><span class="hljs-comment">//Person operator+(const Person&amp; p1, const Person&amp; p2) &#123;</span><br><span class="hljs-comment">//	Person temp(0, 0);</span><br><span class="hljs-comment">//	temp.m_A = p1.m_A + p2.m_A;</span><br><span class="hljs-comment">//	temp.m_B = p1.m_B + p2.m_B;</span><br><span class="hljs-comment">//	return temp;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//运算符重载 可以发生函数重载 </span><br>Person <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> Person&amp; p2, <span class="hljs-keyword">int</span> val)  <br>&#123;<br>	Person temp;<br>	temp.m_A = p2.m_A + val;<br>	temp.m_B = p2.m_B + val;<br>	<span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>)</span></span>;<br><br>	<span class="hljs-comment">//成员函数方式</span><br>	Person p3 = p2 + p1;  <span class="hljs-comment">//相当于 p2.operaor+(p1)</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mA:&quot;</span> &lt;&lt; p3.m_A &lt;&lt; <span class="hljs-string">&quot; mB:&quot;</span> &lt;&lt; p3.m_B &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br>	Person p4 = p3 + <span class="hljs-number">10</span>; <span class="hljs-comment">//相当于 operator+(p3,10)</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mA:&quot;</span> &lt;&lt; p4.m_A &lt;&lt; <span class="hljs-string">&quot; mB:&quot;</span> &lt;&lt; p4.m_B &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结1：对于内置的数据类型的表达式的的运算符是不可能改变的</p>
</blockquote>
<blockquote>
<p>总结2：不要滥用运算符重载</p>
</blockquote>
<h4 id="左移运算符重载">4.5.2 左移运算符重载</h4>
<p>作用：可以输出自定义数据类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br>	<span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p);<br><br><span class="hljs-keyword">public</span>:<br><br>	Person(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)<br>	&#123;<br>		<span class="hljs-keyword">this</span>-&gt;m_A = a;<br>		<span class="hljs-keyword">this</span>-&gt;m_B = b;<br>	&#125;<br><br>	<span class="hljs-comment">//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果</span><br>	<span class="hljs-comment">//void operator&lt;&lt;(Person&amp; p)&#123;</span><br>	<span class="hljs-comment">//&#125;</span><br><br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-keyword">int</span> m_A;<br>	<span class="hljs-keyword">int</span> m_B;<br>&#125;;<br><br><span class="hljs-comment">//全局函数实现左移重载</span><br><span class="hljs-comment">//ostream对象只能有一个</span><br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;<br>	out &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; p.m_A &lt;&lt; <span class="hljs-string">&quot; b:&quot;</span> &lt;&lt; p.m_B;<br>	<span class="hljs-keyword">return</span> out;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)</span></span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; p1 &lt;&lt; <span class="hljs-string">&quot;hello world&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//链式编程</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p>
</blockquote>
<h4 id="递增运算符重载">4.5.3 递增运算符重载</h4>
<p>作用： 通过重载递增运算符，实现自己的整型数据</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInteger</span> &#123;</span><br><br>	<span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint);<br><br><span class="hljs-keyword">public</span>:<br>	MyInteger() &#123;<br>		m_Num = <span class="hljs-number">0</span>;<br>	&#125;<br>	<span class="hljs-comment">//前置++</span><br>	MyInteger&amp; <span class="hljs-keyword">operator</span>++() &#123;<br>		<span class="hljs-comment">//先++</span><br>		m_Num++;<br>		<span class="hljs-comment">//再返回</span><br>		<span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>	&#125;<br><br>	<span class="hljs-comment">//后置++</span><br>	MyInteger <span class="hljs-keyword">operator</span>++(<span class="hljs-keyword">int</span>) &#123;<br>		<span class="hljs-comment">//先返回</span><br>		MyInteger temp = *<span class="hljs-keyword">this</span>; <span class="hljs-comment">//记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；</span><br>		m_Num++;<br>		<span class="hljs-keyword">return</span> temp;<br>	&#125;<br><br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-keyword">int</span> m_Num;<br>&#125;;<br><br><br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint) &#123;<br>	out &lt;&lt; myint.m_Num;<br>	<span class="hljs-keyword">return</span> out;<br>&#125;<br><br><br><span class="hljs-comment">//前置++ 先++ 再返回</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>	MyInteger myInt;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; ++myInt &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; myInt &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//后置++ 先返回 再++</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br><br>	MyInteger myInt;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; myInt++ &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; myInt &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br>	<span class="hljs-comment">//test02();</span><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结： 前置递增返回引用，后置递增返回值</p>
</blockquote>
<h4 id="赋值运算符重载">4.5.4 赋值运算符重载</h4>
<p>c++编译器至少给一个类添加4个函数</p>
<ol type="1">
<li>默认构造函数(无参，函数体为空)</li>
<li>默认析构函数(无参，函数体为空)</li>
<li>默认拷贝构造函数，对属性进行值拷贝</li>
<li>赋值运算符 operator=, 对属性进行值拷贝</li>
</ol>
<p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><br>	Person(<span class="hljs-keyword">int</span> age)<br>	&#123;<br>		<span class="hljs-comment">//将年龄数据开辟到堆区</span><br>		m_Age = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>(age);<br>	&#125;<br><br>	<span class="hljs-comment">//重载赋值运算符 </span><br>	Person&amp; <span class="hljs-keyword">operator</span>=(Person &amp;p)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (m_Age != <span class="hljs-literal">NULL</span>)<br>		&#123;<br>			<span class="hljs-keyword">delete</span> m_Age;<br>			m_Age = <span class="hljs-literal">NULL</span>;<br>		&#125;<br>		<span class="hljs-comment">//编译器提供的代码是浅拷贝</span><br>		<span class="hljs-comment">//m_Age = p.m_Age;</span><br><br>		<span class="hljs-comment">//提供深拷贝 解决浅拷贝的问题</span><br>		m_Age = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>(*p.m_Age);<br><br>		<span class="hljs-comment">//返回自身</span><br>		<span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>	&#125;<br><br><br>	~Person()<br>	&#123;<br>		<span class="hljs-keyword">if</span> (m_Age != <span class="hljs-literal">NULL</span>)<br>		&#123;<br>			<span class="hljs-keyword">delete</span> m_Age;<br>			m_Age = <span class="hljs-literal">NULL</span>;<br>		&#125;<br>	&#125;<br><br>	<span class="hljs-comment">//年龄的指针</span><br>	<span class="hljs-keyword">int</span> *m_Age;<br><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">18</span>)</span></span>;<br><br>	<span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">20</span>)</span></span>;<br><br>	<span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-number">30</span>)</span></span>;<br><br>	p3 = p2 = p1; <span class="hljs-comment">//赋值操作</span><br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;p1的年龄为：&quot;</span> &lt;&lt; *p1.m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;p2的年龄为：&quot;</span> &lt;&lt; *p2.m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;p3的年龄为：&quot;</span> &lt;&lt; *p3.m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	<span class="hljs-comment">//int a = 10;</span><br>	<span class="hljs-comment">//int b = 20;</span><br>	<span class="hljs-comment">//int c = 30;</span><br><br>	<span class="hljs-comment">//c = b = a;</span><br>	<span class="hljs-comment">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;</span><br>	<span class="hljs-comment">//cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;</span><br>	<span class="hljs-comment">//cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;</span><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="关系运算符重载">4.5.5 关系运算符重载</h4>
<p><strong>作用：</strong>重载关系运算符，可以让两个自定义类型对象进行对比操作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age)<br>	&#123;<br>		<span class="hljs-keyword">this</span>-&gt;m_Name = name;<br>		<span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>	&#125;;<br><br>	<span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>==(Person &amp; p)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="hljs-keyword">this</span>-&gt;m_Age == p.m_Age)<br>		&#123;<br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>		&#125;<br>		<span class="hljs-keyword">else</span><br>		&#123;<br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>		&#125;<br>	&#125;<br><br>	<span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>!=(Person &amp; p)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="hljs-keyword">this</span>-&gt;m_Age == p.m_Age)<br>		&#123;<br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>		&#125;<br>		<span class="hljs-keyword">else</span><br>		&#123;<br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>		&#125;<br>	&#125;<br><br>	<span class="hljs-built_in">string</span> m_Name;<br>	<span class="hljs-keyword">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//int a = 0;</span><br>	<span class="hljs-comment">//int b = 0;</span><br><br>	<span class="hljs-function">Person <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">18</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">18</span>)</span></span>;<br><br>	<span class="hljs-keyword">if</span> (a == b)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a和b相等&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a和b不相等&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	<span class="hljs-keyword">if</span> (a != b)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a和b不相等&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a和b相等&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="函数调用运算符重载">4.5.6 函数调用运算符重载</h4>
<ul>
<li>函数调用运算符 () 也可以重载</li>
<li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li>
<li>仿函数没有固定写法，非常灵活</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-built_in">string</span> text)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; text &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//重载的（）操作符 也称为仿函数</span><br>	MyPrint myFunc;<br>	myFunc(<span class="hljs-string">&quot;hello world&quot;</span>);<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAdd</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">int</span> v2)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> v1 + v2;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	MyAdd add;<br>	<span class="hljs-keyword">int</span> ret = add(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;ret = &quot;</span> &lt;&lt; ret &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//匿名对象调用  </span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;MyAdd()(100,100) = &quot;</span> &lt;&lt; MyAdd()(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br>	test02();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="继承">4.6 继承</h3>
<p><strong>继承是面向对象三大特性之一</strong></p>
<p>有些类与类之间存在特殊的关系，例如下图中：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/28/C++/Day2Cpp%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/1544861202252.png" alt="1544861202252"><figcaption aria-hidden="true">1544861202252</figcaption>
</figure>
<p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p>
<p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p>
<h4 id="继承的基本语法">4.6.1 继承的基本语法</h4>
<p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p>
<p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p>
<p><strong>普通实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//Java页面</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Java</span> </span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">header</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">footer</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">left</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;JAVA学科视频&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><span class="hljs-comment">//Python页面</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Python</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">header</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">footer</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">left</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Python学科视频&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><span class="hljs-comment">//C++页面</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPP</span> </span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">header</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">footer</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">left</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;C++学科视频&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//Java页面</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	Java ja;<br>	ja.header();<br>	ja.footer();<br>	ja.left();<br>	ja.content();<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;--------------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//Python页面</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	Python py;<br>	py.header();<br>	py.footer();<br>	py.left();<br>	py.content();<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;--------------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//C++页面</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	CPP cp;<br>	cp.header();<br>	cp.footer();<br>	cp.left();<br>	cp.content();<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>继承实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//公共页面</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasePage</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">header</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">footer</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">left</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>&#125;;<br><br><span class="hljs-comment">//Java页面</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Java</span> :</span> <span class="hljs-keyword">public</span> BasePage<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;JAVA学科视频&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><span class="hljs-comment">//Python页面</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Python</span> :</span> <span class="hljs-keyword">public</span> BasePage<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Python学科视频&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><span class="hljs-comment">//C++页面</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPP</span> :</span> <span class="hljs-keyword">public</span> BasePage<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;C++学科视频&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//Java页面</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	Java ja;<br>	ja.header();<br>	ja.footer();<br>	ja.left();<br>	ja.content();<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;--------------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//Python页面</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	Python py;<br>	py.header();<br>	py.footer();<br>	py.left();<br>	py.content();<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;--------------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//C++页面</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	CPP cp;<br>	cp.header();<br>	cp.footer();<br>	cp.left();<br>	cp.content();<br><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong></p>
<p>继承的好处：<code>可以减少重复的代码</code></p>
<p>class A : public B;</p>
<p>A 类称为子类 或 派生类</p>
<p>B 类称为父类 或 基类</p>
<p><strong>派生类中的成员，包含两大部分</strong>：</p>
<p>一类是从基类继承过来的，一类是自己增加的成员。</p>
<p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p>
<h4 id="继承方式">4.6.2 继承方式</h4>
<p>继承的语法：<code>class 子类 : 继承方式  父类</code></p>
<p><strong>继承方式一共有三种：</strong></p>
<ul>
<li>公共继承</li>
<li>保护继承</li>
<li>私有继承</li>
</ul>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/28/C++/Day2Cpp%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/clip_image002.png" alt="img"><figcaption aria-hidden="true">img</figcaption>
</figure>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base1</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>: <br>	<span class="hljs-keyword">int</span> m_A;<br><span class="hljs-keyword">protected</span>:<br>	<span class="hljs-keyword">int</span> m_B;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-keyword">int</span> m_C;<br>&#125;;<br><br><span class="hljs-comment">//公共继承</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son1</span> :</span><span class="hljs-keyword">public</span> Base1<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		m_A; <span class="hljs-comment">//可访问 public权限</span><br>		m_B; <span class="hljs-comment">//可访问 protected权限</span><br>		<span class="hljs-comment">//m_C; //不可访问</span><br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">myClass</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Son1 s1;<br>	s1.m_A; <span class="hljs-comment">//其他类只能访问到公共权限</span><br>&#125;<br><br><span class="hljs-comment">//保护继承</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base2</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">int</span> m_A;<br><span class="hljs-keyword">protected</span>:<br>	<span class="hljs-keyword">int</span> m_B;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-keyword">int</span> m_C;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son2</span>:</span><span class="hljs-keyword">protected</span> Base2<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		m_A; <span class="hljs-comment">//可访问 protected权限</span><br>		m_B; <span class="hljs-comment">//可访问 protected权限</span><br>		<span class="hljs-comment">//m_C; //不可访问</span><br>	&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">myClass2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Son2 s;<br>	<span class="hljs-comment">//s.m_A; //不可访问</span><br>&#125;<br><br><span class="hljs-comment">//私有继承</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base3</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">int</span> m_A;<br><span class="hljs-keyword">protected</span>:<br>	<span class="hljs-keyword">int</span> m_B;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-keyword">int</span> m_C;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son3</span>:</span><span class="hljs-keyword">private</span> Base3<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		m_A; <span class="hljs-comment">//可访问 private权限</span><br>		m_B; <span class="hljs-comment">//可访问 private权限</span><br>		<span class="hljs-comment">//m_C; //不可访问</span><br>	&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GrandSon3</span> :</span><span class="hljs-keyword">public</span> Son3<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-comment">//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到</span><br>		<span class="hljs-comment">//m_A;</span><br>		<span class="hljs-comment">//m_B;</span><br>		<span class="hljs-comment">//m_C;</span><br>	&#125;<br>&#125;;<br></code></pre></td></tr></table></figure>
<h4 id="继承中的对象模型">4.6.3 继承中的对象模型</h4>
<p><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">int</span> m_A;<br><span class="hljs-keyword">protected</span>:<br>	<span class="hljs-keyword">int</span> m_B;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-keyword">int</span> m_C; <span class="hljs-comment">//私有成员只是被隐藏了，但是还是会继承下去</span><br>&#125;;<br><br><span class="hljs-comment">//公共继承</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> :</span><span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">int</span> m_D;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(Son) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>利用工具查看：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/28/C++/Day2Cpp%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/1545881904150.png" alt="1545881904150"><figcaption aria-hidden="true">1545881904150</figcaption>
</figure>
<p>打开工具窗口后，定位到当前CPP文件的盘符</p>
<p>然后输入： cl /d1 reportSingleClassLayout查看的类名 所属文件名</p>
<p>效果如下图：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/28/C++/Day2Cpp%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/1545882158050.png" alt="1545882158050"><figcaption aria-hidden="true">1545882158050</figcaption>
</figure>
<blockquote>
<p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p>
</blockquote>
<h4 id="继承中构造和析构顺序">4.6.4 继承中构造和析构顺序</h4>
<p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p>
<p>问题：父类和子类的构造和析构顺序是谁先谁后？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> </span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	Base()<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Base构造函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	~Base()<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Base析构函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> :</span> <span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	Son()<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Son构造函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	~Son()<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Son析构函数!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</span><br>	Son s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p>
</blockquote>
<h4 id="继承同名成员处理方式">4.6.5 继承同名成员处理方式</h4>
<p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p>
<ul>
<li>访问子类同名成员 直接访问即可</li>
<li>访问父类同名成员 需要加作用域</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	Base()<br>	&#123;<br>		m_A = <span class="hljs-number">100</span>;<br>	&#125;<br><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Base - func()调用&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Base - func(int a)调用&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">int</span> m_A;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> :</span> <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br>	Son()<br>	&#123;<br>		m_A = <span class="hljs-number">200</span>;<br>	&#125;<br><br>	<span class="hljs-comment">//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数</span><br>	<span class="hljs-comment">//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</span><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Son - func()调用&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">int</span> m_A;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Son s;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Son下的m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Base下的m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	s.func();<br>	s.Base::func();<br>	s.Base::func(<span class="hljs-number">10</span>);<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br>	<span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ol type="1">
<li>子类对象可以直接访问到子类中同名成员</li>
<li>子类对象加作用域可以访问到父类同名成员</li>
<li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li>
</ol>
<h4 id="继承同名静态成员处理方式">4.6.6 继承同名静态成员处理方式</h4>
<p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p>
<p>静态成员和非静态成员出现同名，处理方式一致</p>
<ul>
<li>访问子类同名成员 直接访问即可</li>
<li>访问父类同名成员 需要加作用域</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Base - static void func()&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Base - static void func(int a)&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	<span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m_A;<br>&#125;;<br><br><span class="hljs-keyword">int</span> Base::m_A = <span class="hljs-number">100</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> :</span> <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Son - static void func()&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m_A;<br>&#125;;<br><br><span class="hljs-keyword">int</span> Son::m_A = <span class="hljs-number">200</span>;<br><br><span class="hljs-comment">//同名成员属性</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//通过对象访问</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;通过对象访问： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	Son s;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//通过类名访问</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;通过类名访问： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; Son::m_A &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; Son::Base::m_A &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//同名成员函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//通过对象访问</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;通过对象访问： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	Son s;<br>	s.func();<br>	s.Base::func();<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;通过类名访问： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	Son::func();<br>	Son::Base::func();<br>	<span class="hljs-comment">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span><br>	Son::Base::func(<span class="hljs-number">100</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//test01();</span><br>	test02();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p>
</blockquote>
<h4 id="多继承语法">4.6.7 多继承语法</h4>
<p>C++允许<strong>一个类继承多个类</strong></p>
<p>语法：<code>class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p>
<p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p>
<p><strong>C++实际开发中不建议用多继承</strong></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base1</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	Base1()<br>	&#123;<br>		m_A = <span class="hljs-number">100</span>;<br>	&#125;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">int</span> m_A;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base2</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	Base2()<br>	&#123;<br>		m_A = <span class="hljs-number">200</span>;  <span class="hljs-comment">//开始是m_B 不会出问题，但是改为mA就会出现不明确</span><br>	&#125;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">int</span> m_A;<br>&#125;;<br><br><span class="hljs-comment">//语法：class 子类：继承方式 父类1 ，继承方式 父类2 </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> :</span> <span class="hljs-keyword">public</span> Base2, <span class="hljs-keyword">public</span> Base1 <br>&#123;<br><span class="hljs-keyword">public</span>:<br>	Son()<br>	&#123;<br>		m_C = <span class="hljs-number">300</span>;<br>		m_D = <span class="hljs-number">400</span>;<br>	&#125;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">int</span> m_C;<br>	<span class="hljs-keyword">int</span> m_D;<br>&#125;;<br><br><br><span class="hljs-comment">//多继承容易产生成员同名的情况</span><br><span class="hljs-comment">//通过使用类名作用域可以区分调用哪一个基类的成员</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Son s;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(s) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; s.Base1::m_A &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; s.Base2::m_A &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p>
</blockquote>
<h4 id="菱形继承">4.6.8 菱形继承</h4>
<p><strong>菱形继承概念：</strong></p>
<pre><code>两个派生类继承同一个基类

又有某个类同时继承者两个派生类

这种继承被称为菱形继承，或者钻石继承</code></pre>
<p><strong>典型的菱形继承案例：</strong></p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/28/C++/Day2Cpp%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/clip_image002.jpg" alt="IMG_256"><figcaption aria-hidden="true">IMG_256</figcaption>
</figure>
<p><strong>菱形继承问题：</strong></p>
<ol type="1">
<li><pre><code>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</code></pre></li>
<li>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-comment">//继承前加virtual关键字后，变为虚继承</span><br><span class="hljs-comment">//此时公共的父类Animal称为虚基类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sheep</span> :</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Animal &#123;&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tuo</span>   :</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Animal &#123;&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SheepTuo</span> :</span> <span class="hljs-keyword">public</span> Sheep, <span class="hljs-keyword">public</span> Tuo &#123;&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	SheepTuo st;<br>	st.Sheep::m_Age = <span class="hljs-number">100</span>;<br>	st.Tuo::m_Age = <span class="hljs-number">200</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;st.Sheep::m_Age = &quot;</span> &lt;&lt; st.Sheep::m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;st.Tuo::m_Age = &quot;</span> &lt;&lt;  st.Tuo::m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;st.m_Age = &quot;</span> &lt;&lt; st.m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li>
<li>利用虚继承可以解决菱形继承问题</li>
</ul>
<h3 id="多态">4.7 多态</h3>
<h4 id="多态的基本概念">4.7.1 多态的基本概念</h4>
<p><strong>多态是C++面向对象三大特性之一</strong></p>
<p>多态分为两类</p>
<ul>
<li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li>
<li>动态多态: 派生类和虚函数实现运行时多态</li>
</ul>
<p>静态多态和动态多态区别：</p>
<ul>
<li>静态多态的函数地址早绑定 - 编译阶段确定函数地址</li>
<li>动态多态的函数地址晚绑定 - 运行阶段确定函数地址</li>
</ul>
<p>下面通过案例进行讲解多态</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-comment">//Speak函数就是虚函数</span><br>	<span class="hljs-comment">//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;动物在说话&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> :</span><span class="hljs-keyword">public</span> Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;小猫在说话&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> :</span><span class="hljs-keyword">public</span> Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;小狗在说话&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>&#125;;<br><span class="hljs-comment">//我们希望传入什么对象，那么就调用什么对象的函数</span><br><span class="hljs-comment">//如果函数地址在编译阶段就能确定，那么静态联编</span><br><span class="hljs-comment">//如果函数地址在运行阶段才能确定，就是动态联编</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DoSpeak</span><span class="hljs-params">(Animal &amp; animal)</span></span><br><span class="hljs-function"></span>&#123;<br>	animal.speak();<br>&#125;<br><span class="hljs-comment">//</span><br><span class="hljs-comment">//多态满足条件： </span><br><span class="hljs-comment">//1、有继承关系</span><br><span class="hljs-comment">//2、子类重写父类中的虚函数</span><br><span class="hljs-comment">//多态使用：</span><br><span class="hljs-comment">//父类指针或引用指向子类对象</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Cat cat;<br>	DoSpeak(cat);<br><br><br>	Dog dog;<br>	DoSpeak(dog);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<p>多态满足条件</p>
<ul>
<li>有继承关系</li>
<li>子类重写父类中的虚函数</li>
</ul>
<p>多态使用条件</p>
<ul>
<li>父类指针或引用指向子类对象</li>
</ul>
<p>重写：函数返回值类型 函数名 参数列表 完全一致称为重写</p>
<h4 id="多态案例一-计算器类">4.7.2 多态案例一-计算器类</h4>
<p>案例描述：</p>
<p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p>
<p>多态的优点：</p>
<ul>
<li>代码组织结构清晰</li>
<li>可读性强</li>
<li>利于前期和后期的扩展以及维护</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//普通实现</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Calculator</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">(<span class="hljs-built_in">string</span> oper)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">if</span> (oper == <span class="hljs-string">&quot;+&quot;</span>) &#123;<br>			<span class="hljs-keyword">return</span> m_Num1 + m_Num2;<br>		&#125;<br>		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oper == <span class="hljs-string">&quot;-&quot;</span>) &#123;<br>			<span class="hljs-keyword">return</span> m_Num1 - m_Num2;<br>		&#125;<br>		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oper == <span class="hljs-string">&quot;*&quot;</span>) &#123;<br>			<span class="hljs-keyword">return</span> m_Num1 * m_Num2;<br>		&#125;<br>		<span class="hljs-comment">//如果要提供新的运算，需要修改源码</span><br>	&#125;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">int</span> m_Num1;<br>	<span class="hljs-keyword">int</span> m_Num2;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//普通实现测试</span><br>	Calculator c;<br>	c.m_Num1 = <span class="hljs-number">10</span>;<br>	c.m_Num2 = <span class="hljs-number">10</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class="hljs-string">&quot; + &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; c.getResult(<span class="hljs-string">&quot;+&quot;</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class="hljs-string">&quot; - &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; c.getResult(<span class="hljs-string">&quot;-&quot;</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class="hljs-string">&quot; * &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; c.getResult(<span class="hljs-string">&quot;*&quot;</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><br><br><span class="hljs-comment">//多态实现</span><br><span class="hljs-comment">//抽象计算器类</span><br><span class="hljs-comment">//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractCalculator</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span> :<br><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br><br>	<span class="hljs-keyword">int</span> m_Num1;<br>	<span class="hljs-keyword">int</span> m_Num2;<br>&#125;;<br><br><span class="hljs-comment">//加法计算器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddCalculator</span> :</span><span class="hljs-keyword">public</span> AbstractCalculator<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> m_Num1 + m_Num2;<br>	&#125;<br>&#125;;<br><br><span class="hljs-comment">//减法计算器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubCalculator</span> :</span><span class="hljs-keyword">public</span> AbstractCalculator<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> m_Num1 - m_Num2;<br>	&#125;<br>&#125;;<br><br><span class="hljs-comment">//乘法计算器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MulCalculator</span> :</span><span class="hljs-keyword">public</span> AbstractCalculator<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> m_Num1 * m_Num2;<br>	&#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//创建加法计算器</span><br>	AbstractCalculator *abc = <span class="hljs-keyword">new</span> AddCalculator;<br>	abc-&gt;m_Num1 = <span class="hljs-number">10</span>;<br>	abc-&gt;m_Num2 = <span class="hljs-number">10</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="hljs-string">&quot; + &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; abc-&gt;getResult() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-keyword">delete</span> abc;  <span class="hljs-comment">//用完了记得销毁</span><br><br>	<span class="hljs-comment">//创建减法计算器</span><br>	abc = <span class="hljs-keyword">new</span> SubCalculator;<br>	abc-&gt;m_Num1 = <span class="hljs-number">10</span>;<br>	abc-&gt;m_Num2 = <span class="hljs-number">10</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="hljs-string">&quot; - &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; abc-&gt;getResult() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-keyword">delete</span> abc;  <br><br>	<span class="hljs-comment">//创建乘法计算器</span><br>	abc = <span class="hljs-keyword">new</span> MulCalculator;<br>	abc-&gt;m_Num1 = <span class="hljs-number">10</span>;<br>	abc-&gt;m_Num2 = <span class="hljs-number">10</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="hljs-string">&quot; * &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; abc-&gt;getResult() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-keyword">delete</span> abc;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//test01();</span><br><br>	test02();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p>
</blockquote>
<h4 id="纯虚函数和抽象类">4.7.3 纯虚函数和抽象类</h4>
<p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p>
<p>因此可以将虚函数改为<strong>纯虚函数</strong></p>
<p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p>
<p>当类中有了纯虚函数，这个类也称为<code>抽象类</code></p>
<p><strong>抽象类特点</strong>：</p>
<ul>
<li>无法实例化对象</li>
<li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-comment">//纯虚函数</span><br>	<span class="hljs-comment">//类中只要有一个纯虚函数就称为抽象类</span><br>	<span class="hljs-comment">//抽象类无法实例化对象</span><br>	<span class="hljs-comment">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> :</span><span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;func调用&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Base * base = <span class="hljs-literal">NULL</span>;<br>	<span class="hljs-comment">//base = new Base; // 错误，抽象类无法实例化对象</span><br>	base = <span class="hljs-keyword">new</span> Son;<br>	base-&gt;func();<br>	<span class="hljs-keyword">delete</span> base;<span class="hljs-comment">//记得销毁</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="多态案例二-制作饮品">4.7.4 多态案例二-制作饮品</h4>
<p><strong>案例描述：</strong></p>
<p>制作饮品的大致流程为：煮水 - 冲泡 - 倒入杯中 - 加入辅料</p>
<p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/28/C++/Day2Cpp%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/1545985945198.png" alt="1545985945198"><figcaption aria-hidden="true">1545985945198</figcaption>
</figure>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//抽象制作饮品</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractDrinking</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-comment">//烧水</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Boil</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>	<span class="hljs-comment">//冲泡</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Brew</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>	<span class="hljs-comment">//倒入杯中</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PourInCup</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>	<span class="hljs-comment">//加入辅料</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PutSomething</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>	<span class="hljs-comment">//规定流程</span><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MakeDrink</span><span class="hljs-params">()</span> </span>&#123;<br>		Boil();<br>		Brew();<br>		PourInCup();<br>		PutSomething();<br>	&#125;<br>&#125;;<br><br><span class="hljs-comment">//制作咖啡</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coffee</span> :</span> <span class="hljs-keyword">public</span> AbstractDrinking &#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-comment">//烧水</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Boil</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;煮农夫山泉!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-comment">//冲泡</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Brew</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;冲泡咖啡!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-comment">//倒入杯中</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PourInCup</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;将咖啡倒入杯中!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-comment">//加入辅料</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PutSomething</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;加入牛奶!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-comment">//制作茶水</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tea</span> :</span> <span class="hljs-keyword">public</span> AbstractDrinking &#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-comment">//烧水</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Boil</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;煮自来水!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-comment">//冲泡</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Brew</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;冲泡茶叶!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-comment">//倒入杯中</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PourInCup</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;将茶水倒入杯中!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-comment">//加入辅料</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PutSomething</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;加入枸杞!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-comment">//业务函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DoWork</span><span class="hljs-params">(AbstractDrinking* drink)</span> </span>&#123;<br>	drink-&gt;MakeDrink();<br>	<span class="hljs-keyword">delete</span> drink;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>	DoWork(<span class="hljs-keyword">new</span> Coffee);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;--------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	DoWork(<span class="hljs-keyword">new</span> Tea);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="虚析构和纯虚析构">4.7.5 虚析构和纯虚析构</h4>
<p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p>
<p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p>
<p>虚析构和纯虚析构共性：</p>
<ul>
<li>可以解决父类指针释放子类对象</li>
<li>都需要有具体的函数实现</li>
</ul>
<p>虚析构和纯虚析构区别：</p>
<ul>
<li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li>
</ul>
<p>虚析构语法：</p>
<p><code>virtual ~类名()&#123;&#125;</code></p>
<p>纯虚析构语法：</p>
<p><code>virtual ~类名() = 0;</code></p>
<p><code>类名::~类名()&#123;&#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><br>	Animal()<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Animal 构造函数调用！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Speak</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><br>	<span class="hljs-comment">//析构函数加上virtual关键字，变成虚析构函数</span><br>	<span class="hljs-comment">//virtual ~Animal()</span><br>	<span class="hljs-comment">//&#123;</span><br>	<span class="hljs-comment">//	cout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;</span><br>	<span class="hljs-comment">//&#125;</span><br><br><br>	<span class="hljs-keyword">virtual</span> ~Animal() = <span class="hljs-number">0</span>;<br>&#125;;<br><br>Animal::~Animal()<br>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Animal 纯虚析构函数调用！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> :</span> <span class="hljs-keyword">public</span> Animal &#123;<br><span class="hljs-keyword">public</span>:<br>	Cat(<span class="hljs-built_in">string</span> name)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Cat构造函数调用！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		m_Name = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(name);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *m_Name &lt;&lt;  <span class="hljs-string">&quot;小猫在说话!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	~Cat()<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Cat析构函数调用!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Name != <span class="hljs-literal">NULL</span>) &#123;<br>			<span class="hljs-keyword">delete</span> m_Name;<br>			m_Name = <span class="hljs-literal">NULL</span>;<br>		&#125;<br>	&#125;<br><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">string</span> *m_Name;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Animal *animal = <span class="hljs-keyword">new</span> Cat(<span class="hljs-string">&quot;Tom&quot;</span>);<br>	animal-&gt;Speak();<br><br>	<span class="hljs-comment">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span><br>	<span class="hljs-comment">//怎么解决？给基类增加一个虚析构函数</span><br>	<span class="hljs-comment">//虚析构函数就是用来解决通过父类指针释放子类对象</span><br>	<span class="hljs-keyword">delete</span> animal;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ol type="1">
<li><p>虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p></li>
<li><p>如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p></li>
<li><p>拥有纯虚析构函数的类也属于抽象类</p></li>
</ol>
<h4 id="多态案例三-电脑组装">4.7.6 多态案例三-电脑组装</h4>
<p><strong>案例描述：</strong></p>
<p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p>
<p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p>
<p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p>
<p>测试时组装三台不同的电脑进行工作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">//抽象CPU类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPU</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-comment">//抽象的计算函数</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">calculate</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">//抽象显卡类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VideoCard</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-comment">//抽象的显示函数</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">//抽象内存条类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Memory</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-comment">//抽象的存储函数</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">storage</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">//电脑类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Computer</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	Computer(CPU * cpu, VideoCard * vc, Memory * mem)<br>	&#123;<br>		m_cpu = cpu;<br>		m_vc = vc;<br>		m_mem = mem;<br>	&#125;<br><br>	<span class="hljs-comment">//提供工作的函数</span><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-comment">//让零件工作起来，调用接口</span><br>		m_cpu-&gt;calculate();<br><br>		m_vc-&gt;display();<br><br>		m_mem-&gt;storage();<br>	&#125;<br><br>	<span class="hljs-comment">//提供析构函数 释放3个电脑零件</span><br>	~Computer()<br>	&#123;<br><br>		<span class="hljs-comment">//释放CPU零件</span><br>		<span class="hljs-keyword">if</span> (m_cpu != <span class="hljs-literal">NULL</span>)<br>		&#123;<br>			<span class="hljs-keyword">delete</span> m_cpu;<br>			m_cpu = <span class="hljs-literal">NULL</span>;<br>		&#125;<br><br>		<span class="hljs-comment">//释放显卡零件</span><br>		<span class="hljs-keyword">if</span> (m_vc != <span class="hljs-literal">NULL</span>)<br>		&#123;<br>			<span class="hljs-keyword">delete</span> m_vc;<br>			m_vc = <span class="hljs-literal">NULL</span>;<br>		&#125;<br><br>		<span class="hljs-comment">//释放内存条零件</span><br>		<span class="hljs-keyword">if</span> (m_mem != <span class="hljs-literal">NULL</span>)<br>		&#123;<br>			<span class="hljs-keyword">delete</span> m_mem;<br>			m_mem = <span class="hljs-literal">NULL</span>;<br>		&#125;<br>	&#125;<br><br><span class="hljs-keyword">private</span>:<br><br>	CPU * m_cpu; <span class="hljs-comment">//CPU的零件指针</span><br>	VideoCard * m_vc; <span class="hljs-comment">//显卡零件指针</span><br>	Memory * m_mem; <span class="hljs-comment">//内存条零件指针</span><br>&#125;;<br><br><span class="hljs-comment">//具体厂商</span><br><span class="hljs-comment">//Intel厂商</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntelCPU</span> :</span><span class="hljs-keyword">public</span> CPU<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">calculate</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Intel的CPU开始计算了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntelVideoCard</span> :</span><span class="hljs-keyword">public</span> VideoCard<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Intel的显卡开始显示了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntelMemory</span> :</span><span class="hljs-keyword">public</span> Memory<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">storage</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Intel的内存条开始存储了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-comment">//Lenovo厂商</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LenovoCPU</span> :</span><span class="hljs-keyword">public</span> CPU<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">calculate</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Lenovo的CPU开始计算了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LenovoVideoCard</span> :</span><span class="hljs-keyword">public</span> VideoCard<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Lenovo的显卡开始显示了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LenovoMemory</span> :</span><span class="hljs-keyword">public</span> Memory<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">storage</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Lenovo的内存条开始存储了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//第一台电脑零件</span><br>	CPU * intelCpu = <span class="hljs-keyword">new</span> IntelCPU;<br>	VideoCard * intelCard = <span class="hljs-keyword">new</span> IntelVideoCard;<br>	Memory * intelMem = <span class="hljs-keyword">new</span> IntelMemory;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;第一台电脑开始工作：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-comment">//创建第一台电脑</span><br>	Computer * computer1 = <span class="hljs-keyword">new</span> Computer(intelCpu, intelCard, intelMem);<br>	computer1-&gt;work();<br>	<span class="hljs-keyword">delete</span> computer1;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;-----------------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;第二台电脑开始工作：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-comment">//第二台电脑组装</span><br>	Computer * computer2 = <span class="hljs-keyword">new</span> Computer(<span class="hljs-keyword">new</span> LenovoCPU, <span class="hljs-keyword">new</span> LenovoVideoCard, <span class="hljs-keyword">new</span> LenovoMemory);;<br>	computer2-&gt;work();<br>	<span class="hljs-keyword">delete</span> computer2;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;-----------------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;第三台电脑开始工作：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-comment">//第三台电脑组装</span><br>	Computer * computer3 = <span class="hljs-keyword">new</span> Computer(<span class="hljs-keyword">new</span> LenovoCPU, <span class="hljs-keyword">new</span> IntelVideoCard, <span class="hljs-keyword">new</span> LenovoMemory);;<br>	computer3-&gt;work();<br>	<span class="hljs-keyword">delete</span> computer3;<br><br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="文件操作">5 文件操作</h2>
<p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p>
<p>通过<strong>文件可以将数据持久化</strong></p>
<p>C++中对文件操作需要包含头文件 <code>&lt;fstream &gt;</code></p>
<p>文件类型分为两种：</p>
<ol type="1">
<li><strong>文本文件</strong> - 文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li>
<li><strong>二进制文件</strong> - 文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li>
</ol>
<p>操作文件的三大类:</p>
<ol type="1">
<li>ofstream：写操作</li>
<li>ifstream： 读操作</li>
<li>fstream ： 读写操作</li>
</ol>
<h3 id="文本文件">5.1文本文件</h3>
<h4 id="写文件">5.1.1写文件</h4>
<p>写文件步骤如下：</p>
<ol type="1">
<li><p>包含头文件</p>
<p>#include &lt;fstream&gt;</p></li>
<li><p>创建流对象</p>
<p>ofstream ofs;</p></li>
<li><p>打开文件</p>
<p>ofs.open("文件路径",打开方式);</p></li>
<li><p>写数据</p>
<p>ofs &lt;&lt; "写入的数据";</p></li>
<li><p>关闭文件</p>
<p>ofs.close();</p></li>
</ol>
<p>文件打开方式：</p>
<table>
<thead>
<tr class="header">
<th>打开方式</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ios::in</td>
<td>为读文件而打开文件</td>
</tr>
<tr class="even">
<td>ios::out</td>
<td>为写文件而打开文件</td>
</tr>
<tr class="odd">
<td>ios::ate</td>
<td>初始位置：文件尾</td>
</tr>
<tr class="even">
<td>ios::app</td>
<td>追加方式写文件</td>
</tr>
<tr class="odd">
<td>ios::trunc</td>
<td>如果文件存在先删除，再创建</td>
</tr>
<tr class="even">
<td>ios::binary</td>
<td>二进制方式</td>
</tr>
</tbody>
</table>
<p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p>
<p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	ofstream ofs;<br>	ofs.open(<span class="hljs-string">&quot;test.txt&quot;</span>, ios::out);<br><br>	ofs &lt;&lt; <span class="hljs-string">&quot;姓名：张三&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	ofs &lt;&lt; <span class="hljs-string">&quot;性别：男&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	ofs &lt;&lt; <span class="hljs-string">&quot;年龄：18&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	ofs.close();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>文件操作必须包含头文件 fstream</li>
<li>读文件可以利用 ofstream ，或者fstream类</li>
<li>打开文件时候需要指定操作文件的路径，以及打开方式</li>
<li>利用&lt;&lt;可以向文件中写数据</li>
<li>操作完毕，要关闭文件</li>
</ul>
<h4 id="读文件">5.1.2读文件</h4>
<p>读文件与写文件步骤相似，但是读取方式相对于比较多</p>
<p>读文件步骤如下：</p>
<ol type="1">
<li><p>包含头文件</p>
<p>#include &lt;fstream&gt;</p></li>
<li><p>创建流对象</p>
<p>ifstream ifs;</p></li>
<li><p>打开文件并判断文件是否打开成功</p>
<p>ifs.open("文件路径",打开方式);</p></li>
<li><p>读数据</p>
<p>四种方式读取</p></li>
<li><p>关闭文件</p>
<p>ifs.close();</p></li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	ifstream ifs;<br>	ifs.open(<span class="hljs-string">&quot;test.txt&quot;</span>, ios::in);<br><br>	<span class="hljs-keyword">if</span> (!ifs.is_open())<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;文件打开失败&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br><br>	<span class="hljs-comment">//第一种方式</span><br>	<span class="hljs-comment">//char buf[1024] = &#123; 0 &#125;;</span><br>	<span class="hljs-comment">//while (ifs &gt;&gt; buf)</span><br>	<span class="hljs-comment">//&#123;</span><br>	<span class="hljs-comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span><br>	<span class="hljs-comment">//&#125;</span><br><br>	<span class="hljs-comment">//第二种</span><br>	<span class="hljs-comment">//char buf[1024] = &#123; 0 &#125;;</span><br>	<span class="hljs-comment">//while (ifs.getline(buf,sizeof(buf)))</span><br>	<span class="hljs-comment">//&#123;</span><br>	<span class="hljs-comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span><br>	<span class="hljs-comment">//&#125;</span><br><br>	<span class="hljs-comment">//第三种</span><br>	<span class="hljs-comment">//string buf;</span><br>	<span class="hljs-comment">//while (getline(ifs, buf))</span><br>	<span class="hljs-comment">//&#123;</span><br>	<span class="hljs-comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span><br>	<span class="hljs-comment">//&#125;</span><br><br>	<span class="hljs-keyword">char</span> c;<br>	<span class="hljs-keyword">while</span> ((c = ifs.get()) != EOF)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; c;<br>	&#125;<br><br>	ifs.close();<br><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>读文件可以利用 ifstream ，或者fstream类</li>
<li>利用is_open函数可以判断文件是否打开成功</li>
<li>close 关闭文件</li>
</ul>
<h3 id="二进制文件">5.2 二进制文件</h3>
<p>以二进制的方式对文件进行读写操作</p>
<p>打开方式要指定为 <code>ios::binary</code></p>
<h4 id="写文件-1">5.2.1 写文件</h4>
<p>二进制方式写文件主要利用流对象调用成员函数write</p>
<p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p>
<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">char</span> m_Name[<span class="hljs-number">64</span>];<br>	<span class="hljs-keyword">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-comment">//二进制文件  写文件</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//1、包含头文件</span><br><br>	<span class="hljs-comment">//2、创建输出流对象</span><br>	<span class="hljs-function">ofstream <span class="hljs-title">ofs</span><span class="hljs-params">(<span class="hljs-string">&quot;person.txt&quot;</span>, ios::out | ios::binary)</span></span>;<br>	<br>	<span class="hljs-comment">//3、打开文件</span><br>	<span class="hljs-comment">//ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);</span><br><br>	Person p = &#123;<span class="hljs-string">&quot;张三&quot;</span>  , <span class="hljs-number">18</span>&#125;;<br><br>	<span class="hljs-comment">//4、写文件</span><br>	ofs.write((<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *)&amp;p, <span class="hljs-keyword">sizeof</span>(p));<br><br>	<span class="hljs-comment">//5、关闭文件</span><br>	ofs.close();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>文件输出流对象 可以通过write函数，以二进制方式写数据</li>
</ul>
<h4 id="读文件-1">5.2.2 读文件</h4>
<p>二进制方式读文件主要利用流对象调用成员函数read</p>
<p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p>
<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-keyword">char</span> m_Name[<span class="hljs-number">64</span>];<br>	<span class="hljs-keyword">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-function">ifstream <span class="hljs-title">ifs</span><span class="hljs-params">(<span class="hljs-string">&quot;person.txt&quot;</span>, ios::in | ios::binary)</span></span>;<br>	<span class="hljs-keyword">if</span> (!ifs.is_open())<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;文件打开失败&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	Person p;<br>	ifs.read((<span class="hljs-keyword">char</span> *)&amp;p, <span class="hljs-keyword">sizeof</span>(p));<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; p.m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<ul>
<li>文件输入流对象 可以通过read函数，以二进制方式读数据</li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>边缘计算与深度学习的融合</title>
    <url>/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>科技论文写作作业：文献翻译</p>
<span id="more"></span>
<p><strong>摘要</strong>-来自工厂和社区的无处不在的传感器和智能设备正在生成海量数据，不断增长的计算能力正在推动计算和服务的核心从云到网络的边缘。作为广泛改变人们生活的重要推动因素，从人脸识别到雄心勃勃的智能工厂和城市，基于人工智能(特别是深度学习，DL)的应用和服务的发展正在蓬勃发展。然而，由于效率和时延问题，当前的云计算服务架构阻碍了“随时随地为每个人、每个组织提供人工智能”的愿景。因此，利用数据源附近网络边缘的资源释放DL服务已成为一种理想的解决方案。因此，旨在通过边缘计算实现DL服务部署的边缘智能受到了广泛的关注。此外，DL作为人工智能的代表技术，可以集成到边缘计算框架中，构建智能边缘，实现动态、自适应的边缘维护和管理。对于互惠互利的边缘智能和智能边缘，本文进行了介绍和探讨：</p>
<p>1)两者的应用场景；2)实用的实现方法和使能技术，即定制边缘计算框架中的DL训练和推理；3)更加普适和细粒度智能的挑战和未来趋势。我们相信，通过整合分散在通信、网络和数字图书馆领域的信息，这项调查可以帮助读者了解使能技术之间的联系，同时促进关于边缘智能和智能边缘(即边缘数字图书馆)融合的进一步讨论。</p>
<p>索引术语-边缘计算、深度学习、无线通信、计算卸载、人工智能。</p>
<h1 id="一-导言">一 导言</h1>
<p>随着计算和存储设备的激增，从云数据中心(云)的服务器群集到个人计算机和智能手机，再到可穿戴设备和其他物联网(IoT)设备，我们现在正处于一个以信息为中心的时代，在这个时代，计算无处不在，计算服务从云向边缘溢出。根据思科白皮书[1]，到2020年，将有500亿台物联网设备连接到互联网。另一方面，思科估计，到2021年，云外每年将产生近850 ZB的数据，而全球数据中心流量仅为20.6 ZB[2]。这标志着大数据的数据源也在经历转型：从大规模的云数据中心向范围越来越广的边缘设备转变。然而，现有的云计算逐渐无法管理这些海量分布式计算能力并对其数据进行分析：1)大量的计算任务需要交付到云端进行处理[3]，这无疑对网络容量和云计算基础设施的计算能力构成了严峻的挑战；2)许多新型的应用，如协同自主驾驶，都有严格或严格的延迟要求，而这些要求是云计算很难满足的，因为它可能离用户很远[4]。</p>
<p>因此，边缘计算[5]、[6]成为一种有吸引力的替代方案，尤其是在尽可能靠近数据源和最终用户的情况下托管计算任务。当然，边缘计算和云计算并不是相互排斥的[7]、[8]。取而代之的是，边缘补充并延伸了云。与单纯云计算相比，边缘计算与云计算相结合的主要优势有三个方面：1)骨干网络缓解，分布式边缘计算节点无需与云交换相应数据，即可处理大量计算任务，减轻网络流量负荷；2)服务响应敏捷，边缘托管的服务可以显著降低数据传输时延，提高响应速度；3)强大的云备份能力，在边缘无法承受的情况下，云可以提供强大的处理能力和海量存储。</p>
<p>作为一种典型的、应用越来越广泛的新型应用形式[9]，各种基于深度学习的智能服务和应用改变了人们生活的方方面面，这得益于深度学习在计算机视觉(CV)和自然语言处理(NLP)领域的巨大优势[10]。这些成就不仅源于DL的发展，也与不断增长的数据和计算能力密不可分。然而，对于更广泛的应用场景，如智慧城市、车联网(IOVS)等，由于以下因素，提供的智能服务数量有限。</p>
<ul>
<li>成本：在云中训练和推断DL模型需要设备或用户将大量数据传输到云上，从而消耗大量网络带宽；</li>
<li>延迟：访问云服务的延迟一般不能得到保证，可能不足以满足协作自动驾驶等许多时间关键型应用的要求[11]；</li>
<li>可靠性：大多数云计算应用依赖无线通信和骨干网将用户连接到服务，但对于许多工业场景，即使在网络连接中断的情况下，智能服务也必须高度可靠；</li>
<li>隐私：DL所需的数据可能包含大量隐私信息，隐私问题对智能家居和城市等领域至关重要</li>
</ul>
<p>由于边缘比云更接近用户，边缘计算有望解决其中的许多问题。事实上，边缘计算正逐渐与人工智能(AI)相结合，在实现边缘智能和智能边缘方面互惠互利，如图1所示，边缘智能和智能边缘并不是相互独立的。边缘智能是目标，智能边缘中的DL服务也是边缘智能的一部分。反过来，智能边缘可以为边缘智能提供更高的服务吞吐量和资源利用率。</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407123006452.png"></p>
<p>具体地说，一方面，边缘智能有望将DL计算从云端尽可能推向边缘，从而实现各种分布式、低时延、可靠的智能服务。如图2所示，优点包括：1)DL服务部署在请求用户附近，云只在需要额外处理时才参与[12]，从而显著降低了将数据发送到云进行处理的时延和成本；2)由于DL服务所需的原始数据本地存储在边缘或用户设备本身，而不是云上，因此增强了对用户隐私的保护；3)分层计算架构提供了更可靠的DL计算；2)由于DL服务所需的原始数据本地存储在边缘或用户设备本身而不是云上，因此增强了对用户隐私的保护；3)分层计算架构提供了更可靠的DL计算；4)凭借更丰富的数据和应用场景，边缘计算可以推动DL的普及应用，实现“随时随地为每个人、每个组织提供AI”的前景[13]；5)多样化、有价值的DL服务可以拓宽边缘计算的商业价值，加速其部署和增长。</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407123019240.png"></p>
<p>另一方面，智能边缘的目标是将DL合并到边缘中，以实现动态、自适应的边缘维护和管理。随着通信技术的发展，网络接入方式越来越多样化。同时，边缘计算基础设施充当中间媒介，使无处不在的终端设备和云之间的连接更加可靠和持久[14]。因此，终端设备、边缘和云正逐渐融合为一个共享资源社区。然而，维护和管理如此庞大而复杂的整体架构(社区)，涉及无线通信、网络、计算、存储等，是一个重大挑战[15]。典型的网络优化方法依赖于固定的数学模型，但是很难对快速变化的边缘网络环境和系统进行精确建模。DL有望解决这个问题：当面对复杂繁琐的网络信息时，DL可以依靠其强大的学习和推理能力，从数据中提取有价值的信息并做出自适应决策，从而实现智能维护和管理。</p>
<p>因此，考虑到边缘智能和智能边缘，即Edge DL，在多个方面共同面临着一些相同的挑战和现实问题，我们确定了以下五项对Edge DL至关重要的技术：</p>
<ol type="1">
<li>基于Edge的DL应用，系统组织边缘计算和DL提供智能服务的技术框架；</li>
<li>Edge中的DL推理，侧重于DL在边缘计算体系结构中的实际部署和推理，以满足不同的需求，如精度和延迟；</li>
<li>DL的边缘计算，在网络体系结构、硬件和软件方面适应边缘计算平台以支持DL计算；</li>
<li>Edge的DL训练，在资源和隐私约束下训练分布式边缘设备的DL模型；</li>
<li>用于优化边缘的DL，用于维护和管理边缘计算网络(系统)的不同功能的DL的应用，例如边缘高速缓存[16]、计算卸载[17]。</li>
</ol>
<p>如图3所示，“边缘上的数字图书馆应用”和“优化边缘的数字图书馆”分别对应了边缘智能和智能边缘的理论目标。为了支持它们，首先需要通过密集的计算来训练各种DL模型。在这种情况下，对于利用边缘计算资源训练各种DL模型的相关工作，我们将其归类为“边缘DL训练”。其次，为了支持和加速Edge DL服务，我们重点研究了支持边缘计算框架和网络中DL模型的高效推理的各种技术，称为“Edge中的DL推理”。最后，我们将所有采用边缘计算框架和网络来更好地服务于Edge DL的技术归类为“面向DL的边缘计算”。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407123433129.png" alt="image-20210407123433129"><figcaption aria-hidden="true">image-20210407123433129</figcaption>
</figure>
<p>据我们所知，现有的与我们工作最相关的文章包括[18]-[21]。与我们更广泛地介绍Edge DL不同，[18]的重点是在EDGE智能中使用机器学习(而不是DL)来实现无线通信，即在网络边缘训练机器学习以改进无线通信。此外，关于DL推理和训练的讨论是[19]-[21]的主要贡献。与这些工作不同的是，本调查集中在以下几个方面：1)从边缘计算、跨组网、通信和计算四个方面综合考虑DL的部署问题；2)从五个使能器的角度考察DL和边缘计算融合的整体技术谱；3)指出DL和边缘计算是互惠互利的，认为只在边缘部署DL是不完整的。</p>
<p>这篇论文组织如下(如图4所示)。我们已经在本节中介绍了本次调查的背景和动机。接下来，我们将分别在第二节和第三节中提供与边缘计算和DL相关的一些基础知识。下面几节介绍了五种使能技术，即EDGE上的DL应用(第四节)、EDGE中的DL推理(第五节)、用于DL服务的EDGE计算(第六节)、EDGE上的DL训练(第七节)和用于优化EDGE的DL(第八节)。最后，我们在第九节中介绍了吸取的经验教训，并在第十节中讨论了开放的挑战，并在第十节中得出了结论。所有相关的缩略语都列在表I中。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407123549625.png" alt="image-20210407123549625"><figcaption aria-hidden="true">image-20210407123549625</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210408093341172.png" alt="image-20210408093341172"><figcaption aria-hidden="true">image-20210408093341172</figcaption>
</figure>
<h1 id="二-边缘计算基础知识">二 边缘计算基础知识</h1>
<p>边缘计算凭借其在减少数据传输、改善服务时延、缓解云计算压力等方面的优势，成为破解新兴技术瓶颈的重要解决方案。边缘计算架构将成为云的重要补充，甚至在某些场景中取代云的角色。更详细的信息可以在[8]、[22]、[23]中找到。</p>
<h2 id="a.边缘计算的范例">A.边缘计算的范例</h2>
<p>在边缘计算的发展中，已经出现了各种新技术，它们都是针对网络边缘工作的，原理相同，但侧重点不同。例如Cloudlet[24]、微数据中心(MDC)[25]、雾计算[26]、[27]和移动边缘计算<a href="即现在的多路访问边缘计算%5B28%5D">5</a>。然而，边缘计算界尚未就边缘计算的标准化定义、体系结构和协议达成共识[23]。我们用一个通用的术语“边缘计算”来描述这套新兴技术。在这一部分中，对不同的边缘计算概念进行了介绍和区分。</p>
<ol type="1">
<li><strong>Cloudlet和微数据中心：</strong>Cloudlet是移动计算和云计算相结合的网络架构元素。它代表了三层架构的中间层，即移动设备、微云和云。它的亮点在于：1)定义系统并创建支持低延迟边缘云计算的算法；2)在开放源码中实现相关功能，作为Open Stack云管理软件的扩展[24]。与Cloudlet类似，MDC[25]也是为补充云而设计的。我们的想法是将运行客户应用程序所需的所有计算、存储和网络设备打包在一个机箱中，作为独立的安全计算环境，用于需要较低延迟的应用程序或电池寿命或计算能力有限的终端设备。</li>
<li><strong>雾计算：</strong>雾计算的亮点之一是，它假设了一个拥有数十亿设备和大规模云数据中心的全分布式多层云计算架构[26]、[27]。虽然云和雾范例共享一组类似的服务，如计算、存储和联网，但雾的部署针对特定的地理区域。此外，FOG专为需要延迟更小的实时响应的应用而设计，例如交互式和物联网应用。与Cloudlet、MDC和MEC不同，雾计算更关注物联网。</li>
<li><strong>移动(多路访问)边缘计算(MEC)：</strong>移动边缘计算将计算能力和服务环境置于蜂窝网络的边缘[5]。它旨在提供更低的延迟、情景和位置感知以及更高的带宽。通过在蜂窝基站(BSS)上部署边缘服务器，用户可以灵活、快速地部署新的应用和服务。欧洲电信标准协会(ETSI)通过适应更多的无线通信技术，如Wi-Fi[28]，进一步将MEC的术语从移动边缘计算扩展到多路访问边缘计算。</li>
<li><strong>边缘计算术语的定义：</strong>在大多数文献中，边缘设备的定义和划分是模棱两可的(边缘节点和终端设备之间的边界不明确)。为此，如图1所示，我们将常见的边缘设备进一步划分为终端设备和边缘节点：“终端设备”(End Level)是指移动边缘设备(包括智能手机、智能车辆等)。和各种物联网设备，边缘节点(边缘层)包括小云、路侧单元(RSU)、雾节点、边缘服务器、MEC服务器等，即部署在网络边缘的服务器。</li>
<li><strong>协作型终端边缘-云计算：</strong>云计算是为处理DL等计算密集型任务而创建的，但无法保证从数据生成到传输到执行的全过程的延迟需求。此外，终端或边缘设备上的独立处理受到其计算能力、功耗和成本瓶颈的限制。因此，如图6所示，用于DL[12]的协作端-边-云计算正成为图6所示的一个重要趋势。在这种新的计算范例中，由终端设备生成的计算强度较低的计算任务可以直接在终端设备上执行或卸载到边缘，从而避免了将数据发送到云所造成的延迟。在这种新的计算模式中，由终端设备生成的计算强度较低的计算任务可以直接在终端设备上执行或卸载到边缘，从而避免了向云发送数据所造成的延迟。对于计算密集型任务，合理分割，分别调度到端、边、云执行，在保证结果[12]、[49]、[50]准确性的同时，减少了任务的执行延迟。这种协作模式的重点不仅在于成功完成任务，还在于实现设备能耗、服务器负载、传输和执行延迟之间的最佳平衡。</li>
</ol>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210408093407927.png" alt="image-20210408093407927"><figcaption aria-hidden="true">image-20210408093407927</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407124649729.png" alt="image-20210407124649729"><figcaption aria-hidden="true">image-20210407124649729</figcaption>
</figure>
<h2 id="b.用于边缘计算的硬件">B.用于边缘计算的硬件</h2>
<p>在本节中，我们将讨论边缘智能的潜在使能硬件，即针对终端设备和边缘节点的定制AI芯片和商品。此外，还介绍了用于DL的边缘云系统(如表II所示)。</p>
<ol type="1">
<li><p><strong>边缘计算的AI硬件：</strong>新兴的边缘AI硬件根据其技术架构可以分为三类：1)基于图形处理器(GPU)的硬件，其兼容性和性能较好，但一般能耗较高，如NVIDIA的基于图灵架构的GPU[37]；2)基于现场可编程门阵列(FPGA)的硬件[51]、[52]，其节能且需要较少的计算资源，但与GPU相比兼容性较差，编程能力有限；3)基于专用集成电路(ASIC)的硬件，如Google的TPU[38]和HiSilicon的Ascend系列[35]，通常采用在性能和功耗方面更稳定的定制设计。</p>
<p>由于智能手机代表着部署最广泛的边缘设备，智能手机芯片经历了快速发展，其能力已经扩展到AI计算的加速。举几个例子，高通首先将AI硬件加速[33]应用于骁龙，并发布了支持几乎所有主要DL框架的骁龙神经处理引擎(SNPE)SDK[53]。与高通相比，HiSilicon的600系列和900系列芯片[34]不依赖GPU。相反，它们加入了额外的神经处理单元(NPU)来实现向量和矩阵的快速计算，从而极大地提高了DL的效率。与HiSilicon和高通相比，联发科的Helio P60不仅使用了GPU，还引入了人工智能处理单元(APU)来进一步加速神经网络计算[36]。关于DL的大多数商用芯片的性能比较可以在[54]中找到，更多的EDGE器件的定制芯片将在后面详细讨论。</p></li>
<li><p><strong>可能用于边缘节点的集成产品：</strong>边缘节点应具有计算和缓存功能，并在终端设备附近提供高质量的网络连接和计算服务。与大多数终端设备相比，边缘节点具有更强大的计算能力来处理任务。另一方面，边缘节点可以比云更快地响应终端设备。因此，通过部署边缘节点来执行计算任务，可以在保证计算精度的同时加快任务处理速度。此外，边缘节点还具有缓存能力，可以通过缓存热门内容来提高响应时间。例如，包括华为的Atlas模块[32]和微软的Data Box Edge[29]在内的实用解决方案可以进行初步的DL推理，然后转移到云上进行进一步改进。</p></li>
<li><p><strong>边缘计算框架：</strong>边缘计算系统的解决方案正在蓬勃发展。对于配置复杂、资源需求密集的DL业务，拥有先进优秀微业务架构的边缘计算系统是未来的发展方向。目前，Kubernetes是一个主流的以容器为中心的系统，用于部署、维护和扩展云计算中的应用程序[55]。基于Kubernetes，华为开发了边缘计算解决方案“KubeEdge”[41]，用于云和边缘之间的联网、应用部署和元数据同步(Akraino Edge Stack[45]也支持)。“OpenEdge”[42]专注于屏蔽计算框架和简化应用程序生产。对于物联网，Azure IoT Edge[43]和EdgeX[44]旨在通过在跨平台物联网设备上部署和运行AI，为边缘提供云智能。</p></li>
</ol>
<h2 id="c.虚拟化边缘">C.虚拟化边缘</h2>
<p>虚拟化技术对边缘计算和DL集成的要求体现在以下几个方面：1)边缘计算资源有限。边缘计算不能像云那样为DL服务提供资源。虚拟化技术应在有限资源的约束下最大化资源利用率；2)DL服务严重依赖复杂的软件库。应仔细考虑这些软件库的版本和依赖关系。因此，迎合边缘DL服务的虚拟化应该能够隔离不同的服务。具体地说，单个服务的升级、关闭、崩溃和高资源消耗不应影响其他服务；3)服务响应速度对Edge DL至关重要。EDGE DL不仅需要边缘设备的计算能力，还需要边缘计算架构能够提供的敏捷服务响应。</p>
<p>边缘计算和数字图书馆的结合形成高性能的边缘数字图书馆服务，需要计算、网络和通信资源的协同集成，如图8所示，具体而言，计算虚拟化和网络虚拟化、管理技术的集成都是必要的。在本节中，我们将讨论适用于边缘的潜在虚拟化技术。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407125241592.png" alt="image-20210407125241592"><figcaption aria-hidden="true">image-20210407125241592</figcaption>
</figure>
<ol type="1">
<li><p><strong>虚拟化技术：</strong>目前主要有两种虚拟化策略：虚拟机(VM)和容器。一般来说，VM在隔离方面做得更好，而CONTAINER则更容易部署重复性任务[69]。借助操作系统级别的虚拟机虚拟化，虚拟机管理程序可将物理服务器拆分成一个或多个虚拟机，并可轻松管理每个虚拟机以隔离执行任务。此外，通过创建包括多个独立虚拟计算设备的可扩展系统，VM管理程序可以更有效地分配和使用空闲计算资源。</p>
<p>​ 与VM相比，容器虚拟化是打包、交付和编排软件基础设施服务和应用程序的更灵活的工具。边缘计算的容器虚拟化可以有效地减少高性能和高存储要求的工作负载执行时间，还可以以可扩展和简单的方式部署大量服务[70]。容器由单个文件组成，该文件包括具有所有依赖关系的应用和执行环境，这使得它能够实现有效的服务切换以应对用户移动性[71]。由于容器中的应用程序的执行不像在VM虚拟化中那样依赖于额外的虚拟化层，因此显著减少了执行应用程序所需的处理器消耗和内存量。</p></li>
<li><p><strong>网络虚拟化：</strong>传统的网络功能与特定的硬件相结合，不足以按需管理边缘计算网络。为了将网络设备功能整合到行业标准的服务器、交换机和存储中，网络功能虚拟化(NFV)通过将网络功能和服务从专用网络硬件中分离出来，使虚拟网络功能(VNF)能够在软件中运行。此外，Edge DL服务通常需要高带宽、低延迟和动态网络配置，而软件定义网络(SDN)可通过三项关键创新[72]实现服务的快速部署、网络可编程性和多租户支持：1)控制平面和数据平面分离；2)集中式可编程控制平面；3)标准化应用编程接口。凭借这些优势，它支持高度定制的网络策略，该策略非常适合Edge DL服务的高带宽、动态特性。</p>
<p>​ 网络虚拟化和边缘计算互惠互利。一方面，NFV/SDN可以增强边缘计算基础设施的互操作性。例如，在NFV/SDN的支持下，边缘节点可以高效地与云数据中心[73]进行协调和集成。另一方面，VNF和Edge DL服务都可以托管在轻量级NFV框架上(部署在边缘)[74]，从而最大限度地重用NFV的基础设施和基础设施管理[75]。</p></li>
<li><p><strong>网络切片：</strong>网络切片是一种灵活的虚拟网络体系结构形式，是对网络的高级抽象，允许在公共共享物理基础设施之上创建多个网络实例，每个实例都针对特定服务进行了优化。随着服务和QoS需求的日益多样化，由NFV/SDN实现的网络切片自然与分布式边缘计算范式兼容。为了满足这些要求，网络切片可以与边缘计算网络中的计算和通信资源的联合优化相协调[76]。图8描述了基于边缘虚拟化的网络切片示例。为了在网络切片中实现服务定制，虚拟化技术和SDN必须结合在一起，以支持边缘节点上的资源分配和服务提供的紧密协调，同时允许灵活的服务控制。通过网络切片，可以为边缘DL服务提供定制和优化的资源，这有助于减少接入网络造成的延迟，并支持对这些服务的密集访问[77]。</p></li>
</ol>
<h1 id="三-深度学习的基础">三 深度学习的基础</h1>
<p>关于CV、NLP和AI，DL在众多应用中被采用，并证实了其卓越的性能[78]。目前，云中需要部署大量的GPU、TPU或FPGA来处理DL服务请求。然而，由于边缘计算架构覆盖了大量的分布式边缘设备，因此可以利用它来更好地服务于DL。当然，与云计算相比，边缘设备的计算能力或功耗通常有限。因此，DL和边缘计算的结合并不简单，在设计和部署时需要全面了解DL模型和边缘计算功能。在这一部分中，我们简要介绍DL和相关技术术语，为讨论DL和边缘计算的集成铺平道路(更多细节可以在[79]中找到)。</p>
<h2 id="a.深度学习中的神经网络">A.深度学习中的神经网络</h2>
<p>DL模型由各种类型的深度神经网络(DNNs)组成[79]。下面从基本结构和功能方面介绍DNN的基本原理。</p>
<ol type="1">
<li><strong>全连接神经网络(FCNN)：</strong>FCNN的每一层(即多层感知器(MLP))的输出前馈到下一层，如图7(A)所示。在相邻的FCNN层之间，神经元(细胞)的输出(输入或隐藏细胞)直接传递给属于下一层的神经元并由其激活[80]。FCNN可以用于特征提取和函数逼近，但是复杂度高，性能一般，收敛速度慢。</li>
<li><strong>自动编码器(AE)：</strong>自动编码器(AE)，如图7(B)所示，实际上是一个由两个NN组成的堆栈，它们以无监督的学习方式将输入复制到其输出。第一个神经网络学习输入(编码)的代表性特征。第二个神经网络将这些特征作为输入，并在匹配输入输出单元恢复原始输入的近似值，用于从输入到输出收敛到恒等式函数，作为最终输出(解码)。由于AE能够学习输入数据的低维有用特征来恢复输入数据，因此它通常用于分类和存储高维数据[81]</li>
<li><strong>卷积神经网络(CNN)：</strong>通过使用汇集操作和一组不同的移动过滤器，CNN捕获相邻数据片段之间的相关性，然后生成输入数据的连续更高级别的抽象，如图7(C)所示。与FCNN相比，CNN可以在降低模型复杂度的同时提取特征，从而降低了过度拟合的风险[82]。这些特点使得CNN在图像处理方面取得了显著的性能，在处理类似于图像的结构数据时也很有用。</li>
</ol>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407140854590.png" alt="image-20210407140854590"><figcaption aria-hidden="true">image-20210407140854590</figcaption>
</figure>
<ol start="4" type="1">
<li><p><strong>生成性对抗性网络(GAN)：</strong>GAN起源于博弈论。如图7(D)所示，GaN由发生器和鉴别器组成。生成器的目标是通过故意在反馈输入单元引入反馈来尽可能多地了解真实数据分布，而鉴别器则是正确地确定输入数据是来自真实数据还是来自生成器。这两个参与者需要不断优化他们在对抗性过程中产生和区分的能力，直到找到纳什均衡[83]。因此，训练有素的生成器可以根据从真实信息中学习到的特征来编造无法区分的信息。</p></li>
<li><p><strong>递归神经网络(RNN)：</strong>递归神经网络是为处理时序数据而设计的。如图7(E)所示，RNN中的每个神经元不仅从上层接收信息，而且还从它自己的前一个通道接收信息[10]。通常，RNN是预测未来信息或恢复序列数据缺失部分的自然选择。然而，RNN的一个严重问题是梯度爆炸。如图7(F)所示，LSTM通过添加栅极结构和定义明确的存储单元来改进RNN，可以通过控制(禁止或允许)信息流来克服该问题[84]。</p></li>
<li><p>迁移学习(TL)：迁移学习可以将知识从源域转移到目标域，如图7(G)所示，从而在目标域实现更好的学习性能[85]。通过使用TL，可以将从大量计算资源中学习到的现有知识转移到新的场景中，从而加快了训练过程，降低了模型开发成本。最近，出现了一种新的翻译形式，即知识蒸馏(Knowledge Distilation，KD)[86]。如图7(H)所示，KD可以从训练有素的模型(教师)中提取隐含知识，其推理具有良好的性能，但需要较高的开销。然后，通过设计目标DL模型的结构和目标函数，将知识“传递”到一个较小的DL模型(学生)，从而使显著减少(剪枝或量化)的目标DL模型获得尽可能高的性能。</p></li>
</ol>
<h2 id="b.深度强化学习drl">B.深度强化学习(DRL)</h2>
<p>如图9所示，RL的目标是使环境中的Agent能够在当前状态下采取最佳行动以最大化长期收益，其中Agent在环境中的行动和状态之间的交互被建模为马尔可夫决策过程(MDP)。DRL是DL和RL的结合，但它更侧重于RL，旨在解决决策问题。DL的作用是利用DNN强大的表示能力来拟合值函数或直接策略来解决状态-动作空间或连续状态-动作空间的爆炸问题。由于这些特点，DRL成为机器人、金融、推荐系统、无线通信等领域的强大解决方案。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407140617800.png" alt="image-20210407140617800"><figcaption aria-hidden="true">image-20210407140617800</figcaption>
</figure>
<ol type="1">
<li><strong>基于值的DRL：</strong>作为基于值的DRL的代表，Deep Q-Learning(DQL)使用DNN来拟合动作值，成功地将高维输入数据映射到动作[88]。为了保证训练的稳定收敛，采用经验回放的方法打破过渡信息之间的相关性，并建立单独的目标网络来抑制不稳定性。此外，双重深度Q-学习(Double Deep Q-Learning，Double-DQL)可以处理DQL通常高估动作值的问题[89]，而决斗深度Q-学习(Dueling Deep Q-Learning，Dueling-DQL)[90]可以学习哪些状态是有价值的(或不有价值的)，而不必了解每个状态下每个动作的效果。</li>
<li><strong>基于策略梯度的DRL：</strong>策略梯度是另一种常用的策略优化方法，如深度确定性策略梯度(DDPG)[91]、异步优势执行者-批评者(A3C)[92]、近似策略优化(PPO)[93]等，它通过不断计算策略期望回报的梯度来更新策略参数，最终收敛到最优策略[94]。因此，在解决DRL问题时，可以使用DNN对策略进行参数化，然后用策略梯度法对其进行优化。此外，在基于策略梯度的DRL中，广泛采用了Actor-Critic(AC)框架，其中策略DNN用于更新策略，对应于Actor；值DNN用于逼近状态动作对的值函数，并提供对应于Critic的梯度信息。</li>
</ol>
<h2 id="c.分布式dl训练">C.分布式DL训练</h2>
<p>目前，集中训练DL模型耗费了大量的时间和计算资源，阻碍了算法性能的进一步提高。尽管如此，通过充分利用并行服务器，分布式培训可以简化培训过程。有两种常见的方法来执行分布式训练，即数据并行和模型并行[95]-[98]，如图10所示。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407130048352.png" alt="image-20210407130048352"><figcaption aria-hidden="true">image-20210407130048352</figcaption>
</figure>
<p>模型并行首先将一个大的DL模型分成多个部分，然后提供数据样本用于并行训练这些分割后的模型。这样不仅可以提高训练速度，而且可以处理模型大于设备内存的情况。训练一个大型的DL模型通常需要大量的计算资源，甚至需要数千个CPU来训练一个大规模的DL模型。为了解决这个问题，可以利用分布式GPU进行模型并行训练[99]。数据并行是指将数据分成多个分区，然后将模型的副本分别与各自分配的数据样本并行训练。通过这种方式，可以提高模型训练的训练效率[100]。</p>
<p>巧合的是，大量终端设备、边缘节点和云数据中心分散在一起，并设想通过边缘计算网络进行连接。一旦DL培训跳出云，这些分布式设备可能成为强大的贡献者。</p>
<h2 id="d.边缘的潜在dl库">D.边缘的潜在DL库</h2>
<p>DL模型的开发和部署依赖于各种DL库的支持。但是，不同的DL库有各自的应用场景。要在边缘部署DL，需要高效的轻量级DL库。表III列出了可能支持未来边缘智能的DL框架的功能(不包括边缘设备不可用的库，如Theano[101])。</p>
<h1 id="四-边缘的深度学习应用">四 边缘的深度学习应用</h1>
<p>一般情况下，DL服务一般部署在云数据中心(云)来处理请求，因为大多数DL模型比较复杂，很难在资源受限的设备侧计算其推理结果。然而，这种端-云架构无法满足实时分析、智能制造等实时下行服务的需求，因此，在边缘部署下行应用可以拓宽下行的应用场景，尤其是在低延迟特性方面。下面，我们将介绍EDGE DL应用，并强调其相对于没有边缘计算的比较体系结构的优势。</p>
<h2 id="a.实时视频分析">A.实时视频分析</h2>
<p>实时视频分析在自动驾驶、VR与增强现实(AR)、智能监控等领域都具有重要的应用价值。一般情况下，应用DL进行实时视频分析需要较高的计算和存储资源。不幸的是，在云中执行这些任务通常会导致高带宽消耗、意外延迟和可靠性问题。随着边缘计算的发展，这些问题往往通过将视频分析移到数据源(即终端设备或边缘节点)附近作为云的补充来解决。在本节中，如图11所示，我们将相关工作总结为混合层次架构，该架构分为三个级别：端、边和云。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210408093434237.png" alt="image-20210408093434237"><figcaption aria-hidden="true">image-20210408093434237</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407131730682.png" alt="image-20210407131730682"><figcaption aria-hidden="true">image-20210407131730682</figcaption>
</figure>
<ol type="1">
<li><p><strong>末级：</strong>在末级，智能手机和监控摄像头等视频捕获设备负责视频捕获、媒体数据压缩[102]、图像预处理和图像分割[103]。通过与这些参与设备协调，当与域约束深度模型[104]一起使用时，协作性地训练域感知适配模型可以导致更好的对象识别准确性。此外，为了适当地将DL计算卸载到终端设备、边缘节点或云，终端设备应该综合考虑视频压缩和关键指标(例如，网络条件、数据使用、电池消耗、处理延迟、帧率和分析准确性)之间的权衡，从而确定最佳卸载策略[102]。</p>
<p>​ 如果在末级独立执行各种DL任务，则启用并行分析需要支持高效多租户DL的解决方案。通过模型剪枝和恢复方案，NestDNN[105]将DL模型转换为一组子代模型，其中资源需求较少的子代模型与需要更多资源的子代模型共享其模型参数，使其自身嵌套在需要更多资源的子代模型中，而不占用额外的存储空间。通过这种方式，多容量模型以紧凑的内存空间提供了可变的资源精度折衷，从而确保了终端级别的高效多租户DL。</p></li>
<li><p><strong>边缘层：</strong>众多分布在边缘层的边缘节点通常相互协作，提供更好的服务。例如，LA VEA[106]将边缘节点连接到相同的接入点或BS以及终端设备，从而确保服务可以像互联网接入一样无处不在。此外，对DL模型进行边缘压缩可以提高整体性能。通过减少CNN层中不必要的滤波器，可以在保证分析性能的同时大大降低边缘层的资源消耗[107]。此外，为了优化性能和效率，[108]提出了一个边缘服务框架EdgeEye，它实现了基于DL的实时视频分析功能的高层抽象。为了充分利用边缘的绑定功能，VideoEdge[109]实施了端-边-云分层架构，以帮助实现与分析任务相关的负载平衡，同时保持较高的分析精度。</p></li>
<li><p><strong>云级：</strong>在云级，云负责边缘层之间DL模型的集成和边缘节点上分布式DL模型的参数更新[102]。由于边缘节点上的分布式模型训练性能可能会因其局部知识而受到严重影响，因此云需要整合不同训练有素的DL模型来实现全局知识。当边缘无法自信地提供服务时(例如，以低置信度检测对象)，云可以利用其强大的计算能力和全局知识进行进一步处理，并协助边缘节点更新DL模型。</p></li>
</ol>
<h2 id="b.自主车联网iovs">B.自主车联网(IoVs)</h2>
<p>可以预见，车辆可以连接在交通系统中以提高安全性、提高效率、减少事故和减少交通拥堵[110]。有许多信息和通信技术，如网络、缓存、边缘计算等，都可以用来促进IoVs，尽管通常是分开研究的。一方面，边缘计算为车辆提供低延迟、高速通信和快速响应服务，使自动驾驶成为可能。另一方面，DL技术在各种智能车辆应用中也非常重要。此外，他们还有望优化复杂的IoVs系统。</p>
<p>[110]文中提出了一个集成这些技术的框架。该集成框架实现了网络、高速缓存和计算资源的动态协调，以满足不同车辆应用的需求[110]。由于该系统涉及多维控制，本文首先采用基于动态链接库的方法来求解优化问题，以提高系统的整体性能。类似地，在[111]中也使用DRL来获得车辆边缘计算中的最优任务卸载策略。此外，可以利用车辆到车辆(V2V)通信技术来进一步连接车辆，无论是作为边缘节点还是作为由基于DRL的控制策略管理的终端设备[112]。</p>
<h2 id="c.智能制造">C.智能制造</h2>
<p>智能制造时代最重要的两个原则是自动化和数据分析，前者是主要目标，后者是最有用的工具之一[113]。为了遵循这些原则，智能制造应该首先解决响应延迟、风险控制和隐私保护问题，因此需要DL和边缘计算。在智能工厂中，边缘计算有利于将云的计算资源、网络带宽和存储容量扩展到物联网边缘，实现制造和生产过程中的资源调度和数据处理[114]。对于自主制造检测，DeepIns[113]使用DL和边缘计算分别保证性能和处理延迟。该系统的主要思想是将用于检测的DL模型进行划分，分别部署在端层、边缘层和云层，以提高检测效率。</p>
<p>尽管如此，随着物联网边缘设备的指数级增长，1)如何远程管理不断发展的DL模型，以及2)如何为它们持续评估这些模型是必要的。[115]开发了一个框架来应对这些挑战，以支持智能制造过程中的复杂事件学习，从而促进物联网边缘设备上实时应用的开发。此外，还应考虑物联网边缘设备[116]的功耗、能效和内存占用限制。因此，可以集成缓存、与异构物联网设备的通信以及计算卸载[117]，以打破资源瓶颈。</p>
<h2 id="d.智能家居和城市">D.智能家居和城市</h2>
<p>物联网的普及将给家庭生活带来越来越多的智能应用，如智能照明控制系统、智能电视、智能空调等。但与此同时，智能家居需要在角落、楼层和墙壁部署大量无线物联网传感器和控制器。为了保护敏感的家庭数据，智能家居系统的数据处理必须依靠边缘计算。与[118]、[119]中的使用案例一样，部署边缘计算来优化室内定位系统和家庭入侵监控，以便它们可以获得比使用云计算更低的延迟以及更高的准确性。此外，DL和边缘计算的结合可以使这些智能服务变得更加多样化和强大。例如，它赋予机器人动态视觉服务的能力[120]，并使高效的音乐认知系统[121]成为可能。</p>
<p>如果将智能家居扩大到社区或城市，公共安全、健康数据、公共设施、交通等领域都可以受益。在智慧城市应用边缘计算的初衷，更多是出于成本和效率的考虑。城市中地理分布的数据源的自然特性要求基于边缘计算的范例来提供位置感知和延迟敏感的监控和智能控制。例如，[122]中的分层分布式边缘计算架构可以支持未来智慧城市中海量基础设施组件和服务的集成。该架构不仅可以支持终端设备上的延迟敏感型应用，还可以在边缘节点上高效地执行稍微容忍延迟的任务，而负责深度分析的大规模DL模型则托管在云上。此外，DL还可用于协调和调度基础设施，以实现城市区域(例如，在校园[123]内)或整个城市之间的整体负载平衡和最佳资源利用。</p>
<h1 id="五-edge中的深度学习推理">五 EDGE中的深度学习推理</h1>
<p>为了进一步提高精度，DNN的研究越来越深入，需要更大规模的数据集。通过这种方式，引入了巨大的计算成本。当然，DL机型的出色表现离不开高水平硬件的支持，在资源有限的情况下很难在边缘部署。因此，大规模的DL模型通常部署在云中，而终端设备只是将输入数据发送到云中，然后等待DL推理结果。然而，仅限云的推断限制了DL服务的无处不在的部署。具体地说，它不能保证实时业务的时延要求，例如对时延要求严格的实时检测。此外，对于重要的数据源，应该解决数据安全和隐私保护问题。为了解决这些问题，DL服务倾向于求助于边缘计算。因此，DL模型应该进一步定制，以适应资源受限的边缘，同时仔细考虑推理精度和执行延迟之间的权衡。</p>
<h2 id="a.边界上dl模型的优化">A.边界上DL模型的优化</h2>
<p>DL任务通常是计算密集型的，并且需要大量内存。但在边缘，没有足够的资源来支持原始的大规模DL模型。优化DL模型并量化其权重可以降低资源成本。事实上，模型冗余在DNN[124]、[125]中很常见，可以用来使模型优化成为可能。最重要的挑战是如何确保优化后的模型精度不会有明显损失。换句话说，优化方法应该转换或重新设计DL模型，并使其适合边缘设备，同时尽可能减少模型性能的损失。在这一部分中，讨论了不同场景下的优化方法：1)针对资源相对充足的边缘节点的通用优化方法；2)针对资源预算紧张的终端设备的细粒度优化方法。</p>
<ol type="1">
<li><strong>模型优化的一般方法：</strong>一方面，在计算开销几乎不变的情况下增加DL模型的深度和宽度是优化的一个方向，例如CNN的初始网络[126]和深度剩余网络[127]。另一方面，对于更一般的神经网络结构，现有的优化方法可以分为四类[128]：1)参数剪枝和共享[129]、[130]，也包括权重量化[131]-[133]；2)低阶分解[124]；3)转移/紧凑卷积滤波器[107]、[134]、[135]；4)知识提炼[136]。这些方法可以应用于不同类型的DNN，也可以组合成优化边缘的复杂DL模型。</li>
<li><strong>边缘设备的型号优化：</strong>除了有限的计算和内存占用外，还需要考虑网络带宽和功耗等其他因素。在本节中，我们将区分和讨论在边缘设备上运行DL的努力。</li>
</ol>
<ul>
<li><strong>模型输入：</strong>每个应用场景都有特定的优化空间。在目标检测方面，FFSVA使用两个前置流专用滤波器和一个小的全功能微YOLO模型来过滤掉巨大但非目标对象帧[137]。为了以低成本在线调整输入视频流的配置(如帧分辨率和采样率)，Chameleon[138]通过利用视频输入的时间和空间相关性大大节省了搜索最佳模型配置的成本，并允许成本随时间和跨多个视频源摊销。此外，如图12所示，缩小分类器的搜索空间[139]和动态感兴趣区域(RoI)编码[140]以聚焦于视频帧中的目标对象可以进一步降低带宽消耗和数据传输延迟。虽然这种方法可以在不改变DL模型结构的情况下显著压缩模型输入的大小，从而减少计算开销，但需要深入了解相关的应用场景，才能挖掘出潜在的优化空间。</li>
</ul>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407131630393.png" alt="image-20210407131630393"><figcaption aria-hidden="true">image-20210407131630393</figcaption>
</figure>
<ul>
<li><strong>模型结构：</strong>不关注具体应用，关注广泛使用的DNN结构也是可行的。例如，逐点分组卷积和信道混洗[142]、并行卷积和合并计算[143]、沿深度可分离卷积[107]可以在保持精度的同时大大降低计算成本。Noscope[144]利用两种类型的模型而不是标准模型(如YOLO[9])：专用模型(放弃标准模型的通用性以换取更快的推理)和差异检测器(用于识别输入数据之间的时间差异)。在对每个模型的模型架构和阈值执行基于成本的高效优化后，noscope可以通过级联这些模型来最大化DL服务的吞吐量。此外，如图13所示，参数剪枝也可以自适应地应用于模型结构优化[145]-[147]。此外，如果跨越算法、软件和硬件之间的边界，优化可以更高效。具体地说，通用硬件还不能适应模型优化带来的不规则计算模式。因此，硬件架构应设计为直接为优化模型工作[145]。</li>
</ul>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407131612169.png" alt="image-20210407131612169"><figcaption aria-hidden="true">image-20210407131612169</figcaption>
</figure>
<ul>
<li><strong>模型选择：</strong>对于不同的DL模型，从边缘可用的DL模型中选择一个最好的模型需要权衡精度和推理时间。[148]在文中，作者使用KNN自动构造一个预测器，该预测器由按顺序排列的DL模型组成。然后，模型选择可以由该预测器以及模型输入的一组自动调谐特征来确定。此外，结合不同的压缩技术(如模型剪枝)，可以推导出性能和资源需求之间权衡不同的多个压缩DL模型。AdaDeep[149]探索了性能和资源约束之间的理想平衡，并基于DRL，根据当前可用的资源自动选择各种压缩技术(如模型剪枝)来形成压缩模型，从而充分利用了它们的优势。</li>
<li><strong>模型框架：</strong>考虑到DL的高内存占用和计算需求，在边缘设备上运行它们需要专家量身定制的软硬件框架。如果软件框架1)提供优化的软件内核的库以实现DL[150]的部署；2)通过寻找最小数量的非冗余隐藏元素来自动将DL模型压缩成较小的密集矩阵[151]；3)对所有常用的DL结构执行量化和编码[146]、[151]、[152]；4)将DL模型专门用于上下文并在多个同时执行的DL模型之间共享资源[152]，则该软件框架是有价值的。关于硬件，与动态RAM(DRAM)相比，在静态随机存取存储器(SRAM)上运行DL模型实现了更好的节能[146]。因此，如果底层硬件直接支持在片上SRAM上运行优化的DL模型[153]，则DL性能可以受益。</li>
</ul>
<h2 id="b.dl模型的分段">B.DL模型的分段</h2>
<p>在[12]中，对目前最先进的DL机型在云设备和边缘设备上的时延和功耗进行了评估，发现上传数据到云端是当前DL服务方式的瓶颈(导致传输开销大)。划分DL模型并进行分布式计算可以获得更好的端到端延迟性能和能量效率。另外，通过将部分DL任务从云端推送到边缘，可以提高云端的吞吐量。因此，DL模型可以被分割成多个分区，然后被分配给1)终端设备[154]上的异构本地处理器(例如，GPU、CPU)，2)分布式边缘节点[155]、[156]，或3)协作“端-边-云”架构[12]、[49]、[157]、[158]。</p>
<p>对DL模型进行水平分割(即沿末端、边缘和云)是最常用的分割方法。挑战在于如何智能地选择分割点。如图14所示，确定分割点的一般过程可分为三个步骤[12]、[157]：1)测量和建模不同DNN层的资源成本和层间中间数据的大小；2)通过特定的层配置和网络带宽预测总成本；3)根据延迟、能量需求等从候选分割点中选择最佳分割点。另一种模型分割是专门针对CNN的垂直分割[156]。与水平划分不同的是，垂直划分将层进行融合，并以网格的方式垂直划分层，从而将CNN层划分为可独立分布的计算任务。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407131435737.png" alt="image-20210407131435737"><figcaption aria-hidden="true">image-20210407131435737</figcaption>
</figure>
<h2 id="c.提前退出推理eeoi">C.提前退出推理(EEoI)</h2>
<p>为了在模型精度和处理时延之间达到最佳折衷，可以为每个DL服务维护具有不同模型性能和资源成本的多个DL模型。然后，通过智能地选择最佳模型，实现所需的自适应推理[159]。尽管如此，这个想法还可以通过出现的EEOI[160]得到进一步改进。DNN中附加层的性能提高是以增加前馈推理的延迟和能量消耗为代价的。随着DNN规模的扩大和深度的加深，这些成本将使边缘设备无法运行实时、节能的DL应用。通过附加的侧枝分类器，对于部分样本，EEoI允许推理在置信度较高的情况下通过这些分支提前退出。对于较难的样本，EEoI将使用更多或所有DNN层来提供最佳预测。</p>
<p>如图15所示，通过利用EEoI，可以在边缘设备处启用使用DL模型的浅部分的快速和本地化推理。通过这种方法，边缘设备上的浅模型可以快速地进行初始特征提取，并且如果有把握，可以直接给出推断结果。否则，部署在云中的额外的大型DL模型执行进一步的处理和最终推理。与直接将DL计算卸载到云中相比，该方法具有更低的通信成本，并且可以获得比边缘设备上的剪枝或量化DL模型更高的推理精度[113]，[161]。此外，由于只将即时功能而不是原始数据发送到云，因此提供了更好的隐私保护。然而，EEoI不应被视为独立于模型优化(第V-A2节)和分段(第V-B节)。在终端、边缘和云上的分布式DL的设想应该考虑它们的协作，例如，开发用于自适应DNN划分和EEoI的协作和按需协同推理框架[162]。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407131417473.png" alt="image-20210407131417473"><figcaption aria-hidden="true">image-20210407131417473</figcaption>
</figure>
<h2 id="d.共享dl计算">D.共享DL计算</h2>
<p>来自边缘节点覆盖范围内的附近用户的请求可以表现出时空局部性[163]。例如，同一区域内的用户可能请求针对同一感兴趣对象的识别任务，并且这可能引入DL推理的冗余计算。在这种情况下，基于对应用的离线分析和对网络状况的在线估计，Cachier[163]建议在边缘节点中缓存用于识别应用的相关DL模型，并通过动态调整其缓存大小来最小化预期的端到端延迟。基于第一人称视频中连续帧之间的相似性，DeepMon[164]和DeepCache[165]利用CNN层的内部处理结构，重用前一帧的中间结果来计算当前帧，即在CNN层内缓存内部处理的数据，以减少连续视觉应用的处理延迟。</p>
<p>然而，要继续进行有效的缓存和结果重用，必须解决对可重用结果的准确查找，即缓存框架必须系统地容忍这些变化并评估关键的相似性。DeepCache[165]执行缓存键查找来解决此问题。具体地说，它将每个视频帧划分为细粒度区域，并在视频运动启发式的特定模式中从缓存的帧中搜索相似区域。对于同样的挑战，F oggyCache[166]首先将异构的原始输入数据嵌入到具有通用表示的特征向量中。然后，提出了一种用于索引高维数据的自适应局部敏感散列(A-LSH)，它是LSH的一种变体，用于索引这些向量以实现快速准确的查找。最后，在KNN的基础上实现了同质化的KNN，利用缓存的值剔除孤立点，确保初始选择的k条记录中的优势簇，以确定A-LSH查找到的记录的重用输出。</p>
<p>与共享推理结果不同，主流[167]提出在并发视频处理应用程序之间自适应地编排DNN词干共享(几个专门的DL模型的共同部分)。通过利用从公共DNN主干通过TL训练的应用程序之间的专用模型的计算共享，可以显著减少每帧的聚合计算时间。尽管更专业的DL模型意味着更高的模型精度和更少的共享DNN词干，但随着使用不太专业的DL模型，模型精度会缓慢下降(除非专门的模型比例非常小)。因此，该特性使得DL模型的大部分可以在主流中以低精度损失共享。</p>
<h1 id="六-深度学习的边缘计算">六 深度学习的边缘计算</h1>
<p>数字图书馆服务的广泛部署，尤其是移动数字图书馆，需要边缘计算的支持。这种支持不仅仅是在网络架构层面，边缘硬件和软件的设计、调整和优化也同样重要。具体地说，1)定制EDGE硬件和相应的优化软件框架和库可以帮助DL更高效地执行；2)边缘计算架构可以实现DL计算的减负；3)设计良好的边缘计算框架可以更好地维护边缘上运行的DL服务；4)公平的Edge DL性能评估平台有助于进一步发展上述实现。</p>
<h2 id="a.用于dl的边缘硬件">A.用于DL的边缘硬件</h2>
<ol type="1">
<li><p><strong>移动CPU和GPU：</strong>如果在靠近活动地点的轻量级边缘设备(如手机、可穿戴设备和监控摄像头)上直接启用DL应用，则DL应用更有价值。低功耗物联网边缘设备可用于进行轻量级DL计算，从而避免与云通信，但仍需要面对有限的计算资源、内存占用和能源消耗。为了突破这些瓶颈，在[143]中，作者专注于ARM CortexM微控制器，并开发了CMSIS-NN，这是一组高效的NN内核。通过CMSIS-NN，可以最小化网络在ARM Cortex-M处理器核上的存储空间，从而可以将DL模型适配到物联网设备中，同时获得正常的性能和能效。</p>
<p>​ 针对在移动GPU上运行CNN层的瓶颈问题，DeepMon[164]对CNN层中使用的矩阵进行了分解，以加速高维矩阵之间的乘法运算。通过这种方式，CNN层中的高维矩阵运算(特别是乘法)可以在移动GPU中使用，并且可以加速。有鉴于此，已经部署在EDGE设备中的各种移动GPU可以通过特定的DL型号进行潜在的开发，并在启用EDGE DL方面发挥更重要的作用。</p>
<p>​ 除了DL推理[143]、[164]之外，在[168]中还讨论了影响移动CPU和GPU上DL训练性能的重要因素。由于常用的DL模型(例如VGG[169])对于主流边缘设备的存储器大小来说太大，因此采用相对较小的指导者网络[170]来评估DL训练。评估结果表明，DL模型的大小是影响训练性能的关键因素，移动CPU和GPU的有效融合对于加快训练过程具有重要意义。</p></li>
<li><p><strong>基于FPGA的解决方案：</strong>虽然GPU解决方案在云中被广泛用于DL训练和推理，但受边缘严格的功率和成本预算的限制，这些解决方案可能无法使用。此外，边缘节点应该能够同时服务于多个DL计算请求，这使得简单地使用轻量级CPU和GPU是不现实的。为此，本文研究了基于现场可编程门阵列(FPGA)的EDGE硬件实现EDGE DL的可行性。</p>
<p>​ 基于FPGA的边缘设备可以通过任意大小的卷积和可重新配置的池实现CNN加速[143]，在基于RNN的语音识别应用方面，它们比最先进的CPU和GPU实现更快[145]，同时实现更高的能效。在[52]中，开发了一个基于FPGA的EDGE平台的设计和设置，以允许DL计算从移动设备上卸载。在实现基于FPGA的边缘平台时，将无线路由器和FPGA板结合在一起。基于FPGA的EDGE平台以典型的视觉应用对该初步系统进行了测试，结果表明，与基于GPU(或CPU)的EDGE平台相比，基于FPGA的EDGE平台在能耗和硬件成本方面都具有优势。</p>
<p>​ 然而，如表IV所示，FPGA和GPU/CPU哪一个更适合于边缘计算仍有待确定。文献[171]中进行了详细的实验，以考察FPGA相对于GPU的优势：1)能够提供对工作负载不敏感的吞吐量；2)保证高并发DL计算的一致高性能；3)更高的能效。然而，FPGA的缺点在于在FPGA上开发高效的DL算法对大多数程序员来说并不熟悉。虽然像Xilinx SDSoC这样的工具可以大大降低难度[52]，但至少目前，要将针对GPU编程的最先进的DL模型移植到FPGA平台上，还需要做更多的工作。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407132149249.png" alt="image-20210407132149249"><figcaption aria-hidden="true">image-20210407132149249</figcaption>
</figure></li>
</ol>
<h2 id="b.edge-dl的通信和计算方式">B.Edge DL的通信和计算方式</h2>
<p>虽然设备上的DL计算(如第五节所示)可以满足轻量级DL服务的需求。然而，独立的终端设备仍然无法承担密集的DL计算任务。边缘计算的概念可以通过将DL计算从终端设备卸载到边缘或(和)云来潜在地解决这一困境。伴随着边缘架构的出现，以DL为中心的边缘节点可以成为云计算基础设施处理海量DL任务的重要延伸。在本节中，我们对Edge DL计算的四种模式进行分类，如图16所示。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210408093616099.png" alt="image-20210408093616099"><figcaption aria-hidden="true">image-20210408093616099</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407132318809.png" alt="image-20210407132318809"><figcaption aria-hidden="true">image-20210407132318809</figcaption>
</figure>
<ol type="1">
<li><p><strong>整体卸载：</strong>DL计算卸载的最自然模式类似于现有的“端-云”计算，即终端设备将其计算请求发送到云以获取DL推理结果(如图16(A)所示)。这种卸载方法直接从DL任务分解和资源优化组合问题中解脱出来，可能会带来额外的计算代价和调度延迟，因此实现简单。[172]在中，建议的分布式基础设施DeepDecision将功能强大的边缘节点与功能较弱的终端设备捆绑在一起。在DeepDecision中，DL推理可以在末端或边缘执行，具体取决于推理准确性、推理延迟、DL模型大小、电池电量和网络条件之间的权衡。对于每个DL任务，终端设备决定是本地处理还是将其卸载到边缘节点。</p>
<p>​ 此外，在卸载问题中，边缘节点之间的负载优化不应被忽视，因为与云相比，边缘节点通常是资源受限的。为了满足在有限的边缘资源下完成DL任务的时延和能量需求，可以采用在边缘提供不同模型大小和性能的DL模型来完成一种任务。因此，可以在边缘节点上部署多个单独承担不同DL模型的虚拟机或容器来处理DL请求。具体地说，当复杂度较低的DL模型能够满足要求时，选择它作为服务模型。例如，通过优化虚拟机的工作负载分配权重和计算能力，MASM[173]可以在保证DL推理准确性的同时降低能量开销和延迟。</p></li>
<li><p><strong>部分卸载：</strong>将DL任务部分卸载到边缘也是可行的(如图16(B)所示)。可以开发卸载系统以实现DL任务的在线细粒度划分，并确定如何将这些划分的任务分配给终端设备和边缘节点。如文献[178]所示，MAUI能够自适应地划分通用计算机程序，在网络约束下，通过优化任务分配策略可以节省数量级的能量。更重要的是，该解决方案可以在运行时分解整个程序，而不是在程序部署之前手动划分程序员。</p>
<p>​ 此外，特别是对于DL计算，DeepWear[174]将DL模型抽象为有向无环图(DAG)，其中每个节点代表一个层，每条边代表那些层之间的数据流。为了有效地确定部分卸载决策，DeepWear首先通过仅保留计算密集型节点，然后对重复的子DAG进行分组来修剪DAG。以这种方式，可以将复杂的DAG转换成线性的且简单得多的DAG，从而实现用于选择要卸载的最佳分区的线性复杂性解决方案。</p>
<p>​ 然而，将DL模型的一部分上传到边缘节点仍可能严重延迟卸载DL计算的整个过程。为了应对这一挑战，在[175]中提出了一种增量式卸载系统IONN。与打包整个DL模型进行上传不同，IONN将准备上传的DL模型分成多个分区，依次上传到边缘节点。接收到分区模型的边缘节点在每个分区模型到达时递增地构建DL模型，同时甚至能够在上传整个DL模型之前执行卸载的部分DL计算。因此，关键在于确定DL模型的最佳分区和上传顺序。具体地说，一方面，优先上传性能收益高、上传开销低的DNN层，使得边缘节点快速构建部分DNN，达到最好的预期查询性能。另一方面，不会上载不会带来任何性能提升的不必要的DNN层，从而避免卸载。</p></li>
<li><p><strong>垂直协作：</strong>在VI-B1和VI-B2节中讨论的“端-边”体系结构之间的预期卸载策略对于支持计算密集度较低的DL服务和小规模并发DL查询是可行的。然而，当需要一次处理大量DL查询时，单个边缘节点肯定是不够的。</p>
<p>​ 协作的自然选择是，当DL任务被卸载时，EDGE执行数据预处理和初步学习。然后，将中间数据(即，边缘架构的输出)传输到云以进行进一步的DL计算[176]。然而，DNN的层次结构还可以进一步挖掘，以适应垂直协作。在[12]中，根据数据和计算特性在终端设备和边缘节点上分析DNN的所有层，以便生成性能预测模型。基于这些预测模型、无线条件和服务器负载水平，建议的神经外科医生根据端到端延迟或移动能耗来评估每个候选点，并将DNN划分为最佳的。然后，它决定DNN分区的分配，即在实现终端设备的最佳延迟和能耗的同时，将哪个部分部署在终端、边缘还是云上。</p>
<p>​ 通过利用EEOI(第V-C节)，可以更好地适应垂直协作。DNN的分区可以映射到分布式计算分层结构(即，末端、边缘和云)上，并且可以用多个早期出口点进行训练[161]。因此，端和边可以对自己执行一部分DL推理，而不是直接请求云。使用推断后的出口点，可以在不向云发送任何信息的情况下给出本地设备确信的DL任务的结果。为了提供更准确的DL推理，中间DNN输出将通过使用额外的DNN层发送到云中进行进一步推理。然而，中间输出(例如高分辨率监控视频流)应精心设计为比原始输入小得多，因此大大减少了终端和边缘(或边缘和云)之间所需的网络流量。</p>
<p>​ 虽然垂直协作可以被认为是云计算的一种演变，即“端-云”战略。与纯粹的“端-边”策略相比，垂直协作的过程可能会延迟，因为它需要与云进行额外的通信。然而，垂直协作有其自身的优势。一方面，当边缘体系结构本身无法承受DL查询的洪流时，云体系结构可以分担部分计算任务，从而确保服务于这些查询。另一方面，原始数据在传输到云之前必须在边缘进行预处理。如果这些操作可以大大减少中间数据的大小，从而减少网络流量，则可以缓解骨干网络的压力。</p></li>
<li><p><strong>横向协作：</strong>在第VI-B3节中，讨论了纵向协作。但是，边缘或终端之间的设备也可以在没有云的情况下统一起来，以处理需要资源的DL应用，即水平协作。通过这种方式，训练好的DNN模型或整个DL任务可以被分割并分配给多个终端设备或边缘节点，从而通过减轻每个终端设备或边缘节点的资源开销来加速DL计算。文献[177]中提出的MoDNN通过无线局域网(WLAN)在本地分布式移动计算系统中执行DL。DNN的每一层都被划分成片，以提高并行度和减少内存占用，并且这些片是逐层执行的。通过多个终端设备之间的执行并行性，可以显著加速DL计算。</p>
<p>​ 关于特定的DNN结构，例如CNN，可以应用更精细的网格划分来最小化通信、同步和存储器开销[130]。在[156]中，提出了一种融合瓦片划分(FTP)方法，能够将每个CNN层划分成可独立分配的任务。与[12]中仅按层分区DNN不同，FTP可以融合各层并以网格方式垂直分区，从而最大限度地减少参与的边缘设备所需的内存占用，而不考虑分区和设备的数量，同时还降低了通信和任务迁移成本。此外，为了支持FTP，分布式工作窃取运行时系统，即空闲边缘设备从具有活动工作项的其他设备窃取任务[156]，可以自适应地分配FTP分区以平衡协作边缘设备的工作负载。</p></li>
</ol>
<h2 id="c.为dl定制edge框架">C.为DL定制Edge框架</h2>
<p>虽然DL所需的计算复杂度和能效与EDGE硬件的容量之间存在差距[179]，但定制的EDGE DL框架可以帮助高效地1)匹配EDGE平台和DL模型；2)在性能和功率方面开发底层硬件；3)自动协调和维护DL服务。</p>
<p>首先，应该确定在边缘计算(蜂窝)网络中在哪里部署DL服务。在[180]中引入了部署在边缘节点的RAN控制器来收集数据并运行DL服务，而放置在云中的网络控制器协调RAN控制器的操作。这样，在运行分析并将相关指标提取到DL模型之后，这些控制器可以向网络边缘的用户提供DL服务。</p>
<p>第二，由于DL模型的部署环境和需求可能与模型开发过程中的部署环境和需求有很大的不同，所以在使用(Py)Torch、TensorFlow等开发DL模型时采用的自定义运算符可能不会直接与边缘的DL框架一起执行。为了弥合部署和开发之间的差距，[181]的作者建议使用部署工具和部署在边缘的DL框架中的操作员库来指定开发中的DL模型。此外，为了自动化DL模型的选择和优化，ALOHA[182]制定了一个工具流：1)自动化模型设计。它综合考虑目标任务、约束集和目标体系结构，生成最优的模型配置；2)优化模型配置。它划分DL模型，并相应地生成不同推理任务和可用资源之间的体系结构感知映射信息。3)模型移植自动化。它将映射信息转换为对目标体系结构公开的计算和通信原语的适当调用。</p>
<p>第三，应该解决部署在边缘的DL模型的协调问题。OpenEI[183]将每个DL算法定义为一个四元组&lt;Accuracy，Latency，Energy，Memory Footprint&gt;，以评估目标硬件平台的Edge DL能力。基于这样的元组，OpenEI可以在线的方式根据不同的Edge DL能力为特定的Edge平台选择匹配的模型。ZOO[184]提供了一种简明的领域特定语言(DSL)，以支持简单且类型安全的DL服务组合。此外，为了支持广泛的地理分布拓扑、分析引擎和DL服务，ECO[185]使用了基于图形的覆盖网络方法来1)对管道和依赖项进行建模和跟踪，然后2)将它们映射到从小型基于边的引擎到强大的基于云的多节点引擎等各种地理上分布的分析引擎。通过这种方式，DL计算可以根据需要进行分布，以管理成本和性能，同时还支持其他实际情况，如发动机异构性和不连续操作。</p>
<p>然而，这些开创性的工作还没有准备好从本质上支持第VI-B节中讨论的有价值的和具有挑战性的功能，如计算卸载和协作，这些功能仍然需要进一步开发。</p>
<h2 id="d.edge-dl的性能评估">D.Edge DL的性能评估</h2>
<p>在选择合适的边缘硬件和相关软件堆栈以部署不同类型的边缘DL服务的整个过程中，有必要对其性能进行评估。公正的评估方法可以指出针对特定边缘硬件优化软件堆栈的可能方向。[186]在[186]中，首次通过在资源受限的边缘设备上执行DL推断来评估DL库的性能，这些推断与延迟、内存占用和能量等指标有关。此外，特别是Android智能手机，作为一种配备移动CPU或GPU的边缘设备，AI Benchmark[54]广泛评估了各种设备配置上的DL计算能力。实验结果表明，没有一个单独的DL库或硬件平台能够完全超越其他库或硬件平台，并且DL模型的加载可能比执行它所需的时间更长。这些发现意味着仍然有进一步优化EDGE硬件、EDGE软件堆栈和DL库融合的机会。</p>
<p>然而，目前还没有针对Edge DL的标准试验床，这阻碍了对Edge体系结构的研究。要评估Edge DL服务的端到端性能，不仅需要建立边缘计算架构，还需要建立其与终端设备和云的组合，例如OpenLEON[187]和CA VBENCH[188]，特别是针对车载场景。此外，对管理DL服务的控制面板的模拟仍未涉足。一个由无线链路和网络模型、服务请求模拟、边缘计算平台、云计算架构等组成的综合试验台，对于推动“数字图书馆边缘计算”的发展具有重要意义。</p>
<h1 id="七-边缘深度学习训练">七 边缘深度学习训练</h1>
<p>目前云数据中心的DL训练(分布式或非分布式)，即云训练或云边训练[50]，即训练数据在边缘进行预处理，然后传输到云端，并不适用于所有的DL业务，特别是对于需要局部性和持续性训练的DL模型。此外，如果需要将大量数据从分布式终端设备或边缘节点持续传输到云端，将消耗大量的通信资源，从而加剧无线和骨干网络。例如，对于集成了目标检测和目标跟踪的监控应用，如果终端设备直接将海量实时监控数据发送到云端进行持续训练，将会带来高昂的组网成本。此外，将所有数据合并到云中可能会违反隐私问题。所有这些挑战都提出了针对现有云培训的新培训方案的需求。</p>
<p>自然，由大量计算资源有限的边缘节点组成的边缘体系结构可以通过自身的数据处理或训练来满足缓解网络压力的需要。边缘训练或潜在的“端-边-云”训练，将边缘作为训练的核心架构，称为“边缘DL训练”。这种DL训练可能需要大量资源来消化分布式数据和交换更新。尽管如此，FL正在崛起，并被承诺要解决这些问题。我们在表VI中总结了精选的关于外语的研究成果。</p>
<h2 id="a.edge的分布式训练">A.Edge的分布式训练</h2>
<p>边缘的分布式训练可以追溯到[189]的工作，其中提出了一种用于边缘计算网络的分散随机梯度下降(SGD)方法来解决大型线性回归问题。然而，这种方法是为地震成像应用而设计的，不能推广到未来的DL训练中，因为训练大规模DL模型的通信成本非常高。[190]在这篇文章中，针对边缘计算环境提出了两种不同的分布式学习方案。如图17所示，一种解决方案是每个终端设备基于本地数据训练模型，然后在边缘节点聚集这些模型更新。另一种是边缘节点训练自己的局部模型，通过交换和细化模型更新来构建全局模型。虽然大规模的边缘分布式训练避免了将庞大的原始数据集传输到云中，但不可避免地引入了边缘设备之间梯度交换的通信开销。此外，在实际应用中，EDGE设备可能会遭受较高的时延、较低的传输速率和间歇性连接，从而进一步阻碍了属于不同EDGE设备的DL模型之间的梯度交换。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407140529450.png" alt="image-20210407140529450"><figcaption aria-hidden="true">image-20210407140529450</figcaption>
</figure>
<p>大多数梯度交换是冗余的，因此可以压缩更新的梯度以在保持训练精度的同时降低通信成本(例如[191]中的DGC)。首先，DGC规定只交换重要的梯度，即只传输大于启发式给定阈值的梯度。为了避免信息丢失，其余的梯度被局部累加，直到超过阈值。需要注意的是，无论是立即发送的梯度还是为稍后交换积累的梯度都将被编码和压缩，从而节省了通信成本。其次，考虑到梯度的稀疏更新可能会影响DL训练的收敛，采用动量校正和局部梯度裁剪的方法来降低潜在风险。通过动量校正，稀疏更新可以近似等价于密集更新。在将当前梯度局部添加到每个边缘设备上的先前累加之前，执行梯度裁剪，以避免梯度累加可能引入的爆炸性梯度问题。当然，由于部分梯度被延迟更新，这可能会减慢收敛速度。因此，为了防止陈旧的动量危害训练性能，在训练开始时，停止延迟梯度的动量，并采用不那么激进的学习率和梯度稀疏性，以减少延迟的极值梯度的数量。</p>
<p>出于降低分布式训练期间同步梯度和参数的通信成本的相同目的，可以将两种机制组合在一起[192]。第一种是通过利用稀疏训练梯度来仅传输重要的梯度[193]。保持隐含权值以记录梯度坐标参与梯度同步的次数，隐含权值大的梯度坐标被认为是重要的梯度，更有可能在下一轮训练中被选择。另一方面，如果直接忽略残差梯度坐标(即不太重要的梯度)，则训练收敛会受到很大的损害，因此在每轮训练中都会积累较小的梯度值。然后，为了避免这些过时的梯度对训练的影响很小，采用动量校正，即设置一个折现因子来校正残差梯度积累。</p>
<p>具体地，当训练大的DL模型时，交换相应的模型更新可能会消耗更多的资源。使用KD的在线版本可以降低此类通信成本[194]。换句话说，模型输出而不是每个设备上更新的模型参数被交换，使得大型本地模型的训练成为可能。除了通信成本，隐私问题也应该被关注。例如，在[195]中，通过利用训练分类器的隐私泄露，可以从训练数据中有目的地获得个人信息。文献[196]研究了边缘训练数据集的隐私保护问题。与[190]-[192]不同，在[196]场景中，训练数据在边缘节点进行训练，并上传到云端进行进一步的数据分析。因此，拉普拉斯噪声[197]被添加到这些可能暴露的训练数据以增强训练数据隐私保证。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210408093648926.png" alt="image-20210408093648926"><figcaption aria-hidden="true">image-20210408093648926</figcaption>
</figure>
<h2 id="b.边缘的联合学习">B.边缘的联合学习</h2>
<p>在第七节中，整体网络体系结构被明确地分开，具体地说，训练被限制在终端设备或独立的边缘节点，而不是在它们之间。当然，通过这种方式，编排培训过程很简单，因为不需要处理终端和边缘之间的异构计算能力和网络环境。尽管如此，描述语言训练应该和描述语言推理一样无处不在。联合学习(FL) [198]，[199]作为端、边、云之间的一种实用的DL训练机制应运而生。虽然是在原生外语的框架下，但现代移动设备是作为客户端进行本地培训的。自然，这些设备可以在边缘计算[200]，[201]中得到更广泛的扩展。云中的终端设备、边缘节点和服务器可以等效地视为FL中的客户端。这些客户被假定能够处理不同级别的DL培训任务，并因此将他们的更新贡献给全局DL模型。在这一节中，将讨论外语的基础知识。</p>
<p>在不需要上传数据进行中心云训练的情况下，FL [198]、[199]可以允许边缘设备用自己收集的数据训练本地DL模型，而只上传更新的模型。如图18所示，FL迭代地请求一组随机的边缘设备1)从聚合服务器下载全局DL模型(在下文中使用“服务器”)，2)用它们自己的数据在下载的全局模型上训练它们的本地模型，以及3)仅将更新的模型上传到服务器用于模型平均。通过将训练数据仅限制在设备端，可以显著降低隐私和安全风险，从而避免了[195]中因将训练数据上传到云中而引起的隐私问题。此外，FL引入了联合平均，将每个设备上的本地SGD与执行模型平均的服务器相结合。实验结果证实了联邦平均法对不平衡和非IID数据是稳健的，并且可以促进训练过程，即。，减少了培训DL模型所需的沟通次数。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407140459305.png" alt="image-20210407140459305"><figcaption aria-hidden="true">image-20210407140459305</figcaption>
</figure>
<p>综上所述，FL可以应对边缘计算网络中的几个关键挑战:1)非IID训练数据。每个设备上的训练数据都是自己感知和收集的。因此，设备的任何单个训练数据都不能代表全局数据。在佛罗里达，这可以通过联邦平均来实现；2)沟通有限。设备可能离线或位于不良的通信环境中。然而，在资源充足的设备上执行更多的训练计算可以减少全局模型训练所需的通信回合。此外，FL只选择一部分设备一轮上传更新，成功处理了设备不可预测离线的情况；3)贡献不平衡。这可以通过联合平均来解决，具体来说，一些设备可能具有较少的自由资源用于FL，导致设备之间的训练数据量和训练能力不同；4)隐私和安全。FL需要上传的数据只是更新后的DL模型。此外，安全聚合和差异隐私[197]，这有助于避免泄露包含在本地更新中的隐私敏感数据，可以自然地应用。</p>
<h2 id="c.通信有效的fl">C.通信有效的FL</h2>
<p>在FL中，不需要上传原始培训数据，从而在很大程度上降低了通信成本。但是，FL仍然需要将本地更新的模型传输到中央服务器。假设DL模型尺寸足够大，从边缘设备到中央服务器的更新（例如模型权重）也可能也可能消耗非资格的通信资源。为满足这一点，我们可以让FL客户定期与中央服务器（相当不断）与中央服务器进行通信，以寻求共享DL模型的共识[202]。此外，结构化更新，速写更新可以帮助提高客户端的更新到服务器时提高通信效率。结构化更新装置限制模型更新以具有预先指定的结构，具体地，1）低秩矩阵;或2）稀疏矩阵[202]，[203]。另一方面，对于速写更新，维护完整的模型更新。但是在上传它们进行模型聚合之前，执行分配，概率量化和结构化随机旋转的组合操作以压缩完整更新[203]。 FEDPAQ [204]同时结合这些特征，并为两种强度凸起和非凸损函数提供近乎最佳的理论保证，同时凭经验展示通信计算权衡。</p>
<p>仅考虑到上行链路上降低通信成本的缩短通信成本（下行）和服务器到服务器（上行链路）通信的不同。对于下行链路，将全局DL模型的权重被重新装入向量中，然后应用分配和量化[203]。当然，这种类型的模型压缩是有损的，并且与上行链路不同（多个边缘设备上传其平均模型），通过在下行链路上平均来减轻损耗。在将kashin的表示[206]中可以使用，作为基础变换以减轻随后的压缩操作产生的错误。此外，对于上行链路，每个边缘设备不需要基于本地全局模型训练模型，而是仅培训较小的子模型或修剪模型[207]。由于子模型和修剪模型比全局模型更轻，因此更新上载中的数据量减少了。</p>
<p>与云相比，边缘设备的计算资源是稀缺的。应考虑提高通信效率的额外挑战：1）计算资源是异构的和限制在边缘器件; 2）边缘设备的训练数据可以分布不均匀[208] - [210]。对于更强大的边缘设备，ADSP [211]让他们在以战略决定间隔进行模型聚合的同时继续培训。对于一般情况，基于使用非IID数据分布的分布式学习的推导的收敛，所有参与设备之间的给定资源预算下的聚合频率可以通过理论保证优化[208]。 Astraea [212]通过设计基于Mediator的多客户重新安排策略来降低92％的通信流量。一方面，Astraea利用数据增强[5]来缓解非统一分布式培训数据的缺陷。另一方面，Astraea设计了一种贪婪的基于中介的重新安排策略，以便为调解员分配客户。每个介体都遍历所有未分配客户端的数据分布，以选择适当的参与客户端，旨在使Mediator的数据分布最接近均匀分布，即，最小化介质数据分布与均匀分布之间的Kullbackleibler分解[213]。当中间器达到最大分配的客户端限制时，中央服务器将创建一个新的中介并重复该过程，直到所有客户端都分配培训任务。</p>
<p>旨在加速FL的全球聚集，[214]利用过空气计算[215] - [217]，其中原理是探索无线多址通道的叠加特性以计算所需的通过多边设备的并发传输功能。可以利用无线信道的干扰，而不是仅仅克服它们。在传输期间，来自边缘设备的并发模拟信号可以通过信道系数自然地称重。然后，服务器只需要将这些重新绘制的权重叠加为聚合结果，仍然没有其他聚合操作。</p>
<h2 id="d.资源优化fl">D.资源优化FL</h2>
<p>当FL将相同的神经网络模型部署到异构边缘设备时，计算功率弱（踩踏器）的设备可能大大延迟全局模型聚合。虽然可以优化训练模型以加速陷阱器，但由于异构设备的资源有限，优化的模型通常导致分叉结构并严重缺陷协作会聚。 Elfish [218]首先在时间成本，内存使用情况和计算工作负载方面分析模型训练的计算消耗。在模型分析的指导下，需要在每层中掩盖哪些神经元以确保可以确定模型训练的计算消耗满足特定的资源约束。其次，与发散的结构产生的确定系统优化模型不同，在每个训练期间将在每个训练周期中动态掩蔽不同的神经元并在随后的聚合期间恢复和更新，从而确保了全面的模型更新加班。值得注意的是，尽管通过资源优化将Elfish提高了2次的训练速度，但Elfish的想法是使所有陷阱器同步地工作，其同步聚合可能无法处理极端情况。</p>
<p>当FL部署在移动边缘计算场景中时，FL的壁钟时间将主要取决于客户端的数量及其计算能力。具体地，FL的总壁时钟时间不仅包括计算时间，还包括所有客户端的通信时间。一方面，客户端的计算时间取决于客户端和本地数据大小的计算能力。另一方面，通信时间与客户端的频道增益，传输功率和本地数据大小相关联。因此，为了最小化FL的壁时钟训练时间，FL的适当资源分配需要考虑不仅考虑计算 - 通信权衡的精度水平，还需要在客户端进行资源分配，如电源和CPU周期。</p>
<p>然而，最小化客户端的能量消耗和FL壁钟时间是冲突的。例如，客户可以通过始终以低频维持其CPU来节省能源，但这绝对会增加培训时间。因此，为了在能量成本和培训时间之间取得平衡，[219]的作者首先设计一个新的FL算法FEDL，为每个客户端才能解决其局部问题大致直到达到局部精度水平。然后，通过使用Pareto效率模型[224]，它们为FEDL的无线网络制定了非透露资源分配问题，以捕获客户的能源成本与FL壁钟时间之间的权衡。最后，通过利用该问题的特殊结构，它们将其分解为三个子问题，因此导出闭合形式解决方案，并表征静态控制旋钮对最佳的影响。</p>
<p>由于用于传输模型更新的上行链路带宽是有限的，因此BS必须优化其资源分配，而用户必须优化其发射功率分配以减少每个用户的分组错误率，从而提高流程。为此，[220]的作者将资源分配和用户选择配制到联合优化问题，其目标是最小化遇到延迟和能量消耗要求的同时降低流失功能的值。为了解决这个问题，他们首先导出了FL的预期收敛速率的闭合表达式，以便在分组误差率和流性能之间建立明确的关系。基于这种关系，可以将优化问题减少到混合整数非线性编程问题，然后解决如下：首先，在给定的用户选择和资源块分配下找到最佳发射功率;然后，将原始优化问题转换为二进制匹配问题;最后，使用匈牙利算法[225]找到最佳的用户选择和资源块分配策略。</p>
<p>FL的设备数量通常很大，从数百到数百万。只需最小化这种大型网络中的平均损失可能不适合某些设备上所需的模型性能。事实上，虽然香草FL下的平均精度很高，但不保证各个设备所需的模型精度。为此，基于本实用函数α - 公平[226]在无线网络中使用的公平资源分配，[221]的作者定义了一个面向公平的目标Q-FFL，用于联合资源优化。 Q-FFL最小化Q参数化的聚合重新加权损失，使得具有较高损耗的设备具有更高的相对重量，从而在准确性分布中令人鼓舞的方差越差（即，更公平）。自适应地最小化Q-FFL避免了手工制作的公平限制的负担，并且可以根据所需的公平动态调整目标，从而实现降低参与设备之间的准确性分布方差的效果。</p>
<h2 id="e.增强安全性的fl">E.增强安全性的FL</h2>
<p>在普通FL中，本地数据样本在每个边缘设备上进行处理。这种方式可以防止设备向服务器泄露私有数据。但是，服务器也不应该完全信任边缘设备，因为行为异常的设备可能会伪造或毒化它们的训练数据，从而导致毫无价值的模型更新，从而损害全局模型。为了使FL能够容忍少量设备在有毒数据集上进行训练，稳健的联合优化[201]定义了修剪的均值操作。通过过滤掉中毒设备产生的值和正常设备中的自然异常值，实现了保护全局模型免受数据中毒的稳健聚合。</p>
<p>除了蓄意攻击之外，不可预测的网络条件和计算能力给安全带来的消极负面影响也值得关注。FL必须对边缘设备的意外掉线保持健壮性，否则一旦设备断开连接，FL的一轮同步将会失败。为了解决这一问题，在[222]中提出了安全聚合协议，以实现对多达三分之一的设备无法及时处理本地训练或上传更新的健壮性。</p>
<p>反过来，FL中聚合服务器的故障可能导致不准确的全局模型更新，从而扭曲所有本地模型更新。此外，边缘设备(具有较大数量的数据样本)可能不太愿意与其他设备一起参与FL(贡献较小)。因此，在[223]中提出将BlockChain和FL结合作为BlockFL来实现：1)在每个边缘设备而不是特定的服务器上实现局部全局模型更新，确保设备故障在更新全局模型时不影响其他局部更新；2)适当的奖励机制来激励边缘设备参与FL。</p>
<h1 id="八-优化edge的深度学习">八 优化EDGE的深度学习</h1>
<p>DNN(一般DL模型)可以提取潜在的数据特征，而DRL可以通过与环境的交互来学习处理决策问题。边缘节点的计算和存储能力，以及云的协作，使得使用DL优化边缘计算网络和系统成为可能。对于边缘缓存、卸载、通信、安全保护等各种边缘管理问题，1)DNN可以处理网络中的用户信息和数据度量，感知无线环境和边缘节点的状态；2)基于这些信息，可以应用DRL来学习长期最优的资源管理和任务调度策略，从而实现对边缘的智能管理，即表VII所示的智能边缘。</p>
<h2 id="a.自适应边缘缓存的dl">A.自适应边缘缓存的DL</h2>
<p>从内容交付网络（CDN）[227]在蜂窝网络中缓存内容，多年来已经调查了网络中的缓存，以处理对多媒体服务的飙升的需求[228]。与推动用户附近的内容的概念对齐，边缘缓存[229]被认为是进一步减少冗余数据传输的有希望的解决方案，缓解云数据中心的压力并改善QoE。</p>
<p>边缘缓存面临两个挑战：1)边缘节点覆盖范围内的内容热度分布很难估计，因为它可能是不同的，并且随时空变化而变化[230]；2)针对边缘计算环境中的海量异构设备，层次化的缓存体系结构和复杂的网络特性进一步困扰了内容缓存策略的设计[231]。具体地说，只有在已知内容热度分布的情况下，才能推导出最优的边缘缓存策略。然而，用户对内容的偏好实际上是未知的，因为他们的移动性、个人偏好和连接性可能一直在变化。在本节中，将讨论用于确定边缘缓存策略的DL，如图19所示。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407133956736.png" alt="image-20210407133956736"><figcaption aria-hidden="true">image-20210407133956736</figcaption>
</figure>
<ol type="1">
<li><p><strong>DNNS的使用案例：</strong>传统的缓存方法通常计算复杂度很高，因为它们需要大量的在线优化迭代来确定1)用户和内容的特征，2)内容放置和交付的策略。</p>
<p>​ 对于第一个目的，DL可以用于处理从用户的移动设备收集的原始数据，从而提取用户和内容的特征作为基于特征的内容热度矩阵。通过这种方式，通过将基于特征的协作过滤应用于流行度矩阵来估计核心网络处的流行度内容[232]。</p>
<p>​ 对于第二个目的，在使用DNNs优化边缘缓存策略时，可以通过离线训练来避免在线繁重的计算迭代。由用于数据正则化的编码器和随后的隐藏层组成的DNN可以用由最优或启发式算法生成的解来训练，并被部署以确定高速缓存策略[233]，从而避免在线优化迭代。类似地，在[234]中，受关于部分缓存刷新的优化问题的输出具有一定模式的启发，训练MLP接受当前内容热度和最后的内容放置概率作为输入，以生成缓存刷新策略。</p>
<p>​ 如文献[233]、[234]所示，优化算法的复杂性可以转移到DNN的训练上，从而突破了实际应用的限制。在这种情况下，DL用于学习输入-解关系，而基于DNN的方法只有在存在原始缓存问题的优化算法时才可用。因此，基于DNN的方法的性能受限于固定的优化算法，并且不是自适应的。</p>
<p>​ 此外，DL还可用于定制边缘缓存。例如，为了最小化自动驾驶汽车中的内容下载延迟，在云中部署MLP来预测要请求的内容的热度，然后将MLP的输出传送到边缘节点(即在[235]中的RSU的MEC服务器)。根据这些输出，每个边缘节点缓存最有可能被请求的内容。在自动驾驶汽车方面，CNN被用来预测车主的年龄和性别。一旦识别了所有者的这些特征，就使用k-均值聚类[236]和二进制分类算法来确定哪些已经缓存在边缘节点中的内容应该进一步从边缘节点下载和缓存到CAR。此外，关于充分利用用户的特点，[237]指出，用户在不同的环境中访问内容的意愿是不同的。受此启发，RNN被用来预测用户的轨迹。然后基于这些预测，在每个预测位置的边缘节点预取并缓存用户兴趣的所有内容。</p></li>
<li><p><strong>DRL用例：</strong>第VIII-A1节中描述的DNN的功能可以视为整个边缘缓存解决方案的一部分，即DNN本身并不处理整个优化问题。与这些基于DNN的边缘缓存不同的是，DRL能够充分利用用户和网络的上下文，并以最大化长期缓存性能的自适应策略[238]作为优化方法的主体。传统的RL算法受到手工特征要求的限制，以及难以处理高维观测数据和动作的缺陷[239]。与传统的与DL无关的RL(如Q学习[240]和多臂Bandit(MAB)学习[230])相比，DRL的优势在于DNN可以从原始观测数据中学习关键特征。结合RL和DL的集成DRL代理可以直接从高维观测数据优化其在边缘计算网络中的缓存管理策略。</p>
<p>​ [241]DDPG用于训练DRL代理，以最大化长期缓存命中率，从而做出正确的缓存替换决策。这项工作考虑了具有单个BS的场景，其中DRL代理决定是缓存所请求的内容还是替换缓存的内容。在训练DRL代理时，奖励被设计为缓存命中率。此外，利用Wolpertinger体系结构[242]来应对大动作空间的挑战。具体地，首先为DRL代理设置主要动作集合，然后使用KNN将实际动作输入映射到该集合中的一个。以这种方式，动作空间被有意地缩小，而不会错过最佳的缓存策略。与基于DQL搜索整个动作空间的算法相比，采用DDPG和Wolpertinger结构的训练好的DRL代理能够在减少运行时间的同时获得具有竞争力的缓存命中率。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210408093717009.png" alt="image-20210408093717009"><figcaption aria-hidden="true">image-20210408093717009</figcaption>
</figure></li>
</ol>
<h2 id="b.用于优化边缘任务卸载的dl">B.用于优化边缘任务卸载的DL</h2>
<p>边缘计算允许边缘设备在能量、延迟、计算能力等约束下将其计算任务的一部分卸载到边缘节点[243]。如图20所示，这些约束提出了识别1)哪些边缘节点应该接收任务、2)边缘设备应该卸载多大比例的任务以及3)应该为这些任务分配多少资源的挑战。要解决这类任务卸载问题是NP-hard[244]，因为至少需要通信和计算资源的组合优化以及边缘设备的争用。特别地，优化既要考虑时变的无线环境(如变化的信道质量)，又要考虑任务卸载的要求，因此要注意使用学习方法[245]-[255]。在所有与基于学习的优化方法相关的工作中，当多个边缘节点和无线信道可用于计算卸载时，基于DL的方法比其他方法更具优势。在这种背景下，整个卸载问题中状态空间和动作空间较大，使得传统的学习算法[245]、[256]、[247]实际上都不可行。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407134252750.png" alt="image-20210407134252750"><figcaption aria-hidden="true">image-20210407134252750</figcaption>
</figure>
<ol type="1">
<li><p><strong>DNNs的用例：</strong>在[249]中，计算卸载问题被描述为一个多标签分类问题。通过离线穷举搜索，得到的最优解可以用来训练以边缘计算网络的组合状态为输入、卸载决策为输出的DNN。通过这种方法，不需要在线求解最优解，避免了迟来的卸货决策，并且可以将计算复杂度转移到DL训练上。</p>
<p>​ 此外，在[252]中研究了关于区块链的特定卸载场景。边缘设备上挖掘任务的计算和能源消耗可能会限制区块链在边缘计算网络中的实际应用。当然，这些挖掘任务可以从边缘设备卸载到边缘节点，但这可能会导致边缘资源分配不公平。因此，所有可用的资源都以拍卖的形式进行分配，以最大化边缘计算服务提供商(ECSP)的收入。基于最优拍卖的解析解，可以构建[252]MLP，并用矿工(即边缘设备)的估值进行训练，以最大化ECSP的预期收入。</p></li>
<li><p><strong>DRL的使用案例：</strong>虽然将计算任务卸载到边缘节点可以提高计算任务的处理效率，但卸载的可靠性受到无线环境质量可能较低的影响。[248]为了使卸载效用最大化，作者首先量化了各种通信方式对任务卸载性能的影响，并据此提出应用DQL在线选择最优的目标边缘节点和传输方式。为了优化总卸载成本，修改Duling-and Double-DQL[263]的DRL代理可以为终端设备分配边缘计算和带宽资源。</p>
<p>​ 此外，卸载可靠性也是值得关注的问题。传输数据的编码率对于使卸载达到所需的可靠性水平至关重要。因此，在[250]中，为了提高平均卸载可靠性，研究了编码块长度的影响，并提出了一个关于资源分配的MDP，然后用DQL进行求解。在[257]中，DoubleDQL[89]对边缘设备的细粒度计算资源调度进行了进一步的探索，目的是确定最佳的动态电压和频率缩放(DVFS)算法。实验结果表明，与DQL相比，双DQL可以节省更多的能量，达到更高的训练效率。然而，随着边缘设备的增加，基于DQL的方法的动作空间可能会迅速增加。在这种情况下，可以在学习[253]之前执行预分类步骤以缩小动作空间。</p>
<p>​ 由能量收集(EH)提供动力的物联网边缘环境在[251]、[254]中进行了研究。在EH环境中，能量收集使卸载问题变得更加复杂，因为物联网边缘设备可以从周围的射频信号中收集能量。因此，CNN被用来压缩学习过程中的状态空间[254]。此外，在文献[251]中，受奖励函数加性结构的启发，将Q函数分解应用于双DQL，改进了普通双DQL。然而，基于值的DRL只能处理离散动作空间。为了对本地执行和任务卸载执行更细粒度的功率控制，应该考虑基于策略梯度的DRL。例如，与基于DQL的离散功率控制策略相比，DDPG能够以更细的粒度自适应地分配边缘设备的功率[255]。</p>
<p>​ 随意让DRL代理接管整个计算卸载过程可能会导致巨大的计算复杂度。因此，只有采用DNN进行部分决策，才能大大降低复杂度。例如，在[258]中，最大化加权和计算率的问题被分解为两个子问题，即卸载决策和资源分配。通过只使用DRL来处理NP-Hard卸载决策问题，而不是同时使用DRL和DRL，既缩小了DRL代理的动作空间，又不影响卸载性能，因为资源分配问题得到了最优解决。</p></li>
</ol>
<h2 id="c.用于边缘管理和维护的dl">C.用于边缘管理和维护的DL</h2>
<p>EDGE DL服务设想部署在蜂窝网络中的BSS上，如[264]中实施的那样。因此，边缘管理和维护需要从多个角度(包括沟通角度)进行优化。许多工作都集中在将下行链路应用于无线通信[265]-[267]。然而，边缘的管理和维护应该考虑更多的方面。</p>
<ol type="1">
<li><p><strong>边缘通信：</strong>当边缘节点服务于移动设备(用户)时，边缘计算网络中的移动性问题应该得到解决。基于DL的方法可用于辅助设备和边缘节点之间的连接的平滑过渡。为了最小化每比特的能量消耗，在[268]中，用DNN近似最优设备关联策略。同时，在中心服务器上建立网络环境的数字孪生节点，对该DNN进行离线训练。为了最小化移动设备在其整个移动轨迹中从边缘节点移动到下一个边缘节点的中断，可以使用MLP来预测给定位置和时间处的可用边缘节点[259]。此外，确定移动设备应该与之关联的最佳边缘节点仍然需要评估移动设备与每个边缘节点之间的交互的成本(服务请求的等待时间)。尽管如此，对这些交互的成本进行建模需要一个功能更强大的学习模型。因此，实现了一个带有LSTM单元的两层堆叠RNN，用于建模交互成本。最后，基于预测可用边缘节点的能力和相应的潜在代价，移动设备可以关联到最好的边缘节点，从而将中断的可能性降至最低。</p>
<p>​ 在具有多种模式(服务于各种物联网服务)的通信场景中，即云无线接入网络(CRAN)模式、设备到设备(D2D)模式和雾无线接入点(FAP)模式，以最小化长期系统功耗为目标，DQL可用于控制边缘设备的通信模式和整个通信过程中处理器的开关状态[260]。在确定给定边缘设备的通信模式和处理器的ON-OFF状态后，整个问题可以降级为远程无线头部(RRH)发射功率最小化问题并得到解决。此外，TL与DQL集成在一起，以减少DQL培训过程中所需的与环境的交互，同时在没有TL的情况下保持类似的性能。</p></li>
<li><p><strong>边缘安全：</strong>由于边缘设备的计算、能量和无线资源一般有限，与云计算相比，边缘设备与边缘节点之间的传输更容易受到各种攻击，如干扰攻击、分布式拒绝服务(DDoS)攻击等。因此，需要提高边缘计算系统的安全性。首先，系统应该能够主动检测未知攻击，例如，使用DL技术提取窃听和干扰攻击的特征[269]。系统根据检测到的攻击模式确定安全防护策略。当然，安全保护通常需要额外的能源消耗以及计算和通信开销。因此，每个边缘设备都应该在不违反其资源限制的情况下优化其防御策略，即选择发射功率、信道和时间。由于边缘计算网络的攻击模型和动态模型很难估计，因此优化是具有挑战性的。</p>
<p>​ 基于DRL的安全解决方案可以提供安全卸载(从边缘设备到边缘节点)以抵御干扰攻击[261]或保护用户位置隐私和使用模式隐私[270]。边缘设备通过观察边缘节点的状态和攻击特征，确定安全协议中的防御级别和关键参数。通过将奖励设置为抗干扰通信效率，如信号的信干噪比、接收消息的误码率和保护开销，可以训练基于DQL的安全代理来应对各种类型的攻击。</p></li>
<li><p><strong>联合边缘优化：</strong>边缘计算可以满足智能设备的快速增长以及大量计算密集型和数据消耗型应用的出现。尽管如此，它也使未来网络的运营变得更加复杂[271]。管理复杂网络的综合资源优化[16]是具有挑战性的，特别是在考虑未来网络的关键推动因素的前提下，包括软件定义网络(SDN)[272]、物联网(IoTS)、车联网(IOVS)。</p>
<p>​ 通常，SDN的设计目的是将控制平面与数据平面分离，从而允许在整个网络上以全局视图进行操作。与边缘计算网络的分布式特性相比，SDN是一种集中式的方法，直接将SDN应用于边缘计算网络是一项具有挑战性的工作。[273]研究了一种支持SDN的智能城市边缘计算网络。为了提高该原型网络的服务性能，在其控制平面中部署了DQL，以协调网络、缓存和计算资源。</p>
<p>​ 边缘计算可以为物联网系统提供更多计算密集型和延迟敏感型服务，但同时也对存储、计算和通信资源的高效管理和协同提出了挑战。为了最小化平均端到端服务延迟，基于策略梯度的DRL结合AC体系结构可以处理边缘节点的分配、关于是否存储请求内容的决定、执行计算任务的边缘节点的选择以及计算资源的分配[262]。</p>
<p>​ IoVs是物联网的特例，专注于联网车辆。与在[262]中考虑的集成网络、缓存和计算类似，具有更健壮性能的DoubleDueling DQL(即结合双DQL和Dueling DQL)可用于协调可用资源以提高未来IOVS的性能[110]。此外，考虑到车辆在IOVS中的机动性，硬服务截止日期的限制很容易被打破，而且由于高度的复杂性，这一挑战往往被忽视或解决得不够充分。为了应对移动性挑战，在[112]中，首先将车辆的移动性建模为离散随机跳跃，并将时间维划分为历元，每个历元包含若干个时隙。然后，针对时隙的粒度，设计了一个小时间尺度的DQL模型，在精心设计的即时奖励函数中考虑了车辆机动性的影响。最后，针对每个时段，提出了一个大时间尺度的DQL模型。通过使用这种多时间尺度的DRL，既解决了移动性的直接影响，又解决了资源分配优化中无法承受的巨大行动空间的问题。</p></li>
</ol>
<h1 id="九-吸取的教训和开放的挑战">九 吸取的教训和开放的挑战</h1>
<p>为了识别存在的挑战和避免潜在的误导，我们简要介绍了“边缘上的DL应用”的潜在场景，并分别讨论了与我们关注的四种使能技术相关的公开问题，即“边缘中的DL推理”、“用于DL的边缘计算”、“在边缘的DL训练”和“用于优化边缘的DL”。</p>
<h2 id="a.更有前途的应用">A.更有前途的应用</h2>
<p>如果DL和EDGE能够很好地结合在一起，它们可以为创新应用的开发提供巨大的潜力。要为运营商、供应商和第三方提供新的商机和收入来源，还有许多领域需要探索。</p>
<p>例如，随着越来越多的DL技术被普遍嵌入到这些新兴应用中，引入的处理延迟和额外的计算成本使得云游戏架构难以满足延迟要求。靠近用户的边缘计算架构可以与云结合，形成混合游戏架构。此外，智能驾驶涉及语音识别、图像识别、智能决策等。智能驾驶中的各种DL应用，如碰撞警告，都需要边缘计算平台保证毫秒级的交互延迟。此外，边缘感知更有利于分析车辆周围的交通环境，从而提高驾驶安全性。</p>
<h2 id="b.用于推理的通用dl模型">B.用于推理的通用DL模型</h2>
<p>在边缘设备中部署DL时，需要通过模型优化来加速DL推理。在这一部分中，讨论了“边缘DL推理”在模型压缩、模型分割和用于优化DL模型的EEoI方面的经验教训和未来发展方向。</p>
<ol type="1">
<li><strong>不明确的性能指标：</strong>对于特定任务的Edge DL服务，通常有一系列候选DL模型可以完成该任务。然而，服务提供商很难为每项服务选择正确的DL模型。由于边缘计算网络的不确定特性(变化的无线信道质量、不可预测的并发服务请求等)，常用的标准性能指标(如top-k精度[138]或平均平均精度[164])不能反映边缘DL模型推理的运行时性能。对于Edge DL服务，除了模型准确性，推断延迟、资源消耗和服务收入也是关键指标。因此，我们需要识别Edge DL的关键性能指标，定量分析影响它们的因素，并探索这些指标之间的权衡，以帮助提高Edge DL的部署效率。</li>
<li><strong>EEoI的推广：</strong>目前，EEoI可以应用于DL[160]中的分类问题，但对于更广泛的DL应用还没有通用的解决方案。此外，为了构建智能边缘并支持边缘智能，不仅应该探索DL，而且应该探索将EEoI应用于DRL的可能性，因为将DRL应用于边缘的实时资源管理，如在第八节中所讨论的，需要严格的响应速度。</li>
<li><strong>混合模型修改：</strong>应该考虑与模型优化、模型分段和EEoI相关的协调问题。这些定制的DL模型通常是独立使用的，以实现“端-边-云”协作。可能需要在末端和边缘进行模型量化和修剪等模型优化，但由于有足够的计算资源，云不需要冒模型精度的风险来使用这些优化。因此，如何设计一种混合精度方案，即如何将边缘的简化DL模型和云中的原始DL模型有效地结合起来是非常重要的。</li>
<li><strong>训练和推理之间的协调：</strong>修剪、量化和将EEoI引入训练的原始DL模型需要重新训练，以使它们获得所需的推理性能。一般来说，定制模型可以在云中进行离线培训。然而，边缘计算的优势在于它的响应速度，而且可能会因为延迟的DL训练而被抵消。而且，由于边缘存在大量异构设备，网络环境动态变化，对DL型号的定制需求并不单调。那么，这种持续的模型训练要求是否合理，会不会影响模型推理的时效性？如何设计一种机制来避免这些副作用？</li>
</ol>
<h2 id="c.dl的完整边缘架构">C.DL的完整边缘架构</h2>
<p>EDGE智能和智能EDGE需要一个完整的系统框架，涵盖数据采集、业务部署和任务处理。在这一部分中，我们将讨论“面向DL的边缘计算”在构建完整的DL边缘计算框架方面所面临的挑战。</p>
<ol type="1">
<li><p><strong>EDGE用于数据处理：</strong>无论是在EDGE上广泛部署的DL服务，还是优化EDGE的DL算法，都离不开数据采集。EDGE架构应该能够高效地获取和处理由EDGE设备感知或收集的原始数据，然后将其提供给DL模型。</p>
<p>​ 自适应地在边缘获取数据，然后将其传输到云(如[7]中所做的)是减轻边缘设备工作量和减少潜在资源开销的自然方式。此外，更好的是进一步压缩数据，这样可以缓解网络的带宽压力，同时可以降低传输时延，提供更好的QoS。大多数已有的工作只关注视觉应用[102]。然而，各种基于DL的服务的异构数据结构和特性还没有得到很好的解决。因此，为各种DL服务开发一种异构、并行和协作的边缘数据处理体系结构将是有帮助的。</p></li>
<li><p><strong>边缘DL服务的微服务：</strong>边缘和云服务最近开始经历从单一实体到数百个松散耦合微服务的图表的重大转变[274]。执行DL计算可能需要一系列软件依赖，这需要一种解决方案来隔离共享资源上的不同DL服务。目前，部署在边缘用于托管DL服务的微服务框架还处于初级阶段[275]，原因是几个关键挑战：1)灵活地处理DL部署和管理；2)实现微服务的实时迁移，以减少迁移时间和DL服务由于用户移动性而导致的不可用；3)协调云和分布式边缘基础设施之间的资源，以获得更好的性能，如第VI-B3节所示。</p></li>
<li><p><strong>DL激励和值得信赖的卸载机制：</strong>资源有限的终端设备上的繁重DL计算可以卸载到附近的边缘节点(第VI-B节)。但是，仍然存在几个问题，1)需要建立激励机制来激励边缘节点接管DL计算；2)需要保证安全性，以避免匿名边缘节点带来的风险[276]。</p>
<p>​ 区块链作为跨参与设备存储交易记录的去中心化公共数据库，可以避免记录被篡改的风险[277]。通过利用这些特性，可以潜在地解决与计算卸载相关的激励和信任问题。具体地说，所有终端设备和边缘节点都要先向区块链交押金才能参与。终端设备请求边缘节点帮助进行DL计算，同时向区块链发送带赏金的“请求”事务。一旦边缘节点完成计算，它就会将结果返回给终端设备，并向区块链发送“完整”事务。一段时间后，其他参与的边缘节点也执行卸载任务，并验证先前记录的结果。最后，作为激励，首先记录的边缘节点赢得比赛并获得奖励[278]。然而，这种关于区块链边缘的想法还处于初级阶段。现有的区块链如Etherum[279]不支持执行复杂的DL计算，这就提出了调整区块链结构和协议以打破这一限制的挑战。</p></li>
<li><p><strong>与优化边缘的DL融合：</strong>未来边缘计算网络中的终端设备、边缘节点、基站都将运行各种DL模型，并部署相应的服务。为了充分利用分散的边缘计算资源，并与现有的云计算基础设施建立连接，将计算密集型的DL模型划分为子任务，并在边缘设备之间有效地卸载这些任务以进行协作是至关重要的。由于Edge DL的部署环境通常是高度动态的，边缘计算框架需要良好的在线资源编排和参数配置来支持大量的DL服务。异构计算资源、通信和缓存资源的实时联合优化以及高维系统参数配置是关键。我们在第八节中介绍了使用DL技术优化边缘计算框架(网络)的各种理论方法，但目前还没有相关的工作深入研究在实际的边缘计算网络或试验台中部署和使用这些DL技术进行长期在线资源编排的性能分析。我们认为，《用于DL的边缘计算》应该继续关注如何将《用于优化边缘的DL》融入到边缘计算框架中来实现上述愿景。</p></li>
</ol>
<h2 id="d.edge的实践训练原则">D.EDGE的实践训练原则</h2>
<p>与EDGE中的DL推理相比，EDGE中的DL训练目前主要受限于EDGE设备的弱性能，以及大多数Edge DL框架或库仍然不支持训练。目前，大多数研究都是在理论层面上进行的，即在边缘模拟DL训练过程。在这一部分中，我们指出了在“边缘数字图书馆培训”中学到的教训和面临的挑战。</p>
<ol type="1">
<li><p>数据并行性与模型并行性：DL模型需要大量的计算和内存。当它们变得更深或更大时，用单个设备获取它们的推理结果或对它们进行很好的训练是不可行的。因此，根据数据并行性、模型并行性或它们的组合，大型DL模型在数千个CPU或GPU核心上以分布式方式进行训练(第III-C节)。但是，与在云中通过总线或交换机连接的CPU或GPU进行并行培训不同，在分布式边缘设备上执行模型培训应进一步考虑无线环境、设备配置、隐私等。</p>
<p>​ 目前FL只将整个DL模型复制到每个参与的边缘设备，即数据并行的方式。因此，考虑到边缘设备有限的计算能力(至少目前)，将一个大规模的DL模型进行分区，并将这些片段分配到不同的边缘设备进行训练，可能是一个更可行和实用的解决方案。当然，这并不意味着放弃FL的原生数据并行性，而是提出了混合数据并行性和模型并行性的挑战，特别是对于边缘训练DL模型，如图21所示。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407135730398.png" alt="image-20210407135730398"><figcaption aria-hidden="true">image-20210407135730398</figcaption>
</figure></li>
<li><p><strong>训练数据是从哪里来的？：</strong>目前，边缘的DL训练框架大多是针对有监督的学习任务，并用完整的数据集测试它们的性能。然而，在实际场景中，我们不能假设边缘计算网络中的所有数据都有标签，并且都有正确的保证。对于DRL这样的无监督学习任务，我们当然不需要过多关注训练数据的产生。例如，DRL所需的训练数据由观察到的状态向量和通过与环境交互获得的奖励组成。这些训练数据可以在系统运行时自动生成。但是对于范围更广的有监督学习任务，边缘节点和设备如何找到准确的训练数据进行模型训练呢？香草FL的应用是使用RNN进行下一词预测[199]，其中训练数据可以与用户的日常输入一起获得。尽管如此，对于与视频分析相关的大量Edge DL服务，其培训数据从何而来。如果所有训练数据都是人工标注上传到云数据中心，再通过云端分发到边缘设备，显然违背了FL的初衷。一种可能的解决方案是使边缘设备能够通过相互学习“标签数据”来构建它们的标签数据。我们认为，未来应首先明确训练数据的产生和边缘DL模型训练的应用场景，并探讨边缘DL模型训练的必要性和可行性。</p></li>
<li><p><strong>边缘异步FL：</strong>现有FL方法[198]、[199]侧重于同步训练，只能并行处理数百台设备。然而，这种同步更新模式潜在地不能很好地扩展，并且鉴于FL的两个关键属性，该模式是低效和不灵活的，具体地说，1)训练任务不频繁，因为边缘设备通常具有较弱的计算能力和有限的电池续航能力，因此无法承担密集的训练任务；2)与云中典型的分布式训练相比，边缘设备之间的通信有限且不确定。</p>
<p>​ 因此，每当全局模型更新时，服务器被限制为从可用边缘设备的子集中选择以触发训练任务。此外，由于计算能力和电池续航时间有限，不同设备的任务调度各不相同，因此很难在每个时代结束时同步选定的设备。某些设备在应该同步时可能不再可用，因此服务器必须确定超时阈值才能丢弃落后设备。如果幸存设备的数量太少，服务器必须丢弃整个时段，包括所有接收到的更新。外语中的这些瓶颈可能可以通过异步训练机制[280]-[282]来解决。在每个资源受限的培训期间充分选择客户也可能有所帮助。通过为客户端设置下载、更新和上传DL模型的特定期限，中央服务器可以确定哪些客户端执行本地训练，使得它可以在每个周期中聚集尽可能多的客户端更新，从而允许服务器加速DL模型中的性能改进[283]。</p></li>
<li><p><strong>基于迁移学习的训练：</strong>由于资源限制，在手机等边缘设备上培训和部署计算密集型DL模型具有挑战性。为了便于在这种资源受限的边缘设备上学习，可以利用TL。例如，为了减少训练数据量并加快训练过程，可以采用使用未标记数据在边缘设备之间传递知识[284]。通过在边缘设备跨不同传感模式的学习中使用跨模式迁移，所需的标记数据和训练过程可以分别大大减少和加快。</p>
<p>​ 此外，KD作为TL的一种方法，也有几个优点[136]：1)利用训练有素的大型DL模型(教师)的信息，帮助轻量级DL模型(学生)更快地收敛；2)提高学生的准确性；3)帮助学生变得更通用，而不是被某一组数据过度拟合。虽然文献[136]、[284]的研究结果显示出一定的发展前景，但如何将基于目标词的训练方法推广到具有不同类型感知数据的数字图书馆应用中还需要进一步的研究。</p></li>
</ol>
<h2 id="e.智能边缘的部署和改进">E.智能边缘的部署和改进</h2>
<p>已经有很多尝试使用DL来优化和调度边缘计算网络中的资源。在这一点上，存在许多可以应用DL的潜在领域，包括在线内容流[285]、路由和流量控制[286]、[287]等。然而，由于DL解决方案不完全依赖于网络和设备的准确建模，所以找到可以应用DL的场景不是最重要的考虑因素。此外，如果应用DL优化实时边缘计算网络，DL模型或DRL算法的训练和推理可能会带来一定的副作用，如训练数据传输所消耗的额外带宽和DL推理的延迟。</p>
<p>已经有很多尝试使用DL来优化和调度边缘计算网络中的资源。在这一点上，存在许多可以应用DL的潜在领域，包括在线内容流[285]、路由和流量控制[286]、[287]等。然而，由于DL解决方案不完全依赖于网络和设备的准确建模，所以找到可以应用DL的场景不是最重要的考虑因素。此外，如果应用DL优化实时边缘计算网络，DL模型或DRL算法的训练和推理可能会带来一定的副作用，如训练数据传输所消耗的额外带宽和DL推理的延迟。</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/04/11/Paper/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%9E%8D%E5%90%88/image-20210407140201358.png" alt="image-20210407140201358"><figcaption aria-hidden="true">image-20210407140201358</figcaption>
</figure>
<ul>
<li>考虑到DL和DRL的资源开销和实时管理边缘计算网络的需求，DL和DRL应该部署在哪里？</li>
<li>在使用DL确定缓存策略或优化任务分流时，DL本身带来的带宽消耗和处理延迟会抵消DL的优势吗？</li>
<li>如何探索和改进第六节中的边缘计算体系结构，以支持“用于优化边缘的DL”？</li>
<li>第五节介绍的定制DL模型的想法是否有助于实际部署？</li>
<li>如何修改第七节中的培训原则以提高DL培训的绩效，以满足边缘管理的时效性？</li>
</ul>
<p>此外，最先进的DL或DRL的能力，如多Agent深度强化学习[288]-[290]，图神经网络(GNNs)[291]，[292]，也可以被用来促进这一过程。例如，终端设备、边缘节点和云可以被视为单独的代理。通过这种方式，每个智能体根据其局部的不完全观察来训练自己的策略，所有参与的智能体共同优化边缘计算网络。此外，跨越终端、边缘和云的边缘计算网络的结构实际上是一个巨大的图，其中包含大量的潜在结构信息，例如设备之间的连接和带宽。为了更好地理解边缘计算网络，GNNs专注于从图结构中提取特征，而不是从二维网格和一维序列中提取特征，这可能是一种很有前途的方法。</p>
<h1 id="十结论">十、结论</h1>
<p>DL作为人工智能的一项关键技术，与边缘计算有望实现互惠互利。本次调研全面介绍和讨论了边缘智能和智能边缘的各种适用场景和基础使能技术。综上所述，将DL从云扩展到网络边缘的关键问题是：在网络、通信、计算能力和能耗的多重约束下，如何设计和开发边缘计算体系结构，以实现DL训练和推理的最佳性能。随着边缘计算能力的增强，边缘智能将变得普遍，智能边缘将对提升边缘智能的性能起到重要的支撑作用。我们希望本次调查将增加关于DL/Edge集成的讨论和研究力度，从而推动未来的通信应用和服务。</p>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
  </entry>
  <entry>
    <title>Day4C++提高编程</title>
    <url>/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>本阶段主要针对C++<code>泛型编程</code>和<code>STL技术</code>做详细讲解，探讨C++更深层的使用</li>
</ul>
<span id="more"></span>
<h2 id="模板">1 模板</h2>
<h3 id="模板的概念">1.1 模板的概念</h3>
<p>模板就是建立<strong>通用的模具</strong>，大大<strong>提高复用性</strong></p>
<p>例如生活中的模板</p>
<p>一寸照片模板：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/1547105026929.png" alt="1547105026929"><figcaption aria-hidden="true">1547105026929</figcaption>
</figure>
<p>PPT模板：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/1547103297864.png" alt="1547103297864"><figcaption aria-hidden="true">1547103297864</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/1547103359158.png" alt="1547103359158"><figcaption aria-hidden="true">1547103359158</figcaption>
</figure>
<p>模板的特点：</p>
<ul>
<li>模板不可以直接使用，它只是一个框架</li>
<li>模板的通用并不是万能的</li>
</ul>
<h3 id="函数模板">1.2 函数模板</h3>
<ul>
<li><p>C++另一种编程思想称为 <code>泛型编程</code> ，主要利用的技术就是模板</p></li>
<li><p>C++提供两种模板机制:<strong>函数模板</strong>和<strong>类模板</strong></p></li>
</ul>
<h4 id="函数模板语法">1.2.1 函数模板语法</h4>
<p>函数模板作用：</p>
<p>建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</p>
<p><strong>语法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>函数声明或定义<br></code></pre></td></tr></table></figure>
<p><strong>解释：</strong></p>
<p>template --- 声明创建模板</p>
<p>typename --- 表面其后面的符号是一种数据类型，可以用class代替</p>
<p>T --- 通用的数据类型，名称可以替换，通常为大写字母</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//交换整型函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swapInt</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; a, <span class="hljs-keyword">int</span>&amp; b)</span> </span>&#123;<br>	<span class="hljs-keyword">int</span> temp = a;<br>	a = b;<br>	b = temp;<br>&#125;<br><br><span class="hljs-comment">//交换浮点型函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swapDouble</span><span class="hljs-params">(<span class="hljs-keyword">double</span>&amp; a, <span class="hljs-keyword">double</span>&amp; b)</span> </span>&#123;<br>	<span class="hljs-keyword">double</span> temp = a;<br>	a = b;<br>	b = temp;<br>&#125;<br><br><span class="hljs-comment">//利用模板提供通用的交换函数</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mySwap</span><span class="hljs-params">(T&amp; a, T&amp; b)</span></span><br><span class="hljs-function"></span>&#123;<br>	T temp = a;<br>	a = b;<br>	b = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>	<br>	<span class="hljs-comment">//swapInt(a, b);</span><br><br>	<span class="hljs-comment">//利用模板实现交换</span><br>	<span class="hljs-comment">//1、自动类型推导</span><br>	mySwap(a, b);<br><br>	<span class="hljs-comment">//2、显示指定类型</span><br>	mySwap&lt;<span class="hljs-keyword">int</span>&gt;(a, b);<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>函数模板利用关键字 template</li>
<li>使用函数模板有两种方式：自动类型推导、显示指定类型</li>
<li>模板的目的是为了提高复用性，将类型参数化</li>
</ul>
<h4 id="函数模板注意事项">1.2.2 函数模板注意事项</h4>
<p>注意事项：</p>
<ul>
<li><p>自动类型推导，必须推导出一致的数据类型T,才可以使用</p></li>
<li><p>模板必须要确定出T的数据类型，才可以使用</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//利用模板提供通用的交换函数</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mySwap</span><span class="hljs-params">(T&amp; a, T&amp; b)</span></span><br><span class="hljs-function"></span>&#123;<br>	T temp = a;<br>	a = b;<br>	b = temp;<br>&#125;<br><br><br><span class="hljs-comment">// 1、自动类型推导，必须推导出一致的数据类型T,才可以使用</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>	<span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;c&#x27;</span>;<br><br>	mySwap(a, b); <span class="hljs-comment">// 正确，可以推导出一致的T</span><br>	<span class="hljs-comment">//mySwap(a, c); // 错误，推导不出一致的T类型</span><br>&#125;<br><br><br><span class="hljs-comment">// 2、模板必须要确定出T的数据类型，才可以使用</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;func 调用&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//func(); //错误，模板不能独立使用，必须确定出T的类型</span><br>	func&lt;<span class="hljs-keyword">int</span>&gt;(); <span class="hljs-comment">//利用显示指定类型的方式，给T一个类型，才可以使用该模板</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br>	test02();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>使用模板时必须确定出通用数据类型T，并且能够推导出一致的类型</li>
</ul>
<h4 id="函数模板案例">1.2.3 函数模板案例</h4>
<p>案例描述：</p>
<ul>
<li>利用函数模板封装一个排序的函数，可以对<strong>不同数据类型数组</strong>进行排序</li>
<li>排序规则从大到小，排序算法为<strong>选择排序</strong></li>
<li>分别利用<strong>char数组</strong>和<strong>int数组</strong>进行测试</li>
</ul>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//交换的函数模板</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mySwap</span><span class="hljs-params">(T &amp;a, T&amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>	T temp = a;<br>	a = b;<br>	b = temp;<br>&#125;<br><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span> <span class="hljs-comment">// 也可以替换成typename</span><br><span class="hljs-comment">//利用选择排序，进行对数组从大到小的排序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mySort</span><span class="hljs-params">(T arr[], <span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>	&#123;<br>		<span class="hljs-keyword">int</span> max = i; <span class="hljs-comment">//最大数的下标</span><br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; len; j++)<br>		&#123;<br>			<span class="hljs-keyword">if</span> (arr[max] &lt; arr[j])<br>			&#123;<br>				max = j;<br>			&#125;<br>		&#125;<br>		<span class="hljs-keyword">if</span> (max != i) <span class="hljs-comment">//如果最大数的下标不是i，交换两者</span><br>		&#123;<br>			mySwap(arr[max], arr[i]);<br>		&#125;<br>	&#125;<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printArray</span><span class="hljs-params">(T arr[], <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//测试char数组</span><br>	<span class="hljs-keyword">char</span> charArr[] = <span class="hljs-string">&quot;bdcfeagh&quot;</span>;<br>	<span class="hljs-keyword">int</span> num = <span class="hljs-keyword">sizeof</span>(charArr) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>);<br>	mySort(charArr, num);<br>	printArray(charArr, num);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//测试int数组</span><br>	<span class="hljs-keyword">int</span> intArr[] = &#123; <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span> &#125;;<br>	<span class="hljs-keyword">int</span> num = <span class="hljs-keyword">sizeof</span>(intArr) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>);<br>	mySort(intArr, num);<br>	printArray(intArr, num);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br>	test02();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：模板可以提高代码复用，需要熟练掌握</p>
<h4 id="普通函数与函数模板的区别">1.2.4 普通函数与函数模板的区别</h4>
<p><strong>普通函数与函数模板区别：</strong></p>
<ul>
<li>普通函数调用时可以发生自动类型转换（隐式类型转换）</li>
<li>函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换</li>
<li>如果利用显示指定类型的方式，可以发生隐式类型转换</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//普通函数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">myAdd01</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-comment">//函数模板</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function">T <span class="hljs-title">myAdd02</span><span class="hljs-params">(T a, T b)</span>  </span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-comment">//使用函数模板时，如果用自动类型推导，不会发生自动类型转换,即隐式类型转换</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>	<span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;c&#x27;</span>;<br>	<br>	<span class="hljs-built_in">cout</span> &lt;&lt; myAdd01(a, c) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//正确，将char类型的&#x27;c&#x27;隐式转换为int类型  &#x27;c&#x27; 对应 ASCII码 99</span><br><br>	<span class="hljs-comment">//myAdd02(a, c); // 报错，使用自动类型推导时，不会发生隐式类型转换</span><br><br>	myAdd02&lt;<span class="hljs-keyword">int</span>&gt;(a, c); <span class="hljs-comment">//正确，如果用显示指定类型，可以发生隐式类型转换</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T</p>
<h4 id="普通函数与函数模板的调用规则">1.2.5 普通函数与函数模板的调用规则</h4>
<p>调用规则如下：</p>
<ol type="1">
<li>如果函数模板和普通函数都可以实现，优先调用普通函数</li>
<li>可以通过空模板参数列表来强制调用函数模板</li>
<li>函数模板也可以发生重载</li>
<li>如果函数模板可以产生更好的匹配,优先调用函数模板</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//普通函数与函数模板调用规则</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">myPrint</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;调用的普通函数&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">myPrint</span><span class="hljs-params">(T a, T b)</span> </span><br><span class="hljs-function"></span>&#123; <br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;调用的模板&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">myPrint</span><span class="hljs-params">(T a, T b, T c)</span> </span><br><span class="hljs-function"></span>&#123; <br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;调用重载的模板&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//1、如果函数模板和普通函数都可以实现，优先调用普通函数</span><br>	<span class="hljs-comment">// 注意 如果告诉编译器  普通函数是有的，但只是声明没有实现，或者不在当前文件内实现，就会报错找不到</span><br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>	myPrint(a, b); <span class="hljs-comment">//调用普通函数</span><br><br>	<span class="hljs-comment">//2、可以通过空模板参数列表来强制调用函数模板</span><br>	myPrint&lt;&gt;(a, b); <span class="hljs-comment">//调用函数模板</span><br><br>	<span class="hljs-comment">//3、函数模板也可以发生重载</span><br>	<span class="hljs-keyword">int</span> c = <span class="hljs-number">30</span>;<br>	myPrint(a, b, c); <span class="hljs-comment">//调用重载的函数模板</span><br><br>	<span class="hljs-comment">//4、 如果函数模板可以产生更好的匹配,优先调用函数模板</span><br>	<span class="hljs-keyword">char</span> c1 = <span class="hljs-string">&#x27;a&#x27;</span>;<br>	<span class="hljs-keyword">char</span> c2 = <span class="hljs-string">&#x27;b&#x27;</span>;<br>	myPrint(c1, c2); <span class="hljs-comment">//调用函数模板</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性</p>
<h4 id="模板的局限性">1.2.6 模板的局限性</h4>
<p><strong>局限性：</strong></p>
<ul>
<li>模板的通用性并不是万能的</li>
</ul>
<p><strong>例如：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T a, T b)</span></span><br><span class="hljs-function"></span>&#123; <br>    a = b;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在上述代码中提供的赋值操作，如果传入的a和b是一个数组，就无法实现了</p>
<p>再例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T a, T b)</span></span><br><span class="hljs-function"></span>&#123; <br>    <span class="hljs-keyword">if</span>(a &gt; b) &#123; ... &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在上述代码中，如果T的数据类型传入的是像Person这样的自定义数据类型，也无法正常运行</p>
<p>因此C++为了解决这种问题，提供模板的重载，可以为这些<strong>特定的类型</strong>提供<strong>具体化的模板</strong></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age)<br>	&#123;<br>		<span class="hljs-keyword">this</span>-&gt;m_Name = name;<br>		<span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>	&#125;<br>	<span class="hljs-built_in">string</span> m_Name;<br>	<span class="hljs-keyword">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-comment">//普通函数模板</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">myCompare</span><span class="hljs-params">(T&amp; a, T&amp; b)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (a == b)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>&#125;<br><br><br><span class="hljs-comment">//具体化，显示具体化的原型和定意思以template&lt;&gt;开头，并通过名称来指出类型</span><br><span class="hljs-comment">//具体化优先于常规模板</span><br><span class="hljs-keyword">template</span>&lt;&gt; <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">myCompare</span><span class="hljs-params">(Person &amp;p1, Person &amp;p2)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> ( p1.m_Name  == p2.m_Name &amp;&amp; p1.m_Age == p2.m_Age)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>	<span class="hljs-comment">//内置数据类型可以直接使用通用的函数模板</span><br>	<span class="hljs-keyword">bool</span> ret = myCompare(a, b);<br>	<span class="hljs-keyword">if</span> (ret)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a == b &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a != b &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br>	<span class="hljs-comment">//自定义数据类型，不会调用普通的函数模板</span><br>	<span class="hljs-comment">//可以创建具体化的Person数据类型的模板，用于特殊处理这个类型</span><br>	<span class="hljs-keyword">bool</span> ret = myCompare(p1, p2);<br>	<span class="hljs-keyword">if</span> (ret)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;p1 == p2 &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;p1 != p2 &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	test02();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>利用具体化的模板，可以解决自定义类型的通用化</li>
<li>学习模板并不是为了写模板，而是在STL能够运用系统提供的模板</li>
</ul>
<h3 id="类模板">1.3 类模板</h3>
<h4 id="类模板语法">1.3.1 类模板语法</h4>
<p>类模板作用：</p>
<ul>
<li>建立一个通用类，类中的成员 数据类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</li>
</ul>
<p><strong>语法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>类<br></code></pre></td></tr></table></figure>
<p><strong>解释：</strong></p>
<p>template --- 声明创建模板</p>
<p>typename --- 表面其后面的符号是一种数据类型，可以用class代替</p>
<p>T --- 通用的数据类型，名称可以替换，通常为大写字母</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-comment">//类模板</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">AgeType</span>&gt;</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person(NameType name, AgeType age)<br>	&#123;<br>		<span class="hljs-keyword">this</span>-&gt;mName = name;<br>		<span class="hljs-keyword">this</span>-&gt;mAge = age;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mName &lt;&lt; <span class="hljs-string">&quot; age: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mAge &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><span class="hljs-keyword">public</span>:<br>	NameType mName;<br>	AgeType mAge;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">// 指定NameType 为string类型，AgeType 为 int类型</span><br>	Person&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt;P1(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">999</span>);<br>	P1.showPerson();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：类模板和函数模板语法相似，在声明模板template后面加类，此类称为类模板</p>
<h4 id="类模板与函数模板区别">1.3.2 类模板与函数模板区别</h4>
<p>类模板与函数模板区别主要有两点：</p>
<ol type="1">
<li>类模板没有自动类型推导的使用方式</li>
<li>类模板在模板参数列表中可以有默认参数</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-comment">//类模板</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">AgeType</span> =</span> <span class="hljs-keyword">int</span>&gt; <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person(NameType name, AgeType age)<br>	&#123;<br>		<span class="hljs-keyword">this</span>-&gt;mName = name;<br>		<span class="hljs-keyword">this</span>-&gt;mAge = age;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mName &lt;&lt; <span class="hljs-string">&quot; age: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mAge &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><span class="hljs-keyword">public</span>:<br>	NameType mName;<br>	AgeType mAge;<br>&#125;;<br><br><span class="hljs-comment">//1、类模板没有自动类型推导的使用方式</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">// Person p(&quot;孙悟空&quot;, 1000); // 错误 类模板使用时候，不可以用自动类型推导</span><br>	Person &lt;<span class="hljs-built_in">string</span> ,<span class="hljs-keyword">int</span>&gt;p(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">1000</span>); <span class="hljs-comment">//必须使用显示指定类型的方式，使用类模板</span><br>	p.showPerson();<br>&#125;<br><br><span class="hljs-comment">//2、类模板在模板参数列表中可以有默认参数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Person &lt;<span class="hljs-built_in">string</span>&gt; p(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-number">999</span>); <span class="hljs-comment">//类模板中的模板参数列表 可以指定默认参数</span><br>	p.showPerson();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	test02();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>类模板使用只能用显示指定类型方式</li>
<li>类模板中的模板参数列表可以有默认参数</li>
</ul>
<h4 id="类模板中成员函数创建时机">1.3.3 类模板中成员函数创建时机</h4>
<p>类模板中成员函数和普通类中成员函数创建时机是有区别的：</p>
<ul>
<li>普通类中的成员函数一开始就可以创建</li>
<li>类模板中的成员函数在调用时才创建</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person1</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showPerson1</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Person1 show&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person2</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showPerson2</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Person2 show&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	T obj;<br><br>	<span class="hljs-comment">//类模板中的成员函数，并不是一开始就创建的，而是在模板调用时再生成</span><br><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span> </span>&#123; obj.showPerson1(); &#125;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span> </span>&#123; obj.showPerson2(); &#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	MyClass&lt;Person1&gt; m;<br>	<br>	m.fun1();<br><br>	<span class="hljs-comment">//m.fun2();//编译会出错，说明函数调用才会去创建成员函数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建</p>
<h4 id="类模板对象做函数参数">1.3.4 类模板对象做函数参数</h4>
<p>学习目标：</p>
<ul>
<li>类模板实例化出的对象，向函数传参的方式</li>
</ul>
<p>一共有三种传入方式：</p>
<ol type="1">
<li>指定传入的类型 --- 直接显示对象的数据类型</li>
<li>参数模板化 --- 将对象中的参数变为模板进行传递</li>
<li>整个类模板化 --- 将这个对象类型 模板化进行传递</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-comment">//类模板</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">AgeType</span> =</span> <span class="hljs-keyword">int</span>&gt; <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person(NameType name, AgeType age)<br>	&#123;<br>		<span class="hljs-keyword">this</span>-&gt;mName = name;<br>		<span class="hljs-keyword">this</span>-&gt;mAge = age;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mName &lt;&lt; <span class="hljs-string">&quot; age: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mAge &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><span class="hljs-keyword">public</span>:<br>	NameType mName;<br>	AgeType mAge;<br>&#125;;<br><br><span class="hljs-comment">//1、指定传入的类型</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printPerson1</span><span class="hljs-params">(Person&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; &amp;p)</span> </span><br><span class="hljs-function"></span>&#123;<br>	p.showPerson();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Person &lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span> &gt;p(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">100</span>);<br>	printPerson1(p);<br>&#125;<br><br><span class="hljs-comment">//2、参数模板化</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printPerson2</span><span class="hljs-params">(Person&lt;T1, T2&gt;&amp;p)</span></span><br><span class="hljs-function"></span>&#123;<br>	p.showPerson();<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;T1的类型为： &quot;</span> &lt;&lt; <span class="hljs-keyword">typeid</span>(T1).name() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;T2的类型为： &quot;</span> &lt;&lt; <span class="hljs-keyword">typeid</span>(T2).name() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Person &lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span> &gt;p(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-number">90</span>);<br>	printPerson2(p);<br>&#125;<br><br><span class="hljs-comment">//3、整个类模板化</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printPerson3</span><span class="hljs-params">(T &amp; p)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;T的类型为： &quot;</span> &lt;&lt; <span class="hljs-keyword">typeid</span>(T).name() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	p.showPerson();<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Person &lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span> &gt;p(<span class="hljs-string">&quot;唐僧&quot;</span>, <span class="hljs-number">30</span>);<br>	printPerson3(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br>	test02();<br>	test03();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>通过类模板创建的对象，可以有三种方式向函数中进行传参</li>
<li>使用比较广泛是第一种：指定传入的类型</li>
</ul>
<h4 id="类模板与继承">1.3.5 类模板与继承</h4>
<p>当类模板碰到继承时，需要注意一下几点：</p>
<ul>
<li>当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型</li>
<li>如果不指定，编译器无法给子类分配内存</li>
<li>如果想灵活指定出父类中T的类型，子类也需变为类模板</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br>	T m;<br>&#125;;<br><br><span class="hljs-comment">//class Son:public Base  //错误，c++编译需要给子类分配内存，必须知道父类中T的类型才可以向下继承</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> :</span><span class="hljs-keyword">public</span> Base&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-comment">//必须指定一个类型</span><br>&#123;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Son c;<br>&#125;<br><br><span class="hljs-comment">//类模板继承类模板 ,可以用T2指定父类中的T类型</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son2</span> :</span><span class="hljs-keyword">public</span> Base&lt;T2&gt;<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	Son2()<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-keyword">typeid</span>(T1).name() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-keyword">typeid</span>(T2).name() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Son2&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">char</span>&gt; child1;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	test02();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：如果父类是类模板，子类需要指定出父类中T的数据类型</p>
<h4 id="类模板成员函数类外实现">1.3.6 类模板成员函数类外实现</h4>
<p>学习目标：能够掌握类模板中的成员函数类外实现</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//类模板中成员函数类外实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-comment">//成员函数类内声明</span><br>	Person(T1 name, T2 age);<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">public</span>:<br>	T1 m_Name;<br>	T2 m_Age;<br>&#125;;<br><br><span class="hljs-comment">//构造函数 类外实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br>Person&lt;T1, T2&gt;::Person(T1 name, T2 age) &#123;<br>	<span class="hljs-keyword">this</span>-&gt;m_Name = name;<br>	<span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><br><span class="hljs-comment">//成员函数 类外实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br><span class="hljs-keyword">void</span> Person&lt;T1, T2&gt;::showPerson() &#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄:&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Person&lt;string, int&gt; p(&quot;Tom&quot;, 20);<br>	p.showPerson();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：类模板中成员函数类外实现时，需要加上模板参数列表</p>
<h4 id="类模板分文件编写">1.3.7 类模板分文件编写</h4>
<p>学习目标：</p>
<ul>
<li>掌握类模板成员函数分文件编写产生的问题以及解决方式</li>
</ul>
<p>问题：</p>
<ul>
<li>类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到</li>
</ul>
<p>解决：</p>
<ul>
<li>解决方式1：直接包含.cpp源文件</li>
<li>解决方式2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，hpp是约定的名称，并不是强制</li>
</ul>
<p><strong>示例：</strong></p>
<p>person.hpp中代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person(T1 name, T2 age);<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">public</span>:<br>	T1 m_Name;<br>	T2 m_Age;<br>&#125;;<br><br><span class="hljs-comment">//构造函数 类外实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br>Person&lt;T1, T2&gt;::Person(T1 name, T2 age) &#123;<br>	<span class="hljs-keyword">this</span>-&gt;m_Name = name;<br>	<span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><br><span class="hljs-comment">//成员函数 类外实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br><span class="hljs-keyword">void</span> Person&lt;T1, T2&gt;::showPerson() &#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄:&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>类模板分文件编写.cpp中代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">//#include &quot;person.h&quot;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;person.cpp&quot;</span> <span class="hljs-comment">//解决方式1，包含cpp源文件</span></span><br><br><span class="hljs-comment">//解决方式2，将声明和实现写到一起，文件后缀名改为.hpp</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;person.hpp&quot;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Person&lt;string, int&gt; p(&quot;Tom&quot;, 10);<br>	p.showPerson();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp</p>
<h4 id="类模板与友元">1.3.8 类模板与友元</h4>
<p>学习目标：</p>
<ul>
<li>掌握类模板配合友元函数的类内和类外实现</li>
</ul>
<p>全局函数类内实现 - 直接在类内声明友元即可</p>
<p>全局函数类外实现 - 需要提前让编译器知道全局函数的存在</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//2、全局函数配合友元  类外实现 - 先做函数模板声明，下方在做函数模板定义，在做友元</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>;</span><br><br><span class="hljs-comment">//如果声明了函数模板，可以将实现写到后面，否则需要将实现体写到类的前面让编译器提前看到</span><br><span class="hljs-comment">//template&lt;class T1, class T2&gt; void printPerson2(Person&lt;T1, T2&gt; &amp; p); </span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printPerson2</span><span class="hljs-params">(Person&lt;T1, T2&gt; &amp; p)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;类外实现 ---- 姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title">T2</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-comment">//1、全局函数配合友元   类内实现</span><br>	<span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printPerson</span><span class="hljs-params">(Person&lt;T1, T2&gt; &amp; p)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br><br>	<span class="hljs-comment">//全局函数配合友元  类外实现</span><br>	<span class="hljs-keyword">friend</span> <span class="hljs-keyword">void</span> printPerson2&lt;&gt;(Person&lt;T1, T2&gt; &amp; p);<br><br><span class="hljs-keyword">public</span>:<br><br>	Person(T1 name, T2 age)<br>	&#123;<br>		<span class="hljs-keyword">this</span>-&gt;m_Name = name;<br>		<span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>	&#125;<br><br><br><span class="hljs-keyword">private</span>:<br>	T1 m_Name;<br>	T2 m_Age;<br><br>&#125;;<br><br><span class="hljs-comment">//1、全局函数在类内实现</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Person &lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span> &gt;p(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">20</span>);<br>	printPerson(p);<br>&#125;<br><br><br><span class="hljs-comment">//2、全局函数在类外实现</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	Person &lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span> &gt;p(<span class="hljs-string">&quot;Jerry&quot;</span>, <span class="hljs-number">30</span>);<br>	printPerson2(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//test01();</span><br><br>	test02();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：建议全局函数做类内实现，用法简单，而且编译器可以直接识别</p>
<h4 id="类模板案例">1.3.9 类模板案例</h4>
<p>案例描述: 实现一个通用的数组类，要求如下：</p>
<ul>
<li>可以对内置数据类型以及自定义数据类型的数据进行存储</li>
<li>将数组中的数据存储到堆区</li>
<li>构造函数中可以传入数组的容量</li>
<li>提供对应的拷贝构造函数以及operator=防止浅拷贝问题</li>
<li>提供尾插法和尾删法对数组中的数据进行增加和删除</li>
<li>可以通过下标的方式访问数组中的元素</li>
<li>可以获取数组中当前元素个数和数组的容量</li>
</ul>
<p><strong>示例：</strong></p>
<p>myArray.hpp中代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyArray</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <br>	<span class="hljs-comment">//构造函数</span><br>	MyArray(<span class="hljs-keyword">int</span> capacity)<br>	&#123;<br>		<span class="hljs-keyword">this</span>-&gt;m_Capacity = capacity;<br>		<span class="hljs-keyword">this</span>-&gt;m_Size = <span class="hljs-number">0</span>;<br>		pAddress = <span class="hljs-keyword">new</span> T[<span class="hljs-keyword">this</span>-&gt;m_Capacity];<br>	&#125;<br><br>	<span class="hljs-comment">//拷贝构造</span><br>	MyArray(<span class="hljs-keyword">const</span> MyArray &amp; arr)<br>	&#123;<br>		<span class="hljs-keyword">this</span>-&gt;m_Capacity = arr.m_Capacity;<br>		<span class="hljs-keyword">this</span>-&gt;m_Size = arr.m_Size;<br>		<span class="hljs-keyword">this</span>-&gt;pAddress = <span class="hljs-keyword">new</span> T[<span class="hljs-keyword">this</span>-&gt;m_Capacity];<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;m_Size; i++)<br>		&#123;<br>			<span class="hljs-comment">//如果T为对象，而且还包含指针，必须需要重载 = 操作符，因为这个等号不是 构造 而是赋值，</span><br>			<span class="hljs-comment">// 普通类型可以直接= 但是指针类型需要深拷贝</span><br>			<span class="hljs-keyword">this</span>-&gt;pAddress[i] = arr.pAddress[i];<br>		&#125;<br>	&#125;<br><br>	<span class="hljs-comment">//重载= 操作符  防止浅拷贝问题</span><br>	MyArray&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> MyArray&amp; myarray) &#123;<br><br>		<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;pAddress != <span class="hljs-literal">NULL</span>) &#123;<br>			<span class="hljs-keyword">delete</span>[] <span class="hljs-keyword">this</span>-&gt;pAddress;<br>			<span class="hljs-keyword">this</span>-&gt;m_Capacity = <span class="hljs-number">0</span>;<br>			<span class="hljs-keyword">this</span>-&gt;m_Size = <span class="hljs-number">0</span>;<br>		&#125;<br><br>		<span class="hljs-keyword">this</span>-&gt;m_Capacity = myarray.m_Capacity;<br>		<span class="hljs-keyword">this</span>-&gt;m_Size = myarray.m_Size;<br>		<span class="hljs-keyword">this</span>-&gt;pAddress = <span class="hljs-keyword">new</span> T[<span class="hljs-keyword">this</span>-&gt;m_Capacity];<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;m_Size; i++) &#123;<br>			<span class="hljs-keyword">this</span>-&gt;pAddress[i] = myarray[i];<br>		&#125;<br>		<span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>	&#125;<br><br>	<span class="hljs-comment">//重载[] 操作符  arr[0]</span><br>	T&amp; <span class="hljs-keyword">operator</span> [](<span class="hljs-keyword">int</span> index)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;pAddress[index]; <span class="hljs-comment">//不考虑越界，用户自己去处理</span><br>	&#125;<br><br>	<span class="hljs-comment">//尾插法</span><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Push_back</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T &amp; val)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Capacity == <span class="hljs-keyword">this</span>-&gt;m_Size)<br>		&#123;<br>			<span class="hljs-keyword">return</span>;<br>		&#125;<br>		<span class="hljs-keyword">this</span>-&gt;pAddress[<span class="hljs-keyword">this</span>-&gt;m_Size] = val;<br>		<span class="hljs-keyword">this</span>-&gt;m_Size++;<br>	&#125;<br><br>	<span class="hljs-comment">//尾删法</span><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Pop_back</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Size == <span class="hljs-number">0</span>)<br>		&#123;<br>			<span class="hljs-keyword">return</span>;<br>		&#125;<br>		<span class="hljs-keyword">this</span>-&gt;m_Size--;<br>	&#125;<br><br>	<span class="hljs-comment">//获取数组容量</span><br>	<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getCapacity</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;m_Capacity;<br>	&#125;<br><br>	<span class="hljs-comment">//获取数组大小</span><br>	<span class="hljs-function"><span class="hljs-keyword">int</span>	<span class="hljs-title">getSize</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;m_Size;<br>	&#125;<br><br><br>	<span class="hljs-comment">//析构</span><br>	~MyArray()<br>	&#123;<br>		<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;pAddress != <span class="hljs-literal">NULL</span>)<br>		&#123;<br>			<span class="hljs-keyword">delete</span>[] <span class="hljs-keyword">this</span>-&gt;pAddress;<br>			<span class="hljs-keyword">this</span>-&gt;pAddress = <span class="hljs-literal">NULL</span>;<br>			<span class="hljs-keyword">this</span>-&gt;m_Capacity = <span class="hljs-number">0</span>;<br>			<span class="hljs-keyword">this</span>-&gt;m_Size = <span class="hljs-number">0</span>;<br>		&#125;<br>	&#125;<br><br><span class="hljs-keyword">private</span>:<br>	T * pAddress;  <span class="hljs-comment">//指向一个堆空间，这个空间存储真正的数据</span><br>	<span class="hljs-keyword">int</span> m_Capacity; <span class="hljs-comment">//容量</span><br>	<span class="hljs-keyword">int</span> m_Size;   <span class="hljs-comment">// 大小</span><br>&#125;;<br></code></pre></td></tr></table></figure>
<p>类模板案例—数组类封装.cpp中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;myArray.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printIntArray</span><span class="hljs-params">(MyArray&lt;<span class="hljs-keyword">int</span>&gt;&amp; arr)</span> </span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.getSize(); i++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//测试内置数据类型</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-function">MyArray&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">array1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		array1.Push_back(i);<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array1打印输出：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	printIntArray(array1);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array1的大小：&quot;</span> &lt;&lt; array1.getSize() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array1的容量：&quot;</span> &lt;&lt; array1.getCapacity() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;--------------------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-function">MyArray&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">array2</span><span class="hljs-params">(array1)</span></span>;<br>	array2.Pop_back();<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array2打印输出：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	printIntArray(array2);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array2的大小：&quot;</span> &lt;&lt; array2.getSize() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array2的容量：&quot;</span> &lt;&lt; array2.getCapacity() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//测试自定义数据类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person() &#123;&#125; <br>		Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age) &#123;<br>		<span class="hljs-keyword">this</span>-&gt;m_Name = name;<br>		<span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>	&#125;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">string</span> m_Name;<br>	<span class="hljs-keyword">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printPersonArray</span><span class="hljs-params">(MyArray&lt;Person&gt;&amp; personArr)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; personArr.getSize(); i++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; personArr[i].m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; personArr[i].m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//创建数组</span><br>	<span class="hljs-function">MyArray&lt;Person&gt; <span class="hljs-title">pArray</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;韩信&quot;</span>, <span class="hljs-number">20</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;妲己&quot;</span>, <span class="hljs-number">18</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;王昭君&quot;</span>, <span class="hljs-number">15</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;赵云&quot;</span>, <span class="hljs-number">24</span>)</span></span>;<br><br>	<span class="hljs-comment">//插入数据</span><br>	pArray.Push_back(p1);<br>	pArray.Push_back(p2);<br>	pArray.Push_back(p3);<br>	pArray.Push_back(p4);<br>	pArray.Push_back(p5);<br><br>	printPersonArray(pArray);<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;pArray的大小：&quot;</span> &lt;&lt; pArray.getSize() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;pArray的容量：&quot;</span> &lt;&lt; pArray.getCapacity() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//test01();</span><br><br>	test02();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<p>能够利用所学知识点实现通用的数组</p>
<h2 id="stl初识">2 STL初识</h2>
<h3 id="stl的诞生">2.1 STL的诞生</h3>
<ul>
<li><p>长久以来，软件界一直希望建立一种可重复利用的东西</p></li>
<li><p>C++的<strong>面向对象</strong>和<strong>泛型编程</strong>思想，目的就是<strong>复用性的提升</strong></p></li>
<li><p>大多情况下，数据结构和算法都未能有一套标准,导致被迫从事大量重复工作</p></li>
<li><p>为了建立数据结构和算法的一套标准,诞生了<strong>STL</strong></p></li>
</ul>
<h3 id="stl基本概念">2.2 STL基本概念</h3>
<ul>
<li>STL(Standard Template Library,<strong>标准模板库</strong>)</li>
<li>STL 从广义上分为: <strong>容器(container) 算法(algorithm) 迭代器(iterator)</strong></li>
<li><strong>容器</strong>和<strong>算法</strong>之间通过<strong>迭代器</strong>进行无缝连接。</li>
<li>STL 几乎所有的代码都采用了模板类或者模板函数</li>
</ul>
<h3 id="stl六大组件">2.3 STL六大组件</h3>
<p>STL大体分为六大组件，分别是:<strong>容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器</strong></p>
<ol type="1">
<li>容器：各种数据结构，如vector、list、deque、set、map等,用来存放数据。</li>
<li>算法：各种常用的算法，如sort、find、copy、for_each等</li>
<li>迭代器：扮演了容器与算法之间的胶合剂。</li>
<li>仿函数：行为类似函数，可作为算法的某种策略。</li>
<li>适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。</li>
<li>空间配置器：负责空间的配置与管理。</li>
</ol>
<h3 id="stl中容器算法迭代器">2.4 STL中容器、算法、迭代器</h3>
<p><strong>容器：</strong>置物之所也</p>
<p>STL<strong>容器</strong>就是将运用<strong>最广泛的一些数据结构</strong>实现出来</p>
<p>常用的数据结构：数组, 链表,树, 栈, 队列, 集合, 映射表 等</p>
<p>这些容器分为<strong>序列式容器</strong>和<strong>关联式容器</strong>两种:</p>
<p>​ <strong>序列式容器</strong>:强调值的排序，序列式容器中的每个元素均有固定的位置。 ​ <strong>关联式容器</strong>:二叉树结构，各元素之间没有严格的物理上的顺序关系</p>
<p><strong>算法：</strong>问题之解法也</p>
<p>有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms)</p>
<p>算法分为:<strong>质变算法</strong>和<strong>非质变算法</strong>。</p>
<p>质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等</p>
<p>非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等</p>
<p><strong>迭代器：</strong>容器和算法之间粘合剂</p>
<p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。</p>
<p>每个容器都有自己专属的迭代器</p>
<p>迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针</p>
<p>迭代器种类：</p>
<table>
<thead>
<tr class="header">
<th>种类</th>
<th>功能</th>
<th>支持运算</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>输入迭代器</td>
<td>对数据的只读访问</td>
<td>只读，支持++、==、！=</td>
</tr>
<tr class="even">
<td>输出迭代器</td>
<td>对数据的只写访问</td>
<td>只写，支持++</td>
</tr>
<tr class="odd">
<td>前向迭代器</td>
<td>读写操作，并能向前推进迭代器</td>
<td>读写，支持++、==、！=</td>
</tr>
<tr class="even">
<td>双向迭代器</td>
<td>读写操作，并能向前和向后操作</td>
<td>读写，支持++、--，</td>
</tr>
<tr class="odd">
<td>随机访问迭代器</td>
<td>读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td>
<td>读写，支持++、--、[n]、-n、&lt;、&lt;=、&gt;、&gt;=</td>
</tr>
</tbody>
</table>
<p>常用的容器中迭代器种类为双向迭代器，和随机访问迭代器</p>
<h3 id="容器算法迭代器初识">2.5 容器算法迭代器初识</h3>
<p>了解STL中容器、算法、迭代器概念之后，我们利用代码感受STL的魅力</p>
<p>STL中最常用的容器为Vector，可以理解为数组，下面我们将学习如何向这个容器中插入数据、并遍历这个容器</p>
<h4 id="vector存放内置数据类型">2.5.1 vector存放内置数据类型</h4>
<p>容器： <code>vector</code></p>
<p>算法： <code>for_each</code></p>
<p>迭代器： <code>vector&lt;int&gt;::iterator</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MyPrint</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//创建vector容器对象，并且通过模板参数指定容器中存放的数据的类型</span><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>	<span class="hljs-comment">//向容器中放数据</span><br>	v.push_back(<span class="hljs-number">10</span>);<br>	v.push_back(<span class="hljs-number">20</span>);<br>	v.push_back(<span class="hljs-number">30</span>);<br>	v.push_back(<span class="hljs-number">40</span>);<br><br>	<span class="hljs-comment">//每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素</span><br>	<span class="hljs-comment">//v.begin()返回迭代器，这个迭代器指向容器中第一个数据</span><br>	<span class="hljs-comment">//v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置</span><br>	<span class="hljs-comment">//vector&lt;int&gt;::iterator 拿到vector&lt;int&gt;这种容器的迭代器类型</span><br><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator pBegin = v.begin();<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator pEnd = v.end();<br><br>	<span class="hljs-comment">//第一种遍历方式：</span><br>	<span class="hljs-keyword">while</span> (pBegin != pEnd) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *pBegin &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		pBegin++;<br>	&#125;<br><br>	<br>	<span class="hljs-comment">//第二种遍历方式：</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//第三种遍历方式：</span><br>	<span class="hljs-comment">//使用STL提供标准遍历算法  头文件 algorithm</span><br>	for_each(v.begin(), v.end(), MyPrint);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="vector存放自定义数据类型">2.5.2 Vector存放自定义数据类型</h4>
<p>学习目标：vector中存放自定义数据类型，并打印输出</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//自定义数据类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age) &#123;<br>		mName = name;<br>		mAge = age;<br>	&#125;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">string</span> mName;<br>	<span class="hljs-keyword">int</span> mAge;<br>&#125;;<br><span class="hljs-comment">//存放对象</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-built_in">vector</span>&lt;Person&gt; v;<br><br>	<span class="hljs-comment">//创建数据</span><br>	<span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-number">20</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;ddd&quot;</span>, <span class="hljs-number">40</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;eee&quot;</span>, <span class="hljs-number">50</span>)</span></span>;<br><br>	v.push_back(p1);<br>	v.push_back(p2);<br>	v.push_back(p3);<br>	v.push_back(p4);<br>	v.push_back(p5);<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Name:&quot;</span> &lt;&lt; (*it).mName &lt;&lt; <span class="hljs-string">&quot; Age:&quot;</span> &lt;&lt; (*it).mAge &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	&#125;<br>&#125;<br><br><br><span class="hljs-comment">//放对象指针</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-built_in">vector</span>&lt;Person*&gt; v;<br><br>	<span class="hljs-comment">//创建数据</span><br>	<span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-number">20</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;ddd&quot;</span>, <span class="hljs-number">40</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;eee&quot;</span>, <span class="hljs-number">50</span>)</span></span>;<br><br>	v.push_back(&amp;p1);<br>	v.push_back(&amp;p2);<br>	v.push_back(&amp;p3);<br>	v.push_back(&amp;p4);<br>	v.push_back(&amp;p5);<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;Person*&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br>		Person * p = (*it);<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Name:&quot;</span> &lt;&lt; p-&gt;mName &lt;&lt; <span class="hljs-string">&quot; Age:&quot;</span> &lt;&lt; (*it)-&gt;mAge &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br>    <br>	test02();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="vector容器嵌套容器">2.5.3 Vector容器嵌套容器</h4>
<p>学习目标：容器中嵌套容器，我们将所有数据进行遍历输出</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-comment">//容器嵌套容器</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-built_in">vector</span>&lt; <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &gt;  v;<br><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v2;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v3;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v4;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>		v1.push_back(i + <span class="hljs-number">1</span>);<br>		v2.push_back(i + <span class="hljs-number">2</span>);<br>		v3.push_back(i + <span class="hljs-number">3</span>);<br>		v4.push_back(i + <span class="hljs-number">4</span>);<br>	&#125;<br><br>	<span class="hljs-comment">//将容器元素插入到vector v中</span><br>	v.push_back(v1);<br>	v.push_back(v2);<br>	v.push_back(v3);<br>	v.push_back(v4);<br><br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br><br>		<span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator vit = (*it).begin(); vit != (*it).end(); vit++) &#123;<br>			<span class="hljs-built_in">cout</span> &lt;&lt; *vit &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>		&#125;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="stl--常用容器">3 STL- 常用容器</h2>
<h3 id="string容器">3.1 string容器</h3>
<h4 id="string基本概念">3.1.1 string基本概念</h4>
<p><strong>本质：</strong></p>
<ul>
<li>string是C++风格的字符串，而string本质上是一个类</li>
</ul>
<p><strong>string和char * 区别：</strong></p>
<ul>
<li>char * 是一个指针</li>
<li>string是一个类，类内部封装了char*，管理这个字符串，是一个char*型的容器。</li>
</ul>
<p><strong>特点：</strong></p>
<p>string 类内部封装了很多成员方法</p>
<p>例如：查找find，拷贝copy，删除delete 替换replace，插入insert</p>
<p>string管理char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责</p>
<h4 id="string构造函数">3.1.2 string构造函数</h4>
<p>构造函数原型：</p>
<ul>
<li><code>string();</code> //创建一个空的字符串 例如: string str; <code>string(const char* s);</code> //使用字符串s初始化</li>
<li><code>string(const string&amp; str);</code> //使用一个string对象初始化另一个string对象</li>
<li><code>string(int n, char c);</code> //使用n个字符c初始化</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-comment">//string构造</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">string</span> s1; <span class="hljs-comment">//创建空字符串，调用无参构造函数</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str1 = &quot;</span> &lt;&lt; s1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* str = <span class="hljs-string">&quot;hello world&quot;</span>;<br>	<span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">s2</span><span class="hljs-params">(str)</span></span>; <span class="hljs-comment">//把c_string转换成了string</span><br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str2 = &quot;</span> &lt;&lt; s2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">s3</span><span class="hljs-params">(s2)</span></span>; <span class="hljs-comment">//调用拷贝构造函数</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str3 = &quot;</span> &lt;&lt; s3 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">s4</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;a&#x27;</span>)</span></span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str3 = &quot;</span> &lt;&lt; s3 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：string的多种构造方式没有可比性，灵活使用即可</p>
<h4 id="string赋值操作">3.1.3 string赋值操作</h4>
<p>功能描述：</p>
<ul>
<li>给string字符串进行赋值</li>
</ul>
<p>赋值的函数原型：</p>
<ul>
<li><code>string&amp; operator=(const char* s);</code> //char*类型字符串 赋值给当前的字符串</li>
<li><code>string&amp; operator=(const string &amp;s);</code> //把字符串s赋给当前的字符串</li>
<li><code>string&amp; operator=(char c);</code> //字符赋值给当前的字符串</li>
<li><code>string&amp; assign(const char *s);</code> //把字符串s赋给当前的字符串</li>
<li><code>string&amp; assign(const char *s, int n);</code> //把字符串s的前n个字符赋给当前的字符串</li>
<li><code>string&amp; assign(const string &amp;s);</code> //把字符串s赋给当前字符串</li>
<li><code>string&amp; assign(int n, char c);</code> //用n个字符c赋给当前字符串</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//赋值</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">string</span> str1;<br>	str1 = <span class="hljs-string">&quot;hello world&quot;</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">string</span> str2;<br>	str2 = str1;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str2 = &quot;</span> &lt;&lt; str2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">string</span> str3;<br>	str3 = <span class="hljs-string">&#x27;a&#x27;</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">string</span> str4;<br>	str4.assign(<span class="hljs-string">&quot;hello c++&quot;</span>);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str4 = &quot;</span> &lt;&lt; str4 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">string</span> str5;<br>	str5.assign(<span class="hljs-string">&quot;hello c++&quot;</span>,<span class="hljs-number">5</span>);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str5 = &quot;</span> &lt;&lt; str5 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br>	<span class="hljs-built_in">string</span> str6;<br>	str6.assign(str5);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str6 = &quot;</span> &lt;&lt; str6 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">string</span> str7;<br>	str7.assign(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;x&#x27;</span>);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str7 = &quot;</span> &lt;&lt; str7 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<p>​ string的赋值方式很多，<code>operator=</code> 这种方式是比较实用的</p>
<p>c++中 “ “ (const char[2]) ‘ ’ (char)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-string">&quot; &quot;</span>) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//2</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-string">&#x27; &#x27;</span>) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure>
<h4 id="string字符串拼接">3.1.4 string字符串拼接</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>实现在字符串末尾拼接字符串</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>string&amp; operator+=(const char* str);</code> //重载+=操作符</li>
<li><code>string&amp; operator+=(const char c);</code> //重载+=操作符</li>
<li><code>string&amp; operator+=(const string&amp; str);</code> //重载+=操作符</li>
<li><code>string&amp; append(const char *s);</code> //把字符串s连接到当前字符串结尾</li>
<li><code>string&amp; append(const char *s, int n);</code> //把字符串s的前n个字符连接到当前字符串结尾</li>
<li><code>string&amp; append(const string &amp;s);</code> //同operator+=(const string&amp; str)</li>
<li><code>string&amp; append(const string &amp;s, int pos, int n);</code>//字符串s中从pos开始的n个字符连接到字符串结尾</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//字符串拼接</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">string</span> str1 = <span class="hljs-string">&quot;我&quot;</span>;<br><br>	str1 += <span class="hljs-string">&quot;爱玩游戏&quot;</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<br>	str1 += <span class="hljs-string">&#x27;:&#x27;</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">string</span> str2 = <span class="hljs-string">&quot;LOL DNF&quot;</span>;<br><br>	str1 += str2;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">string</span> str3 = <span class="hljs-string">&quot;I&quot;</span>;<br>	str3.append(<span class="hljs-string">&quot; love &quot;</span>);<br>	str3.append(<span class="hljs-string">&quot;game abcde&quot;</span>, <span class="hljs-number">4</span>);<br>	<span class="hljs-comment">//str3.append(str2);</span><br>	str3.append(str2, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// 从下标4位置开始 ，截取3个字符，拼接到字符串末尾</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：字符串拼接的重载版本很多，初学阶段记住几种即可</p>
<h4 id="string查找和替换">3.1.5 string查找和替换</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>查找：查找指定字符串是否存在</li>
<li>替换：在指定的位置替换字符串</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>int find(const string&amp; str, int pos = 0) const;</code> //查找str第一次出现位置,从pos开始查找</li>
<li><code>int find(const char* s, int pos = 0) const;</code> //查找s第一次出现位置,从pos开始查找</li>
<li><code>int find(const char* s, int pos, int n) const;</code> //从pos位置查找s的前n个字符第一次位置</li>
<li><code>int find(const char c, int pos = 0) const;</code> //查找字符c第一次出现位置</li>
<li><code>int rfind(const string&amp; str, int pos = npos) const;</code> //查找str最后一次位置,从pos开始查找</li>
<li><code>int rfind(const char* s, int pos = npos) const;</code> //查找s最后一次出现位置,从pos开始查找</li>
<li><code>int rfind(const char* s, int pos, int n) const;</code> //从pos查找s的前n个字符最后一次位置</li>
<li><code>int rfind(const char c, int pos = 0) const;</code> //查找字符c最后一次出现位置</li>
<li><code>string&amp; replace(int pos, int n, const string&amp; str);</code> //替换从pos开始n个字符为字符串str</li>
<li><code>string&amp; replace(int pos, int n,const char* s);</code> //替换从pos开始的n个字符为字符串s</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//查找和替换</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//查找</span><br>	<span class="hljs-built_in">string</span> str1 = <span class="hljs-string">&quot;abcdefgde&quot;</span>;<br><br>	<span class="hljs-keyword">int</span> pos = str1.find(<span class="hljs-string">&quot;de&quot;</span>);<br><br>	<span class="hljs-keyword">if</span> (pos == <span class="hljs-number">-1</span>)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;未找到&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;pos = &quot;</span> &lt;&lt; pos &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<br><br>	pos = str1.rfind(<span class="hljs-string">&quot;de&quot;</span>);<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;pos = &quot;</span> &lt;&lt; pos &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//替换</span><br>	<span class="hljs-built_in">string</span> str1 = <span class="hljs-string">&quot;abcdefgde&quot;</span>;<br>	str1.replace(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;1111&quot;</span>);<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//test01();</span><br>	<span class="hljs-comment">//test02();</span><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>find查找是从左往后，rfind从右往左</li>
<li>find找到字符串后返回查找的第一个字符位置，找不到返回-1</li>
<li>replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串</li>
</ul>
<h4 id="string字符串比较">3.1.6 string字符串比较</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>字符串之间的比较</li>
</ul>
<p><strong>比较方式：</strong></p>
<ul>
<li>字符串比较是按字符的ASCII码进行对比</li>
</ul>
<p>= 返回 0</p>
<p>&gt; 返回 1</p>
<p>&lt; 返回 -1</p>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>int compare(const string &amp;s) const;</code> //与字符串s比较</li>
<li><code>int compare(const char *s) const;</code> //与字符串s比较</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//字符串比较</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>	<span class="hljs-built_in">string</span> s1 = <span class="hljs-string">&quot;hello&quot;</span>;<br>	<span class="hljs-built_in">string</span> s2 = <span class="hljs-string">&quot;aello&quot;</span>;<br><br>	<span class="hljs-keyword">int</span> ret = s1.compare(s2);<br><br>	<span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;s1 等于 s2&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;s1 大于 s2&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;s1 小于 s2&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大</p>
<h4 id="string字符存取">3.1.7 string字符存取</h4>
<p>string中单个字符存取方式有两种</p>
<ul>
<li><code>char&amp; operator[](int n);</code> //通过[]方式取字符</li>
<li><code>char&amp; at(int n);</code> //通过at方法获取字符</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; str.size(); i++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; str[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; str.size(); i++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; str.at(i) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br>	<span class="hljs-comment">//字符修改</span><br>	str[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>	str.at(<span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;x&#x27;</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：string字符串中单个字符存取有两种方式，利用 [ ] 或 at</p>
<h4 id="string插入和删除">3.1.8 string插入和删除</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对string字符串进行插入和删除字符操作</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>string&amp; insert(int pos, const char* s);</code> //插入字符串</li>
<li><code>string&amp; insert(int pos, const string&amp; str);</code> //插入字符串</li>
<li><code>string&amp; insert(int pos, int n, char c);</code> //在指定位置插入n个字符c</li>
<li><code>string&amp; erase(int pos, int n = npos);</code> //删除从Pos开始的n个字符</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//字符串插入和删除</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;hello&quot;</span>;<br>	str.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;111&quot;</span>);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	str.erase(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);  <span class="hljs-comment">//从1号位置开始3个字符</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong>插入和删除的起始下标都是从0开始</p>
<h4 id="string子串">3.1.9 string子串</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>从字符串中获取想要的子串</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>string substr(int pos = 0, int n = npos) const;</code> //返回由pos开始的n个字符组成的字符串</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//子串</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>	<span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;abcdefg&quot;</span>;<br>	<span class="hljs-built_in">string</span> subStr = str.substr(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;subStr = &quot;</span> &lt;&lt; subStr &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">string</span> email = <span class="hljs-string">&quot;hello@sina.com&quot;</span>;<br>	<span class="hljs-keyword">int</span> pos = email.find(<span class="hljs-string">&quot;@&quot;</span>);<br>	<span class="hljs-built_in">string</span> username = email.substr(<span class="hljs-number">0</span>, pos);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;username: &quot;</span> &lt;&lt; username &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong>灵活的运用求子串功能，可以在实际开发中获取有效的信息</p>
<h3 id="vector容器">3.2 vector容器</h3>
<h4 id="vector基本概念">3.2.1 vector基本概念</h4>
<p><strong>功能：</strong></p>
<ul>
<li>vector数据结构和<strong>数组非常相似</strong>，也称为<strong>单端数组</strong></li>
</ul>
<p><strong>vector与普通数组区别：</strong></p>
<ul>
<li>不同之处在于数组是静态空间，而vector可以<strong>动态扩展</strong></li>
</ul>
<p><strong>动态扩展：</strong></p>
<ul>
<li>并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间</li>
</ul>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/clip_image002.jpg" alt="说明: 2015-11-10_151152"><figcaption aria-hidden="true">说明: 2015-11-10_151152</figcaption>
</figure>
<ul>
<li>vector容器的迭代器是支持随机访问的迭代器</li>
</ul>
<h4 id="vector构造函数">3.2.2 vector构造函数</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>创建vector容器</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>vector&lt;T&gt; v;</code> //采用模板实现类实现，默认构造函数</li>
<li><code>vector(v.begin(), v.end());</code> //将v[begin(), end())区间中的元素拷贝给本身。</li>
<li><code>vector(n, elem);</code> //构造函数将n个elem拷贝给本身。</li>
<li><code>vector(const vector &amp;vec);</code> //拷贝构造函数。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printVector</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; v)</span> </span>&#123;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1; <span class="hljs-comment">//无参构造</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		v1.push_back(i);<br>	&#125;<br>	printVector(v1);<br><br>	<span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v2</span><span class="hljs-params">(v1.begin(), v1.end())</span></span>;<br>	printVector(v2);<br><br>	<span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v3</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>)</span></span>;<br>	printVector(v3);<br>	<br>	<span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v4</span><span class="hljs-params">(v3)</span></span>;<br>	printVector(v4);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong>vector的多种构造方式没有可比性，灵活使用即可</p>
<h4 id="vector赋值操作">3.2.3 vector赋值操作</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>给vector容器进行赋值</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>vector&amp; operator=(const vector &amp;vec);</code>//重载等号操作符</p></li>
<li><p><code>assign(beg, end);</code> //将[beg, end)区间中的数据拷贝赋值给本身。</p></li>
<li><p><code>assign(n, elem);</code> //将n个elem拷贝赋值给本身。</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printVector</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; v)</span> </span>&#123;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//赋值操作</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1; <span class="hljs-comment">//无参构造</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		v1.push_back(i);<br>	&#125;<br>	printVector(v1);<br><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v2;<br>	v2 = v1;<br>	printVector(v2);<br><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v3;<br>	v3.assign(v1.begin(), v1.end());<br>	printVector(v3);<br><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v4;<br>	v4.assign(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<br>	printVector(v4);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>总结： vector赋值方式比较简单，使用operator=，或者assign都可以</p>
<h4 id="vector容量和大小">3.2.4 vector容量和大小</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对vector容器的容量和大小操作</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>empty();</code> //判断容器是否为空</p></li>
<li><p><code>capacity();</code> //容器的容量</p></li>
<li><p><code>size();</code> //返回容器中元素的个数</p></li>
<li><p><code>resize(int num);</code> //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p>
<p>​ //如果容器变短，则末尾超出容器长度的元素被删除。</p></li>
<li><p><code>resize(int num, elem);</code> //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p>
<p>​ //如果容器变短，则末尾超出容器长度的元素被删除</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printVector</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; v)</span> </span>&#123;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		v1.push_back(i);<br>	&#125;<br>	printVector(v1);<br>	<span class="hljs-keyword">if</span> (v1.empty())<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v1为空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v1不为空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v1的容量 = &quot;</span> &lt;&lt; v1.capacity() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v1的大小 = &quot;</span> &lt;&lt; v1.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	<span class="hljs-comment">//resize 重新指定大小 ，若指定的更大，默认用0填充新位置，可以利用重载版本替换默认填充</span><br>	v1.resize(<span class="hljs-number">15</span>,<span class="hljs-number">10</span>);<br>	printVector(v1);<br><br>	<span class="hljs-comment">//resize 重新指定大小 ，若指定的更小，超出部分元素被删除</span><br>	v1.resize(<span class="hljs-number">5</span>);<br>	printVector(v1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>判断是否为空 --- empty</li>
<li>返回元素个数 --- size</li>
<li>返回容器容量 --- capacity</li>
<li>重新指定大小 --- resize</li>
</ul>
<h4 id="vector插入和删除">3.2.5 vector插入和删除</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对vector容器进行插入、删除操作</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>push_back(ele);</code> //尾部插入元素ele</li>
<li><code>pop_back();</code> //删除最后一个元素</li>
<li><code>insert(const_iterator pos, ele);</code> //迭代器指向位置pos插入元素ele</li>
<li><code>insert(const_iterator pos, int count,ele);</code>//迭代器指向位置pos插入count个元素ele</li>
<li><code>erase(const_iterator pos);</code> //删除迭代器指向的元素</li>
<li><code>erase(const_iterator start, const_iterator end);</code>//删除迭代器从start到end之间的元素</li>
<li><code>clear();</code> //删除容器中所有元素</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printVector</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; v)</span> </span>&#123;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//插入和删除</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br>	<span class="hljs-comment">//尾插</span><br>	v1.push_back(<span class="hljs-number">10</span>);<br>	v1.push_back(<span class="hljs-number">20</span>);<br>	v1.push_back(<span class="hljs-number">30</span>);<br>	v1.push_back(<span class="hljs-number">40</span>);<br>	v1.push_back(<span class="hljs-number">50</span>);<br>	printVector(v1);<br>	<span class="hljs-comment">//尾删</span><br>	v1.pop_back();<br>	printVector(v1);<br>	<span class="hljs-comment">//插入</span><br>	v1.insert(v1.begin(), <span class="hljs-number">100</span>);<br>	printVector(v1);<br><br>	v1.insert(v1.begin(), <span class="hljs-number">2</span>, <span class="hljs-number">1000</span>);<br>	printVector(v1);<br><br>	<span class="hljs-comment">//删除</span><br>	v1.erase(v1.begin());<br>	printVector(v1);<br><br>	<span class="hljs-comment">//清空</span><br>	v1.erase(v1.begin(), v1.end());<br>	v1.clear();<br>	printVector(v1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>尾插 --- push_back</li>
<li>尾删 --- pop_back</li>
<li>插入 --- insert (位置迭代器)</li>
<li>删除 --- erase （位置迭代器）</li>
<li>清空 --- clear</li>
</ul>
<h4 id="vector数据存取">3.2.6 vector数据存取</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对vector中的数据的存取操作</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>at(int idx);</code> //返回索引idx所指的数据</li>
<li><code>operator[];</code> //返回索引idx所指的数据</li>
<li><code>front();</code> //返回容器中第一个数据元素</li>
<li><code>back();</code> //返回容器中最后一个数据元素</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v1;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		v1.push_back(i);<br>	&#125;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v1.size(); i++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; v1[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v1.size(); i++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; v1.at(i) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v1的第一个元素为： &quot;</span> &lt;&lt; v1.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v1的最后一个元素为： &quot;</span> &lt;&lt; v1.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>除了用迭代器获取vector容器中元素，[ ]和at也可以</li>
<li>front返回容器第一个元素</li>
<li>back返回容器最后一个元素</li>
</ul>
<h4 id="vector互换容器">3.2.7 vector互换容器</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>实现两个容器内元素进行互换</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>swap(vec);</code> // 将vec与本身的元素互换</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printVector</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; v)</span> </span>&#123;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v1;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		v1.push_back(i);<br>	&#125;<br>	printVector(v1);<br><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v2;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>	&#123;<br>		v2.push_back(i);<br>	&#125;<br>	printVector(v2);<br><br>	<span class="hljs-comment">//互换容器</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;互换后&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	v1.swap(v2);<br>	printVector(v1);<br>	printVector(v2);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;<br>		v.push_back(i);<br>	&#125;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v的容量为：&quot;</span> &lt;&lt; v.capacity() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v的大小为：&quot;</span> &lt;&lt; v.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	v.resize(<span class="hljs-number">3</span>);<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v的容量为：&quot;</span> &lt;&lt; v.capacity() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v的大小为：&quot;</span> &lt;&lt; v.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//收缩内存</span><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;(v).swap(v); <span class="hljs-comment">//匿名对象</span><br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v的容量为：&quot;</span> &lt;&lt; v.capacity() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v的大小为：&quot;</span> &lt;&lt; v.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	test02();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>总结：swap可以使两个容器互换，可以达到实用的收缩内存效果</p>
<h4 id="vector预留空间">3.2.8 vector预留空间</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>减少vector在动态扩展容量时的扩展次数</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>reserve(int len);</code>//容器预留len个元素长度，预留位置不初始化，元素不可访问。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br><br>	<span class="hljs-comment">//预留空间</span><br>	v.reserve(<span class="hljs-number">100000</span>);<br><br>	<span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">int</span>* p = <span class="hljs-literal">NULL</span>;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;<br>		v.push_back(i);<br>		<span class="hljs-keyword">if</span> (p != &amp;v[<span class="hljs-number">0</span>]) &#123;<br>			p = &amp;v[<span class="hljs-number">0</span>];<br>			num++;<br>		&#125;<br>	&#125;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num:&quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br>    <br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：如果数据量较大，可以一开始利用reserve预留空间</p>
<h3 id="deque容器">3.3 deque容器</h3>
<h4 id="deque容器基本概念">3.3.1 deque容器基本概念</h4>
<p><strong>功能：</strong></p>
<ul>
<li>双端数组，可以对头端进行插入删除操作</li>
</ul>
<p><strong>deque与vector区别：</strong></p>
<ul>
<li>vector对于头部的插入删除效率低，数据量越大，效率越低</li>
<li>deque相对而言，对头部的插入删除速度回比vector快</li>
<li>vector访问元素时的速度会比deque快,这和两者内部实现有关</li>
</ul>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/clip_image002-1547547642923.jpg" alt="说明: 2015-11-19_204101"><figcaption aria-hidden="true">说明: 2015-11-19_204101</figcaption>
</figure>
<p>deque内部工作原理:</p>
<p>deque内部有个<strong>中控器</strong>，维护每段缓冲区中的内容，缓冲区中存放真实数据</p>
<p>中控器维护的是每个缓冲区的地址，使得使用deque时像一片连续的内存空间</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/clip_image002-1547547896341.jpg" alt="clip_image002-1547547896341"><figcaption aria-hidden="true">clip_image002-1547547896341</figcaption>
</figure>
<ul>
<li>deque容器的迭代器也是支持随机访问的</li>
</ul>
<h4 id="deque构造函数">3.3.2 deque构造函数</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>deque容器构造</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>deque&lt;T&gt;</code> deqT; //默认构造形式</li>
<li><code>deque(beg, end);</code> //构造函数将[beg, end)区间中的元素拷贝给本身。</li>
<li><code>deque(n, elem);</code> //构造函数将n个elem拷贝给本身。</li>
<li><code>deque(const deque &amp;deq);</code> //拷贝构造函数</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printDeque</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; d)</span> </span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-comment">//deque构造</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d1; <span class="hljs-comment">//无参构造函数</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		d1.push_back(i);<br>	&#125;<br>	printDeque(d1);<br>	<span class="hljs-function"><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">d2</span><span class="hljs-params">(d1.begin(),d1.end())</span></span>;<br>	printDeque(d2);<br><br>	<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;d3(<span class="hljs-number">10</span>,<span class="hljs-number">100</span>);<br>	printDeque(d3);<br><br>	<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;d4 = d3;<br>	printDeque(d4);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong>deque容器和vector容器的构造方式几乎一致，灵活使用即可</p>
<h4 id="deque赋值操作">3.3.3 deque赋值操作</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>给deque容器进行赋值</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>deque&amp; operator=(const deque &amp;deq);</code> //重载等号操作符</p></li>
<li><p><code>assign(beg, end);</code> //将[beg, end)区间中的数据拷贝赋值给本身。</p></li>
<li><p><code>assign(n, elem);</code> //将n个elem拷贝赋值给本身。</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printDeque</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; d)</span> </span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-comment">//赋值操作</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d1;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		d1.push_back(i);<br>	&#125;<br>	printDeque(d1);<br><br>	<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;d2;<br>	d2 = d1;<br>	printDeque(d2);<br><br>	<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;d3;<br>	d3.assign(d1.begin(), d1.end());<br>	printDeque(d3);<br><br>	<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;d4;<br>	d4.assign(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<br>	printDeque(d4);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：deque赋值操作也与vector相同，需熟练掌握</p>
<h4 id="deque大小操作">3.3.4 deque大小操作</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对deque容器的大小进行操作</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>deque.empty();</code> //判断容器是否为空</p></li>
<li><p><code>deque.size();</code> //返回容器中元素的个数</p></li>
<li><p><code>deque.resize(num);</code> //重新指定容器的长度为num,若容器变长，则以默认值填充新位置。</p>
<p>​ //如果容器变短，则末尾超出容器长度的元素被删除。</p></li>
<li><p><code>deque.resize(num, elem);</code> //重新指定容器的长度为num,若容器变长，则以elem值填充新位置。</p>
<p>​ //如果容器变短，则末尾超出容器长度的元素被删除。</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printDeque</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; d)</span> </span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//大小操作</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d1;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		d1.push_back(i);<br>	&#125;<br>	printDeque(d1);<br><br>	<span class="hljs-comment">//判断容器是否为空</span><br>	<span class="hljs-keyword">if</span> (d1.empty()) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;d1为空!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;d1不为空!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-comment">//统计大小</span><br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;d1的大小为：&quot;</span> &lt;&lt; d1.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	<span class="hljs-comment">//重新指定大小</span><br>	d1.resize(<span class="hljs-number">15</span>, <span class="hljs-number">1</span>);<br>	printDeque(d1);<br><br>	d1.resize(<span class="hljs-number">5</span>);<br>	printDeque(d1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>deque没有容量的概念</li>
<li>判断是否为空 --- empty</li>
<li>返回元素个数 --- size</li>
<li>重新指定个数 --- resize</li>
</ul>
<h4 id="deque-插入和删除">3.3.5 deque 插入和删除</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>向deque容器中插入和删除数据</li>
</ul>
<p><strong>函数原型：</strong></p>
<p>两端插入操作：</p>
<ul>
<li><code>push_back(elem);</code> //在容器尾部添加一个数据</li>
<li><code>push_front(elem);</code> //在容器头部插入一个数据</li>
<li><code>pop_back();</code> //删除容器最后一个数据</li>
<li><code>pop_front();</code> //删除容器第一个数据</li>
</ul>
<p>指定位置操作：</p>
<ul>
<li><p><code>insert(pos,elem);</code> //在pos位置插入一个elem元素的拷贝，返回新数据的位置。</p></li>
<li><p><code>insert(pos,n,elem);</code> //在pos位置插入n个elem数据，无返回值。</p></li>
<li><p><code>insert(pos,beg,end);</code> //在pos位置插入[beg,end)区间的数据，无返回值。</p></li>
<li><p><code>clear();</code> //清空容器的所有数据</p></li>
<li><p><code>erase(beg,end);</code> //删除[beg,end)区间的数据，返回下一个数据的位置。</p></li>
<li><p><code>erase(pos);</code> //删除pos位置的数据，返回下一个数据的位置。</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printDeque</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; d)</span> </span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-comment">//两端操作</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d;<br>	<span class="hljs-comment">//尾插</span><br>	d.push_back(<span class="hljs-number">10</span>);<br>	d.push_back(<span class="hljs-number">20</span>);<br>	<span class="hljs-comment">//头插</span><br>	d.push_front(<span class="hljs-number">100</span>);<br>	d.push_front(<span class="hljs-number">200</span>);<br><br>	printDeque(d);<br><br>	<span class="hljs-comment">//尾删</span><br>	d.pop_back();<br>	<span class="hljs-comment">//头删</span><br>	d.pop_front();<br>	printDeque(d);<br>&#125;<br><br><span class="hljs-comment">//插入</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d;<br>	d.push_back(<span class="hljs-number">10</span>);<br>	d.push_back(<span class="hljs-number">20</span>);<br>	d.push_front(<span class="hljs-number">100</span>);<br>	d.push_front(<span class="hljs-number">200</span>);<br>	printDeque(d);<br><br>	d.insert(d.begin(), <span class="hljs-number">1000</span>);<br>	printDeque(d);<br><br>	d.insert(d.begin(), <span class="hljs-number">2</span>,<span class="hljs-number">10000</span>);<br>	printDeque(d);<br><br>	<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;d2;<br>	d2.push_back(<span class="hljs-number">1</span>);<br>	d2.push_back(<span class="hljs-number">2</span>);<br>	d2.push_back(<span class="hljs-number">3</span>);<br><br>	d.insert(d.begin(), d2.begin(), d2.end());<br>	printDeque(d);<br><br>&#125;<br><br><span class="hljs-comment">//删除</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d;<br>	d.push_back(<span class="hljs-number">10</span>);<br>	d.push_back(<span class="hljs-number">20</span>);<br>	d.push_front(<span class="hljs-number">100</span>);<br>	d.push_front(<span class="hljs-number">200</span>);<br>	printDeque(d);<br><br>	d.erase(d.begin());<br>	printDeque(d);<br><br>	d.erase(d.begin(), d.end());<br>	d.clear();<br>	printDeque(d);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//test01();</span><br><br>	<span class="hljs-comment">//test02();</span><br><br>    test03();<br>    <br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>插入和删除提供的位置是迭代器！</li>
<li>尾插 --- push_back</li>
<li>尾删 --- pop_back</li>
<li>头插 --- push_front</li>
<li>头删 --- pop_front</li>
</ul>
<h4 id="deque-数据存取">3.3.6 deque 数据存取</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对deque 中的数据的存取操作</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>at(int idx);</code> //返回索引idx所指的数据</li>
<li><code>operator[];</code> //返回索引idx所指的数据</li>
<li><code>front();</code> //返回容器中第一个数据元素</li>
<li><code>back();</code> //返回容器中最后一个数据元素</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printDeque</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; d)</span> </span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//数据存取</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>	<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d;<br>	d.push_back(<span class="hljs-number">10</span>);<br>	d.push_back(<span class="hljs-number">20</span>);<br>	d.push_front(<span class="hljs-number">100</span>);<br>	d.push_front(<span class="hljs-number">200</span>);<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; d.size(); i++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; d[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; d.size(); i++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; d.at(i) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;front:&quot;</span> &lt;&lt; d.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;back:&quot;</span> &lt;&lt; d.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>除了用迭代器获取deque容器中元素，[ ]和at也可以</li>
<li>front返回容器第一个元素</li>
<li>back返回容器最后一个元素</li>
</ul>
<h4 id="deque-排序">3.3.7 deque 排序</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>利用算法实现对deque容器进行排序</li>
</ul>
<p><strong>算法：</strong></p>
<ul>
<li><code>sort(iterator beg, iterator end)</code> //对beg和end区间内元素进行排序</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printDeque</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; d)</span> </span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>	<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d;<br>	d.push_back(<span class="hljs-number">10</span>);<br>	d.push_back(<span class="hljs-number">20</span>);<br>	d.push_front(<span class="hljs-number">100</span>);<br>	d.push_front(<span class="hljs-number">200</span>);<br><br>	printDeque(d);<br>	sort(d.begin(), d.end());<br>	printDeque(d);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：sort算法非常实用，使用时包含头文件 algorithm即可</p>
<h3 id="案例-评委打分">3.4 案例-评委打分</h3>
<h4 id="案例描述">3.4.1 案例描述</h4>
<p>有5名选手：选手ABCDE，10个评委分别对每一名选手打分，去除最高分，去除评委中最低分，取平均分。</p>
<h4 id="实现步骤">3.4.2 实现步骤</h4>
<ol type="1">
<li>创建五名选手，放到vector中</li>
<li>遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分打分存到deque容器中</li>
<li>sort算法对deque容器中分数排序，去除最高和最低分</li>
<li>deque容器遍历一遍，累加总分</li>
<li>获取平均分</li>
</ol>
<p><strong>示例代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//选手类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> score)<br>	&#123;<br>		<span class="hljs-keyword">this</span>-&gt;m_Name = name;<br>		<span class="hljs-keyword">this</span>-&gt;m_Score = score;<br>	&#125;<br><br>	<span class="hljs-built_in">string</span> m_Name; <span class="hljs-comment">//姓名</span><br>	<span class="hljs-keyword">int</span> m_Score;  <span class="hljs-comment">//平均分</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createPerson</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;Person&gt;&amp;v)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">string</span> nameSeed = <span class="hljs-string">&quot;ABCDE&quot;</span>;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>	&#123;<br>		<span class="hljs-built_in">string</span> name = <span class="hljs-string">&quot;选手&quot;</span>;<br>		name += nameSeed[i];<br><br>		<span class="hljs-keyword">int</span> score = <span class="hljs-number">0</span>;<br><br>		<span class="hljs-function">Person <span class="hljs-title">p</span><span class="hljs-params">(name, score)</span></span>;<br><br>		<span class="hljs-comment">//将创建的person对象 放入到容器中</span><br>		v.push_back(p);<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//打分</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setScore</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;Person&gt;&amp;v)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)<br>	&#123;<br>		<span class="hljs-comment">//将评委的分数 放入到deque容器中</span><br>		<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;d;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>		&#123;<br>			<span class="hljs-keyword">int</span> score = rand() % <span class="hljs-number">41</span> + <span class="hljs-number">60</span>;  <span class="hljs-comment">// 60 ~ 100</span><br>			d.push_back(score);<br>		&#125;<br><br>		<span class="hljs-comment">//cout &lt;&lt; &quot;选手： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 打分： &quot; &lt;&lt; endl;</span><br>		<span class="hljs-comment">//for (deque&lt;int&gt;::iterator dit = d.begin(); dit != d.end(); dit++)</span><br>		<span class="hljs-comment">//&#123;</span><br>		<span class="hljs-comment">//	cout &lt;&lt; *dit &lt;&lt; &quot; &quot;;</span><br>		<span class="hljs-comment">//&#125;</span><br>		<span class="hljs-comment">//cout &lt;&lt; endl;</span><br><br>		<span class="hljs-comment">//排序</span><br>		sort(d.begin(), d.end());<br><br>		<span class="hljs-comment">//去除最高和最低分</span><br>		d.pop_back();<br>		d.pop_front();<br><br>		<span class="hljs-comment">//取平均分</span><br>		<span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator dit = d.begin(); dit != d.end(); dit++)<br>		&#123;<br>			sum += *dit; <span class="hljs-comment">//累加每个评委的分数</span><br>		&#125;<br><br>		<span class="hljs-keyword">int</span> avg = sum / d.size();<br><br>		<span class="hljs-comment">//将平均分 赋值给选手身上</span><br>		it-&gt;m_Score = avg;<br>	&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showScore</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;Person&gt;&amp;v)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 平均分： &quot;</span> &lt;&lt; it-&gt;m_Score &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//随机数种子</span><br>	srand((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)time(<span class="hljs-literal">NULL</span>));<br><br>	<span class="hljs-comment">//1、创建5名选手</span><br>	<span class="hljs-built_in">vector</span>&lt;Person&gt;v;  <span class="hljs-comment">//存放选手容器</span><br>	createPerson(v);<br><br>	<span class="hljs-comment">//测试</span><br>	<span class="hljs-comment">//for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br>	<span class="hljs-comment">//&#123;</span><br>	<span class="hljs-comment">//	cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; (*it).m_Name &lt;&lt; &quot; 分数： &quot; &lt;&lt; (*it).m_Score &lt;&lt; endl;</span><br>	<span class="hljs-comment">//&#125;</span><br><br>	<span class="hljs-comment">//2、给5名选手打分</span><br>	setScore(v);<br><br>	<span class="hljs-comment">//3、显示最后得分</span><br>	showScore(v);<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong> 选取不同的容器操作数据，可以提升代码的效率</p>
<h3 id="stack容器">3.5 stack容器</h3>
<h4 id="stack-基本概念">3.5.1 stack 基本概念</h4>
<p><strong>概念：</strong>stack是一种<strong>先进后出</strong>(First In Last Out,FILO)的数据结构，它只有一个出口</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/clip_image002-1547604555425.jpg" alt="说明: 2015-11-15_195707"><figcaption aria-hidden="true">说明: 2015-11-15_195707</figcaption>
</figure>
<p>栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为</p>
<p>栈中进入数据称为 --- <strong>入栈</strong> <code>push</code></p>
<p>栈中弹出数据称为 --- <strong>出栈</strong> <code>pop</code></p>
<p>生活中的栈：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/clip_image002.png" alt="img"><figcaption aria-hidden="true">img</figcaption>
</figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/clip_image002-1547605111510.jpg" alt="img"><figcaption aria-hidden="true">img</figcaption>
</figure>
<h4 id="stack-常用接口">3.5.2 stack 常用接口</h4>
<p>功能描述：栈容器常用的对外接口</p>
<p>构造函数：</p>
<ul>
<li><code>stack&lt;T&gt; stk;</code> //stack采用模板类实现， stack对象的默认构造形式</li>
<li><code>stack(const stack &amp;stk);</code> //拷贝构造函数</li>
</ul>
<p>赋值操作：</p>
<ul>
<li><code>stack&amp; operator=(const stack &amp;stk);</code> //重载等号操作符</li>
</ul>
<p>数据存取：</p>
<ul>
<li><code>push(elem);</code> //向栈顶添加元素</li>
<li><code>pop();</code> //从栈顶移除第一个元素</li>
<li><code>top();</code> //返回栈顶元素</li>
</ul>
<p>大小操作：</p>
<ul>
<li><code>empty();</code> //判断堆栈是否为空</li>
<li><code>size();</code> //返回栈的大小</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><br><span class="hljs-comment">//栈容器常用接口</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//创建栈容器 栈容器必须符合先进后出</span><br>	<span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br><br>	<span class="hljs-comment">//向栈中添加元素，叫做 压栈 入栈</span><br>	s.push(<span class="hljs-number">10</span>);<br>	s.push(<span class="hljs-number">20</span>);<br>	s.push(<span class="hljs-number">30</span>);<br><br>	<span class="hljs-keyword">while</span> (!s.empty()) &#123;<br>		<span class="hljs-comment">//输出栈顶元素</span><br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;栈顶元素为： &quot;</span> &lt;&lt; s.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-comment">//弹出栈顶元素</span><br>		s.pop();<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;栈的大小为：&quot;</span> &lt;&lt; s.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>入栈 --- push</li>
<li>出栈 --- pop</li>
<li>返回栈顶 --- top</li>
<li>判断栈是否为空 --- empty</li>
<li>返回栈大小 --- size</li>
</ul>
<h3 id="queue-容器">3.6 queue 容器</h3>
<h4 id="queue-基本概念">3.6.1 queue 基本概念</h4>
<p><strong>概念：</strong>Queue是一种<strong>先进先出</strong>(First In First Out,FIFO)的数据结构，它有两个出口</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/clip_image002-1547606475892.jpg" alt="说明: 2015-11-15_214429"><figcaption aria-hidden="true">说明: 2015-11-15_214429</figcaption>
</figure>
<p>队列容器允许从一端新增元素，从另一端移除元素</p>
<p>队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为</p>
<p>队列中进数据称为 --- <strong>入队</strong> <code>push</code></p>
<p>队列中出数据称为 --- <strong>出队</strong> <code>pop</code></p>
<p>生活中的队列：</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/1547606785041.png" alt="1547606785041"><figcaption aria-hidden="true">1547606785041</figcaption>
</figure>
<h4 id="queue-常用接口">3.6.2 queue 常用接口</h4>
<p>功能描述：栈容器常用的对外接口</p>
<p>构造函数：</p>
<ul>
<li><code>queue&lt;T&gt; que;</code> //queue采用模板类实现，queue对象的默认构造形式</li>
<li><code>queue(const queue &amp;que);</code> //拷贝构造函数</li>
</ul>
<p>赋值操作：</p>
<ul>
<li><code>queue&amp; operator=(const queue &amp;que);</code> //重载等号操作符</li>
</ul>
<p>数据存取：</p>
<ul>
<li><code>push(elem);</code> //往队尾添加元素</li>
<li><code>pop();</code> //从队头移除第一个元素</li>
<li><code>back();</code> //返回最后一个元素</li>
<li><code>front();</code> //返回第一个元素</li>
</ul>
<p>大小操作：</p>
<ul>
<li><code>empty();</code> //判断堆栈是否为空</li>
<li><code>size();</code> //返回栈的大小</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age)<br>	&#123;<br>		<span class="hljs-keyword">this</span>-&gt;m_Name = name;<br>		<span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>	&#125;<br><br>	<span class="hljs-built_in">string</span> m_Name;<br>	<span class="hljs-keyword">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//创建队列</span><br>	<span class="hljs-built_in">queue</span>&lt;Person&gt; q;<br><br>	<span class="hljs-comment">//准备数据</span><br>	<span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;唐僧&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">1000</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-number">900</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;沙僧&quot;</span>, <span class="hljs-number">800</span>)</span></span>;<br><br>	<span class="hljs-comment">//向队列中添加元素  入队操作</span><br>	q.push(p1);<br>	q.push(p2);<br>	q.push(p3);<br>	q.push(p4);<br><br>	<span class="hljs-comment">//队列不提供迭代器，更不支持随机访问	</span><br>	<span class="hljs-keyword">while</span> (!q.empty()) &#123;<br>		<span class="hljs-comment">//输出队头元素</span><br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;队头元素-- 姓名： &quot;</span> &lt;&lt; q.front().m_Name <br>              &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span>&lt;&lt; q.front().m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;队尾元素-- 姓名： &quot;</span> &lt;&lt; q.back().m_Name  <br>              &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; q.back().m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-comment">//弹出队头元素</span><br>		q.pop();<br>	&#125;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;队列大小为：&quot;</span> &lt;&lt; q.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>入队 --- push</li>
<li>出队 --- pop</li>
<li>返回队头元素 --- front</li>
<li>返回队尾元素 --- back</li>
<li>判断队是否为空 --- empty</li>
<li>返回队列大小 --- size</li>
</ul>
<h3 id="list容器">3.7 list容器</h3>
<h4 id="list基本概念">3.7.1 list基本概念</h4>
<p><strong>功能：</strong>将数据进行链式存储</p>
<p><strong>链表</strong>（list）是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的</p>
<p>链表的组成：链表由一系列<strong>结点</strong>组成</p>
<p>结点的组成：一个是存储数据元素的<strong>数据域</strong>，另一个是存储下一个结点地址的<strong>指针域</strong></p>
<p>STL中的链表是一个双向循环链表</p>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/clip_image002-1547608564071.jpg" alt="说明: 2015-11-15_225145"><figcaption aria-hidden="true">说明: 2015-11-15_225145</figcaption>
</figure>
<p>由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于<strong>双向迭代器</strong></p>
<p>list的优点：</p>
<ul>
<li>采用动态存储分配，不会造成内存浪费和溢出</li>
<li>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素</li>
</ul>
<p>list的缺点：</p>
<ul>
<li>链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大</li>
</ul>
<p>List有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的。</p>
<p>总结：STL中<strong>List和vector是两个最常被使用的容器</strong>，各有优缺点</p>
<h4 id="list构造函数">3.7.2 list构造函数</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>创建list容器</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>list&lt;T&gt; lst;</code> //list采用采用模板类实现,对象的默认构造形式：</li>
<li><code>list(beg,end);</code> //构造函数将[beg, end)区间中的元素拷贝给本身。</li>
<li><code>list(n,elem);</code> //构造函数将n个elem拷贝给本身。</li>
<li><code>list(const list &amp;lst);</code> //拷贝构造函数。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; L)</span> </span>&#123;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L1;<br>	L1.push_back(<span class="hljs-number">10</span>);<br>	L1.push_back(<span class="hljs-number">20</span>);<br>	L1.push_back(<span class="hljs-number">30</span>);<br>	L1.push_back(<span class="hljs-number">40</span>);<br><br>	printList(L1);<br><br>	<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L2(L1.begin(),L1.end());<br>	printList(L2);<br><br>	<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L3(L2);<br>	printList(L3);<br><br>	<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L4(<span class="hljs-number">10</span>, <span class="hljs-number">1000</span>);<br>	printList(L4);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：list构造方式同其他几个STL常用容器，熟练掌握即可</p>
<h4 id="list-赋值和交换">3.7.3 list 赋值和交换</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>给list容器进行赋值，以及交换list容器</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>assign(beg, end);</code> //将[beg, end)区间中的数据拷贝赋值给本身。</li>
<li><code>assign(n, elem);</code> //将n个elem拷贝赋值给本身。</li>
<li><code>list&amp; operator=(const list &amp;lst);</code> //重载等号操作符</li>
<li><code>swap(lst);</code> //将lst与本身的元素互换。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; L)</span> </span>&#123;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//赋值和交换</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L1;<br>	L1.push_back(<span class="hljs-number">10</span>);<br>	L1.push_back(<span class="hljs-number">20</span>);<br>	L1.push_back(<span class="hljs-number">30</span>);<br>	L1.push_back(<span class="hljs-number">40</span>);<br>	printList(L1);<br><br>	<span class="hljs-comment">//赋值</span><br>	<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L2;<br>	L2 = L1;<br>	printList(L2);<br><br>	<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L3;<br>	L3.assign(L2.begin(), L2.end());<br>	printList(L3);<br><br>	<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L4;<br>	L4.assign(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<br>	printList(L4);<br><br>&#125;<br><br><span class="hljs-comment">//交换</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>	<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L1;<br>	L1.push_back(<span class="hljs-number">10</span>);<br>	L1.push_back(<span class="hljs-number">20</span>);<br>	L1.push_back(<span class="hljs-number">30</span>);<br>	L1.push_back(<span class="hljs-number">40</span>);<br><br>	<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L2;<br>	L2.assign(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;交换前： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	printList(L1);<br>	printList(L2);<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	L1.swap(L2);<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;交换后： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	printList(L1);<br>	printList(L2);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//test01();</span><br><br>	test02();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：list赋值和交换操作能够灵活运用即可</p>
<h4 id="list-大小操作">3.7.4 list 大小操作</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对list容器的大小进行操作</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>size();</code> //返回容器中元素的个数</p></li>
<li><p><code>empty();</code> //判断容器是否为空</p></li>
<li><p><code>resize(num);</code> //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p>
<p>​ //如果容器变短，则末尾超出容器长度的元素被删除。</p></li>
<li><p><code>resize(num, elem);</code> //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p>
<p>//如果容器变短，则末尾超出容器长度的元素被删除。</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; L)</span> </span>&#123;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//大小操作</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L1;<br>	L1.push_back(<span class="hljs-number">10</span>);<br>	L1.push_back(<span class="hljs-number">20</span>);<br>	L1.push_back(<span class="hljs-number">30</span>);<br>	L1.push_back(<span class="hljs-number">40</span>);<br><br>	<span class="hljs-keyword">if</span> (L1.empty())<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;L1为空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;L1不为空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;L1的大小为： &quot;</span> &lt;&lt; L1.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	<span class="hljs-comment">//重新指定大小</span><br>	L1.resize(<span class="hljs-number">10</span>);<br>	printList(L1);<br><br>	L1.resize(<span class="hljs-number">2</span>);<br>	printList(L1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>判断是否为空 --- empty</li>
<li>返回元素个数 --- size</li>
<li>重新指定个数 --- resize</li>
</ul>
<h4 id="list-插入和删除">3.7.5 list 插入和删除</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对list容器进行数据的插入和删除</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li>push_back(elem);//在容器尾部加入一个元素</li>
<li>pop_back();//删除容器中最后一个元素</li>
<li>push_front(elem);//在容器开头插入一个元素</li>
<li>pop_front();//从容器开头移除第一个元素</li>
<li>insert(pos,elem);//在pos位置插elem元素的拷贝，返回新数据的位置。</li>
<li>insert(pos,n,elem);//在pos位置插入n个elem数据，无返回值。</li>
<li>insert(pos,beg,end);//在pos位置插入[beg,end)区间的数据，无返回值。</li>
<li>clear();//移除容器的所有数据</li>
<li>erase(beg,end);//删除[beg,end)区间的数据，返回下一个数据的位置。</li>
<li>erase(pos);//删除pos位置的数据，返回下一个数据的位置。</li>
<li>remove(elem);//删除容器中所有与elem值匹配的元素。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; L)</span> </span>&#123;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//插入和删除</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt; L;<br>	<span class="hljs-comment">//尾插</span><br>	L.push_back(<span class="hljs-number">10</span>);<br>	L.push_back(<span class="hljs-number">20</span>);<br>	L.push_back(<span class="hljs-number">30</span>);<br>	<span class="hljs-comment">//头插</span><br>	L.push_front(<span class="hljs-number">100</span>);<br>	L.push_front(<span class="hljs-number">200</span>);<br>	L.push_front(<span class="hljs-number">300</span>);<br><br>	printList(L);<span class="hljs-comment">//300 200 100 10 20 30</span><br><br>	<span class="hljs-comment">//尾删</span><br>	L.pop_back();<br>	printList(L);<span class="hljs-comment">//300 200 100 10 20</span><br><br>	<span class="hljs-comment">//头删</span><br>	L.pop_front();<br>	printList(L);<span class="hljs-comment">// 200 100 10 20</span><br><br>	<span class="hljs-comment">//插入</span><br>	<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = L.begin();<br>	L.insert(++it, <span class="hljs-number">1000</span>);<br>	printList(L);<span class="hljs-comment">// 200 1000 100 1000 10 1000 20 1000</span><br><br>	<span class="hljs-comment">//删除</span><br>	it = L.begin();<br>	L.erase(++it);<br>	printList(L);<span class="hljs-comment">// 200 100 10 20</span><br><br><br>	<span class="hljs-comment">//移除</span><br>	L.push_back(<span class="hljs-number">10000</span>);<br>	L.push_back(<span class="hljs-number">10000</span>);<br>	L.push_back(<span class="hljs-number">10000</span>);<br>	printList(L);<span class="hljs-comment">// 200 100 10 20 10000 10000 10000</span><br>	L.remove(<span class="hljs-number">10000</span>);<br>	printList(L);<span class="hljs-comment">// 200 100 10 20</span><br>    <br>    <span class="hljs-comment">//清空</span><br>	L.clear();<br>	printList(L);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>尾插 --- push_back</li>
<li>尾删 --- pop_back</li>
<li>头插 --- push_front</li>
<li>头删 --- pop_front</li>
<li>插入 --- insert</li>
<li>删除 --- erase</li>
<li>移除 --- remove</li>
<li>清空 --- clear</li>
</ul>
<h4 id="list-数据存取">3.7.6 list 数据存取</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对list容器中数据进行存取</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>front();</code> //返回第一个元素。</li>
<li><code>back();</code> //返回最后一个元素。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><br><span class="hljs-comment">//数据存取</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;L1;<br>	L1.push_back(<span class="hljs-number">10</span>);<br>	L1.push_back(<span class="hljs-number">20</span>);<br>	L1.push_back(<span class="hljs-number">30</span>);<br>	L1.push_back(<span class="hljs-number">40</span>);<br><br>	<br>	<span class="hljs-comment">//cout &lt;&lt; L1.at(0) &lt;&lt; endl;//错误 不支持at访问数据</span><br>	<span class="hljs-comment">//cout &lt;&lt; L1[0] &lt;&lt; endl; //错误  不支持[]方式访问数据</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;第一个元素为： &quot;</span> &lt;&lt; L1.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;最后一个元素为： &quot;</span> &lt;&lt; L1.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//list容器的迭代器是双向迭代器，不支持随机访问</span><br>	<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = L1.begin();<br>	<span class="hljs-comment">//it = it + 1;//错误，不可以跳跃访问，即使是+1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>list容器中不可以通过[]或者at方式访问数据</li>
<li>返回第一个元素 --- front</li>
<li>返回最后一个元素 --- back</li>
</ul>
<h4 id="list-反转和排序">3.7.7 list 反转和排序</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>将容器中的元素反转，以及将容器中的数据进行排序</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>reverse();</code> //反转链表</li>
<li><code>sort();</code> //链表排序</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; L)</span> </span>&#123;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">myCompare</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val1 , <span class="hljs-keyword">int</span> val2)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">return</span> val1 &gt; val2;<br>&#125;<br><br><span class="hljs-comment">//反转和排序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt; L;<br>	L.push_back(<span class="hljs-number">90</span>);<br>	L.push_back(<span class="hljs-number">30</span>);<br>	L.push_back(<span class="hljs-number">20</span>);<br>	L.push_back(<span class="hljs-number">70</span>);<br>	printList(L);<br><br>	<span class="hljs-comment">//反转容器的元素</span><br>	L.reverse();<br>	printList(L);<br><br>	<span class="hljs-comment">//排序</span><br>	L.sort(); <span class="hljs-comment">//默认的排序规则 从小到大</span><br>	printList(L);<br><br>	L.sort(myCompare); <span class="hljs-comment">//指定规则，从大到小</span><br>	printList(L);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>反转 --- reverse</li>
<li>排序 --- sort （成员函数）</li>
</ul>
<h4 id="排序案例">3.7.8 排序案例</h4>
<p>案例描述：将Person自定义数据类型进行排序，Person中属性有姓名、年龄、身高</p>
<p>排序规则：按照年龄进行升序，如果年龄相同按照身高进行降序</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age , <span class="hljs-keyword">int</span> height) &#123;<br>		m_Name = name;<br>		m_Age = age;<br>		m_Height = height;<br>	&#125;<br><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">string</span> m_Name;  <span class="hljs-comment">//姓名</span><br>	<span class="hljs-keyword">int</span> m_Age;      <span class="hljs-comment">//年龄</span><br>	<span class="hljs-keyword">int</span> m_Height;   <span class="hljs-comment">//身高</span><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ComparePerson</span><span class="hljs-params">(Person&amp; p1, Person&amp; p2)</span> </span>&#123;<br><br>	<span class="hljs-keyword">if</span> (p1.m_Age == p2.m_Age) &#123;<br>		<span class="hljs-keyword">return</span> p1.m_Height  &gt; p2.m_Height;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-keyword">return</span>  p1.m_Age &lt; p2.m_Age;<br>	&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-built_in">list</span>&lt;Person&gt; L;<br><br>	<span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;刘备&quot;</span>, <span class="hljs-number">35</span> , <span class="hljs-number">175</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;曹操&quot;</span>, <span class="hljs-number">45</span> , <span class="hljs-number">180</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;孙权&quot;</span>, <span class="hljs-number">40</span> , <span class="hljs-number">170</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;赵云&quot;</span>, <span class="hljs-number">25</span> , <span class="hljs-number">190</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-number">35</span> , <span class="hljs-number">160</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p6</span><span class="hljs-params">(<span class="hljs-string">&quot;关羽&quot;</span>, <span class="hljs-number">35</span> , <span class="hljs-number">200</span>)</span></span>;<br><br>	L.push_back(p1);<br>	L.push_back(p2);<br>	L.push_back(p3);<br>	L.push_back(p4);<br>	L.push_back(p5);<br>	L.push_back(p6);<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">list</span>&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; it-&gt;m_Age <br>              &lt;&lt; <span class="hljs-string">&quot; 身高： &quot;</span> &lt;&lt; it-&gt;m_Height &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;---------------------------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	L.sort(ComparePerson); <span class="hljs-comment">//排序</span><br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">list</span>&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; it-&gt;m_Age <br>              &lt;&lt; <span class="hljs-string">&quot; 身高： &quot;</span> &lt;&lt; it-&gt;m_Height &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li><p>对于自定义数据类型，必须要指定排序规则，否则编译器不知道如何进行排序</p></li>
<li><p>高级排序只是在排序规则上再进行一次逻辑规则制定，并不复杂</p></li>
</ul>
<h3 id="set-multiset-容器">3.8 set/ multiset 容器</h3>
<h4 id="set基本概念">3.8.1 set基本概念</h4>
<p><strong>简介：</strong></p>
<ul>
<li>所有元素都会在插入时自动被排序</li>
</ul>
<p><strong>本质：</strong></p>
<ul>
<li>set/multiset属于<strong>关联式容器</strong>，底层结构是用<strong>二叉树</strong>实现。</li>
</ul>
<p><strong>set和multiset区别</strong>：</p>
<ul>
<li>set不允许容器中有重复的元素</li>
<li>multiset允许容器中有重复的元素</li>
</ul>
<h4 id="set构造和赋值">3.8.2 set构造和赋值</h4>
<p>功能描述：创建set容器以及赋值</p>
<p>构造：</p>
<ul>
<li><code>set&lt;T&gt; st;</code> //默认构造函数：</li>
<li><code>set(const set &amp;st);</code> //拷贝构造函数</li>
</ul>
<p>赋值：</p>
<ul>
<li><code>set&amp; operator=(const set &amp;st);</code> //重载等号操作符</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printSet</span><span class="hljs-params">(<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp; s)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = s.begin(); it != s.end(); it++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//构造和赋值</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s1;<br><br>	s1.insert(<span class="hljs-number">10</span>);<br>	s1.insert(<span class="hljs-number">30</span>);<br>	s1.insert(<span class="hljs-number">20</span>);<br>	s1.insert(<span class="hljs-number">40</span>);<br>	printSet(s1);<br><br>	<span class="hljs-comment">//拷贝构造</span><br>	<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;s2(s1);<br>	printSet(s2);<br><br>	<span class="hljs-comment">//赋值</span><br>	<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;s3;<br>	s3 = s2;<br>	printSet(s3);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>set容器插入数据时用insert</li>
<li>set容器插入数据的数据会自动排序</li>
</ul>
<h4 id="set大小和交换">3.8.3 set大小和交换</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>统计set容器大小以及交换set容器</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>size();</code> //返回容器中元素的数目</li>
<li><code>empty();</code> //判断容器是否为空</li>
<li><code>swap(st);</code> //交换两个集合容器</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printSet</span><span class="hljs-params">(<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp; s)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = s.begin(); it != s.end(); it++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//大小</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>	<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s1;<br>	<br>	s1.insert(<span class="hljs-number">10</span>);<br>	s1.insert(<span class="hljs-number">30</span>);<br>	s1.insert(<span class="hljs-number">20</span>);<br>	s1.insert(<span class="hljs-number">40</span>);<br><br>	<span class="hljs-keyword">if</span> (s1.empty())<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;s1为空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;s1不为空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;s1的大小为： &quot;</span> &lt;&lt; s1.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>&#125;<br><br><span class="hljs-comment">//交换</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s1;<br><br>	s1.insert(<span class="hljs-number">10</span>);<br>	s1.insert(<span class="hljs-number">30</span>);<br>	s1.insert(<span class="hljs-number">20</span>);<br>	s1.insert(<span class="hljs-number">40</span>);<br><br>	<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s2;<br><br>	s2.insert(<span class="hljs-number">100</span>);<br>	s2.insert(<span class="hljs-number">300</span>);<br>	s2.insert(<span class="hljs-number">200</span>);<br>	s2.insert(<span class="hljs-number">400</span>);<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;交换前&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	printSet(s1);<br>	printSet(s2);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;交换后&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	s1.swap(s2);<br>	printSet(s1);<br>	printSet(s2);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//test01();</span><br><br>	test02();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>统计大小 --- size</li>
<li>判断是否为空 --- empty</li>
<li>交换容器 --- swap</li>
</ul>
<h4 id="set插入和删除">3.8.4 set插入和删除</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>set容器进行插入数据和删除数据</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>insert(elem);</code> //在容器中插入元素。</li>
<li><code>clear();</code> //清除所有元素</li>
<li><code>erase(pos);</code> //删除pos迭代器所指的元素，返回下一个元素的迭代器。</li>
<li><code>erase(beg, end);</code> //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li>
<li><code>erase(elem);</code> //删除容器中值为elem的元素。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printSet</span><span class="hljs-params">(<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp; s)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = s.begin(); it != s.end(); it++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//插入和删除</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s1;<br>	<span class="hljs-comment">//插入</span><br>	s1.insert(<span class="hljs-number">10</span>);<br>	s1.insert(<span class="hljs-number">30</span>);<br>	s1.insert(<span class="hljs-number">20</span>);<br>	s1.insert(<span class="hljs-number">40</span>);<br>	printSet(s1);<br><br>	<span class="hljs-comment">//删除</span><br>	s1.erase(s1.begin());<br>	printSet(s1);<br><br>	s1.erase(<span class="hljs-number">30</span>);<br>	printSet(s1);<br><br>	<span class="hljs-comment">//清空</span><br>	<span class="hljs-comment">//s1.erase(s1.begin(), s1.end());</span><br>	s1.clear();<br>	printSet(s1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>插入 --- insert</li>
<li>删除 --- erase</li>
<li>清空 --- clear</li>
</ul>
<h4 id="set查找和统计">3.8.5 set查找和统计</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对set容器进行查找数据以及统计数据</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>find(key);</code> //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li>
<li><code>count(key);</code> //统计key的元素个数</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><br><span class="hljs-comment">//查找和统计</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s1;<br>	<span class="hljs-comment">//插入</span><br>	s1.insert(<span class="hljs-number">10</span>);<br>	s1.insert(<span class="hljs-number">30</span>);<br>	s1.insert(<span class="hljs-number">20</span>);<br>	s1.insert(<span class="hljs-number">40</span>);<br>	<br>	<span class="hljs-comment">//查找</span><br>	<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator pos = s1.find(<span class="hljs-number">30</span>);<br><br>	<span class="hljs-keyword">if</span> (pos != s1.end())<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到了元素 ： &quot;</span> &lt;&lt; *pos &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;未找到元素&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	<span class="hljs-comment">//统计</span><br>	<span class="hljs-keyword">int</span> num = s1.count(<span class="hljs-number">30</span>);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>查找 --- find （返回的是迭代器）</li>
<li>统计 --- count （对于set，结果为0或者1）</li>
</ul>
<h4 id="set和multiset区别">3.8.6 set和multiset区别</h4>
<p><strong>学习目标：</strong></p>
<ul>
<li>掌握set和multiset的区别</li>
</ul>
<p><strong>区别：</strong></p>
<ul>
<li>set不可以插入重复数据，而multiset可以</li>
<li>set插入数据的同时会返回插入结果，表示插入是否成功</li>
<li>multiset不会检测数据，因此可以插入重复数据</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><br><span class="hljs-comment">//set和multiset区别</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br>	<span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator, <span class="hljs-keyword">bool</span>&gt;  ret = s.insert(<span class="hljs-number">10</span>);<br>	<span class="hljs-keyword">if</span> (ret.second) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;第一次插入成功!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;第一次插入失败!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	ret = s.insert(<span class="hljs-number">10</span>);<br>	<span class="hljs-keyword">if</span> (ret.second) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;第二次插入成功!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;第二次插入失败!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>    <br>	<span class="hljs-comment">//multiset</span><br>	<span class="hljs-built_in">multiset</span>&lt;<span class="hljs-keyword">int</span>&gt; ms;<br>	ms.insert(<span class="hljs-number">10</span>);<br>	ms.insert(<span class="hljs-number">10</span>);<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">multiset</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = ms.begin(); it != ms.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>如果不允许插入重复数据可以利用set</li>
<li>如果需要插入重复数据利用multiset</li>
</ul>
<h4 id="pair对组创建">3.8.7 pair对组创建</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>成对出现的数据，利用对组可以返回两个数据</li>
</ul>
<p><strong>两种创建方式：</strong></p>
<ul>
<li><code>pair&lt;type, type&gt; p ( value1, value2 );</code></li>
<li><code>pair&lt;type, type&gt; p = make_pair( value1, value2 );</code></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//对组创建</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	pair&lt;string, int&gt; p(string(&quot;Tom&quot;), 20);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt;  p.first &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; p.second &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; p2 = <span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;Jerry&quot;</span>, <span class="hljs-number">10</span>);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; p2.first &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; p2.second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<p>两种方式都可以创建对组，记住一种即可</p>
<h4 id="set容器排序">3.8.8 set容器排序</h4>
<p>学习目标：</p>
<ul>
<li>set容器默认排序规则为从小到大，掌握如何改变排序规则</li>
</ul>
<p>主要技术点：</p>
<ul>
<li>利用仿函数，可以改变排序规则</li>
</ul>
<p><strong>示例一</strong> set存放内置数据类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCompare</span> </span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">int</span> v2)</span> </span>&#123;<br>		<span class="hljs-keyword">return</span> v1 &gt; v2;<br>	&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;    <br>	<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s1;<br>	s1.insert(<span class="hljs-number">10</span>);<br>	s1.insert(<span class="hljs-number">40</span>);<br>	s1.insert(<span class="hljs-number">20</span>);<br>	s1.insert(<span class="hljs-number">30</span>);<br>	s1.insert(<span class="hljs-number">50</span>);<br><br>	<span class="hljs-comment">//默认从小到大</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = s1.begin(); it != s1.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//指定排序规则</span><br>	<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>,MyCompare&gt; s2;<br>	s2.insert(<span class="hljs-number">10</span>);<br>	s2.insert(<span class="hljs-number">40</span>);<br>	s2.insert(<span class="hljs-number">20</span>);<br>	s2.insert(<span class="hljs-number">30</span>);<br>	s2.insert(<span class="hljs-number">50</span>);<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>, MyCompare&gt;::iterator it = s2.begin(); it != s2.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：利用仿函数可以指定set容器的排序规则</p>
<p><strong>示例二</strong> set存放自定义数据类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age)<br>	&#123;<br>		<span class="hljs-keyword">this</span>-&gt;m_Name = name;<br>		<span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>	&#125;<br><br>	<span class="hljs-built_in">string</span> m_Name;<br>	<span class="hljs-keyword">int</span> m_Age;<br><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">comparePerson</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Person&amp; p1, <span class="hljs-keyword">const</span> Person &amp;p2)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-comment">//按照年龄进行排序  降序</span><br>		<span class="hljs-keyword">return</span> p1.m_Age &gt; p2.m_Age;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">set</span>&lt;Person, comparePerson&gt; s;<br><br>	<span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;刘备&quot;</span>, <span class="hljs-number">23</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;关羽&quot;</span>, <span class="hljs-number">27</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-number">25</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;赵云&quot;</span>, <span class="hljs-number">21</span>)</span></span>;<br><br>	s.insert(p1);<br>	s.insert(p2);<br>	s.insert(p3);<br>	s.insert(p4);<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">set</span>&lt;Person, comparePerson&gt;::iterator it = s.begin(); it != s.end(); it++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<p>对于自定义数据类型，set必须指定排序规则才可以插入数据</p>
<h3 id="map-multimap容器">3.9 map/ multimap容器</h3>
<h4 id="map基本概念">3.9.1 map基本概念</h4>
<p><strong>简介：</strong></p>
<ul>
<li>map中所有元素都是pair</li>
<li>pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值）</li>
<li>所有元素都会根据元素的键值自动排序</li>
</ul>
<p><strong>本质：</strong></p>
<ul>
<li>map/multimap属于<strong>关联式容器</strong>，底层结构是用二叉树实现。</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>可以根据key值快速找到value值</li>
</ul>
<p>map和multimap<strong>区别</strong>：</p>
<ul>
<li>map不允许容器中有重复key值元素</li>
<li>multimap允许容器中有重复key值元素</li>
</ul>
<h4 id="map构造和赋值">3.9.2 map构造和赋值</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对map容器进行构造和赋值操作</li>
</ul>
<p><strong>函数原型：</strong></p>
<p><strong>构造：</strong></p>
<ul>
<li><code>map&lt;T1, T2&gt; mp;</code> //map默认构造函数:</li>
<li><code>map(const map &amp;mp);</code> //拷贝构造函数</li>
</ul>
<p><strong>赋值：</strong></p>
<ul>
<li><code>map&amp; operator=(const map &amp;mp);</code> //重载等号操作符</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printMap</span><span class="hljs-params">(<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;&amp;m)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;::iterator it = m.begin(); it != m.end(); it++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">&quot; value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;m; <span class="hljs-comment">//默认构造</span><br>	m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>	m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));<br>	m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br>	printMap(m);<br><br>	<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;m2(m); <span class="hljs-comment">//拷贝构造</span><br>	printMap(m2);<br><br>	<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;m3;<br>	m3 = m2; <span class="hljs-comment">//赋值</span><br>	printMap(m3);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：map中所有元素都是成对出现，插入数据时候要使用对组</p>
<h4 id="map大小和交换">3.9.3 map大小和交换</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>统计map容器大小以及交换map容器</li>
</ul>
<p>函数原型：</p>
<ul>
<li><code>size();</code> //返回容器中元素的数目</li>
<li><code>empty();</code> //判断容器是否为空</li>
<li><code>swap(st);</code> //交换两个集合容器</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printMap</span><span class="hljs-params">(<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;&amp;m)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;::iterator it = m.begin(); it != m.end(); it++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">&quot; value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;m;<br>	m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>	m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));<br>	m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br><br>	<span class="hljs-keyword">if</span> (m.empty())<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;m为空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;m不为空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;m的大小为： &quot;</span> &lt;&lt; m.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;<br><br><br><span class="hljs-comment">//交换</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;m;<br>	m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>	m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));<br>	m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br><br>	<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;m2;<br>	m2.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">4</span>, <span class="hljs-number">100</span>));<br>	m2.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">5</span>, <span class="hljs-number">200</span>));<br>	m2.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">6</span>, <span class="hljs-number">300</span>));<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;交换前&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	printMap(m);<br>	printMap(m2);<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;交换后&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	m.swap(m2);<br>	printMap(m);<br>	printMap(m2);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	test02();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>统计大小 --- size</li>
<li>判断是否为空 --- empty</li>
<li>交换容器 --- swap</li>
</ul>
<h4 id="map插入和删除">3.9.4 map插入和删除</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>map容器进行插入数据和删除数据</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>insert(elem);</code> //在容器中插入元素。</li>
<li><code>clear();</code> //清除所有元素</li>
<li><code>erase(pos);</code> //删除pos迭代器所指的元素，返回下一个元素的迭代器。</li>
<li><code>erase(beg, end);</code> //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li>
<li><code>erase(key);</code> //删除容器中值为key的元素。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printMap</span><span class="hljs-params">(<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;&amp;m)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;::iterator it = m.begin(); it != m.end(); it++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">&quot; value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//插入</span><br>	<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; m;<br>	<span class="hljs-comment">//第一种插入方式</span><br>	m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>	<span class="hljs-comment">//第二种插入方式</span><br>	m.insert(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));<br>	<span class="hljs-comment">//第三种插入方式</span><br>	m.insert(<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;::value_type(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br>	<span class="hljs-comment">//第四种插入方式</span><br>	m[<span class="hljs-number">4</span>] = <span class="hljs-number">40</span>; <br>	printMap(m);<br><br>	<span class="hljs-comment">//删除</span><br>	m.erase(m.begin());<br>	printMap(m);<br><br>	m.erase(<span class="hljs-number">3</span>);<br>	printMap(m);<br><br>	<span class="hljs-comment">//清空</span><br>	m.erase(m.begin(),m.end());<br>	m.clear();<br>	printMap(m);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li><p>map插入方式很多，记住其一即可</p></li>
<li><p>插入 --- insert</p></li>
<li><p>删除 --- erase</p></li>
<li><p>清空 --- clear</p></li>
</ul>
<h4 id="map查找和统计">3.9.5 map查找和统计</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对map容器进行查找数据以及统计数据</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>find(key);</code> //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li>
<li><code>count(key);</code> //统计key的元素个数</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><br><span class="hljs-comment">//查找和统计</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;m; <br>	m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>	m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));<br>	m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br><br>	<span class="hljs-comment">//查找</span><br>	<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;::iterator pos = m.find(<span class="hljs-number">3</span>);<br><br>	<span class="hljs-keyword">if</span> (pos != m.end())<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到了元素 key = &quot;</span> &lt;&lt; (*pos).first &lt;&lt; <span class="hljs-string">&quot; value = &quot;</span> &lt;&lt; (*pos).second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;未找到元素&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	<span class="hljs-comment">//统计</span><br>	<span class="hljs-keyword">int</span> num = m.count(<span class="hljs-number">3</span>);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>查找 --- find （返回的是迭代器）</li>
<li>统计 --- count （对于map，结果为0或者1）</li>
</ul>
<h4 id="map容器排序">3.9.6 map容器排序</h4>
<p><strong>学习目标：</strong></p>
<ul>
<li>map容器默认排序规则为 按照key值进行 从小到大排序，掌握如何改变排序规则</li>
</ul>
<p><strong>主要技术点:</strong></p>
<ul>
<li>利用仿函数，可以改变排序规则</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCompare</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">int</span> v2)</span> </span>&#123;<br>		<span class="hljs-keyword">return</span> v1 &gt; v2;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//默认从小到大排序</span><br>	<span class="hljs-comment">//利用仿函数实现从大到小排序</span><br>	<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>, MyCompare&gt; m;<br><br>	m.insert(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>	m.insert(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));<br>	m.insert(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br>	m.insert(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">4</span>, <span class="hljs-number">40</span>));<br>	m.insert(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">5</span>, <span class="hljs-number">50</span>));<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>, MyCompare&gt;::iterator it = m.begin(); it != m.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;key:&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">&quot; value:&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>利用仿函数可以指定map容器的排序规则</li>
<li>对于自定义数据类型，map必须要指定排序规则,同set容器</li>
</ul>
<h3 id="案例-员工分组">3.10 案例-员工分组</h3>
<h4 id="案例描述-1">3.10.1 案例描述</h4>
<ul>
<li>公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作</li>
<li>员工信息有: 姓名 工资组成；部门分为：策划、美术、研发</li>
<li>随机给10名员工分配部门和工资</li>
<li>通过multimap进行信息的插入 key(部门编号) value(员工)</li>
<li>分部门显示员工信息</li>
</ul>
<h4 id="实现步骤-1">3.10.2 实现步骤</h4>
<ol type="1">
<li>创建10名员工，放到vector中</li>
<li>遍历vector容器，取出每个员工，进行随机分组</li>
<li>分组后，将员工部门编号作为key，具体员工作为value，放入到multimap容器中</li>
<li>分部门显示员工信息</li>
</ol>
<p><strong>案例代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">- 公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作</span><br><span class="hljs-comment">- 员工信息有: 姓名  工资组成；部门分为：策划、美术、研发</span><br><span class="hljs-comment">- 随机给10名员工分配部门和工资</span><br><span class="hljs-comment">- 通过multimap进行信息的插入  key(部门编号) value(员工)</span><br><span class="hljs-comment">- 分部门显示员工信息</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CEHUA  0</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MEISHU 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> YANFA  2</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Worker</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">string</span> m_Name;<br>	<span class="hljs-keyword">int</span> m_Salary;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createWorker</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;Worker&gt;&amp;v)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">string</span> nameSeed = <span class="hljs-string">&quot;ABCDEFGHIJ&quot;</span>;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		Worker worker;<br>		worker.m_Name = <span class="hljs-string">&quot;员工&quot;</span>;<br>		worker.m_Name += nameSeed[i];<br><br>		worker.m_Salary = rand() % <span class="hljs-number">10000</span> + <span class="hljs-number">10000</span>; <span class="hljs-comment">// 10000 ~ 19999</span><br>		<span class="hljs-comment">//将员工放入到容器中</span><br>		v.push_back(worker);<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//员工分组</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setGroup</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;Worker&gt;&amp;v,<span class="hljs-built_in">multimap</span>&lt;<span class="hljs-keyword">int</span>,Worker&gt;&amp;m)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;Worker&gt;::iterator it = v.begin(); it != v.end(); it++)<br>	&#123;<br>		<span class="hljs-comment">//产生随机部门编号</span><br>		<span class="hljs-keyword">int</span> deptId = rand() % <span class="hljs-number">3</span>; <span class="hljs-comment">// 0 1 2 </span><br><br>		<span class="hljs-comment">//将员工插入到分组中</span><br>		<span class="hljs-comment">//key部门编号，value具体员工</span><br>		m.insert(<span class="hljs-built_in">make_pair</span>(deptId, *it));<br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showWorkerByGourp</span><span class="hljs-params">(<span class="hljs-built_in">multimap</span>&lt;<span class="hljs-keyword">int</span>,Worker&gt;&amp;m)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">// 0  A  B  C   1  D  E   2  F G ...</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;策划部门：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">multimap</span>&lt;<span class="hljs-keyword">int</span>,Worker&gt;::iterator pos = m.find(CEHUA);<br>	<span class="hljs-keyword">int</span> count = m.count(CEHUA); <span class="hljs-comment">// 统计具体人数</span><br>	<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span> (; pos != m.end() &amp;&amp; index &lt; count; pos++ , index++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="hljs-string">&quot; 工资： &quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;----------------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;美术部门： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	pos2 = m.find(MEISHU);<br>	count2 = m.count(MEISHU); <span class="hljs-comment">// 统计具体人数</span><br>	index2 = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span> (; pos2 != m.end() &amp;&amp; index2 &lt; count2; pos2++, index2++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; pos2-&gt;second.m_Name &lt;&lt; <span class="hljs-string">&quot; 工资： &quot;</span> &lt;&lt; pos2-&gt;second.m_Salary &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;----------------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;研发部门： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	pos3 = m.find(YANFA);<br>	count3 = m.count(YANFA); <span class="hljs-comment">// 统计具体人数</span><br>	index3 = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span> (; pos3 != m.end() &amp;&amp; index3 &lt; count3; pos3++, index3++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; pos3-&gt;second.m_Name &lt;&lt; <span class="hljs-string">&quot; 工资： &quot;</span> &lt;&lt; pos3-&gt;second.m_Salary &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	srand((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)time(<span class="hljs-literal">NULL</span>));<br><br>	<span class="hljs-comment">//1、创建员工</span><br>	<span class="hljs-built_in">vector</span>&lt;Worker&gt;vWorker;<br>	createWorker(vWorker);<br><br>	<span class="hljs-comment">//2、员工分组</span><br>	<span class="hljs-built_in">multimap</span>&lt;<span class="hljs-keyword">int</span>, Worker&gt;mWorker;<br>	setGroup(vWorker, mWorker);<br><br><br>	<span class="hljs-comment">//3、分组显示员工</span><br>	showWorkerByGourp(mWorker);<br><br>	<span class="hljs-comment">////测试</span><br>	<span class="hljs-comment">//for (vector&lt;Worker&gt;::iterator it = vWorker.begin(); it != vWorker.end(); it++)</span><br>	<span class="hljs-comment">//&#123;</span><br>	<span class="hljs-comment">//	cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; it-&gt;m_Salary &lt;&lt; endl;</span><br>	<span class="hljs-comment">//&#125;</span><br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure>
<img src= "/img/loading.gif" data-lazy-src="/2021/03/31/C++/Day4Cpp%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/image-20210330222420427.png" alt="image-20210330222420427"><figcaption aria-hidden="true">image-20210330222420427</figcaption>
</figure>
<p>总结：</p>
<ul>
<li>当数据以键值对形式存在，可以考虑用map 或 multimap</li>
</ul>
<h2 id="stl--函数对象">4 STL- 函数对象</h2>
<h3 id="函数对象">4.1 函数对象</h3>
<h4 id="函数对象概念">4.1.1 函数对象概念</h4>
<p><strong>概念：</strong></p>
<ul>
<li>重载<strong>函数调用操作符</strong>的类，其对象常称为<strong>函数对象</strong></li>
<li><strong>函数对象</strong>使用重载的()时，行为类似函数调用，也叫<strong>仿函数</strong></li>
</ul>
<p><strong>本质：</strong></p>
<p>函数对象(仿函数)是一个<strong>类</strong>，不是一个函数</p>
<h4 id="函数对象使用">4.1.2 函数对象使用</h4>
<p><strong>特点：</strong></p>
<ul>
<li>函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值</li>
<li>函数对象超出普通函数的概念，函数对象可以有自己的状态</li>
<li>函数对象可以作为参数传递</li>
</ul>
<p><strong>示例:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//1、函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAdd</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span> :<br>	<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1,<span class="hljs-keyword">int</span> v2)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> v1 + v2;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	MyAdd myAdd;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; myAdd(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//2、函数对象可以有自己的状态</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	MyPrint()<br>	&#123;<br>		count = <span class="hljs-number">0</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-built_in">string</span> test)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; test &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		count++; <span class="hljs-comment">//统计使用次数</span><br>	&#125;<br><br>	<span class="hljs-keyword">int</span> count; <span class="hljs-comment">//内部自己的状态</span><br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	MyPrint myPrint;<br>	myPrint(<span class="hljs-string">&quot;hello world&quot;</span>);<br>	myPrint(<span class="hljs-string">&quot;hello world&quot;</span>);<br>	myPrint(<span class="hljs-string">&quot;hello world&quot;</span>);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;myPrint调用次数为： &quot;</span> &lt;&lt; myPrint.count &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//3、函数对象可以作为参数传递</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doPrint</span><span class="hljs-params">(MyPrint &amp;mp , <span class="hljs-built_in">string</span> test)</span></span><br><span class="hljs-function"></span>&#123;<br>	mp(test);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	MyPrint myPrint;<br>	doPrint(myPrint, <span class="hljs-string">&quot;Hello C++&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//test01();</span><br>	<span class="hljs-comment">//test02();</span><br>	test03();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>仿函数写法非常灵活，可以作为参数进行传递。</li>
</ul>
<h3 id="谓词">4.2 谓词</h3>
<h4 id="谓词概念">4.2.1 谓词概念</h4>
<p><strong>概念：</strong></p>
<ul>
<li>返回bool类型的仿函数称为<strong>谓词</strong></li>
<li>如果operator()接受一个参数，那么叫做一元谓词</li>
<li>如果operator()接受两个参数，那么叫做二元谓词</li>
</ul>
<h4 id="一元谓词">4.2.2 一元谓词</h4>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-comment">//1.一元谓词</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GreaterFive</span>&#123;</span><br>	<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>		<span class="hljs-keyword">return</span> val &gt; <span class="hljs-number">5</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		v.push_back(i);<br>	&#125;<br><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive());<br>	<span class="hljs-keyword">if</span> (it == v.end()) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;没找到!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到:&quot;</span> &lt;&lt; *it &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：参数只有一个的谓词，称为一元谓词</p>
<h4 id="二元谓词">4.2.3 二元谓词</h4>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-comment">//二元谓词</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCompare</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1, <span class="hljs-keyword">int</span> num2)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> num1 &gt; num2;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>	v.push_back(<span class="hljs-number">10</span>);<br>	v.push_back(<span class="hljs-number">40</span>);<br>	v.push_back(<span class="hljs-number">20</span>);<br>	v.push_back(<span class="hljs-number">30</span>);<br>	v.push_back(<span class="hljs-number">50</span>);<br><br>	<span class="hljs-comment">//默认从小到大</span><br>	sort(v.begin(), v.end());<br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;----------------------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//使用函数对象改变算法策略，排序从大到小</span><br>	sort(v.begin(), v.end(), MyCompare());<br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：参数只有两个的谓词，称为二元谓词</p>
<h3 id="内建函数对象">4.3 内建函数对象</h3>
<h4 id="内建函数对象意义">4.3.1 内建函数对象意义</h4>
<p><strong>概念：</strong></p>
<ul>
<li>STL内建了一些函数对象</li>
</ul>
<p><strong>分类:</strong></p>
<ul>
<li><p>算术仿函数</p></li>
<li><p>关系仿函数</p></li>
<li><p>逻辑仿函数</p></li>
</ul>
<p><strong>用法：</strong></p>
<ul>
<li>这些仿函数所产生的对象，用法和一般函数完全相同</li>
<li>使用内建函数对象，需要引入头文件 <code>#include&lt;functional&gt;</code></li>
</ul>
<h4 id="算术仿函数">4.3.2 算术仿函数</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>实现四则运算</li>
<li>其中negate是一元运算，其他都是二元运算</li>
</ul>
<p><strong>仿函数原型：</strong></p>
<ul>
<li><code>template&lt;class T&gt; T plus&lt;T&gt;</code> //加法仿函数</li>
<li><code>template&lt;class T&gt; T minus&lt;T&gt;</code> //减法仿函数</li>
<li><code>template&lt;class T&gt; T multiplies&lt;T&gt;</code> //乘法仿函数</li>
<li><code>template&lt;class T&gt; T divides&lt;T&gt;</code> //除法仿函数</li>
<li><code>template&lt;class T&gt; T modulus&lt;T&gt;</code> //取模仿函数</li>
<li><code>template&lt;class T&gt; T negate&lt;T&gt;</code> //取反仿函数</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-comment">//negate</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	negate&lt;<span class="hljs-keyword">int</span>&gt; n;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; n(<span class="hljs-number">50</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//plus</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	plus&lt;<span class="hljs-keyword">int</span>&gt; p;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; p(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br>	test02();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：使用内建函数对象时，需要引入头文件 <code>#include &lt;functional&gt;</code></p>
<h4 id="关系仿函数">4.3.3 关系仿函数</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>实现关系对比</li>
</ul>
<p><strong>仿函数原型：</strong></p>
<ul>
<li><code>template&lt;class T&gt; bool equal_to&lt;T&gt;</code> //等于</li>
<li><code>template&lt;class T&gt; bool not_equal_to&lt;T&gt;</code> //不等于</li>
<li><code>template&lt;class T&gt; bool greater&lt;T&gt;</code> //大于</li>
<li><code>template&lt;class T&gt; bool greater_equal&lt;T&gt;</code> //大于等于</li>
<li><code>template&lt;class T&gt; bool less&lt;T&gt;</code> //小于</li>
<li><code>template&lt;class T&gt; bool less_equal&lt;T&gt;</code> //小于等于</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCompare</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1,<span class="hljs-keyword">int</span> v2)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> v1 &gt; v2;<br>	&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br><br>	v.push_back(<span class="hljs-number">10</span>);<br>	v.push_back(<span class="hljs-number">30</span>);<br>	v.push_back(<span class="hljs-number">50</span>);<br>	v.push_back(<span class="hljs-number">40</span>);<br>	v.push_back(<span class="hljs-number">20</span>);<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//自己实现仿函数</span><br>	<span class="hljs-comment">//sort(v.begin(), v.end(), MyCompare());</span><br>	<span class="hljs-comment">//STL内建仿函数  大于仿函数</span><br>	sort(v.begin(), v.end(), greater&lt;<span class="hljs-keyword">int</span>&gt;());<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：关系仿函数中最常用的就是greater&lt;&gt;大于</p>
<h4 id="逻辑仿函数">4.3.4 逻辑仿函数</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>实现逻辑运算</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>template&lt;class T&gt; bool logical_and&lt;T&gt;</code> //逻辑与</li>
<li><code>template&lt;class T&gt; bool logical_or&lt;T&gt;</code> //逻辑或</li>
<li><code>template&lt;class T&gt; bool logical_not&lt;T&gt;</code> //逻辑非</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt; v;<br>	v.push_back(<span class="hljs-literal">true</span>);<br>	v.push_back(<span class="hljs-literal">false</span>);<br>	v.push_back(<span class="hljs-literal">true</span>);<br>	v.push_back(<span class="hljs-literal">false</span>);<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt;::iterator it = v.begin();it!= v.end();it++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//逻辑非  将v容器搬运到v2中，并执行逻辑非运算</span><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt; v2;<br>	v2.resize(v.size());<br>	transform(v.begin(), v.end(),  v2.begin(), logical_not&lt;<span class="hljs-keyword">bool</span>&gt;());<br>	<span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt;::iterator it = v2.begin(); it != v2.end(); it++)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：逻辑仿函数实际应用较少，了解即可</p>
<h2 id="stl--常用算法">5 STL- 常用算法</h2>
<p><strong>概述</strong>:</p>
<ul>
<li><p>算法主要是由头文件<code>&lt;algorithm&gt;</code> <code>&lt;functional&gt;</code> <code>&lt;numeric&gt;</code>组成。</p></li>
<li><p><code>&lt;algorithm&gt;</code>是所有STL头文件中最大的一个，范围涉及到比较、 交换、查找、遍历操作、复制、修改等等</p></li>
<li><p><code>&lt;numeric&gt;</code>体积很小，只包括几个在序列上面进行简单数学运算的模板函数</p></li>
<li><p><code>&lt;functional&gt;</code>定义了一些模板类,用以声明函数对象。</p></li>
</ul>
<h3 id="常用遍历算法">5.1 常用遍历算法</h3>
<p><strong>学习目标：</strong></p>
<ul>
<li>掌握常用的遍历算法</li>
</ul>
<p><strong>算法简介：</strong></p>
<ul>
<li><code>for_each</code> //遍历容器</li>
<li><code>transform</code> //搬运容器到另一个容器中</li>
</ul>
<h4 id="for_each">5.1.1 for_each</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>实现遍历容器</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>for_each(iterator beg, iterator end, _func);</code></p>
<p>// 遍历算法 遍历容器元素</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// _func 函数或者函数对象</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-comment">//普通函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print01</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-comment">//函数对象</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">print02</span> </span><br><span class="hljs-class">&#123;</span><br> <span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-comment">//for_each算法基本用法</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) <br>	&#123;<br>		v.push_back(i);<br>	&#125;<br><br>	<span class="hljs-comment">//遍历算法</span><br>	for_each(v.begin(), v.end(), print01);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	for_each(v.begin(), v.end(), print02());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong>for_each在实际开发中是最常用遍历算法，需要熟练掌握</p>
<h4 id="transform">5.1.2 transform</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>搬运容器到另一个容器中</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><code>transform(iterator beg1, iterator end1, iterator beg2, _func);</code></li>
</ul>
<p>//beg1 源容器开始迭代器</p>
<p>//end1 源容器结束迭代器</p>
<p>//beg2 目标容器开始迭代器</p>
<p>//_func 函数或者函数对象</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-comment">//常用遍历算法  搬运 transform</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TransForm</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> val;<br>	&#125;<br><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		v.push_back(i);<br>	&#125;<br><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;vTarget; <span class="hljs-comment">//目标容器</span><br><br>	vTarget.resize(v.size()); <span class="hljs-comment">// 目标容器需要提前开辟空间</span><br><br>	transform(v.begin(), v.end(), vTarget.begin(), TransForm());<br><br>	for_each(vTarget.begin(), vTarget.end(), MyPrint());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong> 搬运的目标容器必须要提前开辟空间，否则无法正常搬运</p>
<h3 id="常用查找算法">5.2 常用查找算法</h3>
<p>学习目标：</p>
<ul>
<li>掌握常用的查找算法</li>
</ul>
<p><strong>算法简介：</strong></p>
<ul>
<li><code>find</code> //查找元素</li>
<li><code>find_if</code> //按条件查找元素</li>
<li><code>adjacent_find</code> //查找相邻重复元素</li>
<li><code>binary_search</code> //二分查找法</li>
<li><code>count</code> //统计元素个数</li>
<li><code>count_if</code> //按条件统计元素个数</li>
</ul>
<h4 id="find">5.2.1 find</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end()</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>find(iterator beg, iterator end, value);</code></p>
<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// value 查找的元素</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>		v.push_back(i + <span class="hljs-number">1</span>);<br>	&#125;<br>	<span class="hljs-comment">//查找容器中是否有 5 这个元素</span><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = find(v.begin(), v.end(), <span class="hljs-number">5</span>);<br>	<span class="hljs-keyword">if</span> (it == v.end()) <br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;没有找到!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> <br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到:&quot;</span> &lt;&lt; *it &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age) <br>	&#123;<br>		<span class="hljs-keyword">this</span>-&gt;m_Name = name;<br>		<span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>	&#125;<br>	<span class="hljs-comment">//重载==</span><br>	<span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-keyword">const</span> Person&amp; p) <br>	&#123;<br>		<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="hljs-keyword">this</span>-&gt;m_Age == p.m_Age) <br>		&#123;<br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>		&#125;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">string</span> m_Name;<br>	<span class="hljs-keyword">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-built_in">vector</span>&lt;Person&gt; v;<br><br>	<span class="hljs-comment">//创建数据</span><br>	<span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-number">20</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;ddd&quot;</span>, <span class="hljs-number">40</span>)</span></span>;<br><br>	v.push_back(p1);<br>	v.push_back(p2);<br>	v.push_back(p3);<br>	v.push_back(p4);<br><br>	<span class="hljs-built_in">vector</span>&lt;Person&gt;::iterator it = find(v.begin(), v.end(), p2);<br>	<span class="hljs-keyword">if</span> (it == v.end()) <br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;没有找到!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> <br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到姓名:&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄: &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结： 利用find可以在容器中找指定的元素，返回值是<strong>迭代器</strong></p>
<h4 id="find_if">5.2.2 find_if</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>按条件查找元素</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>find_if(iterator beg, iterator end, _Pred);</code></p>
<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// _Pred 函数或者谓词（返回bool类型的仿函数）</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//内置数据类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GreaterFive</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> val &gt; <span class="hljs-number">5</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>		v.push_back(i + <span class="hljs-number">1</span>);<br>	&#125;<br><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive());<br>	<span class="hljs-keyword">if</span> (it == v.end()) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;没有找到!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到大于5的数字:&quot;</span> &lt;&lt; *it &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//自定义数据类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age)<br>	&#123;<br>		<span class="hljs-keyword">this</span>-&gt;m_Name = name;<br>		<span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>	&#125;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">string</span> m_Name;<br>	<span class="hljs-keyword">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Greater20</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(Person &amp;p)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> p.m_Age &gt; <span class="hljs-number">20</span>;<br>	&#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-built_in">vector</span>&lt;Person&gt; v;<br><br>	<span class="hljs-comment">//创建数据</span><br>	<span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-number">20</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;ddd&quot;</span>, <span class="hljs-number">40</span>)</span></span>;<br><br>	v.push_back(p1);<br>	v.push_back(p2);<br>	v.push_back(p3);<br>	v.push_back(p4);<br><br>	<span class="hljs-built_in">vector</span>&lt;Person&gt;::iterator it = find_if(v.begin(), v.end(), Greater20());<br>	<span class="hljs-keyword">if</span> (it == v.end())<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;没有找到!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到姓名:&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄: &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//test01();</span><br><br>	test02();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：find_if按条件查找使查找更加灵活，提供的仿函数可以改变不同的策略</p>
<h4 id="adjacent_find">5.2.3 adjacent_find</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>查找相邻重复元素</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>adjacent_find(iterator beg, iterator end);</code></p>
<p>// 查找相邻重复元素,返回相邻元素的第一个位置的迭代器</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>	v.push_back(<span class="hljs-number">1</span>);<br>	v.push_back(<span class="hljs-number">2</span>);<br>	v.push_back(<span class="hljs-number">5</span>);<br>	v.push_back(<span class="hljs-number">2</span>);<br>	v.push_back(<span class="hljs-number">4</span>);<br>	v.push_back(<span class="hljs-number">4</span>);<br>	v.push_back(<span class="hljs-number">3</span>);<br><br>	<span class="hljs-comment">//查找相邻重复元素</span><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = adjacent_find(v.begin(), v.end());<br>	<span class="hljs-keyword">if</span> (it == v.end()) &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找不到!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> &#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到相邻重复元素为:&quot;</span> &lt;&lt; *it &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>总结：面试题中如果出现查找相邻重复元素，记得用STL中的adjacent_find算法</p>
<h4 id="binary_search">5.2.4 binary_search</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>查找指定元素是否存在</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>bool binary_search(iterator beg, iterator end, value);</code></p>
<p>// 查找指定的元素，查到 返回true 否则false</p>
<p>// 注意: 在<strong>无序序列中不可用</strong></p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// value 查找的元素</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		v.push_back(i);<br>	&#125;<br>	<span class="hljs-comment">//二分查找</span><br>	<span class="hljs-keyword">bool</span> ret = binary_search(v.begin(), v.end(),<span class="hljs-number">2</span>);<br>	<span class="hljs-keyword">if</span> (ret)<br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到了&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;未找到&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong>二分查找法查找效率很高，值得注意的是查找的容器中元素必须的有序序列</p>
<h4 id="count">5.2.5 count</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>统计元素个数</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>count(iterator beg, iterator end, value);</code></p>
<p>// 统计元素出现次数</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// value 统计的元素</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-comment">//内置数据类型</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>	v.push_back(<span class="hljs-number">1</span>);<br>	v.push_back(<span class="hljs-number">2</span>);<br>	v.push_back(<span class="hljs-number">4</span>);<br>	v.push_back(<span class="hljs-number">5</span>);<br>	v.push_back(<span class="hljs-number">3</span>);<br>	v.push_back(<span class="hljs-number">4</span>);<br>	v.push_back(<span class="hljs-number">4</span>);<br><br>	<span class="hljs-keyword">int</span> num = count(v.begin(), v.end(), <span class="hljs-number">4</span>);<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;4的个数为： &quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//自定义数据类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age)<br>	&#123;<br>		<span class="hljs-keyword">this</span>-&gt;m_Name = name;<br>		<span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>	&#125;<br>	<span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-keyword">const</span> Person &amp; p)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Age == p.m_Age)<br>		&#123;<br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>		&#125;<br>		<span class="hljs-keyword">else</span><br>		&#123;<br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>		&#125;<br>	&#125;<br>	<span class="hljs-built_in">string</span> m_Name;<br>	<span class="hljs-keyword">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;Person&gt; v;<br><br>	<span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;刘备&quot;</span>, <span class="hljs-number">35</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;关羽&quot;</span>, <span class="hljs-number">35</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-number">35</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;赵云&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;曹操&quot;</span>, <span class="hljs-number">25</span>)</span></span>;<br><br>	v.push_back(p1);<br>	v.push_back(p2);<br>	v.push_back(p3);<br>	v.push_back(p4);<br>	v.push_back(p5);<br>    <br>    <span class="hljs-function">Person <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-string">&quot;诸葛亮&quot;</span>,<span class="hljs-number">35</span>)</span></span>;<br><br>	<span class="hljs-keyword">int</span> num = count(v.begin(), v.end(), p);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//test01();</span><br><br>	test02();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong> 统计自定义数据类型时候，需要配合重载 <code>operator==</code></p>
<h4 id="count_if">5.2.6 count_if</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>按条件统计元素个数</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>count_if(iterator beg, iterator end, _Pred);</code></p>
<p>// 按条件统计元素出现次数</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// _Pred 谓词</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Greater4</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> val &gt;= <span class="hljs-number">4</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-comment">//内置数据类型</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>	v.push_back(<span class="hljs-number">1</span>);<br>	v.push_back(<span class="hljs-number">2</span>);<br>	v.push_back(<span class="hljs-number">4</span>);<br>	v.push_back(<span class="hljs-number">5</span>);<br>	v.push_back(<span class="hljs-number">3</span>);<br>	v.push_back(<span class="hljs-number">4</span>);<br>	v.push_back(<span class="hljs-number">4</span>);<br><br>	<span class="hljs-keyword">int</span> num = count_if(v.begin(), v.end(), Greater4());<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;大于4的个数为： &quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">//自定义数据类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	Person(<span class="hljs-built_in">string</span> name, <span class="hljs-keyword">int</span> age)<br>	&#123;<br>		<span class="hljs-keyword">this</span>-&gt;m_Name = name;<br>		<span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>	&#125;<br><br>	<span class="hljs-built_in">string</span> m_Name;<br>	<span class="hljs-keyword">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AgeLess35</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Person &amp;p)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> p.m_Age &lt; <span class="hljs-number">35</span>;<br>	&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;Person&gt; v;<br><br>	<span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;刘备&quot;</span>, <span class="hljs-number">35</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;关羽&quot;</span>, <span class="hljs-number">35</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-number">35</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;赵云&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br>	<span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;曹操&quot;</span>, <span class="hljs-number">25</span>)</span></span>;<br><br>	v.push_back(p1);<br>	v.push_back(p2);<br>	v.push_back(p3);<br>	v.push_back(p4);<br>	v.push_back(p5);<br><br>	<span class="hljs-keyword">int</span> num = count_if(v.begin(), v.end(), AgeLess35());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;小于35岁的个数：&quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//test01();</span><br><br>	test02();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong>按值统计用count，按条件统计用count_if</p>
<h3 id="常用排序算法">5.3 常用排序算法</h3>
<p><strong>学习目标：</strong></p>
<ul>
<li>掌握常用的排序算法</li>
</ul>
<p><strong>算法简介：</strong></p>
<ul>
<li><code>sort</code> //对容器内元素进行排序</li>
<li><code>random_shuffle</code> //洗牌 指定范围内的元素随机调整次序</li>
<li><code>merge</code> // 容器元素合并，并存储到另一容器中</li>
<li><code>reverse</code> // 反转指定范围的元素</li>
</ul>
<h4 id="sort">5.3.1 sort</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>对容器内元素进行排序</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>sort(iterator beg, iterator end, _Pred);</code></p>
<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// _Pred 谓词</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">myPrint</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>	v.push_back(<span class="hljs-number">10</span>);<br>	v.push_back(<span class="hljs-number">30</span>);<br>	v.push_back(<span class="hljs-number">50</span>);<br>	v.push_back(<span class="hljs-number">20</span>);<br>	v.push_back(<span class="hljs-number">40</span>);<br><br>	<span class="hljs-comment">//sort默认从小到大排序</span><br>	sort(v.begin(), v.end());<br>	for_each(v.begin(), v.end(), myPrint);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//从大到小排序</span><br>	sort(v.begin(), v.end(), greater&lt;<span class="hljs-keyword">int</span>&gt;());<br>	for_each(v.begin(), v.end(), myPrint);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong>sort属于开发中最常用的算法之一，需熟练掌握</p>
<h4 id="random_shuffle">5.3.2 random_shuffle</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>洗牌 指定范围内的元素随机调整次序</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>random_shuffle(iterator beg, iterator end);</code></p>
<p>// 指定范围内的元素随机调整次序</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	srand((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)time(<span class="hljs-literal">NULL</span>));<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">10</span>;i++)<br>	&#123;<br>		v.push_back(i);<br>	&#125;<br>	for_each(v.begin(), v.end(), myPrint());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//打乱顺序</span><br>	random_shuffle(v.begin(), v.end());<br>	for_each(v.begin(), v.end(), myPrint());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong>random_shuffle洗牌算法比较实用，使用时记得加随机数种子</p>
<h4 id="merge">5.3.3 merge</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>两个容器元素合并，并存储到另一容器中</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></p>
<p>// 容器元素合并，并存储到另一容器中</p>
<p>// 注意: 两个容器必须是<strong>有序的</strong></p>
<p>// beg1 容器1开始迭代器 // end1 容器1结束迭代器 // beg2 容器2开始迭代器 // end2 容器2结束迭代器 // dest 目标容器开始迭代器</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v2;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span> ; i++) <br>    &#123;<br>		v1.push_back(i);<br>		v2.push_back(i + <span class="hljs-number">1</span>);<br>	&#125;<br><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; vtarget;<br>	<span class="hljs-comment">//目标容器需要提前开辟空间</span><br>	vtarget.resize(v1.size() + v2.size());<br>	<span class="hljs-comment">//合并  需要两个有序序列</span><br>	merge(v1.begin(), v1.end(), v2.begin(), v2.end(), vtarget.begin());<br>	for_each(vtarget.begin(), vtarget.end(), myPrint());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong>merge合并的两个容器必须的有序序列</p>
<h4 id="reverse">5.3.4 reverse</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>将容器内元素进行反转</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>reverse(iterator beg, iterator end);</code></p>
<p>// 反转指定范围的元素</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>	v.push_back(<span class="hljs-number">10</span>);<br>	v.push_back(<span class="hljs-number">30</span>);<br>	v.push_back(<span class="hljs-number">50</span>);<br>	v.push_back(<span class="hljs-number">20</span>);<br>	v.push_back(<span class="hljs-number">40</span>);<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;反转前： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	for_each(v.begin(), v.end(), myPrint());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;反转后： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	reverse(v.begin(), v.end());<br>	for_each(v.begin(), v.end(), myPrint());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong>reverse反转区间内元素，面试题可能涉及到</p>
<h3 id="常用拷贝和替换算法">5.4 常用拷贝和替换算法</h3>
<p><strong>学习目标：</strong></p>
<ul>
<li>掌握常用的拷贝和替换算法</li>
</ul>
<p><strong>算法简介：</strong></p>
<ul>
<li><code>copy</code> // 容器内指定范围的元素拷贝到另一容器中</li>
<li><code>replace</code> // 将容器内指定范围的旧元素修改为新元素</li>
<li><code>replace_if</code> // 容器内指定范围满足条件的元素替换为新元素</li>
<li><code>swap</code> // 互换两个容器的元素</li>
</ul>
<h4 id="copy">5.4.1 copy</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>容器内指定范围的元素拷贝到另一容器中</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>copy(iterator beg, iterator end, iterator dest);</code></p>
<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// dest 目标起始迭代器</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>		v1.push_back(i + <span class="hljs-number">1</span>);<br>	&#125;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v2;<br>	v2.resize(v1.size());<br>	copy(v1.begin(), v1.end(), v2.begin());<br><br>	for_each(v2.begin(), v2.end(), myPrint());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong>利用copy算法在拷贝时，目标容器记得提前开辟空间</p>
<h4 id="replace">5.4.2 replace</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>将容器内指定范围的旧元素修改为新元素</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>replace(iterator beg, iterator end, oldvalue, newvalue);</code></p>
<p>// 将区间内旧元素 替换成 新元素</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// oldvalue 旧元素</p>
<p>// newvalue 新元素</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>	v.push_back(<span class="hljs-number">20</span>);<br>	v.push_back(<span class="hljs-number">30</span>);<br>	v.push_back(<span class="hljs-number">20</span>);<br>	v.push_back(<span class="hljs-number">40</span>);<br>	v.push_back(<span class="hljs-number">50</span>);<br>	v.push_back(<span class="hljs-number">10</span>);<br>	v.push_back(<span class="hljs-number">20</span>);<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;替换前：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	for_each(v.begin(), v.end(), myPrint());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//将容器中的20 替换成 2000</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;替换后：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	replace(v.begin(), v.end(), <span class="hljs-number">20</span>,<span class="hljs-number">2000</span>);<br>	for_each(v.begin(), v.end(), myPrint());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong>replace会替换区间内满足条件的元素</p>
<h4 id="replace_if">5.4.3 replace_if</h4>
<p><strong>功能描述:</strong></p>
<ul>
<li>将区间内满足条件的元素，替换成指定元素</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>replace_if(iterator beg, iterator end, _pred, newvalue);</code></p>
<p>// 按条件替换元素，满足条件的替换成指定元素</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// _pred 谓词</p>
<p>// newvalue 替换的新元素</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReplaceGreater30</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> val &gt;= <span class="hljs-number">30</span>;<br>	&#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>	v.push_back(<span class="hljs-number">20</span>);<br>	v.push_back(<span class="hljs-number">30</span>);<br>	v.push_back(<span class="hljs-number">20</span>);<br>	v.push_back(<span class="hljs-number">40</span>);<br>	v.push_back(<span class="hljs-number">50</span>);<br>	v.push_back(<span class="hljs-number">10</span>);<br>	v.push_back(<span class="hljs-number">20</span>);<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;替换前：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	for_each(v.begin(), v.end(), myPrint());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-comment">//将容器中大于等于的30 替换成 3000</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;替换后：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	replace_if(v.begin(), v.end(), ReplaceGreater30(), <span class="hljs-number">3000</span>);<br>	for_each(v.begin(), v.end(), myPrint());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong>replace_if按条件查找，可以利用仿函数灵活筛选满足的条件</p>
<h4 id="swap">5.4.4 swap</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>互换两个容器的元素</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>swap(container c1, container c2);</code></p>
<p>// 互换两个容器的元素</p>
<p>// c1容器1</p>
<p>// c2容器2</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v2;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>		v1.push_back(i);<br>		v2.push_back(i+<span class="hljs-number">100</span>);<br>	&#125;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;交换前： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	for_each(v1.begin(), v1.end(), myPrint());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	for_each(v2.begin(), v2.end(), myPrint());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;交换后： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	swap(v1, v2);<br>	for_each(v1.begin(), v1.end(), myPrint());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	for_each(v2.begin(), v2.end(), myPrint());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong>swap交换容器时，注意交换的容器要同种类型</p>
<h3 id="常用算术生成算法">5.5 常用算术生成算法</h3>
<p><strong>学习目标：</strong></p>
<ul>
<li>掌握常用的算术生成算法</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li>算术生成算法属于小型算法，使用时包含的头文件为 <code>#include &lt;numeric&gt;</code></li>
</ul>
<p><strong>算法简介：</strong></p>
<ul>
<li><p><code>accumulate</code> // 计算容器元素累计总和</p></li>
<li><p><code>fill</code> // 向容器中添加元素</p></li>
</ul>
<h4 id="accumulate">5.5.1 accumulate</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>计算区间内 容器元素累计总和</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>accumulate(iterator beg, iterator end, value);</code></p>
<p>// 计算容器元素累计总和</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// value 起始值</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>		v.push_back(i);<br>	&#125;<br><br>	<span class="hljs-keyword">int</span> total = accumulate(v.begin(), v.end(), <span class="hljs-number">0</span>);<br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;total = &quot;</span> &lt;&lt; total &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong>accumulate使用时头文件注意是 numeric，这个算法很实用</p>
<h4 id="fill">5.5.2 fill</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>向容器中填充指定的元素</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>fill(iterator beg, iterator end, value);</code></p>
<p>// 向容器中填充元素</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// value 填充的值</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>	v.resize(<span class="hljs-number">10</span>);<br>	<span class="hljs-comment">//填充</span><br>	fill(v.begin(), v.end(), <span class="hljs-number">100</span>);<br><br>	for_each(v.begin(), v.end(), myPrint());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong>利用fill可以将容器区间内元素填充为 指定的值</p>
<h3 id="常用集合算法">5.6 常用集合算法</h3>
<p><strong>学习目标：</strong></p>
<ul>
<li>掌握常用的集合算法</li>
</ul>
<p><strong>算法简介：</strong></p>
<ul>
<li><p><code>set_intersection</code> // 求两个容器的交集</p></li>
<li><p><code>set_union</code> // 求两个容器的并集</p></li>
<li><p><code>set_difference</code> // 求两个容器的差集</p></li>
</ul>
<h4 id="set_intersection">5.6.1 set_intersection</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>求两个容器的交集</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></p>
<p>// 求两个集合的交集</p>
<p>// <strong>注意:两个集合必须是有序序列</strong></p>
<p>// beg1 容器1开始迭代器 // end1 容器1结束迭代器 // beg2 容器2开始迭代器 // end2 容器2结束迭代器 // dest 目标容器开始迭代器</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v2;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>		v1.push_back(i);<br>		v2.push_back(i+<span class="hljs-number">5</span>);<br>	&#125;<br><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; vTarget;<br>	<span class="hljs-comment">//取两个里面较小的值给目标容器开辟空间</span><br>	vTarget.resize(min(v1.size(), v2.size()));<br><br>	<span class="hljs-comment">//返回目标容器的最后一个元素的迭代器地址</span><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator itEnd = <br>        set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());<br><br>	for_each(vTarget.begin(), itEnd, myPrint());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong></p>
<ul>
<li>求交集的两个集合必须的有序序列</li>
<li>目标容器开辟空间需要从<strong>两个容器中取小值</strong></li>
<li>set_intersection返回值既是交集中最后一个元素的位置</li>
</ul>
<h4 id="set_union">5.6.2 set_union</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>求两个集合的并集</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></p>
<p>// 求两个集合的并集</p>
<p>// <strong>注意:两个集合必须是有序序列</strong></p>
<p>// beg1 容器1开始迭代器 // end1 容器1结束迭代器 // beg2 容器2开始迭代器 // end2 容器2结束迭代器 // dest 目标容器开始迭代器</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v2;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>		v1.push_back(i);<br>		v2.push_back(i+<span class="hljs-number">5</span>);<br>	&#125;<br><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; vTarget;<br>	<span class="hljs-comment">//取两个容器的和给目标容器开辟空间</span><br>	vTarget.resize(v1.size() + v2.size());<br><br>	<span class="hljs-comment">//返回目标容器的最后一个元素的迭代器地址</span><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator itEnd = <br>        set_union(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());<br><br>	for_each(vTarget.begin(), itEnd, myPrint());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong></p>
<ul>
<li>求并集的两个集合必须的有序序列</li>
<li>目标容器开辟空间需要<strong>两个容器相加</strong></li>
<li>set_union返回值既是并集中最后一个元素的位置</li>
</ul>
<h4 id="set_difference">5.6.3 set_difference</h4>
<p><strong>功能描述：</strong></p>
<ul>
<li>求两个集合的差集</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></p>
<p>// 求两个集合的差集</p>
<p>// <strong>注意:两个集合必须是有序序列</strong></p>
<p>// beg1 容器1开始迭代器 // end1 容器1结束迭代器 // beg2 容器2开始迭代器 // end2 容器2结束迭代器 // dest 目标容器开始迭代器</p></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myPrint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v2;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>		v1.push_back(i);<br>		v2.push_back(i+<span class="hljs-number">5</span>);<br>	&#125;<br><br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; vTarget;<br>	<span class="hljs-comment">//取两个里面较大的值给目标容器开辟空间</span><br>	vTarget.resize( max(v1.size() , v2.size()));<br><br>	<span class="hljs-comment">//返回目标容器的最后一个元素的迭代器地址</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v1与v2的差集为： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator itEnd = <br>        set_difference(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());<br>	for_each(vTarget.begin(), itEnd, myPrint());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v2与v1的差集为： &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	itEnd = set_difference(v2.begin(), v2.end(), v1.begin(), v1.end(), vTarget.begin());<br>	for_each(vTarget.begin(), itEnd, myPrint());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	test01();<br><br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>总结：</strong></p>
<ul>
<li>求差集的两个集合必须的有序序列</li>
<li>目标容器开辟空间需要从<strong>两个容器取较大值</strong></li>
<li>set_difference返回值既是差集中最后一个元素的位置</li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
</search>
