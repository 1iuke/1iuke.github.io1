<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基于EEG脑-机接口的黎曼几何；入门和综述</title>
    <url>/2021/03/15/1.%E5%9F%BA%E4%BA%8EEEG%E8%84%91-%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%EF%BC%9B%E5%85%A5%E9%97%A8%E5%92%8C%E7%BB%BC%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="summary">0. Summary</h2>
<p>写完笔记之后最后填，概述文章的内容，以后查阅笔记的时候先看这一段。注：写文章summary切记需要通过自己的思考，用自己的语言描述。忌讳直接Ctrl + c原文。</p>
<hr>
<p>黎曼几何在脑机接口的应用，简述了黎曼分类的原理，优缺点。</p>
<h2 id="research-objectives">1. Research Objective(s)</h2>
<p>作者的研究目标是什么？</p>
<hr>
<p>比较黎曼几何与</p>
<h2 id="background-problem-statement">2. Background / Problem Statement</h2>
<p>研究的背景以及问题陈述：作者需要解决的问题是什么？</p>
<hr>
<p>国际预测建模BCI数据竞赛中获得的优胜分数，引起关注</p>
<p>黎曼几何的优点：simplicity,accuracy,robustness,transfer learning capabilities</p>
<p>新一代BCI解码器的要求:</p>
<ol type="1">
<li>accuracy</li>
<li>reliable</li>
<li>initialized with generic parameters</li>
<li>quick learning</li>
<li>universal</li>
<li>algorithmically simple</li>
<li>computationally efficient</li>
<li>multi-user</li>
</ol>
<p>基于</p>
<h2 id="methods">3. Method(s)</h2>
<p>作者解决问题的方法/算法是什么？是否基于前人的方法？基于了哪些？</p>
<hr>
<p>传统解码器：预处理，特征提取，分类</p>
<p>模式：MI，ERP，SSEP</p>
<p>目前都有专门的预处理，信号处理和分类模块</p>
<table>
<thead>
<tr class="header">
<th>两大范式</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>hard machine learning</td>
<td>泛化性能好</td>
<td>需要大量数据，计算密集型</td>
</tr>
<tr class="even">
<td>利用信号处理提高信噪比，然后分类（空间滤波等）</td>
<td>快速训练，成本低</td>
<td>泛化差</td>
</tr>
</tbody>
</table>
<p>黎曼分类：</p>
<p>MDM(Minimum Distance to Mean)：到平均数的最小距离</p>
<h2 id="evaluation">4. Evaluation</h2>
<p>作者如何评估自己的方法？实验的setup是什么样的？感兴趣实验数据和结果有哪些？有没有问题或者可以借鉴的地方？</p>
<figure>
<img src="/2021/03/15/1.%E5%9F%BA%E4%BA%8EEEG%E8%84%91-%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%EF%BC%9B%E5%85%A5%E9%97%A8%E5%92%8C%E7%BB%BC%E8%BF%B0/image-20210311103033549.png" title="算术均值与几何均值比较" alt="image-20210311103033549"><figcaption aria-hidden="true">image-20210311103033549</figcaption>
</figure>
<figure>
<img src="/2021/03/15/1.%E5%9F%BA%E4%BA%8EEEG%E8%84%91-%E6%9C%BA%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%EF%BC%9B%E5%85%A5%E9%97%A8%E5%92%8C%E7%BB%BC%E8%BF%B0/image-20210311103013598.png" title="黎曼MDM分类与传统CSP分类的迁移学习比较" alt="image-20210311103013598"><figcaption aria-hidden="true">image-20210311103013598</figcaption>
</figure>
<p>LDA 线性判别分析</p>
<h2 id="conclusion">5. Conclusion</h2>
<p>作者给出了哪些结论？哪些是strong conclusions, 哪些又是weak的conclusions（即作者并没有通过实验提供evidence，只在discussion中提到；或实验的数据并没有给出充分的evidence）?</p>
<hr>
<ol type="1">
<li>提供了一个更简单的黎曼分类方法，</li>
<li>最小距离到平均数（MDM）的初步介绍，我们主要依靠直观的（几何）解释。Riemannian MDM方法完全基于两个简单的概念：两个数据点之间的距离和其中若干点的平均值。</li>
<li>黎曼几何学提供了处理对称正定矩阵的天然框架，许多种类的结构协方差矩阵都是这种类型。不管协方差矩阵是如何定义的，MDM黎曼分类器对于所有三种BCI模式，即运动想象、事件相关电位和稳态诱发电位都是一样的。</li>
<li>基于切线空间映射的黎曼方法的总体性能优于MDM方法，而且性能明显优于最新的技术水平，但由于分类器继承了算法复杂度的增加和可能需要高强度的学习，它们不太适合在线操作</li>
<li>空间滤波器的改进只能为分类目的带来适度的改进，而且这种改进并不容易转化为可靠性和鲁棒性的显著提高。</li>
</ol>
<h2 id="notes">6. Notes</h2>
<p>(optional) 不在以上列表中，但需要特别记录的笔记。</p>
<hr>
<p>附录1中给出了三种主要BCI模式的正式定义。 这些定义还可以改进，并期待对这一课题的进一步研究。</p>
<h2 id="references">References</h2>
<p>(optional) 列出相关性高的文献，以便之后可以继续track下去。</p>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>黎曼几何</tag>
      </tags>
  </entry>
  <entry>
    <title>基于编码调制VEP的高速BCI</title>
    <url>/2021/03/15/2.%E5%9F%BA%E4%BA%8E%E7%BC%96%E7%A0%81%E8%B0%83%E5%88%B6VEP%E7%9A%84%E9%AB%98%E9%80%9FBCI/</url>
    <content><![CDATA[<h2 id="summary">0. Summary</h2>
<p>写完笔记之后最后填，概述文章的内容，以后查阅笔记的时候先看这一段。注：写文章summary切记需要通过自己的思考，用自己的语言描述。忌讳直接Ctrl + c原文。</p>
<p>通过编码调制与多通道处理提高ITR</p>
<h2 id="research-objectives">1. Research Objective(s)</h2>
<p>作者的研究目标是什么？</p>
<p>提高ITR</p>
<h2 id="background-problem-statement">2. Background / Problem Statement</h2>
<p>研究的背景以及问题陈述：作者需要解决的问题是什么？</p>
<p>BCI 通信系统传输速率低，提高ITR(信息传输率)</p>
<h2 id="methods">3. Method(s)</h2>
<p>作者解决问题的方法/算法是什么？是否基于前人的方法？基于了哪些？</p>
<ul>
<li><p>提出了基于c-VEP的调制系统，其中二进制伪随机码被用来调制不同的视觉刺激</p></li>
<li><p>提出了一种提高识别精度的多通道检测方法</p></li>
</ul>
<h2 id="evaluation">4. Evaluation</h2>
<p>作者如何评估自己的方法？实验的setup是什么样的？感兴趣实验数据和结果有哪些？有没有问题或者可以借鉴的地方？</p>
<figure>
<img src="/2021/03/15/2.%E5%9F%BA%E4%BA%8E%E7%BC%96%E7%A0%81%E8%B0%83%E5%88%B6VEP%E7%9A%84%E9%AB%98%E9%80%9FBCI/image-20210311110254896.png" alt="image-20210311110254896"><figcaption aria-hidden="true">image-20210311110254896</figcaption>
</figure>
<ol type="1">
<li>该系统由一个脑电图放大器和一台带CRT显示器的个人电脑（PC）组成。</li>
<li>不同目标的反应之间的圆移关系是目标识别的基础，一旦获得了T0的模板，其他目标的模板可以很容易地获得<img src="/2021/03/15/2.%E5%9F%BA%E4%BA%8E%E7%BC%96%E7%A0%81%E8%B0%83%E5%88%B6VEP%E7%9A%84%E9%AB%98%E9%80%9FBCI/image-20210311110915610-1615775581553.png" title="园移 Principle of equivalent neighbors" alt="image-20210311110915610"></li>
<li>在获得所有目标的模板后，可以采用模板匹配的方法进行目标识别，通过选择相关系数最大的目标来确定固定目标</li>
<li>多通道处理，由于双极通道。实验分为训练阶段和测试阶段。在训练阶段，要求被试者固定在参考目标上约200个刺激周期。训练阶段的数据用于离线分析，以计算空间滤波权重和在线使用的参考模板.在测试阶段，每个受试者被要求输入一个64个字符的序列。 在测试阶段，每个受试者都被要求输入64个字符序列，在线准确率和相应的ITR用于评估系统性能。 在计算ITR时，每次选择的时间成本为2.1s(包括两个刺激期，一个用于数据采集，一个用于目标识别、反馈展示和凝视)。</li>
</ol>
<h2 id="conclusion">5. Conclusion</h2>
<p>作者给出了哪些结论？哪些是strong conclusions, 哪些又是weak的conclusions（即作者并没有通过实验提供evidence，只在discussion中提到；或实验的数据并没有给出充分的evidence）?</p>
<p>本文对高速c-VEP BCI系统的基本原理和实现方法进行了详细的介绍,提出的c-VEP BCI具有108±12.0比特/分钟-1的高ITR,超过了以往基于脑电图的BCI的记录。</p>
<h2 id="notes">6. Notes</h2>
<p>(optional) 不在以上列表中，但需要特别记录的笔记。</p>
<h2 id="references">References</h2>
<p>(optional) 列出相关性高的文献，以便之后可以继续track下去。</p>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>VEP</tag>
      </tags>
  </entry>
  <entry>
    <title>基于典型相关分析方法的在线多通道SSVEP脑机接口</title>
    <url>/2021/03/15/3.%E5%9F%BA%E4%BA%8E%E5%85%B8%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%A4%9A%E9%80%9A%E9%81%93SSVEP%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="summary">0. Summary</h2>
<p>写完笔记之后最后填，概述文章的内容，以后查阅笔记的时候先看这一段。注：写文章summary切记需要通过自己的思考，用自己的语言描述。忌讳直接Ctrl + c原文。</p>
<h2 id="research-objectives">1. Research Objective(s)</h2>
<p>作者的研究目标是什么？</p>
<p>本文提出了一种在线多信道SSVEP BCI系统，采用典型相关分析（CCA）方法提取与SSVEP相关的频率信息。利用离线数据对系统的关键参数信道位置、窗长和谐波数进行了研究，为在线系统的设计提供了依据。</p>
<h2 id="background-problem-statement">2. Background / Problem Statement</h2>
<p>研究的背景以及问题陈述：作者需要解决的问题是什么？</p>
<ul>
<li>不同的SSVEP可以通过将我们的兴趣或注意力转移到其中一个频率编码的刺激上而产生</li>
<li>SSVEP的BCI有更高的信噪比（SNR）和信息传输率（ITR）</li>
</ul>
<h2 id="methods">3. Method(s)</h2>
<p>作者解决问题的方法/算法是什么？是否基于前人的方法？基于了哪些？</p>
<ul>
<li>MEC(minium energy method) 检测精度高, 无需校准数据</li>
<li><a href="./典型相关分析(CCA).md">CCA</a></li>
</ul>
<h2 id="evaluation">4. Evaluation</h2>
<p>作者如何评估自己的方法？实验的setup是什么样的？感兴趣实验数据和结果有哪些？有没有问题或者可以借鉴的地方？</p>
<h2 id="conclusion">5. Conclusion</h2>
<p>作者给出了哪些结论？哪些是strong conclusions, 哪些又是weak的conclusions（即作者并没有通过实验提供evidence，只在discussion中提到；或实验的数据并没有给出充分的evidence）?</p>
<ul>
<li>结果:来自30个BCI命令的正确计数的平均值为28.6。 BCI系统的平均ITR为58±9.6位min-1。</li>
</ul>
<h2 id="notes">6. Notes</h2>
<p>(optional) 不在以上列表中，但需要特别记录的笔记。</p>
<h2 id="references">References</h2>
<p>(optional) 列出相关性高的文献，以便之后可以继续track下去。</p>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>SSVEP</tag>
      </tags>
  </entry>
  <entry>
    <title>基于黎曼几何的新一代脑机接口</title>
    <url>/2021/03/15/4.%E5%9F%BA%E4%BA%8E%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95%E7%9A%84%E6%96%B0%E4%B8%80%E4%BB%A3%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="summary">0. Summary</h2>
<p>写完笔记之后最后填，概述文章的内容，以后查阅笔记的时候先看这一段。注：写文章summary切记需要通过自己的思考，用自己的语言描述。忌讳直接Ctrl + c原文。</p>
<h2 id="research-objectives">1. Research Objective(s)</h2>
<p>作者的研究目标是什么？</p>
<h2 id="background-problem-statement">2. Background / Problem Statement</h2>
<p>研究的背景以及问题陈述：作者需要解决的问题是什么？</p>
<h2 id="methods">3. Method(s)</h2>
<p>作者解决问题的方法/算法是什么？是否基于前人的方法？基于了哪些？</p>
<h2 id="evaluation">4. Evaluation</h2>
<p>作者如何评估自己的方法？实验的setup是什么样的？感兴趣实验数据和结果有哪些？有没有问题或者可以借鉴的地方？</p>
<h2 id="conclusion">5. Conclusion</h2>
<p>作者给出了哪些结论？哪些是strong conclusions, 哪些又是weak的conclusions（即作者并没有通过实验提供evidence，只在discussion中提到；或实验的数据并没有给出充分的evidence）?</p>
<h2 id="notes">6. Notes</h2>
<p>(optional) 不在以上列表中，但需要特别记录的笔记。</p>
<h2 id="references">References</h2>
<p>(optional) 列出相关性高的文献，以便之后可以继续track下去。</p>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>黎曼几何</tag>
      </tags>
  </entry>
  <entry>
    <title>Day1EEG基础</title>
    <url>/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="什么是脑电eeg">什么是脑电(EEG)?</h1>
<ul>
<li>EEG is the electrical activity, which is normally recorded at the scalp of human brain, generated by the firing of neurons within the brain.</li>
</ul>
<p>脑细胞无时无刻不在进行自发性、 节律性、 综合性的电活动。 将这种 电活动 的电位作为纵轴， 时间为横轴， 记录下来的电位与时间相互关系的 平面图即为脑电图（ electroencephalograph， EEG）。</p>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/第二十五届脑电数据处理中级班PPT-1615949013950.jpg" alt="第二十五届脑电数据处理中级班PPT"><figcaption aria-hidden="true">第二十五届脑电数据处理中级班PPT</figcaption>
</figure>
<h2 id="数据预处理">数据预处理</h2>
<h3 id="eeglab启动">0 eeglab启动</h3>
<h3 id="数据格式转化">1 数据格式转化</h3>
<p>导入原始数据并转化为set格式文件 file --&gt; import data --&gt;using eeglab functions and plugins –&gt; from Brain Vis,Rec..vhdr file 找到对应的厂家以及文件格式信息 如果没有你的厂家或者格式信息： 1）可以找厂家要 2）自行下载extensions 导入更多厂家的数据 https://sccn.ucsd.edu/wiki/Plugin_list_import</p>
<p>导入已经存好的set文件： file --&gt; load existing dataset</p>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317150558774.png" alt="image-20210317150558774"><figcaption aria-hidden="true">image-20210317150558774</figcaption>
</figure>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317220023613.png" alt="image-20210317220023613"><figcaption aria-hidden="true">image-20210317220023613</figcaption>
</figure>
<h3 id="通道定位">2 通道定位</h3>
<ul>
<li><p>对于标准名称的电极 可以直接定位： <strong>Edit -- channel location</strong> 如果电极名称不标准 1 如果电极位于标准位置 ,只是名称不标准，可以将名字改为标准名称再进行定位 <strong>--&gt;look up locs</strong></p>
<blockquote>
<p>HEO 标准名称为 HEOG</p>
</blockquote>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317220624969.png" alt="image-20210317220624969"><figcaption aria-hidden="true">image-20210317220624969</figcaption>
</figure>
<p>2 如果名字不标准 位置也不标准， 2.1 如果只是极个别电极是这种情况，而这些电极又不是你关系的电极。eg: CB1 CB2 ，可以当做无用电极去掉 2.2 如果大多数电极都是这种情况，可以找厂家要坐标文件，自行导入定位。 <strong>--&gt; look up locs</strong></p></li>
<li><p>查看电极名称与序号之间的关系 1）<strong>plot --&gt; channel locations - -&gt;by name/by number</strong> 电极名称或者序号 可以转换 2）点击workspace中的EEG 点开之后 再点击 chanlocs 查看电极点对应名称</p></li>
</ul>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317222512799.png" alt="image-20210317222512799"><figcaption aria-hidden="true">image-20210317222512799</figcaption>
</figure>
<h3 id="去除无用电极选">3 去除无用电极（选）</h3>
<p><strong>Edit --&gt; select data --&gt; channel range</strong> 中选择不要的电极 <strong>on -&gt;remove these</strong> 勾选是上</p>
<p>去除63 HEO 64 VEO</p>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317221423555.png" alt="image-20210317221423555"><figcaption aria-hidden="true">image-20210317221423555</figcaption>
</figure>
<p>此时电极数为62个</p>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317221516935.png" alt="image-20210317221516935"><figcaption aria-hidden="true">image-20210317221516935</figcaption>
</figure>
<h3 id="滤波">4 滤波</h3>
<p><strong>Tools --&gt; Filter the data --&gt; Basic FIR filter</strong></p>
<ul>
<li><p>低通 low pass high edge</p></li>
<li><p>高通 high pass lower edge</p></li>
<li><p>带通 一次滤波效果优于低通+高通</p></li>
</ul>
<p>4.1 带通</p>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317150348697.png" alt="image-20210317150348697"><figcaption aria-hidden="true">image-20210317150348697</figcaption>
</figure>
<p>滤波器：</p>
<p><img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317221718548.png"></p>
<ol start="4" type="1">
<li><p>2 去50Hz工频干扰：</p>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317151350782.png" alt="image-20210317151350782"><figcaption aria-hidden="true">image-20210317151350782</figcaption>
</figure>
<p>滤波器：</p>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317223040234.png" alt="image-20210317223040234"><figcaption aria-hidden="true">image-20210317223040234</figcaption>
</figure></li>
</ol>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317223128561.png" alt="image-20210317223128561"><figcaption aria-hidden="true">image-20210317223128561</figcaption>
</figure>
<h3 id="降采样">5 降采样</h3>
<p><strong>Tools-&gt;Change sampling rate</strong></p>
<p>常用1000Hz</p>
<p>缺点：降低了时间分辨率，</p>
<p>优点：降低多重比较次数</p>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317152013696.png" alt="image-20210317152013696"><figcaption aria-hidden="true">image-20210317152013696</figcaption>
</figure>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317223246491.png" alt="image-20210317223246491"><figcaption aria-hidden="true">image-20210317223246491</figcaption>
</figure>
<h3 id="分段">6 分段</h3>
<p><strong>Tools-&gt;extract epochs</strong></p>
<p>6.1 提取信号前1s后2s的数据</p>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317153048902.png" alt="image-20210317153048902"><figcaption aria-hidden="true">image-20210317153048902</figcaption>
</figure>
<p>6.2 减去baseline的平均值</p>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317223425020.png" alt="image-20210317223425020"><figcaption aria-hidden="true">image-20210317223425020</figcaption>
</figure>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317153357592.png" alt="image-20210317153357592"><figcaption aria-hidden="true">image-20210317153357592</figcaption>
</figure>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317192737305.png" alt="image-20210317192737305"><figcaption aria-hidden="true">image-20210317192737305</figcaption>
</figure>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317224014659.png" alt="image-20210317224014659"><figcaption aria-hidden="true">image-20210317224014659</figcaption>
</figure>
<p><strong>4 5 6的顺序：分段导致时间过短；</strong></p>
<pre><code>                    **降采样丢失信息**</code></pre>
<h3 id="去除坏电极替换坏导去除坏段">7 去除坏电极，替换坏导，去除坏段，</h3>
<p>7.1 去除</p>
<p><strong>Edit -&gt; Select data</strong> 同2</p>
<p>7.2 插补</p>
<p><strong>Tools --&gt; Interpolate electrodes</strong></p>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317160732429.png" alt="image-20210317160732429"><figcaption aria-hidden="true">image-20210317160732429</figcaption>
</figure>
<p><strong>有效trials应超过60%</strong></p>
<p>7.3 去除坏段</p>
<p><strong>Plot–&gt;Channel data –&gt; Reject</strong></p>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317162107819.png" alt="image-20210317162107819"><figcaption aria-hidden="true">image-20210317162107819</figcaption>
</figure>
<h3 id="ica">8 ICA</h3>
<p><strong>Tools --&gt; Run ICA</strong></p>
<p>如果没有进行坏电极插补 直接点击ok即可 如果进行坏电极插补，则需要在'extended', 1后面加东西 <strong>'extended', 1, 'pca', m-n</strong> m为当前电极数量，n为插补的电极数量</p>
<p>数据通道太少 不建议跑ICA 可以手动去伪迹 效果不好 数据大于64个通道 例如 128导 256导 ICA通常跑64个即可</p>
<p><strong>ICA过程</strong></p>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317225334493.png" alt="image-20210317225334493"><figcaption aria-hidden="true">image-20210317225334493</figcaption>
</figure>
<p><strong>绘制ICA成分</strong></p>
<p>8.1 <strong>Plot --&gt; Component properties</strong></p>
<p><img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317165436899.png"></p>
<p>8.2 <strong>Tool --&gt; Reject data using ICA --&gt; Reject components by map</strong></p>
<h3 id="剔除眼动">9 剔除眼动</h3>
<h4 id="经典成分-眨眼">9.1 经典成分-眨眼</h4>
<ul>
<li>判断依据：</li>
</ul>
<ol type="1">
<li><p>前端分布</p></li>
<li><p>小方块</p></li>
<li><p>随机分布</p></li>
<li><p>低频能量高</p></li>
<li><p>成分排序靠前</p></li>
</ol>
<ul>
<li>注意：颜色的深浅有意义， 但是红蓝无所谓，大红大蓝 都可以。</li>
</ul>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210318184633943.png" alt="image-20210318184633943"><figcaption aria-hidden="true">image-20210318184633943</figcaption>
</figure>
<h4 id="经典成分-眼漂">9.2 经典成分-眼漂</h4>
<ul>
<li>判断依据：</li>
</ul>
<ol type="1">
<li><p>前端两侧分布， 红蓝相对</p></li>
<li><p>长条状，红蓝相 间</p></li>
<li><p>随机分布</p></li>
<li><p>低频能量高</p></li>
<li><p>成分排序靠前， 但一般排在眨眼 后面</p>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210318184919137.png" alt="image-20210318184919137"><figcaption aria-hidden="true">image-20210318184919137</figcaption>
</figure></li>
</ol>
<h4 id="经典成分头动">9.3 经典成分：头动</h4>
<ul>
<li>判断依据</li>
</ul>
<ol type="1">
<li><p>周围分布</p></li>
<li><p>长条状</p></li>
<li><p>随机分布</p></li>
<li><p>在单个trial里有 非常明显的漂移</p></li>
</ol>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210318185015606.png" alt="image-20210318185015606"><figcaption aria-hidden="true">image-20210318185015606</figcaption>
</figure>
<h4 id="其他成分-工频干扰">9.4 其他成分： 工频干扰</h4>
<ol type="1">
<li><p>分布在地线 周围</p></li>
<li><p>单个Trial上 的分布非常 有规律</p></li>
<li><p>50Hz左右能 量最高</p></li>
</ol>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210318185434043.png" alt="image-20210318185434043"><figcaption aria-hidden="true">image-20210318185434043</figcaption>
</figure>
<h4 id="其他成分-心电">9.5 其他成分 • 心电</h4>
<p>• 呈雨点般散落状。</p>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210318185517456.png" alt="image-20210318185517456"><figcaption aria-hidden="true">image-20210318185517456</figcaption>
</figure>
<h4 id="保存数据图片">9.6 保存数据、图片</h4>
<p>保存数据： File -&gt; save current dataset</p>
<p>保存图片：</p>
<ul>
<li><p>Plot Channel ERP image</p></li>
<li><p>Plot Channel ERPs With scalp maps</p></li>
<li><p>Plot Channel ERPs In scalp/rect. Array</p></li>
<li><p>Plot ERP map series 2D</p></li>
</ul>
<p><strong>不确定就不去除</strong></p>
<h3 id="极端值去伪迹">10 极端值去伪迹</h3>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317173206003.png" alt="image-20210317173206003"><figcaption aria-hidden="true">image-20210317173206003</figcaption>
</figure>
<p>100 yes</p>
<p>70/80</p>
<figure>
<img src="/2021/03/19/Day1EEG%E5%9F%BA%E7%A1%80/image-20210317173330602.png" alt="image-20210317173330602"><figcaption aria-hidden="true">image-20210317173330602</figcaption>
</figure>
<h3 id="重参考">11 重参考</h3>
<p><strong>Tools --&gt; re-reference</strong></p>
<h3 id="手动浏览数据-查看是否还有伪迹">12 手动浏览数据 查看是否还有伪迹</h3>
<h3 id="补充">补充：</h3>
<p>12.1 只保留正确反应的分段 <strong>edit --&gt;select epochs or events</strong> 在type里面选上正确反映的marker</p>
<p>12.2 二次滤波只需要做低通滤波 做完记得基线校正 <strong>tools -- remove baseline</strong></p>
<p>12.3 二次分段 也需要基线校正</p>
]]></content>
      <categories>
        <category>脑电</category>
      </categories>
  </entry>
  <entry>
    <title>Day1night通讯管理系统</title>
    <url>/2021/03/26/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="通讯录管理系统">通讯录管理系统</h1>
<h2 id="系统需求">1、系统需求</h2>
<p>通讯录是一个可以记录亲人、好友信息的工具。</p>
<p>本教程主要利用C++来实现一个通讯录管理系统</p>
<p>系统中需要实现的功能如下：</p>
<ul>
<li>添加联系人：向通讯录中添加新人，信息包括（姓名、性别、年龄、联系电话、家庭住址）最多记录1000人</li>
<li>显示联系人：显示通讯录中所有联系人信息</li>
<li>删除联系人：按照姓名进行删除指定联系人</li>
<li>查找联系人：按照姓名查看指定联系人信息</li>
<li>修改联系人：按照姓名重新修改指定联系人</li>
<li>清空联系人：清空通讯录中所有信息</li>
<li>退出通讯录：退出当前使用的通讯录</li>
</ul>
<h2 id="创建项目">2、创建项目</h2>
<p>创建项目步骤如下：</p>
<ul>
<li>创建新项目</li>
<li>添加文件</li>
</ul>
<h3 id="创建项目-1">2.1 创建项目</h3>
<p>打开vs2017后，点击创建新项目，创建新的C++项目</p>
<figure>
<img src="/2021/03/26/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544151401138.png" alt="1544151401138"><figcaption aria-hidden="true">1544151401138</figcaption>
</figure>
<p>填写项目名称，选择项目路径</p>
<figure>
<img src="/2021/03/26/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544151579620.png" alt="1544151579620"><figcaption aria-hidden="true">1544151579620</figcaption>
</figure>
<h3 id="添加文件">2.2添加文件</h3>
<figure>
<img src="/2021/03/26/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544161551746.png" alt="1544161551746"><figcaption aria-hidden="true">1544161551746</figcaption>
</figure>
<figure>
<img src="/2021/03/26/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544161648175.png" alt="1544161648175"><figcaption aria-hidden="true">1544161648175</figcaption>
</figure>
<p>添加成功后，效果如图：</p>
<figure>
<img src="/2021/03/26/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544162344057.png" alt="1544162344057"><figcaption aria-hidden="true">1544162344057</figcaption>
</figure>
<p>至此，项目已创建完毕</p>
<h2 id="菜单功能">3、菜单功能</h2>
<p><strong>功能描述：</strong> 用户选择功能的界面</p>
<p>菜单界面效果如下图：</p>
<figure>
<img src="/2021/03/26/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544149559893.png" alt="1544149559893"><figcaption aria-hidden="true">1544149559893</figcaption>
</figure>
<p><strong>步骤：</strong></p>
<ul>
<li>封装函数显示该界面 如 <code>void showMenu()</code></li>
<li>在main函数中调用封装好的函数</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  1、添加联系人  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  2、显示联系人  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  3、删除联系人  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  4、查找联系人  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  5、修改联系人  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  6、清空联系人  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  0、退出通讯录  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	showMenu();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="退出功能">4、退出功能</h2>
<p>功能描述：退出通讯录系统</p>
<p>思路：根据用户不同的选择，进入不同的功能，可以选择switch分支结构，将整个架构进行搭建</p>
<p>当用户选择0时候，执行退出，选择其他先不做操作，也不会退出程序</p>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		showMenu();</span><br><span class="line"></span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">switch</span> (select)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:  <span class="comment">//添加联系人</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:  <span class="comment">//显示联系人</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:  <span class="comment">//删除联系人</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:  <span class="comment">//查找联系人</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:  <span class="comment">//修改联系人</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">6</span>:  <span class="comment">//清空联系人</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:  <span class="comment">//退出通讯录</span></span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;欢迎下次使用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<figure>
<img src="/2021/03/26/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544163868043.png" alt="1544163868043"><figcaption aria-hidden="true">1544163868043</figcaption>
</figure>
<h2 id="添加联系人">5、添加联系人</h2>
<p>功能描述：</p>
<p>实现添加联系人功能，联系人上限为1000人，联系人信息包括（姓名、性别、年龄、联系电话、家庭住址）</p>
<p>添加联系人实现步骤：</p>
<ul>
<li>设计联系人结构体</li>
<li>设计通讯录结构体</li>
<li>main函数中创建通讯录</li>
<li>封装添加联系人函数</li>
<li>测试添加联系人功能</li>
</ul>
<h3 id="设计联系人结构体">5.1 设计联系人结构体</h3>
<p>联系人信息包括：姓名、性别、年龄、联系电话、家庭住址</p>
<p>设计如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;  //string头文件</span></span></span><br><span class="line"><span class="comment">//联系人结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">string</span> m_Name; <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> m_Sex; <span class="comment">//性别：1男 2女</span></span><br><span class="line">	<span class="keyword">int</span> m_Age; <span class="comment">//年龄</span></span><br><span class="line">	<span class="built_in">string</span> m_Phone; <span class="comment">//电话</span></span><br><span class="line">	<span class="built_in">string</span> m_Addr; <span class="comment">//住址</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="设计通讯录结构体">5.2 设计通讯录结构体</h3>
<p>设计时候可以在通讯录结构体中，维护一个容量为1000的存放联系人的数组，并记录当前通讯录中联系人数量</p>
<p>设计如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000 <span class="comment">//最大人数</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通讯录结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Addressbooks</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">personArray</span>[<span class="title">MAX</span>];</span> <span class="comment">//通讯录中保存的联系人数组</span></span><br><span class="line">	<span class="keyword">int</span> m_Size; <span class="comment">//通讯录中人员个数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="main函数中创建通讯录">5.3 main函数中创建通讯录</h3>
<p>添加联系人函数封装好后，在main函数中创建一个通讯录变量，这个就是我们需要一直维护的通讯录</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">mian函数起始位置添加：</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建通讯录</span></span><br><span class="line">	Addressbooks <span class="built_in">abs</span>;</span><br><span class="line">	<span class="comment">//初始化通讯录中人数</span></span><br><span class="line">	<span class="built_in">abs</span>.m_Size = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h3 id="封装添加联系人函数">5.4 封装添加联系人函数</h3>
<p>思路：添加联系人前先判断通讯录是否已满，如果满了就不再添加，未满情况将新联系人信息逐个加入到通讯录</p>
<p>添加联系人代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、添加联系人信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addPerson</span><span class="params">(Addressbooks *<span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//判断电话本是否满了</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;m_Size == MAX)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通讯录已满，无法添加&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//姓名</span></span><br><span class="line">		<span class="built_in">string</span> name;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入姓名：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">		<span class="built_in">abs</span>-&gt;personArray[<span class="built_in">abs</span>-&gt;m_Size].m_Name = name;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入性别：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1 -- 男&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2 -- 女&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//性别</span></span><br><span class="line">		<span class="keyword">int</span> sex = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; sex;</span><br><span class="line">			<span class="keyword">if</span> (sex == <span class="number">1</span> || sex == <span class="number">2</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">abs</span>-&gt;personArray[<span class="built_in">abs</span>-&gt;m_Size].m_Sex = sex;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误，请重新输入&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//年龄</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入年龄：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; age;</span><br><span class="line">		<span class="built_in">abs</span>-&gt;personArray[<span class="built_in">abs</span>-&gt;m_Size].m_Age = age;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//联系电话</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入联系电话：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">string</span> phone = <span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; phone;</span><br><span class="line">		<span class="built_in">abs</span>-&gt;personArray[<span class="built_in">abs</span>-&gt;m_Size].m_Phone = phone;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//家庭住址</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入家庭住址：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">string</span> address;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; address;</span><br><span class="line">		<span class="built_in">abs</span>-&gt;personArray[<span class="built_in">abs</span>-&gt;m_Size].m_Addr = address;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//更新通讯录人数</span></span><br><span class="line">		<span class="built_in">abs</span>-&gt;m_Size++;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;添加成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试添加联系人功能">5.5 测试添加联系人功能</h3>
<p>选择界面中，如果玩家选择了1，代表添加联系人，我们可以测试下该功能</p>
<p>在switch case 语句中，case1里添加：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">1</span>:  <span class="comment">//添加联系人</span></span><br><span class="line">	addPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
<p>测试效果如图：</p>
<figure>
<img src="/2021/03/26/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544165554002.png" alt="1544165554002"><figcaption aria-hidden="true">1544165554002</figcaption>
</figure>
<h2 id="显示联系人">6、显示联系人</h2>
<p>功能描述：显示通讯录中已有的联系人信息</p>
<p>显示联系人实现步骤：</p>
<ul>
<li>封装显示联系人函数</li>
<li>测试显示联系人功能</li>
</ul>
<h3 id="封装显示联系人函数">6.1 封装显示联系人函数</h3>
<p>思路：判断如果当前通讯录中没有人员，就提示记录为空，人数大于0，显示通讯录中信息</p>
<p>显示联系人代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2、显示所有联系人信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">(Addressbooks * <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;m_Size == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;当前记录为空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">abs</span>-&gt;m_Size; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[i].m_Name &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;性别：&quot;</span> &lt;&lt; (<span class="built_in">abs</span>-&gt;personArray[i].m_Sex == <span class="number">1</span> ? <span class="string">&quot;男&quot;</span> : <span class="string">&quot;女&quot;</span>) &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[i].m_Age &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;电话：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[i].m_Phone &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;住址：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[i].m_Addr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试显示联系人功能">6.2 测试显示联系人功能</h3>
<p>在switch case语句中，case 2 里添加</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">2</span>:  <span class="comment">//显示联系人</span></span><br><span class="line">	showPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
<p>测试效果如图：</p>
<figure>
<img src="/2021/03/26/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544166401582.png" alt="1544166401582"><figcaption aria-hidden="true">1544166401582</figcaption>
</figure>
<h2 id="删除联系人">7、删除联系人</h2>
<p>功能描述：按照姓名进行删除指定联系人</p>
<p>删除联系人实现步骤：</p>
<ul>
<li>封装检测联系人是否存在</li>
<li>封装删除联系人函数</li>
<li>测试删除联系人功能</li>
</ul>
<h3 id="封装检测联系人是否存在">7.1 封装检测联系人是否存在</h3>
<p>设计思路：</p>
<p>删除联系人前，我们需要先判断用户输入的联系人是否存在，如果存在删除，不存在提示用户没有要删除的联系人</p>
<p>因此我们可以把检测联系人是否存在封装成一个函数中，如果存在，返回联系人在通讯录中的位置，不存在返回-1</p>
<p>检测联系人是否存在代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否存在查询的人员，存在返回在数组中索引位置，不存在返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isExist</span><span class="params">(Addressbooks * <span class="built_in">abs</span>, <span class="built_in">string</span> name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">abs</span>-&gt;m_Size; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;personArray[i].m_Name == name)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="封装删除联系人函数">7.2 封装删除联系人函数</h3>
<p>根据用户输入的联系人判断该通讯录中是否有此人</p>
<p>查找到进行删除，并提示删除成功</p>
<p>查不到提示查无此人。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3、删除指定联系人信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletePerson</span><span class="params">(Addressbooks * <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入您要删除的联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> ret = isExist(<span class="built_in">abs</span>, name);</span><br><span class="line">	<span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = ret; i &lt; <span class="built_in">abs</span>-&gt;m_Size; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">abs</span>-&gt;personArray[i] = <span class="built_in">abs</span>-&gt;personArray[i + <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">         <span class="built_in">abs</span>-&gt;m_Size--;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;删除成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查无此人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试删除联系人功能">7.3 测试删除联系人功能</h3>
<p>在switch case 语句中，case3里添加：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">3</span>:  <span class="comment">//删除联系人</span></span><br><span class="line">	deletePerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
<p>测试效果如图：</p>
<p>存在情况：</p>
<figure>
<img src="/2021/03/26/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544167951559.png" alt="1544167951559"><figcaption aria-hidden="true">1544167951559</figcaption>
</figure>
<p>不存在情况：</p>
<figure>
<img src="/2021/03/26/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544168010831.png" alt="1544168010831"><figcaption aria-hidden="true">1544168010831</figcaption>
</figure>
<h2 id="查找联系人">8、查找联系人</h2>
<p>功能描述：按照姓名查看指定联系人信息</p>
<p>查找联系人实现步骤</p>
<ul>
<li>封装查找联系人函数</li>
<li>测试查找指定联系人</li>
</ul>
<h3 id="封装查找联系人函数">8.1 封装查找联系人函数</h3>
<p>实现思路：判断用户指定的联系人是否存在，如果存在显示信息，不存在则提示查无此人。</p>
<p>查找联系人代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4、查找指定联系人信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findPerson</span><span class="params">(Addressbooks * <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入您要查找的联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> ret = isExist(<span class="built_in">abs</span>, name);</span><br><span class="line">	<span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[ret].m_Name &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;性别：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[ret].m_Sex &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[ret].m_Age &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;电话：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[ret].m_Phone &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;住址：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[ret].m_Addr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查无此人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试查找指定联系人">8.2 测试查找指定联系人</h3>
<p>在switch case 语句中，case4里添加：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">4</span>:  <span class="comment">//查找联系人</span></span><br><span class="line">	findPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
<p>测试效果如图</p>
<p>存在情况：</p>
<figure>
<img src="/2021/03/26/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544170057646.png" alt="1544170057646"><figcaption aria-hidden="true">1544170057646</figcaption>
</figure>
<p>不存在情况：</p>
<figure>
<img src="/2021/03/26/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544170254021.png" alt="1544170254021"><figcaption aria-hidden="true">1544170254021</figcaption>
</figure>
<h2 id="修改联系人">9、修改联系人</h2>
<p>功能描述：按照姓名重新修改指定联系人</p>
<p>修改联系人实现步骤</p>
<ul>
<li>封装修改联系人函数</li>
<li>测试修改联系人功能</li>
</ul>
<h3 id="封装修改联系人函数">9.1 封装修改联系人函数</h3>
<p>实现思路：查找用户输入的联系人，如果查找成功进行修改操作，查找失败提示查无此人</p>
<p>修改联系人代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5、修改指定联系人信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyPerson</span><span class="params">(Addressbooks * <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入您要修改的联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> ret = isExist(<span class="built_in">abs</span>, name);</span><br><span class="line">	<span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//姓名</span></span><br><span class="line">		<span class="built_in">string</span> name;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入姓名：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">		<span class="built_in">abs</span>-&gt;personArray[ret].m_Name = name;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入性别：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1 -- 男&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2 -- 女&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//性别</span></span><br><span class="line">		<span class="keyword">int</span> sex = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; sex;</span><br><span class="line">			<span class="keyword">if</span> (sex == <span class="number">1</span> || sex == <span class="number">2</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">abs</span>-&gt;personArray[ret].m_Sex = sex;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误，请重新输入&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//年龄</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入年龄：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; age;</span><br><span class="line">		<span class="built_in">abs</span>-&gt;personArray[ret].m_Age = age;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//联系电话</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入联系电话：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">string</span> phone = <span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; phone;</span><br><span class="line">		<span class="built_in">abs</span>-&gt;personArray[ret].m_Phone = phone;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//家庭住址</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入家庭住址：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">string</span> address;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; address;</span><br><span class="line">		<span class="built_in">abs</span>-&gt;personArray[ret].m_Addr = address;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;修改成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查无此人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试修改联系人功能">9.2 测试修改联系人功能</h3>
<p>在switch case 语句中，case 5里添加：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">5</span>:  <span class="comment">//修改联系人</span></span><br><span class="line">	modifyPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
<p>测试效果如图：</p>
<p>查不到指定联系人情况：</p>
<figure>
<img src="/2021/03/26/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544172265676.png" alt="1544172265676"><figcaption aria-hidden="true">1544172265676</figcaption>
</figure>
<p>查找到联系人，并修改成功：</p>
<figure>
<img src="/2021/03/26/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544172164141.png" alt="1544172164141"><figcaption aria-hidden="true">1544172164141</figcaption>
</figure>
<p>再次查看通讯录，确认修改完毕</p>
<figure>
<img src="/2021/03/26/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544172228627.png" alt="1544172228627"><figcaption aria-hidden="true">1544172228627</figcaption>
</figure>
<h2 id="清空联系人">10、清空联系人</h2>
<p>功能描述：清空通讯录中所有信息</p>
<p>清空联系人实现步骤</p>
<ul>
<li>封装清空联系人函数</li>
<li>测试清空联系人</li>
</ul>
<h3 id="封装清空联系人函数">10.1 封装清空联系人函数</h3>
<p>实现思路： 将通讯录所有联系人信息清除掉，只要将通讯录记录的联系人数量置为0，做逻辑清空即可。</p>
<p>清空联系人代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//6、清空所有联系人</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleanPerson</span><span class="params">(Addressbooks * <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">abs</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通讯录已清空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试清空联系人">10.2 测试清空联系人</h3>
<p>在switch case 语句中，case 6 里添加：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">6</span>:  <span class="comment">//清空联系人</span></span><br><span class="line">	cleanPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
<p>测试效果如图：</p>
<p>清空通讯录</p>
<figure>
<img src="/2021/03/26/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544172909693.png" alt="1544172909693"><figcaption aria-hidden="true">1544172909693</figcaption>
</figure>
<p>再次查看信息，显示记录为空</p>
<figure>
<img src="/2021/03/26/Day1night%E9%80%9A%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1544172943653.png" alt="1544172943653"><figcaption aria-hidden="true">1544172943653</figcaption>
</figure>
<p><strong>至此，通讯录管理系统完成！</strong></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>Day2EEGLAB脚本</title>
    <url>/2021/03/19/Day2EEGLAB%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="数据">0 数据</h1>
<p>采集每个被试的脑电数据；使用64个电极，每个电极记录n =3000 毫秒数据；分为36 个epoch</p>
<p>个体数据（64，3000，36）</p>
<p>EEG.data (channel,time,epoch)</p>
<h1 id="批处理">1 批处理</h1>
<p>同时处理多个被试数据。</p>
<p>假设我们有100个数据 被试的文件名为1.set 2.set .... 100.set</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 1导入原始数据 </span></span><br><span class="line"><span class="comment">%注意  是导入bp数据的函数 </span></span><br><span class="line"><span class="comment">%如果你的数据是别的厂家别的格式 要自己导入一次 查看EEG.history中的代码</span></span><br><span class="line"><span class="comment">%对于每个被试</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">100</span></span><br><span class="line">    <span class="comment">%拼接被试的文件名 </span></span><br><span class="line">    rawname = [num2str(<span class="built_in">i</span>),<span class="string">&#x27;.vhdr&#x27;</span>];</span><br><span class="line">    setname = [num2str(<span class="built_in">i</span>),<span class="string">&#x27;.set&#x27;</span>];</span><br><span class="line">    <span class="comment">%使用函数导入数据 路径记得修改 不要忘记后面的分隔符\</span></span><br><span class="line">    EEG = pop_loadbv(<span class="string">&#x27;路径1\&#x27;, rawname, [], []);</span></span><br><span class="line"><span class="string">    %检查EEG结构体是否完好</span></span><br><span class="line"><span class="string">    EEG = eeg_checkset( EEG );</span></span><br><span class="line"><span class="string">    %把set文件存到磁盘上</span></span><br><span class="line"><span class="string">    EEG = pop_saveset( EEG, &#x27;</span>filename&#x27;,setname,<span class="string">&#x27;filepath&#x27;</span>,<span class="string">&#x27;路径2\&#x27;);</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">%% 2通道定位</span></span><br><span class="line"><span class="string">for i = 1:100</span></span><br><span class="line"><span class="string">    %拼接被试的文件名 </span></span><br><span class="line"><span class="string">    setname = [num2str(i),&#x27;</span>.set&#x27;];</span><br><span class="line">    <span class="comment">%导入set格式文件</span></span><br><span class="line">    EEG = pop_loadset(<span class="string">&#x27;filename&#x27;</span>,setname,<span class="string">&#x27;filepath&#x27;</span>,<span class="string">&#x27;路径2\&#x27;);</span></span><br><span class="line"><span class="string">    %通道定位</span></span><br><span class="line"><span class="string">    EEG=pop_chanedit(EEG, &#x27;</span>lookup&#x27;,<span class="string">&#x27;坐标文件自己生成路径&#x27;</span>);</span><br><span class="line">    <span class="comment">%去除无用电极</span></span><br><span class="line">    EEG = pop_select( EEG,<span class="string">&#x27;nochannel&#x27;</span>,&#123;<span class="string">&#x27;HEO&#x27;</span> <span class="string">&#x27;VEOG&#x27;</span>&#125;);</span><br><span class="line">    <span class="comment">%进行0.1 - 40Hz 的带通滤波</span></span><br><span class="line">    EEG = pop_eegfiltnew(EEG, <span class="number">0.1</span>, <span class="number">40</span>, <span class="number">33000</span>, <span class="number">0</span>, [], <span class="number">0</span>);</span><br><span class="line">    <span class="comment">%进行48-52 Hz的凹陷滤波</span></span><br><span class="line">    EEG = pop_eegfiltnew(EEG, <span class="number">48</span>, <span class="number">52</span>, <span class="number">1650</span>, <span class="number">1</span>, [], <span class="number">0</span>);</span><br><span class="line">    <span class="comment">%降采样到500Hz</span></span><br><span class="line">    EEG = pop_resample( EEG, <span class="number">500</span>);</span><br><span class="line">    <span class="comment">%分段</span></span><br><span class="line">    EEG = pop_epoch( EEG, &#123;  <span class="string">&#x27;10&#x27;</span>  <span class="string">&#x27;11&#x27;</span>  &#125;, [<span class="number">-1</span>  <span class="number">2</span>], <span class="string">&#x27;newname&#x27;</span>, <span class="string">&#x27; resampled epochs&#x27;</span>, <span class="string">&#x27;epochinfo&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>);</span><br><span class="line">    <span class="comment">%基线校正</span></span><br><span class="line">    EEG = pop_rmbase( EEG, [<span class="number">-1000</span>     <span class="number">0</span>]);</span><br><span class="line">    <span class="comment">%提取正确反应试次</span></span><br><span class="line">    EEG = pop_selectevent( EEG, <span class="string">&#x27;type&#x27;</span>,<span class="number">200</span>,<span class="string">&#x27;deleteevents&#x27;</span>,<span class="string">&#x27;off&#x27;</span>,<span class="string">&#x27;deleteepochs&#x27;</span>,<span class="string">&#x27;on&#x27;</span>,<span class="string">&#x27;invertepochs&#x27;</span>,<span class="string">&#x27;off&#x27;</span>);</span><br><span class="line">    <span class="comment">%把set文件存到磁盘上</span></span><br><span class="line">    EEG = pop_saveset( EEG, <span class="string">&#x27;filename&#x27;</span>,setname,<span class="string">&#x27;filepath&#x27;</span>,<span class="string">&#x27;路径3\&#x27;);</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">%% 手动插值坏导 替换坏段</span></span><br><span class="line"><span class="string">%要一个一个被试查看 不能批处理 </span></span><br><span class="line"><span class="string">%做好的数据存在路径4中</span></span><br><span class="line"><span class="string">EEG = pop_interp(EEG, [13  60], &#x27;</span>spherical&#x27;);</span><br><span class="line">EEG = pop_rejepoch( EEG, [<span class="number">2</span> <span class="number">77</span> <span class="number">78</span>] ,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%% RunICA</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">100</span></span><br><span class="line">    <span class="comment">%拼接被试的文件名 </span></span><br><span class="line">    setname = [num2str(<span class="built_in">i</span>),<span class="string">&#x27;.set&#x27;</span>];</span><br><span class="line">    <span class="comment">%导入set格式文件</span></span><br><span class="line">    EEG = pop_loadset(<span class="string">&#x27;filename&#x27;</span>,setname,<span class="string">&#x27;filepath&#x27;</span>,<span class="string">&#x27;路径4\&#x27;);</span></span><br><span class="line"><span class="string">    %如果数据中没有对坏电极进行插值，则运行此行</span></span><br><span class="line"><span class="string">%     EEG = pop_runica(EEG, &#x27;</span>extended&#x27;,<span class="number">1</span>,<span class="string">&#x27;interupt&#x27;</span>,<span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">    <span class="comment">%如果你进行了坏电极插值，则需要执行这行</span></span><br><span class="line">    <span class="comment">%此处的m为当前电极的数量 n为插值的电极数量</span></span><br><span class="line">    EEG = pop_runica(EEG, <span class="string">&#x27;extended&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;pca&#x27;</span>,m-n,<span class="string">&#x27;interupt&#x27;</span>,<span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">    <span class="comment">%把set文件存到磁盘上</span></span><br><span class="line">    EEG = pop_saveset( EEG, <span class="string">&#x27;filename&#x27;</span>,setname,<span class="string">&#x27;filepath&#x27;</span>,<span class="string">&#x27;路径5\&#x27;);</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">%% 手动查看独立成分 并去除眨眼等伪迹成分</span></span><br><span class="line"><span class="string">%不能批处理 数据存在路径6</span></span><br><span class="line"><span class="string">%% 极端值去伪迹、重参考、基线校正</span></span><br><span class="line"><span class="string">for i = 1:100</span></span><br><span class="line"><span class="string">    %拼接被试的文件名 </span></span><br><span class="line"><span class="string">    setname = [num2str(i),&#x27;</span>.set&#x27;];</span><br><span class="line">    <span class="comment">%导入set格式文件</span></span><br><span class="line">    EEG = pop_loadset(<span class="string">&#x27;filename&#x27;</span>,setname,<span class="string">&#x27;filepath&#x27;</span>,<span class="string">&#x27;路径6\&#x27;);</span></span><br><span class="line"><span class="string">    % 此处是+-100 </span></span><br><span class="line"><span class="string">    EEG = pop_eegthresh(EEG,1,[1:62] ,-100,100,-1,1.998,0,1);</span></span><br><span class="line"><span class="string">    %重参考</span></span><br><span class="line"><span class="string">    EEG = pop_reref( EEG, [33 43] );</span></span><br><span class="line"><span class="string">    %基线校正</span></span><br><span class="line"><span class="string">    EEG = pop_rmbase( EEG, [-1000     0]);</span></span><br><span class="line"><span class="string">    %把set文件存到磁盘上</span></span><br><span class="line"><span class="string">    EEG = pop_saveset( EEG, &#x27;</span>filename&#x27;,setname,<span class="string">&#x27;filepath&#x27;</span>,<span class="string">&#x27;路径7\&#x27;);</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">%% 手动浏览数据 再次筛查伪迹</span></span><br><span class="line"><span class="string">%结果存在路径8</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<p>基线 100/200ms</p>
<p>分段 -200 1000ms</p>
<h1 id="时域处理-叠加平均">2 时域处理 叠加平均</h1>
<h2 id="个体水平叠加平均">2.1 个体水平叠加平均</h2>
<ul>
<li>提值
<ul>
<li>peak 峰值</li>
<li>latency 潜伏期</li>
<li>mean 均值</li>
<li>amplicated 幅值</li>
</ul></li>
<li>统计
<ul>
<li>t-ROI ch-ROI</li>
<li>选定ch 沿时间点进行比较</li>
<li>选定时间 沿ch进行统计</li>
</ul></li>
</ul>
<h2 id="组水平叠加平均">2.2 组水平叠加平均</h2>
<ul>
<li>画图
<ul>
<li>plot 波形图： 时间信息 选ch 画时间 by (EEG.chanlocs)</li>
<li>topplot 地形图： 空间信息 选时间 画ch<br>
</li>
</ul></li>
<li>找成分
<ul>
<li>peak ——&gt; latency</li>
<li>time-window</li>
<li>find函数找位置</li>
<li>沿时间点平均</li>
<li>绘制地形图</li>
</ul></li>
<li>定时间窗口</li>
</ul>
<h1 id="matlab-code1">3 matlab code1</h1>
<h2 id="计算个体水平">3.1 计算个体水平</h2>
<p>将每个被试的epoch进行平均，此时EEG.data由（59，3000，36）变为（59，3000）</p>
<p>将平均后的数据组合起来，放入EEG.avg中，保存每个被试的个体平均。数据形状为（10，59，3000）</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all; clc; close all</span><br><span class="line"></span><br><span class="line"><span class="comment">%% part1: compute group-level ERP</span></span><br><span class="line"></span><br><span class="line">Subj = [<span class="number">1</span>:<span class="number">10</span>]; <span class="comment">%% subject numbers</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(Subj)</span><br><span class="line">    setname = strcat(num2str(<span class="built_in">i</span>),<span class="string">&#x27;_LH.set&#x27;</span>); <span class="comment">%% filename of set file</span></span><br><span class="line">    setpath = <span class="string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day2\Example_data\&#x27;;</span></span><br><span class="line"><span class="string">    EEG = pop_loadset(&#x27;</span>filename&#x27;,setname,<span class="string">&#x27;filepath&#x27;</span>,setpath); <span class="comment">%% load the data</span></span><br><span class="line">    EEG = eeg_checkset( EEG );</span><br><span class="line">    <span class="comment">% 汇总每个被试个体水平叠加平均好的数据</span></span><br><span class="line">    <span class="comment">% 10 59 3000  sub  chl time</span></span><br><span class="line">    EEG_avg(<span class="built_in">i</span>,:,:) = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(EEG.data,<span class="number">3</span>)); <span class="comment">%% single-subject ERPs; EEG_avg dimension: subj*channel*time</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">save(<span class="string">&#x27;Group_level_ERP.mat&#x27;</span>,<span class="string">&#x27;EEG_avg&#x27;</span>);  <span class="comment">%% save the data of subjects</span></span><br></pre></td></tr></table></figure>
<h2 id="计算组水平">3.2 计算组水平</h2>
<p>计算是所有被试Cz电极所有时间点的组水平平局数据</p>
<p>选取所有被试的Cz电极数据（10，1，3000）进行平均；</p>
<p>数据形状为（1，1，3000）</p>
<p>squeeze后变为（3000，1）</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% part2: plot group-level ERP</span></span><br><span class="line"></span><br><span class="line">Cz = <span class="number">13</span>; <span class="comment">% select the channel to plot (display maximum response)</span></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line"><span class="comment">% 提取所有被试Cz电极所有时间点的数据</span></span><br><span class="line"><span class="comment">% mean_data 是Cz电极所有时间点的组水平平局数据</span></span><br><span class="line">mean_data = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(EEG_avg(:,Cz,:),<span class="number">1</span>)); <span class="comment">%% select the data at Cz, average across subjects, mean_data: 1*3000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">plot</span>(EEG.times, mean_data,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>, <span class="number">1.5</span>); <span class="comment">%% plot the waveforms</span></span><br><span class="line">set(gca,<span class="string">&#x27;YDir&#x27;</span>,<span class="string">&#x27;reverse&#x27;</span>); <span class="comment">%% reverse the direction of Y axis</span></span><br><span class="line">axis([<span class="number">-500</span> <span class="number">1000</span> <span class="number">-15</span> <span class="number">10</span>]);  <span class="comment">%% define the region to display</span></span><br><span class="line"><span class="comment">% xlim([-500 1000]);  %% define the region of X axis</span></span><br><span class="line"><span class="comment">% ylim([-15 10]); %% define the region of Y axis</span></span><br><span class="line">title(<span class="string">&#x27;Group-level at Cz&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">16</span>); <span class="comment">%% specify the figure name</span></span><br><span class="line">xlabel(<span class="string">&#x27;Latency (ms)&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">16</span>); <span class="comment">%% name of X axis</span></span><br><span class="line">ylabel(<span class="string">&#x27;Amplitude (uV)&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">16</span>);  <span class="comment">%% name of Y axis</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/19/Day2EEGLAB%E8%84%9A%E6%9C%AC/image-20210318144950274.png" alt="image-20210318144950274"><figcaption aria-hidden="true">image-20210318144950274</figcaption>
</figure>
<figure>
<img src="/2021/03/19/Day2EEGLAB%E8%84%9A%E6%9C%AC/image-20210318145006862.png" alt="image-20210318145006862"><figcaption aria-hidden="true">image-20210318145006862</figcaption>
</figure>
<h2 id="绘制特定点地形图">3.3 绘制特定点地形图</h2>
<p>选取波峰波谷附近数据 绘制地形图</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% part3: plot the scalp maps at dominant peaks</span></span><br><span class="line"></span><br><span class="line">N2_peak = <span class="number">207</span>; P2_peak = <span class="number">374</span>; <span class="comment">%% dominant peaks on waveforms</span></span><br><span class="line">N2_interval = <span class="built_in">find</span>((EEG.times&gt;=<span class="number">197</span>)&amp;(EEG.times&lt;=<span class="number">217</span>)); <span class="comment">%% define the N2 intervals [peak-10 peak+10]</span></span><br><span class="line">P2_interval = <span class="built_in">find</span>((EEG.times&gt;=<span class="number">364</span>)&amp;(EEG.times&lt;=<span class="number">384</span>)); <span class="comment">%% define the P2 intervals [peak-10 peak+10]</span></span><br><span class="line"></span><br><span class="line">N2_amplitude = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(EEG_avg(:,:,N2_interval),<span class="number">3</span>));  <span class="comment">%% N2 amplitude for each subject and each channel</span></span><br><span class="line">P2_amplitude = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(EEG_avg(:,:,P2_interval),<span class="number">3</span>));   <span class="comment">%% P2 amplitude for each subject and each channel</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>; </span><br><span class="line">subplot(<span class="number">121</span>); topoplot(<span class="built_in">mean</span>(N2_amplitude),EEG.chanlocs,<span class="string">&#x27;maplimits&#x27;</span>,[<span class="number">-15</span> <span class="number">15</span>]); title(<span class="string">&#x27;N2 Amplitude&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">16</span>); <span class="comment">%% N2 scalp map (group-level)</span></span><br><span class="line">subplot(<span class="number">122</span>); topoplot(<span class="built_in">mean</span>(P2_amplitude),EEG.chanlocs,<span class="string">&#x27;maplimits&#x27;</span>,[<span class="number">-15</span> <span class="number">15</span>]); title(<span class="string">&#x27;P2 Amplitude&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">16</span>); <span class="comment">%% P2 scalp map (group-level)</span></span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/19/Day2EEGLAB%E8%84%9A%E6%9C%AC/N2_P2_maps.jpg" alt="N2_P2_maps"><figcaption aria-hidden="true">N2_P2_maps</figcaption>
</figure>
<h2 id="绘制感兴趣时间地形图">3.4 绘制感兴趣时间地形图</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% part4: series of scalp mps</span></span><br><span class="line"></span><br><span class="line">time_interval = [<span class="number">0</span>:<span class="number">100</span>:<span class="number">500</span>]; <span class="comment">%% specify the time intervals to display (to be changed)</span></span><br><span class="line"><span class="built_in">figure</span>; </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(time_interval)</span><br><span class="line">    latency_range = [time_interval(<span class="built_in">i</span>) time_interval(<span class="built_in">i</span>)+<span class="number">100</span>]; <span class="comment">%% lower and upper limits</span></span><br><span class="line">    latency_idx = <span class="built_in">find</span>((EEG.times&gt;=latency_range(<span class="number">1</span>))&amp;(EEG.times&lt;=latency_range(<span class="number">2</span>))); <span class="comment">%% interval of the specific regions</span></span><br><span class="line">    Amplitude = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(<span class="built_in">mean</span>(EEG_avg(:,:,latency_idx),<span class="number">1</span>),<span class="number">3</span>)); <span class="comment">%% 1*channel (averaged across subjects and interval)</span></span><br><span class="line">    subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="built_in">i</span>); </span><br><span class="line">    topoplot(Amplitude,EEG.chanlocs,<span class="string">&#x27;maplimits&#x27;</span>,[<span class="number">-10</span> <span class="number">10</span>]); <span class="comment">%% topoplot(Amplitude,EEG.chanlocs);</span></span><br><span class="line">    setname = strcat(num2str(latency_range(<span class="number">1</span>)),<span class="string">&#x27;--&#x27;</span>,num2str(latency_range(<span class="number">2</span>)),<span class="string">&#x27;ms&#x27;</span>); <span class="comment">%% specify the name of subplots</span></span><br><span class="line">    title(setname,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">16</span>); <span class="comment">%% display the names of subplots</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/19/Day2EEGLAB%E8%84%9A%E6%9C%AC/p4.jpg" alt="p4"><figcaption aria-hidden="true">p4</figcaption>
</figure>
<h1 id="matlab-code2">4 matlab code2</h1>
<h2 id="section">4.1</h2>
<p>(sub,ch,times) —-&gt; (sub,con,ch,times)</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all; clc; close all </span><br><span class="line"></span><br><span class="line"><span class="comment">%%  part1: plot the waveforms for different conditions</span></span><br><span class="line"></span><br><span class="line">Subj = [<span class="number">1</span>:<span class="number">10</span>]; <span class="comment">%% subject number</span></span><br><span class="line"></span><br><span class="line">Cond = &#123;<span class="string">&#x27;L1&#x27;</span>,<span class="string">&#x27;L2&#x27;</span>,<span class="string">&#x27;L3&#x27;</span>,<span class="string">&#x27;L4&#x27;</span>&#125;; <span class="comment">%% condition name</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(Subj)</span><br><span class="line">     setname = strcat(num2str(<span class="built_in">i</span>),<span class="string">&#x27;_LH.set&#x27;</span>); <span class="comment">%% name of the set file</span></span><br><span class="line">     setpath = <span class="string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day2\Example_data\&#x27;; %% filepath of the set file</span></span><br><span class="line"><span class="string">     EEG = pop_loadset(&#x27;</span>filename&#x27;,setname,<span class="string">&#x27;filepath&#x27;</span>,setpath);  <span class="comment">%% load the data into EEG</span></span><br><span class="line">     EEG = eeg_checkset( EEG );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:<span class="built_in">length</span>(Cond)</span><br><span class="line">   </span><br><span class="line">        EEG_new = pop_epoch( EEG, Cond(<span class="built_in">j</span>), [<span class="number">-1</span>  <span class="number">2</span>], <span class="string">&#x27;newname&#x27;</span>, <span class="string">&#x27;Merged datasets pruned with ICA&#x27;</span>, <span class="string">&#x27;epochinfo&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>); <span class="comment">%% epoch by conditions, input to EEG_new</span></span><br><span class="line">        EEG_new = eeg_checkset( EEG_new );</span><br><span class="line">        EEG_new = pop_rmbase( EEG_new, [<span class="number">-1000</span>     <span class="number">0</span>]); <span class="comment">%% baseline correction for EEG_new</span></span><br><span class="line">        EEG_new = eeg_checkset( EEG_new );</span><br><span class="line">        EEG_avg(<span class="built_in">i</span>,<span class="built_in">j</span>,:,:) = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(EEG_new.data,<span class="number">3</span>));  <span class="comment">%% average across trials for EEG_new, EEG_avg dimension: subj*cond*channel*time</span></span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Cz = <span class="number">13</span>; <span class="comment">%% channel to display</span></span><br><span class="line">mean_data = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(EEG_avg(:,:,Cz,:),<span class="number">1</span>)); <span class="comment">%% select data at Cz, and average across subjects, mean_data: cond*times</span></span><br><span class="line"><span class="built_in">figure</span>; </span><br><span class="line"><span class="built_in">plot</span>(EEG.times, mean_data,<span class="string">&#x27;linewidth&#x27;</span>, <span class="number">1.5</span>); <span class="comment">%% plot waveforms for different conditions</span></span><br><span class="line">set(gca,<span class="string">&#x27;YDir&#x27;</span>,<span class="string">&#x27;reverse&#x27;</span>);  <span class="comment">%% reverse Y axis</span></span><br><span class="line">axis([<span class="number">-500</span> <span class="number">1000</span> <span class="number">-35</span> <span class="number">25</span>]);  <span class="comment">%% define the region to display</span></span><br><span class="line">title(<span class="string">&#x27;Group level data&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">16</span>); </span><br><span class="line">xlabel(<span class="string">&#x27;Latency (ms)&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">16</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;Amplitude (uV)&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">16</span>); </span><br><span class="line"><span class="built_in">legend</span>(Cond)</span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/19/Day2EEGLAB%E8%84%9A%E6%9C%AC/2_1.jpg" alt="2_1"><figcaption aria-hidden="true">2_1</figcaption>
</figure>
<h2 id="section-1">4.2</h2>
<p>(sub,con,ch,times) —- &gt; (sub,con,ch)</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% scalp maps of dominant peak for different conditions</span></span><br><span class="line"></span><br><span class="line">N2_peak = <span class="number">207</span>; P2_peak = <span class="number">374</span>; <span class="comment">%% define the peaks</span></span><br><span class="line">N2_interval=<span class="built_in">find</span>((EEG.times&gt;=<span class="number">197</span>)&amp;(EEG.times&lt;=<span class="number">217</span>)); <span class="comment">%% N2 interval</span></span><br><span class="line">P2_interval=<span class="built_in">find</span>((EEG.times&gt;=<span class="number">364</span>)&amp;(EEG.times&lt;=<span class="number">384</span>)); <span class="comment">%% P2 interval</span></span><br><span class="line"></span><br><span class="line">N2_amplitude=<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(EEG_avg(:,:,:,N2_interval),<span class="number">4</span>)); <span class="comment">%% N2 amplitude for each subject, condition, and channels</span></span><br><span class="line">P2_amplitude=<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(EEG_avg(:,:,:,P2_interval),<span class="number">4</span>)); <span class="comment">%% P2 amplitude for each subject, condition, and channels</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>; <span class="comment">%% divide the panel into 4 rows and 2 colums</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">4</span></span><br><span class="line">    <span class="comment">% 提取N2成分该条件的所有被试  当前条件  所有通道的数据</span></span><br><span class="line">    N2_data = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(N2_amplitude(:,<span class="built_in">i</span>,:),<span class="number">1</span>)); <span class="comment">%% average across subjects</span></span><br><span class="line">    subplot(<span class="number">2</span>,<span class="number">4</span>,<span class="built_in">i</span>); </span><br><span class="line">    topoplot(N2_data,EEG.chanlocs,<span class="string">&#x27;maplimits&#x27;</span>,[<span class="number">-15</span> <span class="number">15</span>]); </span><br><span class="line">    colorbar;</span><br><span class="line">    titlename = strcat(<span class="string">&#x27;N2 Amplitude &#x27;</span>,Cond(<span class="built_in">i</span>))</span><br><span class="line">    title(titlename ,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">16</span>); <span class="comment">%% plot N2 scalp map (group-level)</span></span><br><span class="line">    <span class="comment">% 提取P2成分该条件的所有被试  当前条件  所有通道的数据</span></span><br><span class="line">    P2_data = <span class="built_in">mean</span>(P2_amplitude(:,<span class="built_in">i</span>,:),<span class="number">1</span>); <span class="comment">%% average across subjets</span></span><br><span class="line">    subplot(<span class="number">2</span>,<span class="number">4</span>,<span class="built_in">i</span>+<span class="number">4</span>); </span><br><span class="line">    topoplot(P2_data,EEG.chanlocs,<span class="string">&#x27;maplimits&#x27;</span>,[<span class="number">-15</span> <span class="number">15</span>]); </span><br><span class="line">    colorbar;</span><br><span class="line">    title(titlename,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">16</span>); <span class="comment">%% plot P2 scamp map (group-level)</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/19/Day2EEGLAB%E8%84%9A%E6%9C%AC/2_2-1616056566941.jpg" alt="2_2"><figcaption aria-hidden="true">2_2</figcaption>
</figure>
<h1 id="matlab-code3">5 matlab code3</h1>
<p>差异性判断</p>
<p><a href="D:\hexo\source_posts\T检验.md">T检验</a></p>
<h2 id="比较单个个体l3-l4-时间上的差异">5.1 比较单个个体L3 L4 时间上的差异</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all; clc; close all</span><br><span class="line"></span><br><span class="line">Subj = [<span class="number">1</span>:<span class="number">10</span>]; </span><br><span class="line">Cond = &#123;<span class="string">&#x27;L1&#x27;</span>,<span class="string">&#x27;L2&#x27;</span>,<span class="string">&#x27;L3&#x27;</span>,<span class="string">&#x27;L4&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% compute averaged data</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(Subj)</span><br><span class="line">    setname = strcat(num2str(<span class="built_in">i</span>),<span class="string">&#x27;_LH.set&#x27;</span>); </span><br><span class="line">    setpath = <span class="string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day2\Example_data\&#x27;;</span></span><br><span class="line"><span class="string">    EEG = pop_loadset(&#x27;</span>filename&#x27;,setname,<span class="string">&#x27;filepath&#x27;</span>,setpath); </span><br><span class="line">    EEG = eeg_checkset( EEG );</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:<span class="built_in">length</span>(Cond)</span><br><span class="line">        EEG_new = pop_epoch( EEG, Cond(<span class="built_in">j</span>), [<span class="number">-1</span>  <span class="number">2</span>], <span class="string">&#x27;newname&#x27;</span>, <span class="string">&#x27;Merged datasets pruned with ICA&#x27;</span>, <span class="string">&#x27;epochinfo&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>); </span><br><span class="line">        EEG_new = eeg_checkset( EEG_new );</span><br><span class="line">        EEG_new = pop_rmbase( EEG_new, [<span class="number">-1000</span>     <span class="number">0</span>]); </span><br><span class="line">        EEG_new = eeg_checkset( EEG_new );</span><br><span class="line">        EEG_avg(<span class="built_in">i</span>,<span class="built_in">j</span>,:,:)=<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(EEG_new.data,<span class="number">3</span>));  <span class="comment">%% subj*cond*channel*timepoints</span></span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%%  point-by-point paried t-test  across multiple time points </span></span><br><span class="line">data_test = <span class="built_in">squeeze</span>(EEG_avg(:,:,<span class="number">13</span>,:)); <span class="comment">%% select the data at Cz, data_test: subj*cond*time</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">size</span>(data_test,<span class="number">3</span>)</span><br><span class="line">    data_1 = <span class="built_in">squeeze</span>(data_test(:,<span class="number">3</span>,<span class="built_in">i</span>)); <span class="comment">%% select condition L3 for each time point</span></span><br><span class="line">    data_2 = <span class="built_in">squeeze</span>(data_test(:,<span class="number">4</span>,<span class="built_in">i</span>)); <span class="comment">%% select condition L4 for each time point</span></span><br><span class="line">    <span class="comment">% 检验两个条件的差异  用配对样本T检验  ttest</span></span><br><span class="line">    <span class="comment">% 检验两组样本之间的差异，要做独立样本T检验  ttest2</span></span><br><span class="line">    [h p] = ttest(data_1,data_2); <span class="comment">%% ttest comparison</span></span><br><span class="line">    P_ttest(<span class="built_in">i</span>) = p; <span class="comment">%% save the p value from ttest</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">figure</span>; </span><br><span class="line">subplot(<span class="number">211</span>); <span class="built_in">plot</span>(EEG.times,<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(data_test(:,<span class="number">3</span>,:),<span class="number">1</span>)),<span class="string">&#x27;b&#x27;</span>); <span class="comment">%% plot the average waveform for Condition L3</span></span><br><span class="line"><span class="built_in">hold</span> on; <span class="built_in">plot</span>(EEG.times,<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(data_test(:,<span class="number">4</span>,:),<span class="number">1</span>)),<span class="string">&#x27;r&#x27;</span>); <span class="comment">%% plot the average waveform for Condition L4</span></span><br><span class="line">subplot(<span class="number">212</span>); <span class="built_in">plot</span>(EEG.times,P_ttest); ylim([<span class="number">0</span> <span class="number">0.05</span>]); <span class="comment">%%plot the p values from ttest</span></span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/19/Day2EEGLAB%E8%84%9A%E6%9C%AC/3_1.jpg" alt="3_1"><figcaption aria-hidden="true">3_1</figcaption>
</figure>
<h2 id="比较不同通道的差异">5.2 比较不同通道的差异</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% point-by-point paried t-test  across multiple channels</span></span><br><span class="line"><span class="comment">% 定义感兴趣的成分 --&gt; 锁定成分</span></span><br><span class="line">test_idx = <span class="built_in">find</span>((EEG.times&gt;=<span class="number">197</span>)&amp;(EEG.times&lt;=<span class="number">217</span>)); <span class="comment">%% define the intervals</span></span><br><span class="line">data_test = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(EEG_avg(:,:,:,test_idx),<span class="number">4</span>)); <span class="comment">%% select the data in [197 217]ms, subj*cond*channel</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">size</span>(data_test,<span class="number">3</span>)</span><br><span class="line">    data_1 = <span class="built_in">squeeze</span>(data_test(:,<span class="number">3</span>,<span class="built_in">i</span>)); <span class="comment">%% select condition L3 for each channel</span></span><br><span class="line">    data_2 = <span class="built_in">squeeze</span>(data_test(:,<span class="number">4</span>,<span class="built_in">i</span>)); <span class="comment">%% select condition L4 for each channel</span></span><br><span class="line">    [h,p,ci,stats] = ttest(data_1,data_2); <span class="comment">%% ttest comparison</span></span><br><span class="line">    P_ttest2(<span class="built_in">i</span>) = p; <span class="comment">%% save the p value from ttest</span></span><br><span class="line">    T_ttest2(<span class="built_in">i</span>) = stats.tstat; </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>; </span><br><span class="line">subplot(<span class="number">141</span>); </span><br><span class="line">topoplot(<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(data_test(:,<span class="number">3</span>,:),<span class="number">1</span>)),EEG.chanlocs,<span class="string">&#x27;maplimits&#x27;</span>,[<span class="number">-20</span> <span class="number">20</span>]); </span><br><span class="line">subplot(<span class="number">142</span>); </span><br><span class="line">topoplot(<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(data_test(:,<span class="number">4</span>,:),<span class="number">1</span>)),EEG.chanlocs,<span class="string">&#x27;maplimits&#x27;</span>,[<span class="number">-20</span> <span class="number">20</span>]); </span><br><span class="line">subplot(<span class="number">143</span>); </span><br><span class="line">topoplot(T_ttest2,EEG.chanlocs); </span><br><span class="line">subplot(<span class="number">144</span>); </span><br><span class="line">topoplot(P_ttest2,EEG.chanlocs,<span class="string">&#x27;maplimits&#x27;</span>,[<span class="number">0</span> <span class="number">0.05</span>]); </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/19/Day2EEGLAB%E8%84%9A%E6%9C%AC/3_2.jpg" alt="3_2"><figcaption aria-hidden="true">3_2</figcaption>
</figure>
<h2 id="section-2">5.3</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% point-by-point repeated measures of ANOVA across time points</span></span><br><span class="line">data_test = <span class="built_in">squeeze</span>(EEG_avg(:,:,<span class="number">13</span>,:)); <span class="comment">%% select the data at Cz, data_test: subj*cond*time</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">size</span>(data_test,<span class="number">3</span>)</span><br><span class="line">    data_anova = <span class="built_in">squeeze</span>(data_test(:,:,<span class="built_in">i</span>)); <span class="comment">%% select the data at time point i</span></span><br><span class="line">    [p, <span class="built_in">table</span>] = anova_rm(data_anova,<span class="string">&#x27;off&#x27;</span>);  <span class="comment">%% perform repeated measures ANOVA</span></span><br><span class="line">    P_anova(<span class="built_in">i</span>) = p(<span class="number">1</span>); <span class="comment">%% save the data from ANOVA</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">mean_data = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(data_test,<span class="number">1</span>)); <span class="comment">%% dimension: cond*time</span></span><br><span class="line"><span class="built_in">figure</span>; </span><br><span class="line">subplot(<span class="number">211</span>);<span class="built_in">plot</span>(EEG.times, mean_data,<span class="string">&#x27;linewidth&#x27;</span>, <span class="number">1.5</span>); <span class="comment">%% waveform for different condition </span></span><br><span class="line">set(gca,<span class="string">&#x27;YDir&#x27;</span>,<span class="string">&#x27;reverse&#x27;</span>);</span><br><span class="line">axis([<span class="number">-500</span> <span class="number">1000</span> <span class="number">-35</span> <span class="number">25</span>]);</span><br><span class="line">subplot(<span class="number">212</span>);<span class="built_in">plot</span>(EEG.times,P_anova); axis([<span class="number">-500</span> <span class="number">1000</span> <span class="number">0</span> <span class="number">0.05</span>]); <span class="comment">%% plot the p values from ANOVA</span></span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/19/Day2EEGLAB%E8%84%9A%E6%9C%AC/3_3.jpg" alt="3_3"><figcaption aria-hidden="true">3_3</figcaption>
</figure>
<h2 id="section-3">5.4</h2>
<p>提取所有被试 所有条件 所有通道 感兴趣的时间点范围的数据</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% point-by-point repeated measures of ANOVA across channels</span></span><br><span class="line"></span><br><span class="line">test_idx = <span class="built_in">find</span>((EEG.times&gt;=<span class="number">197</span>)&amp;(EEG.times&lt;=<span class="number">217</span>)); <span class="comment">%% define the intervals</span></span><br><span class="line">data_test = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(EEG_avg(:,:,:,test_idx),<span class="number">4</span>)); <span class="comment">%% select the data in [197 217]ms, subj*cond*channel</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">size</span>(data_test,<span class="number">3</span>)</span><br><span class="line">    data_anova = <span class="built_in">squeeze</span>(data_test(:,:,<span class="built_in">i</span>)); <span class="comment">%% select the data at channel i</span></span><br><span class="line">    [p, <span class="built_in">table</span>] = anova_rm(data_anova,<span class="string">&#x27;off&#x27;</span>);  <span class="comment">%% perform repeated measures ANOVA</span></span><br><span class="line">    P_anova2(<span class="built_in">i</span>) = p(<span class="number">1</span>); <span class="comment">%% save the data from ANOVA</span></span><br><span class="line">    F_anova2(<span class="built_in">i</span>) = <span class="built_in">table</span>&#123;<span class="number">2</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">figure</span>; </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">4</span></span><br><span class="line">    subplot(<span class="number">1</span>,<span class="number">5</span>,<span class="built_in">i</span>); </span><br><span class="line">    topoplot(<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(data_test(:,<span class="built_in">i</span>,:),<span class="number">1</span>)),EEG.chanlocs,<span class="string">&#x27;maplimits&#x27;</span>,[<span class="number">-20</span> <span class="number">20</span>]); </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">% subplot(1,5,5); topoplot( P_anova2,EEG.chanlocs,&#x27;maplimits&#x27;,[0 0.05]); </span></span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>); topoplot( F_anova2,EEG.chanlocs); </span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/19/Day2EEGLAB%E8%84%9A%E6%9C%AC/3_4.jpg" alt="3_4"><figcaption aria-hidden="true">3_4</figcaption>
</figure>
<p>小结：</p>
<p>时域分析 针对ERP</p>
]]></content>
      <categories>
        <category>脑电</category>
      </categories>
  </entry>
  <entry>
    <title>Day5MicroState analysis</title>
    <url>/2021/03/21/Day5MicroState-analysis/</url>
    <content><![CDATA[<h1 id="basic-knowledge">Basic Knowledge</h1>
<p>电极数量&gt;18</p>
<ol type="1">
<li>Global Field Power (GFP): 某个<strong>时间点</strong>地形图<strong>所有电极</strong>电压值的<strong>标准差</strong>，用于描述某个地形图电场的<strong>强度</strong></li>
</ol>
<p><span class="math display">\[
GFP = \sqrt{\sum_{i=1}^{N} (u_i - \hat{u})^2/N}     
\]</span></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 计算ERP的GFP  由于相对单个被试而言，总平均的ERP波形信噪比高</span></span><br><span class="line"><span class="comment">%故对总平均ERP波形计算GFP</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% step1 使用pop_loadset 载入所有20个数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% step2  使用Edit 》 Append dataset  拼接20 个数据</span></span><br><span class="line">  </span><br><span class="line">ERPdata = <span class="built_in">mean</span>(EEG.data,<span class="number">3</span>);  <span class="comment">%59  3000  </span></span><br><span class="line">GFPdata = std(ERPdata,<span class="number">1</span>,<span class="number">1</span>);  <span class="comment">%1   3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 绘制</span></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">subplot(<span class="number">121</span>);<span class="built_in">plot</span>(EEG.times,ERPdata);</span><br><span class="line">subplot(<span class="number">122</span>);<span class="built_in">plot</span>(EEG.times,GFPdata);</span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/21/Day5MicroState-analysis/EEG_GFP.png" alt="EEG_GFP"><figcaption aria-hidden="true">EEG_GFP</figcaption>
</figure>
<p>峰处 信噪比高</p>
<p>谷处 信噪比低</p>
<figure>
<img src="/2021/03/21/Day5MicroState-analysis/image-20210321095828890.png" alt="image-20210321095828890"><figcaption aria-hidden="true">image-20210321095828890</figcaption>
</figure>
<ul>
<li>谷”意味着一种地形图向另一种地 形图过渡</li>
<li>比较两个地形图相似度之前，将两个地形图分别除以其GFP， 得到<strong>标准化</strong>的地形图</li>
</ul>
<p><strong>K-mean</strong></p>
<figure>
<img src="/2021/03/21/Day5MicroState-analysis/image-20210321110743530.png" alt="image-20210321110743530"><figcaption aria-hidden="true">image-20210321110743530</figcaption>
</figure>
<figure>
<img src="/2021/03/21/Day5MicroState-analysis/image-20210321113419585.png" alt="image-20210321113419585"><figcaption aria-hidden="true">image-20210321113419585</figcaption>
</figure>
<figure>
<img src="/2021/03/21/Day5MicroState-analysis/image-20210321115239769.png" alt="image-20210321115239769"><figcaption aria-hidden="true">image-20210321115239769</figcaption>
</figure>
<p>静息态EEG的Microstate分析与ERP的Microstate分析有哪些差异？</p>
<ol type="1">
<li>地形图的极性</li>
<li>选取所有时刻点的地形图？GFP峰处的地形图</li>
<li>Microstate class的数目及其意义</li>
<li>可提供的指标的差异</li>
</ol>
<p>EEG 微状态分析</p>
<ol type="1">
<li>电极数目一样</li>
<li>顺序一样</li>
<li>对应空间坐标</li>
<li>采样率一致</li>
</ol>
<p>静息态EEG分析： 示例数据为cleaned_rest_data 使用的Microstate0.3插件（仅适用于静息态微状态分析，不适用ERP微状态分析） 使用的脚本是EEG_microstate_analysis.m</p>
<p>Microstate0.3插件的安装：将Microstate0.3文件夹复制到eeglab的plugins文件夹中，并通过set path加入路径</p>
<p>在使用上述插件和脚本处理数据前： （1）数据做好常规的预处理操作，分段不分段均可。在静息态EEG microstate分析中，需要在做完常规的预处理后，进而两个额外的预处理操作：第一个是全脑平均参考；第二个是带通滤波1~40 Hz或 2~20 Hz（居多）。在脚本EEG_microstate_analysis.m中包括上述两个操作（全脑平均参考和2~20 Hz滤波），因此这两个操作你自己不需要去做； （2）如示例数据那样组织好数据，每个条件或每个组别下的所有被试各一个文件夹 如group1和group2各一个文件夹 （3）反复检查预处理后的数据的质量，特别是不能有坏电极、将采集非脑信号的电极如眼电乳突删掉</p>
<p><strong>运行步骤：</strong></p>
<ol type="1">
<li><p>将EEG_microstate_analysis.m所在的路径设置为current folder</p></li>
<li><p>运行上述脚本 把该脚本拖进command window 窗口1：指定某个条件或组别的数据所在的文件夹 如group1 窗口2：该数据所属的条件名称 本例EC 窗口3：指定数据所属的组别 如group1 窗口4：microstate分析生成的结果保存的路径 注意：该路径不要与脑电数据的路径相同也就是不要与窗口1路径相同 窗口5：是否需要删掉某些电极 是1否0 输入1会后续要求你输入哪些电极 本例输入0</p>
<p>窗口5后载入数据并进行额外处理：平均参考、带通滤波2~20 Hz</p>
<p>窗口6：是否从GFP峰处选取原始图 是1否0 本例输入1（一般建议） 窗口7：是否忽略地形图极性 是1否0 本例输入1 窗口8：使用何种方法进行聚类 AAHC输入1 k-mean输入0 本例输入1 窗口9：选择k-means的话需要指定重新开始的数目，比如100 选择AAHC的话，这里输入1</p>
<p>microstate0.3插件默认分为4类</p>
<p>​ 窗口9后对group1下的15个人的数据进行聚类，弹出组平均水平的4个map，此处需要指定4个地形图的顺序 顺序需要跟经典文献里面的顺序相一致 点man. sort 输入顺序 比如3 1 2 4 调整好顺序后，点close 接着要求我们指定是不是按照上述地形图的顺序，对每个人的4个地形图也重新排序，点yes</p>
<p>窗口10：判断每个时间点地形图属于哪一类的时候，是否是依据GFP峰处地形图还是每个时间点的地形图 一般是选择GFP峰处 本例可输入1</p></li>
</ol>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%绘制单个被试的4个map</span></span><br><span class="line">EEG = pop_loadset(<span class="string">&#x27;filename&#x27;</span>,<span class="string">&#x27;sub01.set&#x27;</span>,<span class="string">&#x27;filepath&#x27;</span>,<span class="string">&#x27;C:\Users\admin\Desktop\21EEG_day5\1EEGmicrostate\&#x27;);</span></span><br><span class="line"><span class="string">maps = EEG.msinfo.MSMaps(4).Maps;</span></span><br><span class="line"><span class="string">maps(3,:) = maps(3,:) * (-1); % 因为该被试map3的极性与经典文献里面的极性相反</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">figure;</span></span><br><span class="line"><span class="string">for i = 1:4</span></span><br><span class="line"><span class="string">    subplot(2,2,i);</span></span><br><span class="line"><span class="string">    topoplot(maps(i,:), EEG.chanlocs);</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">%% 绘制组平均水平的4个 map</span></span><br><span class="line"><span class="string">EEG = pop_loadset(&#x27;</span>filename&#x27;,<span class="string">&#x27;GrandMeanECgroup1.set&#x27;</span>,<span class="string">&#x27;filepath&#x27;</span>,<span class="string">&#x27;C:\Users\admin\Desktop\24EEG_day5\1EEGmicrostate\&#x27;);</span></span><br><span class="line"><span class="string">maps_group = EEG.msinfo.MSMaps(4).Maps;</span></span><br><span class="line"><span class="string">maps_group(3,:) = maps_group(3,:) * (-1); % 因为组水平map3的极性与经典文献里面的极性相反</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">figure;</span></span><br><span class="line"><span class="string">for i = 1:4</span></span><br><span class="line"><span class="string">    subplot(2,2,i);</span></span><br><span class="line"><span class="string">    topoplot(maps_group(i,:), EEG.chanlocs);</span></span><br><span class="line"><span class="string">end</span></span><br></pre></td></tr></table></figure>
<p>个体</p>
<figure>
<img src="/2021/03/21/Day5MicroState-analysis/个体.png" alt="个体"><figcaption aria-hidden="true">个体</figcaption>
</figure>
<p>组平均</p>
<figure>
<img src="/2021/03/21/Day5MicroState-analysis/组平均.png" alt="组平均"><figcaption aria-hidden="true">组平均</figcaption>
</figure>
<p><strong>文件</strong></p>
<ul>
<li><p>ResultsFromGrandGrandMeanTemplate.csv：判断每个时刻点地形图属于哪一类的时候，依据组平均水平的4个图</p></li>
<li><p>ResultsFromIndividualTemplates.csv：判断每个时刻点地形图属于哪一类的时候，依据单个被试的4个图</p>
<p>上述两个文件中的内容，文章中均可以用 用一个就行</p>
<p><strong>指标</strong></p></li>
<li><p>ExpVar：将数据分为4类时，四类地形图解释的方差比例 一般应70%~80%左右‘’</p></li>
<li><p>Duration_1~Duration_4：四个微状态类别的平均持续时间 单位秒</p></li>
<li><p>MeanDuration：上述四个指标的平均数</p></li>
<li><p>Occurrence_1~Occurrence_4：四个微状态类别单位时间内出现的次数 单位：次/秒</p></li>
<li><p>MeanOccurrence：上述四个的加和</p></li>
<li><p>Contribution_1~Contribution_4：四个微状态类别涵盖的时间百分比</p></li>
<li><p>OrgTM:4个微状态类别之间相互转换的概率 12个概率值</p></li>
<li><p>DeltaTM: 消除了各个微状态类别Occurrence不一样 对转换概率的影响，等于OrgTM和ExpTM 的差值 统计分析中，OrgTM和ExpTM均可</p></li>
</ul>
<p><strong>上述指标的统计分析思路：</strong></p>
<ol type="1">
<li><p>ExpVar指标文章里面报告被试间的均值和标准差、取值范围即可 不需要统计</p></li>
<li><p>Duration_1— Duration_4、Occurrence_1— Occurrence_4、Contribution_1~Contribution_4 统计分析时，需要将微状态类别作为自变量（组内） 假如是单因素2水平的组间实验设计，进行2（组别，两组人）*4（微状态类别，4个类别）方差分析 MeanDuration、MeanOccurrence不需要进行统计分析</p></li>
<li><p>OrgTM 或 DeltaTM 12个概率<br>
假如是单因素2水平的组间实验设计，进行12个独立样本 t 检验，接着需要使用FDR等方法进行多重比较校正</p>
<p><strong>ERP的微状态分析：</strong> CARTOOL软件可对静息态EEG也可以对ERP进行微状态分析，且可鉴别最佳的类别数目 上述eeglab插件仅适用于静息态EEG，且不能鉴别最佳类别数目（强制分为4类）</p>
<p>CARTOOL软件：不好用、难学、数据大一些会崩溃（降低采样率到125 Hz或250 Hz、电极数目降低）、运行慢</p>
<p>CARTOOL软件不能识别 eeglab格式的数据，需要把数据转存为brain vison(BP)格式 File &gt;&gt; Export &gt;&gt; Write Brain Vis. exchange format file brain vison(BP)格式每个数据有三个文件：dat文件 vhdr文件和 vmrk文件</p>
<p>Cartool 软件：Tools &gt;&gt; EEG and tracks &gt;&gt; Segmentation of EEG files</p>
<p>ep文件为一个微状态类别数目*电极的二维矩阵，可用于绘制每个微状态类别的地形图（借助eeglab中的topoplot函数绘制） seg文件：第三列存储的是每个时间点属于什么微状态类别 0表示什么类别都不属于</p></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Day5night</title>
    <url>/2021/03/21/Day5night/</url>
    <content><![CDATA[<h1 id="小波变换">小波变换</h1>
<ul>
<li><p>傅里叶变化</p>
<p>Fourier变换作为一种全局性的变化，有一定的局限性，如不具备局部化分析能力、不能分析非平稳信号等。</p>
<figure>
<img src="/2021/03/21/Day5night/image-20210321184038242.png" alt="image-20210321184038242"><figcaption aria-hidden="true">image-20210321184038242</figcaption>
</figure></li>
<li><p>短时傅里叶变换</p>
<figure>
<img src="/2021/03/21/Day5night/image-20210321184229922.png" alt="image-20210321184229922"><figcaption aria-hidden="true">image-20210321184229922</figcaption>
</figure>
<p>加窗 得到时频图</p>
<p>窄窗口时间分辨率高、频率分辨率低，</p>
<p>宽窗口时间分辨率低、频率分辨率高。</p>
<p>对于时变的非稳态信号，高频适合小窗口，低频适合大窗口。</p>
<p>然而STFT的窗口是固定的，在一次STFT中宽 度不会变化，所以STFT还是无法满足非稳态信号变化的频率的需求。</p></li>
<li><p>小波变换</p>
<figure>
<img src="/2021/03/21/Day5night/image-20210321185809723.png" alt="image-20210321185809723"><figcaption aria-hidden="true">image-20210321185809723</figcaption>
</figure>
<p>a 越大 ，小波越长， 频率越低</p>
<p>自适应性： 低频 宽窗 / 高频 窄窗</p>
<figure>
<img src="/2021/03/21/Day5night/image-20210321185640847.png" alt="image-20210321185640847"><figcaption aria-hidden="true">image-20210321185640847</figcaption>
</figure>
<ol type="1">
<li>小波系数不仅像傅里叶系数那样，是随频率不同而变化的，而且对于同一个频率指标，在不同时刻，小波系数也是不同的。</li>
<li>求各频率水平不同时刻的小波系数时，只用到该时刻附近的局部信息</li>
<li>小波做到了‘时间--频率窗’宽度可变，检测高频信号时宽度变窄，低频信号时变宽</li>
</ol>
<figure>
<img src="/2021/03/21/Day5night/image-20210321190059990.png" alt="image-20210321190059990"><figcaption aria-hidden="true">image-20210321190059990</figcaption>
</figure>
<p>时频信息</p>
<h1 id="brainstorm3">BrainStorm3</h1>
<figure>
<img src="/2021/03/21/Day5night/image-20210321191405236.png" alt="image-20210321191405236"><figcaption aria-hidden="true">image-20210321191405236</figcaption>
</figure></li>
</ul>
]]></content>
      <categories>
        <category>脑电</category>
      </categories>
      <tags>
        <tag>小波变换</tag>
      </tags>
  </entry>
  <entry>
    <title>Day6source analysis</title>
    <url>/2021/03/22/Day6source-analysis/</url>
    <content><![CDATA[<h1 id="溯源">溯源</h1>
]]></content>
      <categories>
        <category>脑电</category>
      </categories>
  </entry>
  <entry>
    <title>Tensorflow 模型保存</title>
    <url>/2021/03/13/Tensorflow%20%E6%A8%A1%E5%9E%8B%E4%BF%9D%E5%AD%98/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!jupyter nbconvert lesson07.ipynb --to slides --post serve</span><br></pre></td></tr></table></figure>
<h2 id="模型保存">模型保存</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">network.save(<span class="string">&#x27;model.h5&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;saved total model.&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="权值保存">权值保存</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">network.save_weights(<span class="string">&#x27;weights.ckpt&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;saved weights.&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="模型加载">模型加载</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">network = tf.keras.models.load_model(<span class="string">&#x27;model.h5&#x27;</span>, <span class="built_in">compile</span>=<span class="literal">False</span>)</span><br><span class="line">print(<span class="string">&#x27;loaded model from file.&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="权值加载">权值加载</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">network.load_weights(<span class="string">&#x27;weights.ckpt&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;loaded weights!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="tensorboard">TensorBoard</h2>
<h3 id="在model.fit中使用tensorboard">在Model.fit()中使用TensorBoard</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义日志目录，必须是启动web应用时指定目录的子目录，建议使用日期时间作为子目录名</span></span><br><span class="line">log_dir=<span class="string">&quot;logs/&quot;</span> + datetime.datetime.now().strftime(<span class="string">&quot;%Y%m%d-%H%M%S&quot;</span>)</span><br><span class="line"></span><br><span class="line">tensorboard_callback = tf.keras.callbacks.TensorBoard(</span><br><span class="line">    log_dir=<span class="string">&#x27;logs&#x27;</span>,</span><br><span class="line">    histogram_freq=<span class="number">1</span>, profile_batch=<span class="number">2</span>,</span><br><span class="line">    write_graph=<span class="literal">True</span>,write_images=<span class="literal">True</span>,</span><br><span class="line">    embeddings_freq=<span class="number">0</span>, embeddings_layer_names=<span class="literal">None</span>,</span><br><span class="line">    embeddings_metadata=<span class="literal">None</span>, embeddings_data=<span class="literal">None</span>, update_freq=<span class="number">500</span></span><br><span class="line">) <span class="comment"># 定义TensorBoard对象</span></span><br><span class="line"></span><br><span class="line">model.fit(x=x_train, </span><br><span class="line">          y=y_train, </span><br><span class="line">          epochs=<span class="number">5</span>, </span><br><span class="line">          validation_data=(x_test, y_test), </span><br><span class="line">          callbacks=[tensorboard_callback])  <span class="comment"># 将定义好的TensorBoard对象作为回调传给fit方法，这样就将TensorBoard嵌入了模型训练过程</span></span><br></pre></td></tr></table></figure>
<h3 id="在其他功能函数中嵌入tensorboard">在其他功能函数中嵌入TensorBoard</h3>
<h4 id="tf.summary的基本步骤">tf.summary的基本步骤</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># （1）创建一个 SummaryWriter 对象，生成的日志将储存到 &quot;./mylogs&quot; 路径中</span></span><br><span class="line">writer = tf.summary.create_file_writer(<span class="string">&quot;./logs&quot;</span>)  <span class="comment">#</span></span><br><span class="line"><span class="comment"># （2）使用 writer_1 记录with包裹的context中，进行 summary 写入的操作</span></span><br><span class="line"><span class="keyword">with</span> writer.as_default():  </span><br><span class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):    </span><br><span class="line">        <span class="comment"># other model code would go here    </span></span><br><span class="line">        <span class="comment"># （3）将scalar(&quot;loss&quot;, loss, step)写入 summary </span></span><br><span class="line">        tf.summary.scalar(<span class="string">&quot;loss&quot;</span>, loss, step=step)      </span><br><span class="line">        <span class="comment"># （4）强制 SummaryWriter 将缓存中的数据写入到日志</span></span><br><span class="line">        writer.flush()  </span><br></pre></td></tr></table></figure>
<h4 id="查看graph和profile信息">查看Graph和Profile信息</h4>
<p>由于tensorflow2.0取消了sess和初始静态图，所以无法使用像1.x版本，直接将sess.graph添加进tensorboard，所以需要使用trace_on进行记录。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer = tf.summary.create_file_writer(log_dir)</span><br><span class="line">tf.summary.trace_on(graph=<span class="literal">True</span>, profiler=<span class="literal">True</span>)  <span class="comment"># 开启Trace，可以记录图结构和profile信息</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">进行训练</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 最后将统计信息写入日志</span></span><br><span class="line"><span class="keyword">with</span> writer.as_default():</span><br><span class="line">    tf.summary.trace_export(name=<span class="string">&quot;model_trace&quot;</span>, step=<span class="number">0</span>, profiler_outdir=log_dir)    <span class="comment"># 保存Trace信息到文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>T检验</title>
    <url>//T%E6%A3%80%E9%AA%8C</url>
    <content><![CDATA[<h2 id="什么是t检验">什么是T检验？</h2>
<p><link>(https://blog.csdn.net/m0_37777649/article/details/74937242)</p>
<p>T检验是假设检验的一种，又叫student t检验（Student’s t test），主要用于样本含量较小（例如n&lt;30），总体标准差σ未知的正态分布资料。 T检验用于检验两个总体的均值差异是否显著。</p>
]]></content>
  </entry>
  <entry>
    <title>典型相关分析</title>
    <url>/2021/03/14/%E5%85%B8%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%88%86%E6%9E%90(CCA)/</url>
    <content><![CDATA[<p>典型相关分析(Canonical Correction Analysis)是最常用的数据挖掘关联算法之一。</p>
<p>比如我们拿到两组数据，第一组是人身高和体重的数据，第二组是对应的跑步能力和跳远能力的数据。那么我们能不能说这两组数据是相关的呢？CCA可以帮助我们分析这个问题。</p>
<h2 id="cca概述">1.CCA概述</h2>
<p>在数理统计里面，假设有两组一维的数据集X和Y，则==相关系数==ρ的定义为: <span class="math display">\[
\rho(X,Y) = \frac{cov(X,Y)}{\sqrt{D(X)}\sqrt{D(Y)}}
\]</span> ​ 其中<span class="math inline">\(cov(X,Y)\)</span> 是X，Y的协方差，<span class="math inline">\(D(X),D(Y)\)</span> 分别为<span class="math inline">\(X,Y\)</span> 的方差。相关系数<span class="math inline">\(\rho\)</span> 的取值为[-1,1]。<span class="math inline">\(\rho\)</span>的绝对值越接近于1，则<span class="math inline">\(X,Y\)</span>的线性相关性越高。越接近于0，则<span class="math inline">\(X,Y\)</span>的线性相关性越低。</p>
<p>​ 虽然相关系数可以很好的帮我们分析一维数据的相关性，但是对于高维数据就不能直接使用了。拿上面我们提到的，如果X是包括人身高和体重两个维度的数据，而Y是包括跑步能力和跳远能力两个维度的数据，就不能直接使用相关系数的方法。那我们能不能变通一下呢？CCA给了我们变通的方法。</p>
<p>​ CCA使用的方法是将多维的<span class="math inline">\(X,Y\)</span>都用<strong>线性变换</strong>为1维的<span class="math inline">\(X&#39;,Y&#39;\)</span>，然后再使用相关系数来看<span class="math inline">\(X&#39;,Y&#39;\)</span>'的相关性。将数据从多维变到一维，也可以理解为CCA是在进行<strong>降维</strong>，将高维数据降到一维，然后再用相关系数进行相关性的分析。下面我们看看CCA的算法思想。</p>
<h2 id="cca的算法思想">2.CCA的算法思想</h2>
<p>​ 降维的标准是如何选择的呢？回想下主成分分析PCA，降维的原则是投影方差最大；再回想下线性判别分析LDA，降维的原则是同类的投影方差小，异类间的投影方差大。对于我们的CCA，它选择的投影标准是降维到1维后，两组数据的相关系数最大。</p>
<p>​ 假设我们的数据集是<span class="math inline">\(X,Y\)</span>，<span class="math inline">\(X\)</span>为<span class="math inline">\(n_1×m\)</span>的样本矩阵。<span class="math inline">\(Y\)</span>为<span class="math inline">\(n_2×m\)</span>的样本矩阵.其中<span class="math inline">\(m\)</span>为样本个数，而<span class="math inline">\(n1,n2\)</span>分别为<span class="math inline">\(X,Y\)</span>的特征维度。</p>
<p>​ 对于X矩阵，我们将其投影到1维，或者说进行线性表示，对应的投影向量或者说线性系数向量为a, 对于Y矩阵，我们将其投影到1维，或者说进行线性表示，对应的投影向量或者说线性系数向量为b, 这样X ,Y投影后得到的一维向量分别为X',Y'。我们有 <span class="math display">\[
X&#39; = a^TX, Y&#39;=b^TY
\]</span></p>
<p>​ 我们CCA的优化目标是最大化<span class="math display">\[ρ(X′,Y′)\]</span>得到对应的投影向量<span class="math inline">\(a,b\)</span>，即 <span class="math display">\[
\underbrace{arg\;max}_{a,b}\frac{cov(X&#39;,Y&#39;)}{\sqrt{D(X&#39;)}\sqrt{D(Y&#39;)}}
\]</span> 　　在投影前，我们一般会把原始数据进行==标准化==，得到均值为0而方差为1的数据<span class="math inline">\(X,Y\)</span>。这样我们有： <span class="math display">\[
cov(X&#39;,Y&#39;) = cov(a^TX, b^TY) = E(&lt;a^TX, b^TY&gt;) = E((a^TX)(b^TY)^T) = a^TE(XY^T)b
\]</span></p>
<p><span class="math display">\[
D(X&#39;) = D(a^TX) = a^TE(XX^T)a
\]</span></p>
<p><span class="math display">\[
D(Y&#39;) = D(b^TY) = b^TE(YY^T)b
\]</span></p>
<p>​ 由于我们的<span class="math display">\[X，Y\]</span>的均值均为0，则 <span class="math display">\[
D(X) = cov(X,X) = E(XX^T), D(Y)= cov(Y,Y) = E(YY^T)
\]</span></p>
<p><span class="math display">\[
cov(X,Y) = E(XY^T),  cov(Y,X) = E(YX^T)
\]</span></p>
<p>​ 令<span class="math inline">\(cov(X,Y)=S_{XY}\)</span>,则优化目标可以转化为: <span class="math display">\[
\underbrace{arg\;max}_{a,b}\frac{a^TS_{XY}b}{\sqrt{ a^TS_{XX}a}\sqrt{b^TS_{YY}b}}
\]</span> 　　由于分子分母增大相同的倍数，优化目标结果不变，我们可以采用和==SVM==类似的优化方法，固定分母，优化分子，具体的转化为： <span class="math display">\[
\underbrace{arg\;max}_{a,b}\;\;{a^TS_{XY}b} \\ s.t. a^TS_{XX}a =1,\; b^TS_{YY}b =1
\]</span> ​ 也就是说，我们的CCA算法的目标最终转化为一个==凸优化==过程，只要我们求出了这个优化目标的最大值，就是我们前面提到的多维X和Y的相关性度量，而对应的<span class="math inline">\(a,b\)</span>则为降维时的投影向量，或者说线性系数。</p>
<p>　　　　这个函数优化一般有两种方法，第一种是奇异值分解==SVD==，第二种是==特征分解==，两者得到的结果一样，下面我们分别讲解。</p>
<h2 id="cca算法的svd求解">3.CCA算法的SVD求解</h2>
<p>​ 首先，令<span class="math inline">\(a=S_{XX}^{-1/2}u, b=S_{YY}^{-1/2}v\)</span> ,则有： <span class="math display">\[
a^TS_{XX}a =1 \Rightarrow u^TS_{XX}^{-1/2}S_{XX}S_{XX}^{-1/2}u =1  \Rightarrow  u^Tu=1
\]</span></p>
<p><span class="math display">\[
b^TS_{YY}b =1 \Rightarrow v^TS_{YY}^{-1/2}S_{YY}S_{YY}^{-1/2}v=1  \Rightarrow  v^Tv=1
\]</span></p>
<p><span class="math display">\[
a^TS_{XY}b = u^TS_{XX}^{-1/2}S_{XY}S_{YY}^{-1/2}v
\]</span></p>
<p>​ 也就是说，我们的优化目标变成下式： <span class="math display">\[
\underbrace{arg\;max}_{u,v}u^TS_{XX}^{-1/2}S_{XY}S_{YY}^{-1/2}v\\
s.t. u^Tu =1,\; v^Tv =1
\]</span> ​ 将<span class="math inline">\(u,v\)</span>看作矩阵 <span class="math inline">\(M=S_{XX}^{-1/2}S_{XY}S_{YY}^{-1/2}\)</span> 的某一奇异值的左右奇异向量。得到<span class="math inline">\(M=U\Sigma V^T\)</span></p>
<p>那么利用奇异值分解，我们可以得到<span class="math inline">\(M=UΣV^T\)</span>其中<span class="math inline">\(U,V\)</span>分别为M的左奇异向量和右奇异向量组成的矩阵，而<span class="math display">\[Σ\]</span>为M的奇异值组成的对角矩阵。由于<span class="math display">\[U,V\]</span>所有的列都为标准正交基，则<span class="math display">\[u^TU\]</span>和<span class="math inline">\(V^Tv\)</span>得到一个只有一个标量值为1，其余标量值为0的向量。此时我们有 <span class="math display">\[
u^TS_{XX}^{-1/2}S_{XY}S_{YY}^{-1/2}v = u^TU\Sigma V^Tv = \sigma_{uv}
\]</span> ​ 也就是说我们最大化<span class="math inline">\(u^TS_{XX}^{-1/2}S_{XY}S_{YY}^{-1/2}v\)</span>,其实对应的最大值就是某一组左右奇异向量所对应的奇异值的最大值。也就是将M做了奇异值分解后，最大的奇异值就是我们优化目标的最大值，或者说我们的X和Y之间的最大相关系数。利用对应的左右奇异向量<span class="math inline">\(u,v\)</span>我们也可以求出我们原始的X和Y的线性系数<span class="math inline">\(a=S_{XX}^{-1/2}u, b=S_{YY}^{-1/2}v\)</span>。</p>
<p>　　　　可以看出，SVD的求解方式非常简洁方便。但是如果你不熟悉SVD的话，我们也可以用传统的拉格朗日函数加上特征分解来完成这个函数的优化。</p>
<h2 id="cca算法的特征分解求解">4.CCA算法的特征分解求解</h2>
<p>​ 利用拉格朗日函数，优化目标转化为最大化下式： <span class="math display">\[
J(a,b) = a^TS_{XY}b -\frac{\lambda}{2}(a^TS_{XX}a-1)-\frac{\theta}{2}(b^TS_{YY}b-1)
\]</span> ​ 分别对<span class="math inline">\(a,b\)</span>求导并令结果为0，我们得到： <span class="math display">\[
S_{XY}b-\lambda S_{XX}a=0\\
S_{YX}a-\theta S_{YY}b=0
\]</span> ​ 将上面第一个式子左乘<span class="math inline">\(a^T\)</span>,第二个式子左乘<span class="math inline">\(b^T\)</span>，并利用<span class="math inline">\(a^TS_{XX}a =1,\; b^TS_{YY}b =1\)</span>，我们得到 <span class="math display">\[
\lambda = \theta = a^TS_{XY}b
\]</span> ​ 也就是说我们的拉格朗日系数就是我们要优化的目标。我们继续将上面的(17)两个式子做整理，第一个式子左乘<span class="math inline">\(S_{XX}^{-1}\)</span>,第二个式子左乘<span class="math inline">\(S_{YY}^{-1}\)</span>，我们得到： <span class="math display">\[
S_{XX}^{-1}S_{XY}b=\lambda a\\
S_{YY}^{-1}S_{YX}a = \lambda b
\]</span> 由(19)得: <span class="math display">\[
S_{XX}^{-1}S_{XY}S_{YY}^{-1}S_{YX}a=\lambda^2a
\]</span> ​ 这个式子就是特征分解！要求最大的相关系数λλ,我们只需要对矩阵<span class="math inline">\(N=S_{XX}^{-1}S_{XY}S_{YY}^{-1}S_{YX}\)</span>做特征分解，找出最大的特征值取平方根即可，此时最大特征值对应的特征向量即为X的线性系数a。</p>
<p>同样： <span class="math display">\[
S_{YY}^{-1}S_{YX}S_{XX}^{-1}S_{XY}b=\lambda^2b
\]</span> ​ 对矩阵<span class="math inline">\(N’=S_{YY}^{-1}S_{YX}S_{XX}^{-1}S_{XY}\)</span>做特征分解，找出最大的特征值取平方根即可，此时最大特征值对应的特征向量即为Y的线性系数b。</p>
<p>​ 可以看出特征分解的方法要比SVD复杂，但是两者求得的结果其实是等价的，只要利用SVD和特征分解之间的关系就很容易发现两者最后的结果相同</p>
<h2 id="cca算法流程">5.CCA算法流程</h2>
<p>​ 以SVD方法为准。</p>
<p>　　　　输入：各为<span class="math inline">\(m\)</span>个的样本<span class="math inline">\(X\)</span>和<span class="math inline">\(Y\)</span>，<span class="math inline">\(X\)</span>和<span class="math inline">\(Y\)</span>的维度都大于1</p>
<p>　　　　输出：X,Y的相关系数<span class="math inline">\(ρ\)</span>,<span class="math inline">\(X\)</span>和<span class="math inline">\(Y\)</span>的线性系数向量<span class="math inline">\(a\)</span>和<span class="math inline">\(b\)</span></p>
<p>　　　　1）计算X的方差<span class="math inline">\(S_{XX}\)</span>, Y的方差<span class="math inline">\(S_{YY}\)</span>，X和Y的协方差<span class="math inline">\(S_{XY}\)</span>, <span class="math inline">\(Y\)</span>和<span class="math inline">\(X\)</span>的协方差<span class="math inline">\(S_{YX}=S_{XY}^T\)</span></p>
<p>　　　　2) 计算矩阵<span class="math inline">\(M=S_{XX}^{-1/2}S_{XY}S_{YY}^{-1/2}\)</span></p>
<p>　　　　3）对矩阵<span class="math inline">\(M\)</span>进行奇异值分解，得到最大的奇异值<span class="math inline">\(ρ\)</span>，和最大奇异值对应的左右奇异向量<span class="math inline">\(u,v\)</span></p>
<p>　　　　4) 计算X和Y的线性系数向量a和b, <span class="math inline">\(a=S_{XX}^{-1/2}u, b=S_{YY}^{-1/2}v\)</span></p>
<p>　　　　</p>
<h2 id="cca算法小结">6.CCA算法小结</h2>
<p>​ CCA算法广泛的应用于数据相关度的分析，同时还是偏最小二乘法的基础。但是由于它依赖于数据的线性表示，当我们的数据无法线性表示时，CCA就无法使用，此时我们可以利用核函数的思想，将数据映射到高维后，再利用CCA的思想降维到1维，求对应的相关系数和线性关系，这个算法一般称为KCCA。</p>
<p>　　此外，我们在算法里只找了相关度最大的奇异值或者特征值，作为数据的相关系数，实际上我们也可以像PCA一样找出第二大奇异值，第三大奇异值，。。。得到第二相关系数和第三相关系数。然后对数据做进一步的相关性分析。但是一般的应用来说，找出第一相关系数就可以了。</p>
<p>　　有时候我们的矩阵<span class="math inline">\(S_{XX},S_{YY}\)</span>不可逆，此时我们得不到对应的逆矩阵，一般遇到这种情况可以对<span class="math inline">\(S_{XX},S_{YY}\)</span>进行正则化，将<span class="math inline">\(S_{XX},S_{YY}\)</span>变化为<span class="math inline">\(S_{XX}+\gamma I,S_{YY}+\gamma I\)</span>,然后继续求逆。其中<span class="math inline">\(γ\)</span>为正则化系数。</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>降维</tag>
      </tags>
  </entry>
  <entry>
    <title>卷积神经网络</title>
    <url>/2021/03/13/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<hr>
<h1 id="卷积神经网络">卷积神经网络</h1>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>analysis</title>
    <url>/2021/03/22/analysis/</url>
    <content><![CDATA[
]]></content>
  </entry>
  <entry>
    <title>循环神经网络</title>
    <url>/2021/03/13/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>论文&lt;基于脑电的脑机接口迁移学习&gt;</title>
    <url>/2021/03/13/%E5%9F%BA%E4%BA%8E%E8%84%91%E7%94%B5%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%EF%BC%9A2016%E5%B9%B4%E4%BB%A5%E6%9D%A5%E7%A0%94%E7%A9%B6%E8%BF%9B%E5%B1%95%E7%BB%BC%E8%BF%B0/</url>
    <content><![CDATA[<p>原文：Transfer Learning for EEG-Based Brain-Computer Interfaces: A Review of Progress Made Since 2016 <link> https://arxiv.org/abs/2004.06286v4 </p>
<p><strong>脑机接口</strong>(BCI)使用户能够使用大脑信号直接与计算机通信。</p>
<p><strong>脑电</strong>(EEG)是最常见的非侵入性脑机接口(BCI)，对噪声/伪影敏感，且存在受试者/受试者内部的非平稳性。很难建立一个通用的模式识别模型。</p>
<p><strong>迁移学习</strong>用于减少校准工作量。</p>
<p>本文讨论了<strong>运动想象</strong>、<strong>事件相关电位</strong>、<strong>稳态视觉诱发电位</strong>、<strong>情感脑机接口</strong>、<strong>回归问题</strong>和<strong>对抗性攻击</strong>等六种范式及其应用。</p>
<p>索引-<strong>脑机接口</strong>、<strong>脑电图</strong>、<strong>迁移学习</strong>、<strong>领域适应</strong>、<strong>情感脑机接口</strong>、<strong>对抗性攻击</strong></p>
<h2 id="i.introduction">I.Introduction</h2>
<p>脑机接口应用：游戏、情绪识别、精神疲劳评估、警觉评估。etc</p>
<p>BCI类型：<strong>Non-invasive BCIs</strong>；Invasive BCIs；Partially invasive (semi-invasive) BCIs</p>
<p>本文研究非侵入式BCIs，safety, low cost, and convenience. most popular</p>
<p><img src="/2021/03/13/%E5%9F%BA%E4%BA%8E%E8%84%91%E7%94%B5%E7%9A%84%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%EF%BC%9A2016%E5%B9%B4%E4%BB%A5%E6%9D%A5%E7%A0%94%E7%A9%B6%E8%BF%9B%E5%B1%95%E7%BB%BC%E8%BF%B0/image-20210215113147980.png"></p>
<ol type="1">
<li><p>Signal acquisition ： Used：wired connections and gel 。Currently, wireless connections and dry electrodes</p></li>
<li><p>Signal processing ： temporal filtering and spatial filtering.</p></li>
</ol>
<p>常用的空间滤波器包括公共空间模式(CSP)、独立分量分析(ICA)、盲源分离、xDAWN等。</p>
<p>3）Feature extraction：时域、频域、时频域、黎曼空间和/或功能性大脑连通性特征</p>
<ol start="4" type="1">
<li><p>Pattern recognition：分类；回归</p></li>
<li><p>Controller：其输出命令以控制外部设备</p></li>
</ol>
<p>当使用深度学习时，特征提取和模式识别可以集成到单个神经网络中，并且这两个组件同时自动优化。</p>
<p>基于EEG的BCI中有三种经典的分类范型：Motor imagery (MI)；Event-related potentials (ERP)；Steady-state visual evoked potentials (SSVEP)</p>
<h2 id="ii.迁移学习概念和场景">II.迁移学习概念和场景</h2>
<p>定义1：</p>
<h2 id="iii.tl-in-mi-based-bcis">III.TL in MI-Based BCIs</h2>
<p><strong>嵌入流形的知识转移</strong>(MEKT)方法:1.协方差矩阵质心对齐(CA)2.切线空间特征提取。3.映射矩阵识别。</p>
<p><strong>EEGNet</strong>。它可以应用于不同的脑机接口范例，用非常有限的数据进行训练，并产生神经生理学上可解释的特征。EEGNet在错误信息系统和事件相关事件的学科内和跨学科分类方面都取得了强劲的成果。</p>
<h2 id="iv.-tl-in-erp-based-bcis">IV. TL IN ERP-BASED BCIs</h2>
<p>SAN GAN</p>
<p>数据对齐：<strong>Euclidean Alignment (EA)方法</strong>，完全无监督，运算代价低，适用于传统机器学习和深度学习</p>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>脑电，迁移学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C指针</title>
    <url>/2021/03/13/%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<ol type="1">
<li><p><em>号标识该变量为指针类型，当定义多个指针变量时，在每个指针变量名前面均需要加一个 </em>，不能省略，否则为非指针变量。</p></li>
<li><p>在使用已定义好的指针变量时，在变量名前面不能加 *。</p></li>
</ol>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>指针</tag>
      </tags>
  </entry>
  <entry>
    <title>数据科学中的距离度量</title>
    <url>/2021/03/25/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/</url>
    <content><![CDATA[<figure>
<img src="/2021/03/25/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325154539773.png" alt="image-20210325154539773"><figcaption aria-hidden="true">image-20210325154539773</figcaption>
</figure>
<p>许多算法，无论是有监督的还是无监督的，都使用<strong>距离度量</strong>。这些度量（例如欧几里得距离或余弦相似度）通常可以在算法中找到，例如k-NN，UMAP，HDBSCAN等。</p>
<blockquote>
<p><strong>知道何时使用哪种距离量度可以帮助您从分类不正确的模型转变为准确的模型</strong></p>
</blockquote>
<h1 id="欧氏距离">1 欧氏距离</h1>
<figure>
<img src="/2021/03/25/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325154734583.png" alt="image-20210325154734583"><figcaption aria-hidden="true">image-20210325154734583</figcaption>
</figure>
<h2 id="概念">概念：</h2>
<p>使用勾股定理从这些点的笛卡尔坐标计算出距离。 <span class="math display">\[
D(x,y)  = \sqrt{\sum_{i=1}^{n}(x_i - y_i)^2}
\]</span></p>
<h2 id="缺点">缺点：</h2>
<p>尽管这是一种常用的距离度量，但欧几里得距离并不是比例不变的，这意味着所计算的距离可能会根据要素的单位而发生偏斜。通常，在使用此距离度量之前，需要对数据进行<strong>归一化</strong>。</p>
<p>此外，随着数据维数的增加，欧几里得距离的用处也越来越小。这与维数的诅咒有关，维数的诅咒与高维空间不能像我们直观地期望的二维或3维空间那样起作用。</p>
<h2 id="用例">用例：</h2>
<p>当您拥有低维数据并且向量的大小非常重要时，欧几里得距离的效果非常好。如果在低维数据上使用欧几里得距离，则kNN和HDBSCAN之类的方法将显示出出色的结果。</p>
<p>尽管已开发出许多其他措施来解决欧几里得距离的缺点，但出于充分的原因，它仍然是最常用的距离措施之一。它使用起来非常直观，易于实现，并且在许多用例中都显示出了极好的效果。</p>
<h1 id="余弦相似度">2 余弦相似度</h1>
<figure>
<img src="/2021/03/25/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325155301128.png" alt="image-20210325155301128"><figcaption aria-hidden="true">image-20210325155301128</figcaption>
</figure>
<h2 id="定义">定义</h2>
<p><span class="math display">\[
D(x,y) = cos(\theta) = \frac{x . y}{||x|| \ ||y||}
\]</span></p>
<p>方向完全相同的两个向量的余弦相似度为1，而两个彼此相对的向量的相似度为-1。注意，它们的大小并不重要，因为这是方向的度量。</p>
<h2 id="缺点-1">缺点</h2>
<p>余弦相似度的主要缺点之一是<strong>不考虑向量的大小，仅考虑其方向</strong>。实际上，这意味着没有充分考虑值的差异。例如，如果使用推荐系统，则余弦相似度不会考虑不同用户之间的评分等级差异。</p>
<h2 id="用例-1">用例</h2>
<p><strong>当我们拥有高维数据并且向量的大小不重要时，通常会使用余弦相似度。</strong>对于文本分析，当数据由字数表示时，此度量非常常用。例如，当一个单词在一个文档中比另一个单词更频繁出现时，这并不一定意味着一个文档与该单词更相关。可能是文件长度不均匀，计数的重要性不太重要。然后，我们最好使用忽略幅度的余弦相似度。</p>
<h1 id="海明距离">3 海明距离</h1>
<figure>
<img src="/2021/03/25/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325155646742.png" alt="image-20210325155646742"><figcaption aria-hidden="true">image-20210325155646742</figcaption>
</figure>
<h2 id="定义-1">定义</h2>
<p>汉明距离是两个向量之间不同的值的数量。它通常用于比较两个相等长度的二进制字符串。它也可以用于字符串，通过计算彼此不同的字符数来比较它们彼此之间的相似程度。</p>
<h2 id="缺点-2">缺点</h2>
<p>当两个向量的长度不相等时，很难使用汉明距离。</p>
<p>当幅度是重要指标时，建议不要使用此距离指标。</p>
<h2 id="用例-2">用例</h2>
<p>典型的用例包括通过计算机网络传输数据时的错误纠正/检测。它可以用来确定二进制字中失真比特的数量，以作为估计误差的一种方法。</p>
<p>此外，可以使用汉明距离来<strong>测量分类变量之间的距离</strong>。</p>
<h1 id="曼哈顿距离">4 曼哈顿距离</h1>
<figure>
<img src="/2021/03/25/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325155834358.png" alt="image-20210325155834358"><figcaption aria-hidden="true">image-20210325155834358</figcaption>
</figure>
<p>定义</p>
<p>曼哈顿距离（通常称为的士距离或城市街区距离）计算实值向量之间的距离。想象一下在统一的网格上描述对象的矢量，例如棋盘。然后，曼哈顿距离是指两个向量只能以<strong>直角移动时的距离</strong>。计算距离时不涉及对角线运动。 <span class="math display">\[
D(x,y) =\sum_{i=1}^{k}|x_i-y_i|
\]</span></p>
<h2 id="缺点-3">缺点</h2>
<p>尽管曼哈顿距离对于<a href="https://www.quora.com/What-is-the-difference-between-Manhattan-and-Euclidean-distance-measures">高维数据</a>似乎还可以，但是它比欧几里德距离直观的程度要差一些，特别是在使用高维数据时。</p>
<p>此外，由于它不是最短的路径，因此比欧几里得距离更有可能提供更高的距离值。这不一定会带来问题，但是您应该考虑这一点。</p>
<h2 id="用例-3">用例</h2>
<p>当您的数据集具有离散和/或二进制属性时，Manhattan似乎工作得很好，因为它考虑了可以在这些属性的值内实际采用的路径。以欧几里得距离为例，实际上可能不可能在两个向量之间创建一条直线。</p>
<h1 id="切比雪夫距离">5 切比雪夫距离</h1>
<figure>
<img src="/2021/03/25/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325160127526.png" alt="image-20210325160127526"><figcaption aria-hidden="true">image-20210325160127526</figcaption>
</figure>
<h2 id="定义-2">定义：</h2>
<p>切比雪夫距离定义为沿着任何坐标维度的两个向量之间的最大差值。换句话说，它只是<strong>一个轴上的最大距离</strong>。由于其性质，通常将其称为棋盘距离，因为国王从一个方格到另一个方格所需的最小移动次数等于切比雪夫距离。 <span class="math display">\[
D(x,y) = \max_i(|x_i-y_i|)
\]</span></p>
<h2 id="缺点-4">缺点</h2>
<p>切比雪夫（Chebyshev）通常用于非常特殊的用例，这使得很难用作通用距离度量标准，例如欧几里得距离或余弦相似度。因此，建议仅在绝对确定它适合您的用例时才使用它。</p>
<h2 id="用例-4">用例</h2>
<p>如前所述，切比雪夫距离可用于提取从一个正方形移动到另一个正方形所需的最小移动次数。此外，在允许无限制八向移动的游戏中，这可能是一种有用的措施。</p>
<h1 id="闵可夫斯基">6 闵可夫斯基</h1>
<figure>
<img src="/2021/03/25/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325160639097.png" alt="image-20210325160639097"><figcaption aria-hidden="true">image-20210325160639097</figcaption>
</figure>
<h2 id="定义-3">定义</h2>
<p>Minkowski距离比大多数距离更复杂。它是在范数向量空间（n维实数空间）中使用的度量，这意味着它可以在距离可以表示为具有长度的向量的空间中使用。</p>
<p>该措施具有三个要求：</p>
<ul>
<li><strong>零向量</strong>—零向量的长度为零，而每个其他向量的长度为正。例如，如果我们从一个地方旅行到另一个地方，则该距离始终为正。但是，如果我们从一个地方到自己的地方旅行，则该距离为零。</li>
<li><strong>标量因数</strong>—当向量与正数相乘时，其长度会更改，同时保持其方向。例如，如果我们在一个方向上走了一定距离并添加了相同的距离，则方向不会改变。</li>
<li><strong>三角形不等式</strong>—两点之间的最短距离是一条直线。</li>
</ul>
<p>Minkowski距离的公式如下所示：</p>
<figure>
<img src="/2021/03/25/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/0_UbbyH2MUPb5ZBa64.gif" alt="0_UbbyH2MUPb5ZBa64"><figcaption aria-hidden="true">0_UbbyH2MUPb5ZBa64</figcaption>
</figure>
<p>关于此距离度量最有趣的是使用参数 <strong>p</strong>。我们可以使用此参数来操纵距离度量，使其与其他度量极为相似。</p>
<p>常见值的<code>p</code>是：</p>
<ul>
<li>p = 1 —曼哈顿距离</li>
<li>p = 2 —欧几里德距离</li>
<li>p = <em>∞—</em>切比雪夫距离</li>
</ul>
<h2 id="缺点-5">缺点</h2>
<p>Minkowski与它们所代表的距离度量具有相同的缺点，因此对曼哈顿，欧几里得和契比雪夫距离等度量的良好理解非常重要。</p>
<p>此外，该参数<code>p</code>实际上可能很麻烦，因为根据您的用例，找到正确的值在计算上可能是非常低效的。</p>
<h2 id="用例-5">用例</h2>
<p>好处<code>p</code>是可以对其进行迭代并找到最适合您的用例的距离度量。它为您的距离度量提供了极大的灵活性，如果您熟悉<code>p</code>并且有很多距离度量，那么这将是一个巨大的好处。</p>
<h1 id="贾卡德指数">7 贾卡德指数</h1>
<figure>
<img src="/2021/03/25/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325161025734.png" alt="image-20210325161025734"><figcaption aria-hidden="true">image-20210325161025734</figcaption>
</figure>
<p>Jaccard索引（或“联合上的交集”）是用于计算样本集的相似性和多样性的度量。它是交集的大小除以样本集并集的大小。</p>
<p>实际上，它是集合之间<strong>相似实体的总数除以实体的总数</strong>。例如，如果两个集合共有1个相同的实体，并且总共有5个不同的实体，则Jaccard指数将为1/5 = 0.2。</p>
<p>要计算Jaccard距离，我们只需从1中减去Jaccard指数：</p>
<figure>
<img src="/2021/03/25/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/0_3fcCoSZUOxa7vzon.gif" alt="0_3fcCoSZUOxa7vzon"><figcaption aria-hidden="true">0_3fcCoSZUOxa7vzon</figcaption>
</figure>
<h2 id="缺点-6">缺点</h2>
<p>Jaccard索引的主要缺点是它受数据大小的很大影响。大型数据集可能会对索引产生很大影响，因为它可以显着增加联合并同时保持相交相似。</p>
<h2 id="用例-6">用例</h2>
<p>Jaccard索引通常用于使用二进制或二进制数据的应用程序中。当您拥有一个预测图像片段（例如汽车）的深度学习模型时，可以使用Jaccard索引来计算给定真实标签的预测片段的准确性。</p>
<p>类似地，它可以用于文本相似性分析中，以测量文档之间有多少单词选择重叠。因此，它可以用来比较模式集。</p>
<h1 id="haversine">8 Haversine</h1>
<figure>
<img src="/2021/03/25/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325161300349.png" alt="image-20210325161300349"><figcaption aria-hidden="true">image-20210325161300349</figcaption>
</figure>
<p>Haversine距离是指球面上两个点之间的经度和纬度。它与欧几里得距离非常相似，因为它可以计算两点之间的最短线。主要区别在于不可能有直线，因为这里的假设是两个点都在一个球面上。</p>
<figure>
<img src="/2021/03/25/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/0_ZZCAEu9KsHOfl0Kr.gif" alt="0_ZZCAEu9KsHOfl0Kr"><figcaption aria-hidden="true">0_ZZCAEu9KsHOfl0Kr</figcaption>
</figure>
<h2 id="缺点-7">缺点</h2>
<p>这种距离测量的一个缺点是，假定这些点位于一个<strong>球体上</strong>。实际上，这种情况很少出现，例如，地球不是完美的圆形，在某些情况下可能会使计算变得困难。取而代之的是，将目光转向假定椭圆形的<strong>Vincenty距离</strong>。</p>
<h2 id="用例-7">用例</h2>
<p>如您所料，Haversine距离通常用于导航。例如，您可以使用它来计算两个国家之间的飞行距离。请注意，如果距离本身不那么大，则不太适合。曲率不会产生太大的影响。</p>
<h1 id="sørensen-dice-index">9 Sørensen-Dice Index</h1>
<figure>
<img src="/2021/03/25/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/image-20210325161655486.png" alt="image-20210325161655486"><figcaption aria-hidden="true">image-20210325161655486</figcaption>
</figure>
<p>Sørensen-Dice索引与Jaccard索引非常相似，因为它可以测量样本集的相似性和多样性。尽管它们的计算方式相似，但索伦森-迪斯指数却更直观一些，因为可以将其视为两组之间重叠的百分比，该值介于0和1之间：</p>
<figure>
<img src="/2021/03/25/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BA%A6%E9%87%8F/0_N5xU3llTz-MKt9E8%20(1).gif" alt="0_N5xU3llTz-MKt9E8 (1)"><figcaption aria-hidden="true">0_N5xU3llTz-MKt9E8 (1)</figcaption>
</figure>
<h2 id="缺点-8">缺点</h2>
<p>像Jaccard索引一样，它们都夸大了几乎没有或没有地面真理肯定集的集合的重要性。结果，它可以支配多组平均得分。它按与相关集合的大小成反比的方式对每个项目加权，而不是平等地对待它们。</p>
<h2 id="用例-8">用例</h2>
<p>用例与Jaccard索引相似（如果不同）。您会发现它通常用于图像分割任务或文本相似性分析中。</p>
]]></content>
  </entry>
  <entry>
    <title>线性表</title>
    <url>/2020/11/06/%E7%BA%BF%E6%80%A7%E8%A1%A8-1/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="什么是线性表">1.什么是线性表</h1>
<p>把所有数据用一根线儿串起来，再存储到物理空间中</p>
<p>根据<strong>数据存储方式</strong>可分为</p>
<ul>
<li>顺序表</li>
<li>链表</li>
</ul>
<p><strong>前驱和后继</strong></p>
<figure>
<img src="/2020/11/06/%E7%BA%BF%E6%80%A7%E8%A1%A8-1/前驱和后继-1615645952176.gif" alt="前驱和后继"><figcaption aria-hidden="true">前驱和后继</figcaption>
</figure>
<h1 id="顺序表及初始化">2 顺序表及初始化</h1>
<p>数组<img src="/2020/11/06/%E7%BA%BF%E6%80%A7%E8%A1%A8-1/顺序表-1615645959375.gif" alt="顺序表"></p>
<p><strong>顺序表的初始化</strong></p>
<p>使用顺序表存储数据之前，除了要申请足够大小的物理空间之外，为了方便后期使用表中的数据，顺序表还需要实时记录以下 2 项数据：</p>
<ol type="1">
<li>顺序表申请的存储容量</li>
<li>顺序表的长度，元素个数</li>
</ol>
<p>自定义顺序表 代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Table</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> *head;<span class="comment">//声明一个名为head的长度不确定的数组，动态数组</span></span><br><span class="line">	<span class="keyword">int</span> length;<span class="comment">//记录当前顺序表的长度</span></span><br><span class="line">	<span class="keyword">int</span> size;<span class="comment">//记录顺序表分配的存储容量</span></span><br><span class="line">&#125;table;</span><br></pre></td></tr></table></figure>
<p>接下来开始学习顺序表的初始化，也就是初步建立一个顺序表。建立顺序表需要做如下工作：</p>
<ul>
<li>给 head 动态数据申请足够大小的物理空间；</li>
<li>给 size 和 length 赋初值；</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Size 5<span class="comment">//申请空间大小</span></span></span><br><span class="line"><span class="function">table <span class="title">initTable</span><span class="params">()</span></span>&#123;</span><br><span class="line">    table t;</span><br><span class="line">    t.head=(<span class="keyword">int</span>*)<span class="built_in">malloc</span>(Size*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//构造一个空的顺序表，动态申请存储空间</span></span><br><span class="line">    <span class="keyword">if</span>(!t.head)<span class="comment">//如果申请失败，退出程序&#123;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;初始化失败&quot;</span>)；</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	t.length=<span class="number">0</span>;<span class="comment">//空表长度为0；</span></span><br><span class="line">	t.size=Size;<span class="comment">//空表的初始存储空间为Size</span></span><br><span class="line">	<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实例程序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Size 5</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Table</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> * head;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">&#125;table;</span><br><span class="line"><span class="function">table <span class="title">initTable</span><span class="params">()</span></span>&#123;</span><br><span class="line">    table t;</span><br><span class="line">    t.head=(<span class="keyword">int</span>*)<span class="built_in">malloc</span>(Size*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (!t.head)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;初始化失败&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    t.length=<span class="number">0</span>;</span><br><span class="line">    t.size=Size;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出顺序表中元素的函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">displayTable</span><span class="params">(table t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.length;i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,t.head[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    table t=initTable();</span><br><span class="line">    <span class="comment">//向顺序表中添加元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=Size; i++) &#123;</span><br><span class="line">        t.head[i<span class="number">-1</span>]=i;</span><br><span class="line">        t.length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;顺序表中存储的元素分别是：\n&quot;</span>);</span><br><span class="line">    displayTable(t);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>输出：</strong></p>
<p>顺序表中存储的元素分别是： 1 2 3 4 5</p>
<h1 id="顺序表的基本操作">3.顺序表的基本操作</h1>
<h2 id="插入元素">3.1 插入元素</h2>
<p>根据插入位置不同：</p>
<ol type="1">
<li>插入表头</li>
<li>插入中间</li>
<li>插入表位</li>
</ol>
<p>解决方法：</p>
<ul>
<li>将要插入位置元素以及后续的元素整体向后移动一个位置；</li>
<li>将元素放到腾出来的位置上；</li>
</ul>
<p>例如：在{1 2 3 4 5}的第三个位置插入6</p>
<ul>
<li><img src="/2020/11/06/%E7%BA%BF%E6%80%A7%E8%A1%A8-1/找到目标元素位置-1615645975721.gif" title="fig:" alt="找到目标元素位置"></li>
<li><img src="/2020/11/06/%E7%BA%BF%E6%80%A7%E8%A1%A8-1/将插入位置腾出-1615645979073.gif" title="fig:" alt="将插入位置腾出"></li>
<li><img src="/2020/11/06/%E7%BA%BF%E6%80%A7%E8%A1%A8-1/插入目标元素-1604587218577-1615645980901.gif" title="fig:" alt="插入目标元素"></li>
</ul>
<p>代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入函数，其中，elem为插入的元素，add为插入到顺序表的位置</span></span><br><span class="line"><span class="function">table <span class="title">addTable</span><span class="params">(table t,<span class="keyword">int</span> elem,<span class="keyword">int</span> add)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断插入本身是否存在问题（如果插入元素位置比整张表的长度+1还大（如果相等，是尾随的情况），或者插入的位置本身不存在，程序作为提示并自动退出）</span></span><br><span class="line">    <span class="keyword">if</span> (add&gt;t.length+<span class="number">1</span>||add&lt;<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;插入位置有问题\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//做插入操作时，首先需要看顺序表是否有多余的存储空间提供给插入的元素，如果没有，需要申请</span></span><br><span class="line">    <span class="keyword">if</span> (t.length==t.size) &#123;</span><br><span class="line">        t.head=(<span class="keyword">int</span> *)<span class="built_in">realloc</span>(t.head, (t.size+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="keyword">if</span> (!t.head) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;存储分配失败\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">        t.size+=<span class="number">1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//插入操作，需要将从插入位置开始的后续元素，逐个后移</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=t.length<span class="number">-1</span>; i&gt;=add<span class="number">-1</span>; i--) &#123;</span><br><span class="line">        t.head[i+<span class="number">1</span>]=t.head[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后移完成后，直接将所需插入元素，添加到顺序表的相应位置</span></span><br><span class="line">    t.head[add<span class="number">-1</span>]=elem;</span><br><span class="line">    <span class="comment">//由于添加了元素，所以长度+1</span></span><br><span class="line">    t.length++;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，动态数组额外申请更多物理空间使用的是 realloc 函数。并且，在实现后续元素整体后移的过程，目标位置其实是有数据的，还是 3，只是下一步新插入元素时会把旧元素直接覆盖。</p>
<h2 id="删除元素">3.2 删除元素</h2>
<p>后续元素整体前移一个位置，会直接将目标元素删除，可间接实现删除元素的目的。</p>
<figure>
<img src="/2020/11/06/%E7%BA%BF%E6%80%A7%E8%A1%A8-1/后续元素前移-1615645985862.gif" alt="后续元素前移"><figcaption aria-hidden="true">后续元素前移</figcaption>
</figure>
<p>实现代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">table <span class="title">delTable</span><span class="params">(table t,<span class="keyword">int</span> add)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (add&gt;t.length || add&lt;<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;被删除元素的位置有误\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=add; i&lt;t.length; i++) &#123;</span><br><span class="line">        t.head[i<span class="number">-1</span>]=t.head[i];</span><br><span class="line">    &#125;</span><br><span class="line">    t.length--;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="查找元素">3.3 查找元素</h2>
<p>顺序表中查找目标元素，可以使用多种查找算法实现，比如说<a href="http://c.biancheng.net/view/3428.html">二分查找算法</a>、插值查找算法等。</p>
<p>这里，我们选择<a href="http://c.biancheng.net/view/3427.html">顺序查找算法</a>，具体实现代码为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找函数，其中，elem表示要查找的数据元素的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">selectTable</span><span class="params">(table t,<span class="keyword">int</span> elem)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;t.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t.head[i]==elem) &#123;</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//如果查找失败，返回-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="更改元素">3.4 更改元素</h2>
<p>顺序表更改元素的实现过程是：</p>
<ol type="1">
<li>找到目标元素；</li>
<li>直接修改该元素的值；</li>
</ol>
<p>顺序表更改元素的 C 语言实现代码为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更改函数，其中，elem为要更改的元素，newElem为新的数据元素</span></span><br><span class="line"><span class="function">table <span class="title">amendTable</span><span class="params">(table t,<span class="keyword">int</span> elem,<span class="keyword">int</span> newElem)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> add=selectTable(t, elem);</span><br><span class="line">    t.head[add<span class="number">-1</span>]=newElem;<span class="comment">//由于返回的是元素在顺序表中的位置，所以-1就是该元素在数组中的下标</span></span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实例">3.5 实例</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Size 5</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Table</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> * head;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">&#125;table;</span><br><span class="line"><span class="function">table <span class="title">initTable</span><span class="params">()</span></span>&#123;</span><br><span class="line">    table t;</span><br><span class="line">    t.head=(<span class="keyword">int</span>*)<span class="built_in">malloc</span>(Size*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (!t.head)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;初始化失败\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    t.length=<span class="number">0</span>;</span><br><span class="line">    t.size=Size;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">table <span class="title">addTable</span><span class="params">(table t,<span class="keyword">int</span> elem,<span class="keyword">int</span> add)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (add&gt;t.length+<span class="number">1</span>||add&lt;<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;插入位置有问题\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t.length&gt;=t.size) &#123;</span><br><span class="line">        t.head=(<span class="keyword">int</span> *)<span class="built_in">realloc</span>(t.head, (t.size+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="keyword">if</span> (!t.head) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;存储分配失败\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        t.size+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=t.length<span class="number">-1</span>; i&gt;=add<span class="number">-1</span>; i--) &#123;</span><br><span class="line">        t.head[i+<span class="number">1</span>]=t.head[i];</span><br><span class="line">    &#125;</span><br><span class="line">    t.head[add<span class="number">-1</span>]=elem;</span><br><span class="line">    t.length++;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">table <span class="title">delTable</span><span class="params">(table t,<span class="keyword">int</span> add)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (add&gt;t.length || add&lt;<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;被删除元素的位置有误\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=add; i&lt;t.length; i++) &#123;</span><br><span class="line">        t.head[i<span class="number">-1</span>]=t.head[i];</span><br><span class="line">    &#125;</span><br><span class="line">    t.length--;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">selectTable</span><span class="params">(table t,<span class="keyword">int</span> elem)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;t.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t.head[i]==elem) &#123;</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">table <span class="title">amendTable</span><span class="params">(table t,<span class="keyword">int</span> elem,<span class="keyword">int</span> newElem)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> add=selectTable(t, elem);</span><br><span class="line">    t.head[add<span class="number">-1</span>]=newElem;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">displayTable</span><span class="params">(table t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.length;i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,t.head[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    table t1=initTable();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=Size; i++) &#123;</span><br><span class="line">        t1.head[i<span class="number">-1</span>]=i;</span><br><span class="line">        t1.length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原顺序表：\n&quot;</span>);</span><br><span class="line">    displayTable(t1);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;删除元素1:\n&quot;</span>);</span><br><span class="line">    t1=delTable(t1, <span class="number">1</span>);</span><br><span class="line">    displayTable(t1);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;在第2的位置插入元素5:\n&quot;</span>);</span><br><span class="line">    t1=addTable(t1, <span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">    displayTable(t1);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;查找元素3的位置:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> add=selectTable(t1, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,add);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;将元素3改为6:\n&quot;</span>);</span><br><span class="line">    t1=amendTable(t1, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line">    displayTable(t1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原顺序表：</span><br><span class="line">1 2 3 4 5</span><br><span class="line">删除元素1:</span><br><span class="line">2 3 4 5</span><br><span class="line">在第2的位置插入元素5:</span><br><span class="line">2 5 3 4 5</span><br><span class="line">查找元素3的位置:</span><br><span class="line">3</span><br><span class="line">将元素3改为6:</span><br><span class="line">2 5 6 4 5</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线性表</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论</title>
    <url>/2021/03/15/%E6%A6%82%E7%8E%87%E8%AE%BA/</url>
    <content><![CDATA[<h2 id="sum-rule">sum rule</h2>
<p><span class="math display">\[
p(X) = \sum_{Y}{}p(X,Y)
\]</span></p>
<h2 id="product-rule">product rule</h2>
<p><span class="math display">\[
p(X,Y) = p(Y|X)p(X)
\]</span></p>
<h2 id="对称性">对称性</h2>
<p><span class="math display">\[
p(X,Y) = p(Y,X)
\]</span> ## Bayes’ theorem</p>
<p><span class="math display">\[
p(Y|X) = \frac{p(X,Y)}{p(X)}\\
        =\frac{p(X|Y)p(X)}{p(X)}\\
        =\frac{p(X|Y)p(X)}{\sum_{Y}{}p(X,Y)}\\
        =\frac{p(X|Y)p(X)}{\sum_{Y}{}p(X|Y)p(Y)}
\]</span> 贝叶斯定理的分母<span class="math inline">\(p(X)=\sum_{Y}{}p(X|Y)p(Y)\)</span>看做归⼀化常数，⽤来确保公式（4）左侧的条件概率对于所有的Y 的取值之和为1。</p>
<hr>
<h2 id="概率密度probability-density">概率密度probability density</h2>
<p><img src="/2021/03/15/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210310210259698.png" alt="image-20210310210259698"> <span class="math display">\[
p(x\in(a,b)) = \int_{a}^{b}p(x) dx\\
p(x) \leq 0\\
\int_{-\infty}^{\infty}p(x)dx = 1
\]</span> ==概率密度–&gt;概率–&gt;累积分布==</p>
<p>考虑 变换<span class="math inline">\(x=g(y)\)</span> 区间<span class="math inline">\((x,x+\delta_x)\)</span> 变为 <span class="math inline">\((y,y+\delta_y)\)</span> 则有<span class="math inline">\(p_{x}{}(x) \delta_x \backsimeq p_{y}{}(y) \delta_y\)</span> <span class="math display">\[
p_y(y) = p_x(x)|\frac{dx}{dy}| = p_x(g(y))|g&#39;(y)|
\]</span> <strong>结论</strong>： 概率密度最⼤值的概念取决于变量的选择</p>
<h2 id="累积分布函数">累积分布函数</h2>
<p><span class="math display">\[
P(z) = \int_{-\infty}^{z} p(x)dx
\]</span> 满足 <span class="math inline">\(P&#39;(x)=p(x)\)</span></p>
<p>概率的<strong>加和规则</strong>和<strong>乘积规则</strong>以及<strong>贝叶斯规则</strong>，同样可以应⽤于<strong>概率密度函数</strong>的情形，也可以 应⽤于<strong>离散变量与连续变量相结合</strong>的情形</p>
<hr>
<h2 id="期望和协方差">期望和协方差</h2>
<p>期望：(加权平均值)</p>
<p>单变量</p>
<p>离散 <span class="math display">\[
E[f]=\sum_x p(x)f(x)
\]</span> 连续 <span class="math display">\[
E[f]=\int p(x)f(x) dx
\]</span> 估计 <span class="math display">\[
E[f]\backsimeq \frac{1}{N}\sum_{n=1}^{N}f(x_n)
\]</span></p>
<p>方差:度 量 了<span class="math inline">\(f(x)\)</span>在 均 值<span class="math inline">\(E[f(x)]\)</span>附 近 变 化 性 的 ⼤ ⼩ <span class="math display">\[
var[f] = E[(f(x)-E[f(x)])^2]\\
=E[f(x)^2]-E[f(x)]^2
\]</span> 协方差：(两个随机变量) <span class="math display">\[
cov[x,y]=E_{x,y}[ ( x-E[x])(y-E[y])] = E_{x,y}[xy]-E[x]E[y]
\]</span> ​ (两个随机向量) <span class="math display">\[
cov[x,y]=E_{x,y}[ ( x-E[x])(y^T-E[y^T])] = E_{x,y}[xy^T]-E[x]E[y^T]
\]</span></p>
<h2 id="贝叶斯概率">贝叶斯概率</h2>
<p>后验<span class="math inline">\(\backsimeq\)</span>似然x先验 <span class="math display">\[
p(w|D) = \frac{p(D|w)p(w)}{p(D)}
\]</span></p>
<p>后验概率$ p(w|D)$ 似然函数 <span class="math inline">\(p(D|w)\)</span> 先验概率<span class="math inline">\(p(w)\)</span> 归一化常数<span class="math inline">\(p(D)=\int p(D|w)p(w)dw\)</span></p>
<p>似然函数不是w的概率分布，并且它关于w的积分并不（⼀定）等于1.</p>
<h2 id="高斯分布">高斯分布</h2>
<figure>
<img src="/2021/03/15/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210311174121534.png" alt="image-20210311174121534"><figcaption aria-hidden="true">image-20210311174121534</figcaption>
</figure>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>Day3时频分析</title>
    <url>/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="时域vs频域">时域vs频域</h1>
<ul>
<li>时域分析： 脑电波幅随时间的变化（如 刺激后 - 刺激前）。 ERP</li>
<li>频域分析：分析脑电信号各频段的频谱能量。
<ul>
<li>主要适用场景：静息态数据等。</li>
<li>对各被试、各通道、各分段的脑电信号做傅里叶变换，得到各个频率点上的能量，再做统计分析。</li>
<li>统计方式：
<ul>
<li>（1）沿着频率点统计：选择感兴趣的空间区域（通道），沿着频率点进行统计检验。</li>
<li>（2）沿着通道统计：选择感兴趣的频段，沿着通道进行统计检验。</li>
<li>（3）提取特定通道、特定频段的能量数值，进行统计检验。</li>
</ul></li>
</ul></li>
<li>时频分析
<ul>
<li>既有时域信息 又有频域信息</li>
</ul></li>
</ul>
<h1 id="频域分析code">频域分析code</h1>
<p>两组被试静息态EEG数据：</p>
<pre><code>    20个通道，采样率256Hz  ，2s一段</code></pre>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% Specify Basic information of different groups</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 声明各组数据所在文件夹</span></span><br><span class="line">group1_dir = <span class="string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day3\cleaned_rest_data\group1&#x27;</span>;</span><br><span class="line">group2_dir = <span class="string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day3\cleaned_rest_data\group2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">%提取各组数据的文件名</span></span><br><span class="line">group1_files = dir([group1_dir, filesep, <span class="string">&#x27;*.set&#x27;</span>]);</span><br><span class="line">group2_files = dir([group2_dir, filesep, <span class="string">&#x27;*.set&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 频域分析设置</span></span><br><span class="line"><span class="comment">%采样率</span></span><br><span class="line">Fs = <span class="number">256</span>;</span><br><span class="line"><span class="comment">%分段的长度   256 * 2s</span></span><br><span class="line">L = <span class="number">512</span>;</span><br><span class="line"><span class="comment">% T = 1/Fs;</span></span><br><span class="line"><span class="comment">% t = (0:L-1) * T;</span></span><br><span class="line">NFFT = <span class="number">2</span>^<span class="built_in">nextpow2</span>(L);</span><br><span class="line"><span class="comment">% 创建频率列表f</span></span><br><span class="line">f = Fs/<span class="number">2</span> * <span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">1</span>,NFFT/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line"><span class="comment">% f = linspace(0, Fs/2, NFFT/2 + 1);</span></span><br></pre></td></tr></table></figure>
<h1 id="问题">问题：</h1>
<h2 id="每组被试各频带的能量如何-组水平频谱图code">1. 每组被试各频带的能量如何？ （组水平频谱图）Code</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% Load and perform FFT transform on data of different groups</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%对于组1的所有被试</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(group1_files)</span><br><span class="line">    <span class="comment">%提取当前被试数据文件名</span></span><br><span class="line">    subj_fn = group1_files(<span class="built_in">i</span>).name;</span><br><span class="line">    <span class="comment">% fprintf(2,&#x27;now is processing %s \n&#x27;,subj_fn);</span></span><br><span class="line">    <span class="comment">% 读取当前被试预处理后的数据</span></span><br><span class="line">    EEG = pop_loadset([group1_dir, filesep, subj_fn]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">%对于所有通道</span></span><br><span class="line">    <span class="comment">%EEG.data  (chl,times,epochs)</span></span><br><span class="line">    <span class="keyword">for</span> ii=<span class="number">1</span>:<span class="built_in">size</span>(EEG.data,<span class="number">1</span>)</span><br><span class="line">        <span class="comment">%对于所有分段</span></span><br><span class="line">        <span class="keyword">for</span> jj=<span class="number">1</span>:<span class="built_in">size</span>(EEG.data,<span class="number">3</span>)</span><br><span class="line">            <span class="comment">%提取第ii个通道第jj个分段 所有时间点的数据</span></span><br><span class="line">            y = <span class="built_in">squeeze</span>(EEG.data(ii,:,jj));</span><br><span class="line">            <span class="comment">%做FFT变换，求真实幅值(uV）</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">%             temp = fft(y,NFFT)/ L;</span></span><br><span class="line"><span class="comment">%             Y(jj,:) = 2*abs(temp(1:NFFT/2+1));</span></span><br><span class="line"><span class="comment">%             </span></span><br><span class="line"><span class="comment">%             % 做FFT变换，求功率（uV平方）</span></span><br><span class="line"><span class="comment">%             temp = 2 * abs(fft(y,NFFT)).^2/L;</span></span><br><span class="line"><span class="comment">%             Y(jj,:)  = temp(1:NFFT/2+1);</span></span><br><span class="line"><span class="comment">%           </span></span><br><span class="line">            <span class="comment">%做FFT变换，求功率谱密度（PSD）（单位 uV平方/Hz）</span></span><br><span class="line">            temp = <span class="number">2</span>*<span class="built_in">abs</span>(fft(y,NFFT)).^<span class="number">2</span>/L/Fs;</span><br><span class="line">            Y(jj,:) = temp(<span class="number">1</span>:NFFT/<span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line"><span class="comment">%             </span></span><br><span class="line"><span class="comment">%             % 做FFT变换，求功率谱密度（PSD）（单位 dB ）</span></span><br><span class="line"><span class="comment">%             temp = 2*abs(fft(y,NFFT)).^2/L/Fs;</span></span><br><span class="line"><span class="comment">%             Y(jj,:) = 10*log10(temp(1:NFFT/2+1));</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="comment">% 数据汇总： 被试 * 通道 * 频率</span></span><br><span class="line">        group1_FFT_power(<span class="built_in">i</span>,ii,:) = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(Y,<span class="number">1</span>)); clear Y;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    fprintf(<span class="number">2</span>,<span class="string">&#x27;%s done \n&#x27;</span>,subj_fn);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(group2_files)</span><br><span class="line">    subj_fn = group2_files(<span class="built_in">i</span>).name;</span><br><span class="line">    EEG = pop_loadset([group2_dir, filesep, subj_fn]);</span><br><span class="line">  <span class="comment">%  fprintf(&#x27;====now is processing %s --------\n&#x27;,subj_fn);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ii=<span class="number">1</span>:<span class="built_in">size</span>(EEG.data,<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> jj=<span class="number">1</span>:<span class="built_in">size</span>(EEG.data,<span class="number">3</span>)</span><br><span class="line">            y = <span class="built_in">squeeze</span>(EEG.data(ii,:,jj));</span><br><span class="line"><span class="comment">%             temp = fft(y,NFFT)/ L;</span></span><br><span class="line"><span class="comment">%             Y(jj,:) = 2*abs(temp(1:NFFT/2+1));</span></span><br><span class="line">            </span><br><span class="line">            temp = <span class="number">2</span>*<span class="built_in">abs</span>(fft(y,NFFT)).^<span class="number">2</span>/L/Fs;</span><br><span class="line">            Y(jj,:) = temp(<span class="number">1</span>:NFFT/<span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        group2_FFT_power(<span class="built_in">i</span>,ii,:) = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(Y,<span class="number">1</span>)); clear Y;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    fprintf(<span class="number">2</span>,<span class="string">&#x27;%s done \n&#x27;</span>,subj_fn);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% plot power and scalp maps</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%找出小于30Hz的频率点的位置</span></span><br><span class="line">f_idx = <span class="built_in">find</span>(f &lt;= <span class="number">30</span>);</span><br><span class="line"><span class="comment">%提取小于30Hz的频率值</span></span><br><span class="line">f_plot = f(f_idx);</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">Cz = <span class="number">3</span>;</span><br><span class="line"><span class="comment">%提取所有被试Cz通道小于30Hz的power值、再做组平均，作为纵轴；f_plot作为横轴画图</span></span><br><span class="line"><span class="built_in">plot</span>(f_plot, <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(group1_FFT_power(:,Cz, f_idx),<span class="number">1</span>)),<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1.5</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>(f_plot, <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(group2_FFT_power(:,Cz, f_idx),<span class="number">1</span>)),<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1.5</span>);</span><br><span class="line">title(<span class="string">&#x27;Group level FFT&#x27;</span>, <span class="string">&#x27;fontsize&#x27;</span>, <span class="number">16</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;Frequency&#x27;</span>);</span><br><span class="line"><span class="comment">% ylabel(&#x27;Amplitude&#x27;);</span></span><br><span class="line">ylabel(<span class="string">&#x27;PSD  (uV2/Hz)&#x27;</span>);</span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/1.png" alt="1"><figcaption aria-hidden="true">1</figcaption>
</figure>
<h2 id="每组被试alpha频段的能量在头皮都那些位置能量比较大-组水平地形图code">2. 每组被试Alpha频段的能量在头皮都那些位置能量比较大？ （组水平地形图）Code</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%定义感兴趣的频段（此处为alpha波段）</span></span><br><span class="line">alpha_idx = <span class="built_in">find</span>((f &gt;=<span class="number">8</span>) &amp; (f&lt;=<span class="number">12</span>));</span><br><span class="line"><span class="comment">% 提取各组的所有被试、所有通道、alpha波段的power值，并对被试、波段做平均</span></span><br><span class="line">group1_alpha_mag_avg = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(<span class="built_in">mean</span>(group1_FFT_power(:,:,alpha_idx),<span class="number">3</span>),<span class="number">1</span>));</span><br><span class="line">group2_alpha_mag_avg = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(<span class="built_in">mean</span>(group2_FFT_power(:,:,alpha_idx),<span class="number">3</span>),<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">subplot(<span class="number">121</span>); topoplot(group1_alpha_mag_avg, EEG.chanlocs,<span class="string">&#x27;maplimits&#x27;</span>,[<span class="number">0</span> <span class="number">4</span>]); title(<span class="string">&#x27;Group1&#x27;</span>, <span class="string">&#x27;fontsize&#x27;</span>, <span class="number">16</span>);</span><br><span class="line">subplot(<span class="number">122</span>); topoplot(group2_alpha_mag_avg, EEG.chanlocs,<span class="string">&#x27;maplimits&#x27;</span>,[<span class="number">0</span> <span class="number">4</span>]); title(<span class="string">&#x27;Group2&#x27;</span>, <span class="string">&#x27;fontsize&#x27;</span>, <span class="number">16</span>);</span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/2.png" alt="2"><figcaption aria-hidden="true">2</figcaption>
</figure>
<h2 id="两组被试的频谱能量在那些频段存在显著差异code">3. 两组被试的频谱能量在那些频段存在显著差异？Code</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% Specify (ROI) channels and compare across frequency points</span></span><br><span class="line"><span class="comment">%选定感兴趣的通道</span></span><br><span class="line">Pz = <span class="number">10</span>;</span><br><span class="line"><span class="comment">%挑选各组所有被试Pz通道所有频率点的power值</span></span><br><span class="line"><span class="comment">%被试 *  频率</span></span><br><span class="line">group1_data = <span class="built_in">squeeze</span>(group1_FFT_power(:,Pz,:));</span><br><span class="line">group2_data = <span class="built_in">squeeze</span>(group2_FFT_power(:,Pz,:));</span><br><span class="line"></span><br><span class="line"><span class="comment">%只分析30Hz以下的频段</span></span><br><span class="line">f_idx = <span class="built_in">find</span>(f&lt;=<span class="number">30</span>);</span><br><span class="line">f_band = f(f_idx);</span><br><span class="line"><span class="comment">%对于每一个频率点</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(f_band)</span><br><span class="line">    <span class="comment">%挑选第一(二）组所有被试在第i个频率点上的power值</span></span><br><span class="line">    data1 = group1_data(:,<span class="built_in">i</span>);</span><br><span class="line">    data2 = group2_data(:,<span class="built_in">i</span>);</span><br><span class="line">    <span class="comment">%做双样本T检验</span></span><br><span class="line">    [h,p,ci,stat] = ttest2(data1,data2);</span><br><span class="line">    <span class="comment">%存储p值、T值</span></span><br><span class="line">    pvals(<span class="built_in">i</span>) = p;</span><br><span class="line">    tvals(<span class="built_in">i</span>) = stat.tstat;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line"><span class="built_in">plot</span>(f_band, pvals);</span><br><span class="line">ylim([<span class="number">0</span> <span class="number">0.05</span>]);</span><br><span class="line">xlim([<span class="number">0</span> <span class="number">30</span>]);</span><br><span class="line">title(<span class="string">&#x27;P Values&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;Frequency&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;p&#x27;</span>);</span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/3.png" alt="3"><figcaption aria-hidden="true">3</figcaption>
</figure>
<h2 id="两组被试alpha频段能量在头皮的那些区域存在显著差异code">4. 两组被试Alpha频段能量在头皮的那些区域存在显著差异？Code</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% Specify (ROI) frequency band and compare across channels</span></span><br><span class="line">clear pvals tvals;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 定义频域8 ~ 12Hz</span></span><br><span class="line">f_ROI = <span class="built_in">find</span>((f&gt;=<span class="number">8</span>) &amp; (f&lt;=<span class="number">12</span>));</span><br><span class="line"><span class="comment">%提取 各组 所有被试 所有通道 alpha频段的power， 对频段做平均</span></span><br><span class="line"><span class="comment">% 被试 * 通道</span></span><br><span class="line">group1_data = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(group1_FFT_power(:,:,f_ROI),<span class="number">3</span>));</span><br><span class="line">group2_data = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(group2_FFT_power(:,:,f_ROI),<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">%对于每一个通道</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:EEG.nbchan</span><br><span class="line">    <span class="comment">%提取组一(组二）当前通道的power</span></span><br><span class="line">    data1 = group1_data(:,<span class="built_in">i</span>);</span><br><span class="line">    data2 = group2_data(:,<span class="built_in">i</span>);</span><br><span class="line">    <span class="comment">% 双样本T检验</span></span><br><span class="line">    [h,p,ci,stat] = ttest2(data1,data2);</span><br><span class="line">    <span class="comment">% 存储p值、T值</span></span><br><span class="line">    pvals(<span class="built_in">i</span>) = p;</span><br><span class="line">    tvals(<span class="built_in">i</span>) = stat.tstat;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">topoplot(tvals, EEG.chanlocs,<span class="string">&#x27;maplimits&#x27;</span>,[<span class="number">0</span>,<span class="number">2</span>]); </span><br><span class="line">title(<span class="string">&#x27;Alpha Band&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">16</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/4-1616145095754.png" alt="4"><figcaption aria-hidden="true">4</figcaption>
</figure>
<h2 id="保存数据">保存数据</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% Save power of different frequency bands</span></span><br><span class="line">group1_alpha_mag = double(<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(group1_FFT_power(:,:,alpha_idx),<span class="number">3</span>)));</span><br><span class="line">group2_alpha_mag = double(<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(group2_FFT_power(:,:,alpha_idx),<span class="number">3</span>)));</span><br><span class="line"></span><br><span class="line">save(<span class="string">&#x27;alpha_power.mat&#x27;</span>,<span class="string">&#x27;group1_alpha_mag&#x27;</span>,<span class="string">&#x27;group2_alpha_mag&#x27;</span>);</span><br><span class="line">save(<span class="string">&#x27;group1_alpha.txt&#x27;</span>, <span class="string">&#x27;-ascii&#x27;</span>, <span class="string">&#x27;group1_alpha_mag&#x27;</span>);</span><br><span class="line">save(<span class="string">&#x27;group2_alpha.txt&#x27;</span>, <span class="string">&#x27;-ascii&#x27;</span>, <span class="string">&#x27;group2_alpha_mag&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h1 id="参数检验正态分布效果好">参数检验（正态分布效果好）：</h1>
<h2 id="t检验">T检验：</h2>
<ol type="1">
<li><p>单样本T检验： 一组被试数据 和 某个数值作比较 ttest</p></li>
<li><p>配对T检验： 一组被试两种不同条件的数据作比较（刺激1 vs 刺激2；干预前 vs 干预后） ttest</p></li>
<li><p>双样本T检验： 两个独立分组的被试的数据作比较 （实验组 vs 对照组） ttest2</p></li>
</ol>
<h1 id="方差分析">方差分析</h1>
<h2 id="f检验">F检验</h2>
<ol start="4" type="1">
<li><p>单因素方差分析： 多个(&gt;=2) 独立分组的被试的数据的比较 （实验组1 vs 实验组2 vs 对照组） anova1</p></li>
<li><p>单因素重复测量方差分析： 一组被试多种 (&gt;=2) 不同条件的数据的比较 （刺激1 vs 刺激2 vs 刺激3；前测 vs 中测 vs 后测）anova_rm</p></li>
<li><p>两因素方差分析： （疾病：患者、对照； 性别：男、女 问题： 患者相对于对照的变化，是否会随着性别的改变而改变？）anova2</p></li>
<li><p>两因素混合方差分析：（干预方式：干预组、对照组； 时间：前测、后测。 问题：后测相对于前测的差异 会不会 随着干预方式的改变而改变？） mixed_anova</p></li>
</ol>
<h1 id="非参数检验非正态分布效果好">非参数检验（非正态分布效果好）</h1>
<ol start="8" type="1">
<li>置换检验、BootStrap等</li>
</ol>
<h1 id="时频分析">时频分析</h1>
<p>一组被试，四种条件的ER数据</p>
<p>四种条件：L1,L2,L3,L4</p>
<p>通道数量59个 ，采样率1000Hz，3s一段（-1s — 2s）</p>
<h1 id="问题-1">问题：</h1>
<h2 id="各频带能量随时间变化如何刺激后相对于刺激前各频带有无能量变化变高-or-变低在那个频带code">1 各频带能量随时间变化如何？刺激后相对于刺激前各频带有无能量变化？（变高 or 变低？在那个频带？）Code</h2>
<p><strong>单个被试、单个通道时频变换结果的汇总</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 单个被试、单个通道时频变换结果的汇总</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">%导入一例被试的数据</span></span><br><span class="line">filename = <span class="string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day3\Example_data\1_LH.set&#x27;</span>; </span><br><span class="line">EEG = pop_loadset(filename);</span><br><span class="line"></span><br><span class="line"><span class="comment">%提取某个通道的数据</span></span><br><span class="line"><span class="comment">%  x： 时间点*分段        （EEG.data  通道*时间点*分段）</span></span><br><span class="line">x = <span class="built_in">squeeze</span>(EEG.data(<span class="number">29</span>,:,:)); </span><br><span class="line"></span><br><span class="line"><span class="comment">%分段时间范围</span></span><br><span class="line">xtimes=EEG.times/<span class="number">1000</span>;  </span><br><span class="line"><span class="comment">%时频结果的  时间分辨率</span></span><br><span class="line">t=EEG.times/<span class="number">1000</span>;</span><br><span class="line"><span class="comment">%时频结果的  频域分辨率</span></span><br><span class="line">f=<span class="number">1</span>:<span class="number">1</span>:<span class="number">30</span>;  </span><br><span class="line"><span class="comment">%数据采样率</span></span><br><span class="line">Fs = EEG.srate;</span><br><span class="line"><span class="comment">%窗长   （如果分段时间较短，窗长可以适当缩短；</span></span><br><span class="line"><span class="comment">%在段的起始、结束处，时频变换的结果不是绝对精准的，因为做了补0操作）</span></span><br><span class="line">winsize = <span class="number">0.200</span>; </span><br><span class="line"><span class="comment">%时频变换 （短时傅里叶变换）</span></span><br><span class="line"><span class="comment">%P ， 频率 *  时间 * 分段  （Power）</span></span><br><span class="line">[S, P, F, U] = sub_stft(x, xtimes, t, f, Fs, winsize); </span><br><span class="line"><span class="comment">%P_data  分段平均后的结果   频率*时间</span></span><br><span class="line">P_data=<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(P,<span class="number">3</span>)); </span><br><span class="line"></span><br><span class="line"><span class="comment">%对时频结果，减基线（凸显ERD/ERS）  </span></span><br><span class="line"><span class="comment">% 刺激后能量-刺激前能量</span></span><br><span class="line"><span class="comment">%选择基线范围，刺激前0.8 ~0.2毫秒，避免了窗长问题</span></span><br><span class="line">t_pre_idx=<span class="built_in">find</span>((t&gt;=<span class="number">-0.8</span>)&amp;(t&lt;=<span class="number">-0.2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">% 对于每一个频率点</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">size</span>(P_data,<span class="number">1</span>)</span><br><span class="line">    <span class="comment">%提取该频率点所有时刻的power</span></span><br><span class="line">    temp_data=<span class="built_in">squeeze</span>(P_data(<span class="built_in">i</span>,:));</span><br><span class="line">    <span class="comment">%该频率点所有时刻的power  减去   基线时间段的power的均值</span></span><br><span class="line">    P_BC(<span class="built_in">i</span>,:)=temp_data-<span class="built_in">mean</span>(temp_data(t_pre_idx)); </span><br><span class="line">    <span class="comment">%P_BC，基线校正后的结果，频率*时间点</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;  </span><br><span class="line"><span class="comment">%绘制 未做基线校正的时频图</span></span><br><span class="line">subplot(<span class="number">211</span>); imagesc(t,f,P_data); axis xy; </span><br><span class="line"><span class="built_in">hold</span> on;  axis xy; colorbar;</span><br><span class="line">xlabel(<span class="string">&#x27;Time (ms)&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>); ylabel(<span class="string">&#x27;Frequency (Hz)&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>); </span><br><span class="line">title(<span class="string">&#x27;TFR (without baseline correction)&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">15</span>);</span><br><span class="line"><span class="comment">%绘制基线校正后的时频图</span></span><br><span class="line">subplot(<span class="number">212</span>); imagesc(t,f,P_BC); axis xy; </span><br><span class="line"><span class="built_in">hold</span> on;  axis xy; colorbar; <span class="comment">%caxis([-0.8 2]);</span></span><br><span class="line">xlabel(<span class="string">&#x27;Time (ms)&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>); ylabel(<span class="string">&#x27;Frequency (Hz)&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>); </span><br><span class="line">title(<span class="string">&#x27;Baseline-corrected TFR&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">15</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/1-1616159128073.png" alt="1"><figcaption aria-hidden="true">1</figcaption>
</figure>
<p><strong>单个被试、多个通道时频变换结果的汇总</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%  time-frequency of single subject at several electrodes</span></span><br><span class="line">clear;clc</span><br><span class="line"><span class="comment">%单个被试多个通道时频变换结果汇总</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day3\Example_data\1_LH.set&#x27;</span>; </span><br><span class="line">EEG = pop_loadset(filename);</span><br><span class="line"><span class="keyword">for</span> nchan=<span class="number">1</span>:EEG.nbchan</span><br><span class="line">    x = <span class="built_in">squeeze</span>(EEG.data(nchan,:,:)); <span class="comment">%3000*40</span></span><br><span class="line">    xtimes=EEG.times/<span class="number">1000</span>;  <span class="comment">%3000点</span></span><br><span class="line">    t=EEG.times/<span class="number">1000</span>;  <span class="comment">%时间3000点</span></span><br><span class="line">    f=<span class="number">1</span>:<span class="number">1</span>:<span class="number">30</span>;   <span class="comment">%频率30点</span></span><br><span class="line">    Fs = EEG.srate;  <span class="comment">%采样率</span></span><br><span class="line">    winsize = <span class="number">0.200</span>;   </span><br><span class="line">    [S, P, F, U] = sub_stft(x, xtimes, t, f, Fs, winsize); </span><br><span class="line">    <span class="comment">% 通道 *  频率 * 时间点</span></span><br><span class="line">    P_data(nchan,:,:)=<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(P,<span class="number">3</span>));   <span class="comment">%P (30  3000 40) ==&gt;  (30  3000)</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%对于每个通道、每个频率点  都做基线校正</span></span><br><span class="line">t_pre_idx=<span class="built_in">find</span>((t&gt;=<span class="number">-0.8</span>)&amp;(t&lt;=<span class="number">-0.2</span>));</span><br><span class="line"><span class="comment">%对于每一个通道</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">size</span>(P_data,<span class="number">1</span>)</span><br><span class="line">    <span class="comment">%对于每一个频率点</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="built_in">size</span>(P_data,<span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">%减基线</span></span><br><span class="line">        temp_data=<span class="built_in">squeeze</span>(P_data(<span class="built_in">i</span>,<span class="built_in">j</span>,:));</span><br><span class="line">        P_BC(<span class="built_in">i</span>,<span class="built_in">j</span>,:)=temp_data-<span class="built_in">mean</span>(temp_data(t_pre_idx)); </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">channel_plot=<span class="number">29</span>; </span><br><span class="line"><span class="built_in">figure</span>;  </span><br><span class="line">subplot(<span class="number">211</span>); imagesc(t,f,<span class="built_in">squeeze</span>(P_data(channel_plot,:,:))); axis xy; </span><br><span class="line"><span class="built_in">hold</span> on;  axis xy; colorbar;</span><br><span class="line">xlabel(<span class="string">&#x27;Time (ms)&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>); ylabel(<span class="string">&#x27;Frequency (Hz)&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>); </span><br><span class="line">title(<span class="string">&#x27;TFR (without baseline correction)&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">15</span>);</span><br><span class="line">subplot(<span class="number">212</span>); imagesc(t,f,<span class="built_in">squeeze</span>(P_BC(channel_plot,:,:))); axis xy; </span><br><span class="line"><span class="built_in">hold</span> on;  axis xy; colorbar; <span class="comment">%caxis([-0.8 2]);</span></span><br><span class="line">xlabel(<span class="string">&#x27;Time (ms)&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>); ylabel(<span class="string">&#x27;Frequency (Hz)&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>); </span><br><span class="line">title(<span class="string">&#x27;Baseline-corrected TFR&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">ROI1_t=[<span class="number">-0.8</span> <span class="number">-0.2</span>]; ROI1_f=[<span class="number">8</span> <span class="number">13</span>];</span><br><span class="line">ROI1_t_idx=<span class="built_in">find</span>((t&gt;=ROI1_t(<span class="number">1</span>))&amp;(t&lt;=ROI1_t(<span class="number">2</span>)));</span><br><span class="line">ROI1_f_idx=<span class="built_in">find</span>((f&gt;=ROI1_f(<span class="number">1</span>))&amp;(f&lt;=ROI1_f(<span class="number">2</span>)));</span><br><span class="line">Pre_alpha=<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(<span class="built_in">mean</span>(P_data(:,ROI1_f_idx,ROI1_t_idx),<span class="number">2</span>),<span class="number">3</span>)); </span><br><span class="line"></span><br><span class="line">ROI2_t=[<span class="number">1</span> <span class="number">1.5</span>];ROI2_f=[<span class="number">8</span> <span class="number">13</span>];</span><br><span class="line">ROI2_t_idx=<span class="built_in">find</span>((t&gt;=ROI2_t(<span class="number">1</span>))&amp;(t&lt;=ROI2_t(<span class="number">2</span>)));</span><br><span class="line">ROI2_f_idx=<span class="built_in">find</span>((f&gt;=ROI2_f(<span class="number">1</span>))&amp;(f&lt;=ROI2_f(<span class="number">2</span>)));</span><br><span class="line">Post_alpha=<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(<span class="built_in">mean</span>(P_data(:,ROI2_f_idx,ROI2_t_idx),<span class="number">2</span>),<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>; </span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line">topoplot(Pre_alpha,EEG.chanlocs); </span><br><span class="line">title(<span class="string">&#x27;Prestimulus alpha&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">topoplot(Post_alpha,EEG.chanlocs); </span><br><span class="line">title(<span class="string">&#x27;Postimulus alpha&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">topoplot(Post_alpha-Pre_alpha,EEG.chanlocs); </span><br><span class="line">title(<span class="string">&#x27;difference&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">10</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/2-1616159291022.png" alt="2"><figcaption aria-hidden="true">2</figcaption>
</figure>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/3-1616159296791.png" alt="3"><figcaption aria-hidden="true">3</figcaption>
</figure>
<p><strong>多个被试、多个通道时频变换结果的汇总</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% time-frequency analysis of several subjects</span></span><br><span class="line">clear;clc;</span><br><span class="line">Subj=[<span class="number">1</span>:<span class="number">10</span>];</span><br><span class="line"><span class="comment">% 对于每个被试</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(Subj)<span class="comment">%;length(Subj)</span></span><br><span class="line">    setname=strcat(num2str(<span class="built_in">i</span>),<span class="string">&#x27;_LH.set&#x27;</span>); </span><br><span class="line">    setpath=<span class="string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day3\Example_data&#x27;</span>; </span><br><span class="line">    EEG = pop_loadset(<span class="string">&#x27;filename&#x27;</span>,setname,<span class="string">&#x27;filepath&#x27;</span>,setpath); </span><br><span class="line">    <span class="comment">% 对于每个通道</span></span><br><span class="line">    <span class="keyword">for</span> nchan=<span class="number">1</span>:EEG.nbchan; </span><br><span class="line">        x = <span class="built_in">squeeze</span>(EEG.data(nchan,:,:)); <span class="comment">%3000 * 40</span></span><br><span class="line">        xtimes=EEG.times/<span class="number">1000</span>;  </span><br><span class="line">        t=EEG.times/<span class="number">1000</span>;</span><br><span class="line">        f=<span class="number">1</span>:<span class="number">0.5</span>:<span class="number">30</span>;</span><br><span class="line">        Fs = EEG.srate;</span><br><span class="line">        winsize = <span class="number">0.200</span>; </span><br><span class="line">        [S, P, F, U] = sub_stft(x, xtimes, t, f, Fs, winsize); </span><br><span class="line">        <span class="comment">%  被试*通道*频率*时间点</span></span><br><span class="line">        P_data(<span class="built_in">i</span>,nchan,:,:)=<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(P,<span class="number">3</span>));   <span class="comment">%subs * chls * f * times</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 对于每个被试、每个通道、每个频率点，都做减基线的操作</span></span><br><span class="line">t_pre_idx=<span class="built_in">find</span>((t&gt;=<span class="number">-0.8</span>)&amp;(t&lt;=<span class="number">-0.2</span>));</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">size</span>(P_data,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="built_in">size</span>(P_data,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">for</span> k=<span class="number">1</span>:<span class="built_in">size</span>(P_data,<span class="number">3</span>)</span><br><span class="line">            temp_data=<span class="built_in">squeeze</span>(P_data(<span class="built_in">i</span>,<span class="built_in">j</span>,k,:));</span><br><span class="line">            P_BC(<span class="built_in">i</span>,<span class="built_in">j</span>,k,:)=temp_data-<span class="built_in">mean</span>(temp_data(t_pre_idx)); </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">channel_plot=<span class="number">29</span>; </span><br><span class="line"><span class="built_in">figure</span>;  </span><br><span class="line"><span class="comment">% 对于多个被试汇总的结果，可以刻画组平均的时频图   第29通道的组平均（基线校正前）</span></span><br><span class="line">subplot(<span class="number">211</span>); imagesc(t,f,<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(P_data(:,channel_plot,:,:),<span class="number">1</span>))); axis xy; </span><br><span class="line"><span class="built_in">hold</span> on;  axis xy; colorbar;</span><br><span class="line">xlabel(<span class="string">&#x27;Time (ms)&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>); ylabel(<span class="string">&#x27;Frequency (Hz)&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>); </span><br><span class="line">title(<span class="string">&#x27;TFR (without baseline correction)&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">15</span>);</span><br><span class="line"><span class="comment">% 第29通道的组平均（基线校正后）</span></span><br><span class="line">subplot(<span class="number">212</span>); imagesc(t,f,<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(P_BC(:,channel_plot,:,:),<span class="number">1</span>))); axis xy; </span><br><span class="line"><span class="built_in">hold</span> on;  axis xy; colorbar; <span class="comment">%caxis([-0.8 2]);</span></span><br><span class="line">xlabel(<span class="string">&#x27;Time (ms)&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>); ylabel(<span class="string">&#x27;Frequency (Hz)&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">12</span>); </span><br><span class="line">title(<span class="string">&#x27;Baseline-corrected TFR&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">ROI1_t=[<span class="number">0.2</span> <span class="number">0.4</span>]; ROI1_f=[<span class="number">1</span> <span class="number">10</span>];</span><br><span class="line">ROI1_t_idx=<span class="built_in">find</span>((t&gt;=ROI1_t(<span class="number">1</span>))&amp;(t&lt;=ROI1_t(<span class="number">2</span>)));</span><br><span class="line">ROI1_f_idx=<span class="built_in">find</span>((f&gt;=ROI1_f(<span class="number">1</span>))&amp;(f&lt;=ROI1_f(<span class="number">2</span>)));</span><br><span class="line"><span class="comment">%多个被试结果汇总后，可以刻画 组平均地形图</span></span><br><span class="line">TFD_plot=<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(<span class="built_in">mean</span>(<span class="built_in">mean</span>(P_BC(:,:,ROI1_f_idx,ROI1_t_idx),<span class="number">1</span>),<span class="number">3</span>),<span class="number">4</span>)); </span><br><span class="line"><span class="built_in">figure</span>; topoplot(TFD_plot,EEG.chanlocs); title(<span class="string">&#x27;ROI1 Magnitude&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">ROI2_t=[<span class="number">1.2</span> <span class="number">1.6</span>];ROI2_f=[<span class="number">8</span> <span class="number">13</span>];</span><br><span class="line">ROI2_t_idx=<span class="built_in">find</span>((t&gt;=ROI2_t(<span class="number">1</span>))&amp;(t&lt;=ROI2_t(<span class="number">2</span>)));</span><br><span class="line">ROI2_f_idx=<span class="built_in">find</span>((f&gt;=ROI2_f(<span class="number">1</span>))&amp;(f&lt;=ROI2_f(<span class="number">2</span>)));</span><br><span class="line">TFD_plot=<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(<span class="built_in">mean</span>(<span class="built_in">mean</span>(P_BC(:,:,ROI2_f_idx,ROI2_t_idx),<span class="number">1</span>),<span class="number">3</span>),<span class="number">4</span>)); </span><br><span class="line"><span class="built_in">figure</span>; topoplot(TFD_plot,EEG.chanlocs); title(<span class="string">&#x27;ROI2 Magnitude&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">16</span>);</span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/3_1.png" alt="3_1"><figcaption aria-hidden="true">3_1</figcaption>
</figure>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/3_2.png" alt="3_2"><figcaption aria-hidden="true">3_2</figcaption>
</figure>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/3_3.png" alt="3_3"><figcaption aria-hidden="true">3_3</figcaption>
</figure>
<h2 id="不同条件的刺激-诱发的-能量的变化程度是否一致-code">2 不同条件的刺激 诱发的 能量的变化程度是否一致？ Code</h2>
<p><strong>比较L3 L4</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% time-frequency analysis  of multiple subjects and conditions</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%对于每个被试</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(Subj)</span><br><span class="line">    setname=strcat(num2str(<span class="built_in">i</span>),<span class="string">&#x27;_LH.set&#x27;</span>); </span><br><span class="line">    setpath=<span class="string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day3\Example_data\&#x27;; </span></span><br><span class="line"><span class="string">    EEG= pop_loadset(&#x27;</span>filename&#x27;,setname,<span class="string">&#x27;filepath&#x27;</span>,setpath); </span><br><span class="line">    EEG= eeg_checkset( EEG );</span><br><span class="line">    <span class="comment">%对于每个条件</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="built_in">length</span>(Cond)</span><br><span class="line">        EEG_new = pop_epoch( EEG, Cond(<span class="built_in">j</span>), [<span class="number">-1</span>  <span class="number">2</span>], <span class="string">&#x27;newname&#x27;</span>, <span class="string">&#x27;Merged datasets pruned with ICA   epochs epochs&#x27;</span>, <span class="string">&#x27;epochinfo&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>); </span><br><span class="line">        EEG_new = eeg_checkset( EEG_new );</span><br><span class="line">        EEG_new = pop_rmbase( EEG_new, [<span class="number">-1000</span>     <span class="number">0</span>]); </span><br><span class="line">        EEG_new = eeg_checkset( EEG_new );</span><br><span class="line">        <span class="comment">%对于每个通道</span></span><br><span class="line">        <span class="keyword">for</span> nchan=<span class="number">1</span>:<span class="built_in">size</span>(EEG_new.data,<span class="number">1</span>)</span><br><span class="line">            x = <span class="built_in">squeeze</span>(EEG_new.data(nchan,:,:)); </span><br><span class="line">            xtimes=EEG_new.times/<span class="number">1000</span>; </span><br><span class="line">            t=EEG_new.times/<span class="number">1000</span>;</span><br><span class="line">            f=<span class="number">1</span>:<span class="number">1</span>:<span class="number">30</span>; </span><br><span class="line">            Fs = EEG.srate;</span><br><span class="line">            winsize = <span class="number">0.200</span>; </span><br><span class="line">            [S, P, F, U] = sub_stft(x, xtimes, t, f, Fs, winsize); </span><br><span class="line">            <span class="comment">%被试 *  条件  *  通道 * 频率 * 时间</span></span><br><span class="line">            P_data(<span class="built_in">i</span>,<span class="built_in">j</span>,nchan,:,:)=<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(P,<span class="number">3</span>));</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">t_pre_idx=<span class="built_in">find</span>((t&gt;=<span class="number">-0.8</span>)&amp;(t&lt;=<span class="number">-0.2</span>));</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">size</span>(P_data,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="built_in">size</span>(P_data,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">for</span> ii=<span class="number">1</span>:<span class="built_in">size</span>(P_data,<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">for</span> jj=<span class="number">1</span>:<span class="built_in">size</span>(P_data,<span class="number">4</span>)</span><br><span class="line">                temp_data=<span class="built_in">squeeze</span>(P_data(<span class="built_in">i</span>,<span class="built_in">j</span>,ii,jj,:));</span><br><span class="line">                P_BC(<span class="built_in">i</span>,<span class="built_in">j</span>,ii,jj,:)=temp_data-<span class="built_in">mean</span>(temp_data(t_pre_idx));</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">imagesc(t,f, <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(P_data(:,<span class="number">3</span>,<span class="number">29</span>,:,:))));</span><br><span class="line">axis xy;</span><br><span class="line"><span class="built_in">figure</span>;s</span><br><span class="line">imagesc(t,f,<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(P_BC(:,<span class="number">3</span>,<span class="number">29</span>,:,:))));</span><br><span class="line">axis xy;</span><br><span class="line"></span><br><span class="line">t_idx = <span class="built_in">find</span>((t&gt;=<span class="number">1</span>) &amp; (t&lt;=<span class="number">1.5</span>));</span><br><span class="line">f_idx = <span class="built_in">find</span>((f&gt;=<span class="number">8</span>) &amp; (f&lt;=<span class="number">13</span>));</span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">topoplot(<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(<span class="built_in">mean</span>(<span class="built_in">mean</span>(P_BC(:,<span class="number">3</span>,:,f_idx,t_idx),<span class="number">1</span>),<span class="number">4</span>),<span class="number">5</span>)), EEG.chanlocs, <span class="string">&#x27;maplimits&#x27;</span>,[<span class="number">-1</span> <span class="number">0.5</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>基线校正前</p>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/4_1-1616205411027.png" alt="4_1"><figcaption aria-hidden="true">4_1</figcaption>
</figure>
<p>基线校正后</p>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/4_2-1616205415448.png" alt="4_2"><figcaption aria-hidden="true">4_2</figcaption>
</figure>
<p>地形图</p>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/4_3-1616205418497.png" alt="4_3"><figcaption aria-hidden="true">4_3</figcaption>
</figure>
<p>T检验 anova</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% ttest for each time-frequency point</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% P_data: 被试 * 条件 * 通道 * 频率 * 时间点</span></span><br><span class="line"><span class="comment">% 提取所有被试、所有条件、13号通道（空间ROI、Cz）、所有频率、所有时间的power</span></span><br><span class="line"><span class="comment">%: data_test： 被试 *  条件 * 频率 *  时间点</span></span><br><span class="line">data_test=<span class="built_in">squeeze</span>(P_data(:,:,<span class="number">13</span>,:,:)); <span class="comment">%% select the data at Cz, data_test: subj*cond*frequency*time</span></span><br><span class="line"><span class="comment">%对于每一个频率点</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">size</span>(data_test,<span class="number">3</span>)</span><br><span class="line">    <span class="comment">%对于每一个时间点</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="built_in">size</span>(data_test,<span class="number">4</span>)</span><br><span class="line">        <span class="comment">% 挑选第一种条件的数据</span></span><br><span class="line">        data_1=<span class="built_in">squeeze</span>(data_test(:,<span class="number">3</span>,<span class="built_in">i</span>,<span class="built_in">j</span>)); <span class="comment">%% select condition L3 for each time-frequency point</span></span><br><span class="line">        <span class="comment">%挑选第二种条件的数据</span></span><br><span class="line">        data_2=<span class="built_in">squeeze</span>(data_test(:,<span class="number">4</span>,<span class="built_in">i</span>,<span class="built_in">j</span>)); <span class="comment">%% select condition L4 for each time-frequency point</span></span><br><span class="line">        <span class="comment">% 配对T检验</span></span><br><span class="line">        [h,p,ci,stats]=ttest(data_1,data_2); <span class="comment">%% ttest comparison</span></span><br><span class="line">        <span class="comment">% 存储第i个频率点、第j个时间点的p值</span></span><br><span class="line">        P_ttest(<span class="built_in">i</span>,<span class="built_in">j</span>)=p; <span class="comment">%% save the p value from ttest</span></span><br><span class="line">        <span class="comment">%  存储T值</span></span><br><span class="line">        T_ttest(<span class="built_in">i</span>,<span class="built_in">j</span>)=stats.tstat; <span class="comment">%% save the t value from ttest</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%对于每一个时频点</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">size</span>(data_test,<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="built_in">size</span>(data_test,<span class="number">4</span>)</span><br><span class="line">        <span class="comment">% 挑选所有条件的数据</span></span><br><span class="line">        data_anova=<span class="built_in">squeeze</span>(data_test(:,:,<span class="built_in">i</span>,<span class="built_in">j</span>)); <span class="comment">%% select the data at time-frequency point</span></span><br><span class="line">        <span class="comment">%重复测量方差分析</span></span><br><span class="line">        [p, <span class="built_in">table</span>] = anova_rm(data_anova,<span class="string">&#x27;off&#x27;</span>);  <span class="comment">%% perform repeated measures ANOVA</span></span><br><span class="line">        <span class="comment">%存储各时频点的p值</span></span><br><span class="line">        P_anova(<span class="built_in">i</span>,<span class="built_in">j</span>)=p(<span class="number">1</span>); <span class="comment">%% save the data from ANOVA</span></span><br><span class="line">        <span class="comment">% 存储F值</span></span><br><span class="line">         F_anova(<span class="built_in">i</span>,<span class="built_in">j</span>)=<span class="built_in">table</span>&#123;<span class="number">2</span>,<span class="number">5</span>&#125;; <span class="comment">%% F value from ANOVA</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%% T检验</span></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">imagesc(t,f,<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(<span class="built_in">mean</span>(P_BC(:,:,<span class="number">13</span>,:,:),<span class="number">1</span>),<span class="number">2</span>)));</span><br><span class="line">axis xy; title(<span class="string">&#x27;Power Baseline Corrected&#x27;</span>); colorbar();</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">imagesc(t,f,P_ttest);</span><br><span class="line">axis xy; title(<span class="string">&#x27;P values&#x27;</span>);colorbar();</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">imagesc(t,f,T_ttest);</span><br><span class="line">axis xy; title(<span class="string">&#x27;T values&#x27;</span>);colorbar();</span><br><span class="line"></span><br><span class="line"><span class="comment">%% Visualization</span></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">imagesc(t,f,<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(<span class="built_in">mean</span>(P_BC(:,:,<span class="number">13</span>,:,:),<span class="number">1</span>),<span class="number">2</span>)));</span><br><span class="line">axis xy; title(<span class="string">&#x27;Power Baseline Corrected&#x27;</span>); colorbar();</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">imagesc(t,f,P_anova);</span><br><span class="line">axis xy; title(<span class="string">&#x27;P values&#x27;</span>);colorbar();</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">imagesc(t,f,F_anova);</span><br><span class="line">axis xy; title(<span class="string">&#x27;F values&#x27;</span>);colorbar();</span><br></pre></td></tr></table></figure>
<p>ttest</p>
<ol type="1">
<li>刺激后相对于刺激前能量变化</li>
<li>看显著差异</li>
<li>L4 &gt; L3</li>
</ol>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/5.png" alt="5"><figcaption aria-hidden="true">5</figcaption>
</figure>
<p>anova</p>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/6.png" alt="6"><figcaption aria-hidden="true">6</figcaption>
</figure>
<h2 id="如果不同条件诱发的-特定频段能量的变化程度-不一致那么这种不一致主要体现在头皮的哪些区域-code">3 如果不同条件诱发的 特定频段能量的变化程度 不一致，那么这种不一致主要体现在头皮的哪些区域？ Code</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%  stastics across channels</span></span><br><span class="line">t_idx = <span class="built_in">find</span>((t&gt;=<span class="number">1</span>) &amp; (t&lt;=<span class="number">1.5</span>));</span><br><span class="line">f_idx = <span class="built_in">find</span>((f&gt;=<span class="number">8</span>) &amp; (f&lt;=<span class="number">13</span>));</span><br><span class="line">data_test=<span class="built_in">squeeze</span>(<span class="built_in">mean</span>(<span class="built_in">mean</span>(P_BC(:,:,:,f_idx,t_idx),<span class="number">4</span>),<span class="number">5</span>)); </span><br><span class="line"><span class="comment">% ttest</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:EEG.nbchan</span><br><span class="line">    data1 = data_test(:,<span class="number">3</span>,<span class="built_in">i</span>);</span><br><span class="line">    data2 = data_test(:,<span class="number">4</span>,<span class="built_in">i</span>);</span><br><span class="line">    [~,p,~,stat] = ttest(data1,data2);</span><br><span class="line">    Pvals_ch(<span class="built_in">i</span>) = p;</span><br><span class="line">    Tvals_ch(<span class="built_in">i</span>) = stat.tstat;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">topoplot(Tvals_ch, EEG.chanlocs);</span><br><span class="line"></span><br><span class="line"><span class="comment">% anova</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:EEG.nbchan</span><br><span class="line">    data_anova = data_test(:,:,<span class="built_in">i</span>);</span><br><span class="line">    [p, <span class="built_in">table</span>] = anova_rm(data_anova,<span class="string">&#x27;off&#x27;</span>);</span><br><span class="line">    Pvals_anova(<span class="built_in">i</span>) = p(<span class="number">1</span>);</span><br><span class="line">    Fvals_anova(<span class="built_in">i</span>) = <span class="built_in">table</span>&#123;<span class="number">2</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">topoplot(Fvals_anova, EEG.chanlocs);</span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/6_1.png" alt="6_1"><figcaption aria-hidden="true">6_1</figcaption>
</figure>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/6_2.png" alt="6_2"><figcaption aria-hidden="true">6_2</figcaption>
</figure>
<p>多重比较校正</p>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/image-20210320111644312.png" alt="image-20210320111644312"><figcaption aria-hidden="true">image-20210320111644312</figcaption>
</figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% fdr correction to account for multiple comparisons</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%对配对T检验的结果 做FDR校正（p_fdr1 ： fdr显著性阈值； p_masked，表示p值是否通过校正</span></span><br><span class="line">[p_fdr1, p_masked] = fdr(P_ttest, <span class="number">0.05</span>); <span class="comment">%% fdr correction for p values from ttest</span></span><br><span class="line"><span class="comment">% 绘制p值图（时间横轴、频率为纵轴）； 只显示通过校正的结果</span></span><br><span class="line"><span class="built_in">figure</span>; imagesc(t,f,P_ttest); axis xy; caxis([<span class="number">0</span> p_fdr1]); </span><br><span class="line"></span><br><span class="line"><span class="comment">% 对方差分析的结果做FDR 校正</span></span><br><span class="line">[p_fdr2, p_masked] = fdr(P_anova, <span class="number">0.05</span>);<span class="comment">%% fdr correction for p values from ANOVA</span></span><br><span class="line"><span class="built_in">figure</span>; imagesc(t,f,P_anova); axis xy; caxis([<span class="number">0</span> p_fdr2]); <span class="comment">% 颜色限制caxis</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>fMRI dead fish</p>
</blockquote>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/7_1.png" alt="7_1"><figcaption aria-hidden="true">7_1</figcaption>
</figure>
<figure>
<img src="/2021/03/19/Day3%E6%97%B6%E9%A2%91%E5%88%86%E6%9E%90/7_2.png" alt="7_2"><figcaption aria-hidden="true">7_2</figcaption>
</figure>
<h1 id="tips">Tips</h1>
<p>振幅：<span class="math inline">\(\mu V\)</span></p>
<p>功率：<span class="math inline">\({(\mu V )}^2\)</span> 时频分析</p>
<p>功率谱密度(PSD): <span class="math inline">\({(\mu V )}^2 /Hz\)</span></p>
<p>​ db: <span class="math inline">\(10log_{10}{PSD}\)</span></p>
]]></content>
      <categories>
        <category>脑电</category>
      </categories>
  </entry>
  <entry>
    <title>Day4功能连接</title>
    <url>/2021/03/21/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="功能连接">功能连接</h1>
<p>相关(时域) ——-fft——&gt; 相干(频域)</p>
<figure>
<img src="/2021/03/21/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/image-20210320150338896.png" alt="image-20210320150338896"><figcaption aria-hidden="true">image-20210320150338896</figcaption>
</figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all; close all; clc</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 指定相关信息</span></span><br><span class="line">Data_Dir = uigetdir([],<span class="string">&#x27;Path of the EEG datasets&#x27;</span>); <span class="comment">%指定待分析的脑电数据所在的路径；可以是预处理后的分段脑电数据。也可以是CSD转换后的分段数据；建议一个条件或一个组别一个文件夹，每个文件夹分别运行该代码</span></span><br><span class="line">Output_Dir = uigetdir([],<span class="string">&#x27;Path to store the measures&#x27;</span>);<span class="comment">%计算得到的指标文件保存的路径</span></span><br><span class="line"></span><br><span class="line">band = inputdlg(<span class="string">&#x27;the limits of band&#x27;</span>);<span class="comment">%指定所要分析的频率的范围（单位是Hz）</span></span><br><span class="line">band = str2num(band&#123;<span class="number">1</span>&#125;); <span class="comment">%将band变量由字符转换为数值；注意：运行本脚本时MATLAB的路径中不应该有HERMES工具箱</span></span><br><span class="line"></span><br><span class="line">bandname = inputdlg(<span class="string">&#x27;the name of the band you computed&#x27;</span>); <span class="comment">% 指定前述待分析的频段的名称</span></span><br><span class="line">bandname = bandname&#123;<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">prefix = inputdlg(<span class="string">&#x27;the prefix of computed measures&#x27;</span>);<span class="comment">%指定保存的指标文件的前缀，建议是条件名或组别名</span></span><br><span class="line">prefix = prefix&#123;<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 获取EEG数据路径中包含的set文件</span></span><br><span class="line">Dir_Data = dir(fullfile(Data_Dir,<span class="string">&#x27;*.set&#x27;</span>)); </span><br><span class="line">FileNames = &#123;Dir_Data.name&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% compute 1st measure (coherence)</span></span><br><span class="line"><span class="keyword">for</span> subj = <span class="number">1</span>:<span class="built_in">numel</span>(FileNames)  </span><br><span class="line">    EEG = pop_loadset(<span class="string">&#x27;filename&#x27;</span>,FileNames&#123;<span class="number">1</span>,subj&#125;,<span class="string">&#x27;filepath&#x27;</span>,Data_Dir); <span class="comment">% 载入某个被试的数据</span></span><br><span class="line">    EEG = eeg_checkset( EEG );</span><br><span class="line">    N = EEG.pnts; <span class="comment">%每段的长度（点数）</span></span><br><span class="line">    SampleRate = EEG.srate;<span class="comment">%取样率</span></span><br><span class="line">    NFFT = <span class="number">2</span>^<span class="built_in">nextpow2</span>(N);<span class="comment">%大于每段长度的、最小的2的N次方</span></span><br><span class="line">    Freq = SampleRate/<span class="number">2</span>*<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">1</span>,NFFT/<span class="number">2</span>+<span class="number">1</span>);<span class="comment">%频率轴 </span></span><br><span class="line">    <span class="keyword">for</span> chan = <span class="number">1</span>:<span class="built_in">size</span>(EEG.data,<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> epochs = <span class="number">1</span>:<span class="built_in">size</span>(EEG.data,<span class="number">3</span>)</span><br><span class="line">            ffts(:,chan,epochs) = fft(hanning(N).*<span class="built_in">squeeze</span>(EEG.data(chan,:,epochs))&#x27;,NFFT);<span class="comment">% 对该被试每个电极的每个分段进行FFT            </span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">for</span> x = <span class="number">1</span>:<span class="built_in">size</span>(EEG.data,<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> y = <span class="number">1</span>:<span class="built_in">size</span>(EEG.data,<span class="number">1</span>)</span><br><span class="line">                fx = <span class="built_in">squeeze</span>(ffts(:,x,:));</span><br><span class="line">                Pxx = fx.*<span class="built_in">conj</span>(fx)/N;</span><br><span class="line">                MeanPx = <span class="built_in">mean</span>(Pxx,<span class="number">2</span>); <span class="comment">% 计算coherence时，x电极的power</span></span><br><span class="line">                fy = <span class="built_in">squeeze</span>(ffts(:,y,:));</span><br><span class="line">                Pyy = fy.*<span class="built_in">conj</span>(fy)/N; </span><br><span class="line">                MeanPy = <span class="built_in">mean</span>(Pyy,<span class="number">2</span>); <span class="comment">% 计算coherence时，y电极的power</span></span><br><span class="line">                Pxy = fx.*<span class="built_in">conj</span>(fy)/N;</span><br><span class="line">                MeanPxy = <span class="built_in">mean</span>(Pxy,<span class="number">2</span>); <span class="comment">%% Sxy，上述两个电极的交叉谱</span></span><br><span class="line">                C = (<span class="built_in">abs</span>(MeanPxy).^<span class="number">2</span>)./(MeanPx.*MeanPy); <span class="comment">% 相干</span></span><br><span class="line">                coh(:,x,y,subj) = C; <span class="comment">% coherence，频率*电极*电极*被试</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    clear ffts</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">coh = coh(<span class="number">1</span>:NFFT/<span class="number">2</span> + <span class="number">1</span>,:,:,:);  </span><br><span class="line"></span><br><span class="line">idx = dsearchn(Freq&#x27;, band&#x27;); <span class="comment">%确定频段上下限在Freq即频率轴中的位置</span></span><br><span class="line">coh = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(coh(idx(<span class="number">1</span>,<span class="number">1</span>):idx(<span class="number">2</span>,<span class="number">1</span>),:,:,:),<span class="number">1</span>));<span class="comment">%计算某个频段的平均coh</span></span><br><span class="line"></span><br><span class="line">save(strcat(Output_Dir,<span class="string">&#x27;\&#x27;,prefix,&#x27;</span>_<span class="string">&#x27;,bandname,&#x27;</span>_coh.mat&#x27;),<span class="string">&#x27;coh&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 2nd and 3rd measures (phase-locking value and phase lag index)   </span></span><br><span class="line"><span class="keyword">for</span> subj = <span class="number">1</span>:<span class="built_in">numel</span>(FileNames)</span><br><span class="line">    EEG = pop_loadset(<span class="string">&#x27;filename&#x27;</span>,FileNames&#123;<span class="number">1</span>,subj&#125;,<span class="string">&#x27;filepath&#x27;</span>,Data_Dir);</span><br><span class="line">    EEG = eeg_checkset( EEG );</span><br><span class="line">    eeg_filtered = eegfilt(<span class="built_in">reshape</span>(EEG.data, [<span class="built_in">size</span>(EEG.data,<span class="number">1</span>) <span class="built_in">size</span>(EEG.data,<span class="number">2</span>)*<span class="built_in">size</span>(EEG.data,<span class="number">3</span>)]),...</span><br><span class="line">                   EEG.srate,band(<span class="number">1</span>,<span class="number">1</span>),band(<span class="number">1</span>,<span class="number">2</span>),<span class="number">0</span>,<span class="number">3</span>*<span class="built_in">fix</span>(EEG.srate/band(<span class="number">1</span>,<span class="number">1</span>)),<span class="number">0</span>,<span class="string">&#x27;fir1&#x27;</span>,<span class="number">0</span>); <span class="comment">% 对载入的数据进行带通滤波；使用eegfilt进行带通滤波时需要将分段数据重新变为连续数据 </span></span><br><span class="line">         </span><br><span class="line">    <span class="keyword">for</span> channels = <span class="number">1</span>:<span class="built_in">size</span>(EEG.data,<span class="number">1</span>)</span><br><span class="line">        band_phase(channels,:) = <span class="built_in">angle</span>(hilbert(eeg_filtered(channels,:))); <span class="comment">%逐个分段进行Hilbert变换，并提取相位</span></span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line">    perc10w =  <span class="built_in">floor</span>(<span class="built_in">size</span>(band_phase,<span class="number">2</span>)*<span class="number">0.1</span>);<span class="comment">% 确定数据长度10%是多少个样本点</span></span><br><span class="line">    band_phase = band_phase(:,perc10w+<span class="number">1</span>:<span class="keyword">end</span>-perc10w); <span class="comment">%因Hilbert变换对数据首尾相位估算不准确，顾去掉前10%和后10%样本点的相位</span></span><br><span class="line">    epoch_num = <span class="built_in">floor</span>(<span class="built_in">size</span>(band_phase,<span class="number">2</span>)/<span class="built_in">size</span>(EEG.data,<span class="number">2</span>)); <span class="comment">% 确定剩余的样本点如果转换为分段数据，可以分成多少段</span></span><br><span class="line">    band_phase = band_phase(:,<span class="number">1</span>:epoch_num*<span class="built_in">size</span>(EEG.data,<span class="number">2</span>)); <span class="comment">% 依据可以分成的段数，截取数据</span></span><br><span class="line">    band_phase = <span class="built_in">reshape</span>(band_phase,[<span class="built_in">size</span>(EEG.data,<span class="number">1</span>) <span class="built_in">size</span>(EEG.data,<span class="number">2</span>) epoch_num]);<span class="comment">% 将数据重新转换为三维：电极*样本点*分段</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> x = <span class="number">1</span>:<span class="built_in">size</span>(band_phase,<span class="number">1</span>)</span><br><span class="line">         <span class="keyword">for</span> y = <span class="number">1</span>:<span class="built_in">size</span>(band_phase,<span class="number">1</span>)</span><br><span class="line">             <span class="keyword">for</span> epochs = <span class="number">1</span>:<span class="built_in">size</span>(band_phase,<span class="number">3</span>)</span><br><span class="line">                 x_phase = <span class="built_in">squeeze</span>(band_phase(x,:,epochs)); <span class="comment">% 提取电极对中第一个电极在某个分段的相位</span></span><br><span class="line">                 y_phase = <span class="built_in">squeeze</span>(band_phase(y,:,epochs)); <span class="comment">% 提取电极对中第二个电极在某个分段的相位</span></span><br><span class="line">                 rp = x_phase - y_phase; <span class="comment">% 计算两个电极在某个分段的相位差</span></span><br><span class="line">                 <span class="comment">%%% PLV</span></span><br><span class="line">                 sub_plv(x,y,epochs) = <span class="built_in">abs</span>(sum(<span class="built_in">exp</span>(<span class="number">1</span><span class="built_in">i</span>*rp))/<span class="built_in">length</span>(rp)); <span class="comment">% 计算某个被试某个电极对在某个分段的PLV</span></span><br><span class="line">                 <span class="comment">%%% PLI</span></span><br><span class="line">                 sub_pli(x,y,epochs) = <span class="built_in">abs</span>(<span class="built_in">mean</span>(<span class="built_in">sign</span>((<span class="built_in">abs</span>(rp)- <span class="built_in">pi</span>).*rp))); <span class="comment">% 计算某个被试某个电极对在某个分段的PLI</span></span><br><span class="line">             <span class="keyword">end</span></span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">   pli(:,:,subj) = <span class="built_in">mean</span>(sub_pli,<span class="number">3</span>); <span class="comment">% 对该被试各个分段的PLI计算平均值；pli变量维度是电极*电极*被试</span></span><br><span class="line">   plv(:,:,subj) = <span class="built_in">mean</span>(sub_plv,<span class="number">3</span>); <span class="comment">% 对该被试各个分段的PLV计算平均值；plv变量维度是电极*电极*被试</span></span><br><span class="line">   clear band_phase sub_pli sub_plv</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">save(strcat(Output_Dir,<span class="string">&#x27;\&#x27;,prefix,&#x27;</span>_<span class="string">&#x27;,bandname,&#x27;</span>_plv.mat&#x27;),<span class="string">&#x27;plv&#x27;</span>);</span><br><span class="line">save(strcat(Output_Dir,<span class="string">&#x27;\&#x27;,prefix,&#x27;</span>_<span class="string">&#x27;,bandname,&#x27;</span>_pli.mat&#x27;),<span class="string">&#x27;pli&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%% compute 4th measure (weighted phase lag index)</span></span><br><span class="line"><span class="keyword">for</span> subj = <span class="number">1</span>:<span class="built_in">numel</span>(FileNames)</span><br><span class="line">    EEG = pop_loadset(<span class="string">&#x27;filename&#x27;</span>,FileNames&#123;<span class="number">1</span>,subj&#125;,<span class="string">&#x27;filepath&#x27;</span>,Data_Dir);</span><br><span class="line">    EEG = eeg_checkset( EEG );</span><br><span class="line">    eeg_filtered = eegfilt(<span class="built_in">reshape</span>(EEG.data, [<span class="built_in">size</span>(EEG.data,<span class="number">1</span>) <span class="built_in">size</span>(EEG.data,<span class="number">2</span>)*<span class="built_in">size</span>(EEG.data,<span class="number">3</span>)]),...</span><br><span class="line">                   EEG.srate,band(<span class="number">1</span>,<span class="number">1</span>),band(<span class="number">1</span>,<span class="number">2</span>),<span class="number">0</span>,<span class="number">3</span>*<span class="built_in">fix</span>(EEG.srate/band(<span class="number">1</span>,<span class="number">1</span>)),<span class="number">0</span>,<span class="string">&#x27;fir1&#x27;</span>,<span class="number">0</span>); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> channels = <span class="number">1</span>:<span class="built_in">size</span>(EEG.data,<span class="number">1</span>)</span><br><span class="line">        band_hilbert(channels,:) = hilbert(eeg_filtered(channels,:)); <span class="comment">% 对该被试每个通道的信号进行hilbert变换，得到解析信号（a + b*i）；计算wPLI不需要提取相位</span></span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line">    perc10w =  <span class="built_in">floor</span>(<span class="built_in">size</span>(band_hilbert,<span class="number">2</span>)*<span class="number">0.1</span>);</span><br><span class="line">    band_hilbert = band_hilbert(:,perc10w+<span class="number">1</span>:<span class="keyword">end</span>-perc10w);</span><br><span class="line">    epoch_num = <span class="built_in">floor</span>(<span class="built_in">size</span>(band_hilbert,<span class="number">2</span>)/<span class="built_in">size</span>(EEG.data,<span class="number">2</span>));</span><br><span class="line">    band_hilbert = band_hilbert(:,<span class="number">1</span>:epoch_num*<span class="built_in">size</span>(EEG.data,<span class="number">2</span>));</span><br><span class="line">    band_hilbert = <span class="built_in">reshape</span>(band_hilbert,[<span class="built_in">size</span>(EEG.data,<span class="number">1</span>) <span class="built_in">size</span>(EEG.data,<span class="number">2</span>) epoch_num]); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> x = <span class="number">1</span>:<span class="built_in">size</span>(band_hilbert,<span class="number">1</span>)</span><br><span class="line">         <span class="keyword">for</span> y = <span class="number">1</span>:<span class="built_in">size</span>(band_hilbert,<span class="number">1</span>)</span><br><span class="line">             <span class="keyword">for</span> epochs = <span class="number">1</span>:<span class="built_in">size</span>(band_hilbert,<span class="number">3</span>)</span><br><span class="line">                 x_hilbert = band_hilbert(x,:,epochs);</span><br><span class="line">                 y_hilbert = band_hilbert(y,:,epochs);</span><br><span class="line">                 crossspec = x_hilbert.* <span class="built_in">conj</span>(y_hilbert); <span class="comment">% 交叉谱</span></span><br><span class="line">                 crossspec_imag = <span class="built_in">imag</span>(crossspec); <span class="comment">% 交叉谱的虚部</span></span><br><span class="line">                 sub_wpli(x,y,epochs) = <span class="built_in">abs</span>(<span class="built_in">mean</span>(crossspec_imag))/<span class="built_in">mean</span>(<span class="built_in">abs</span>(crossspec_imag)); <span class="comment">% 计算某个被试某个电极对在某个分段的wPLI</span></span><br><span class="line">             <span class="keyword">end</span></span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    wpli(:,:,subj) = <span class="built_in">mean</span>(sub_wpli,<span class="number">3</span>); </span><br><span class="line">    clear band_hilbert sub_wpli</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">wpli(<span class="built_in">isnan</span>(wpli)) = <span class="number">0</span>;<span class="comment">% 因为对角线上的wpli数值为nan，故进行这个操作</span></span><br><span class="line">save(strcat(Output_Dir,<span class="string">&#x27;\&#x27;,prefix,&#x27;</span>_<span class="string">&#x27;,bandname,&#x27;</span>_wpli.mat&#x27;),<span class="string">&#x27;wpli&#x27;</span>);  </span><br><span class="line"><span class="comment">%% plot  所有被试 </span></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">size</span>(plv,<span class="number">3</span>)</span><br><span class="line">    subj_fc = plv(:,:,<span class="built_in">i</span>);</span><br><span class="line">    subplot(<span class="number">3</span>,<span class="number">5</span>,<span class="built_in">i</span>);</span><br><span class="line">    imagesc(subj_fc);</span><br><span class="line">    title([<span class="string">&#x27;subj&#x27;</span>,num2str(<span class="built_in">i</span>)]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 组平均</span></span><br><span class="line">group1_fc = <span class="built_in">mean</span>(plv,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">imagesc(group1_fc);</span><br><span class="line">title(<span class="string">&#x27;Group-Average  FC&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>相干</p>
<figure>
<img src="/2021/03/21/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/相干.png" alt="相干"><figcaption aria-hidden="true">相干</figcaption>
</figure>
<p>Group1</p>
<figure>
<img src="/2021/03/21/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/group1-1616230975680.png" alt="group1"><figcaption aria-hidden="true">group1</figcaption>
</figure>
<p>Group 1 组平均</p>
<figure>
<img src="/2021/03/21/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/group1_组平均-1616230993912.png" alt="group1_组平均"><figcaption aria-hidden="true">group1_组平均</figcaption>
</figure>
<h1 id="绘图code">绘图Code</h1>
<p>​</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;clear all;close all</span><br><span class="line"></span><br><span class="line">measures_path = <span class="string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day4\demo_data\rest_fc\&#x27;;</span></span><br><span class="line"><span class="string">channel_number = 20;</span></span><br><span class="line"><span class="string">%%  绘制coherence</span></span><br><span class="line"><span class="string">coh1 = importdata(strcat(measures_path,&#x27;</span>group1_alpha_coh.mat&#x27;)); <span class="comment">% 载入第一组被试的coh，并将其赋值给coh1变量，维度是电极*电极*被试</span></span><br><span class="line">coh2 = importdata(strcat(measures_path,<span class="string">&#x27;group2_alpha_coh.mat&#x27;</span>)); <span class="comment">% 载入第一组被试的coh，并将其赋值给coh2变量，维度是电极*电极*被试</span></span><br><span class="line"></span><br><span class="line">coh1_avg = <span class="built_in">mean</span>(coh1,<span class="number">3</span>); <span class="comment">% 计算第一组被试组平均的coh</span></span><br><span class="line">coh2_avg = <span class="built_in">mean</span>(coh2,<span class="number">3</span>); <span class="comment">% 计算第二组被试组平均的coh</span></span><br><span class="line"></span><br><span class="line">coh12_avg = [coh1_avg;coh2_avg]; <span class="comment">% 将第一组和第二组被试的组平均coh合并为coh12_avg</span></span><br><span class="line">coh12_avg = <span class="built_in">sort</span>(coh12_avg(:),<span class="string">&#x27;ascend&#x27;</span>); <span class="comment">%将coh12_avg中的coherence值从小到大排列</span></span><br><span class="line">coh12_avg = coh12_avg(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-2</span>*channel_number); <span class="comment">%对于coherence指标来说，连接矩阵对角线元素数值为1；由于两组被试组平均连接矩阵维度均为电极*电极，顾coh12_avg变量中会有2*电极数目个数值1；此处将对角线上的1删除</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>);imagesc(coh1_avg);caxis([<span class="built_in">min</span>(coh12_avg) <span class="built_in">max</span>(coh12_avg)]);colorbar; <span class="comment">% 第一个子图绘制第一组被试组平均的coh</span></span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>);imagesc(coh2_avg);caxis([<span class="built_in">min</span>(coh12_avg) <span class="built_in">max</span>(coh12_avg)]);colorbar; <span class="comment">% 第二个子图绘制第一组被试组平均的coh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%%  绘制PLV （解释参考coherence）</span></span><br><span class="line">plv1 = importdata(strcat(measures_path,<span class="string">&#x27;group1_alpha_plv.mat&#x27;</span>));</span><br><span class="line">plv2 = importdata(strcat(measures_path,<span class="string">&#x27;group2_alpha_plv.mat&#x27;</span>));</span><br><span class="line"></span><br><span class="line">plv1_avg = <span class="built_in">mean</span>(plv1,<span class="number">3</span>);</span><br><span class="line">plv2_avg = <span class="built_in">mean</span>(plv2,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">plv12_avg = [plv1_avg;plv2_avg]; </span><br><span class="line">plv12_avg = <span class="built_in">sort</span>(plv12_avg(:),<span class="string">&#x27;ascend&#x27;</span>);</span><br><span class="line">plv12_avg = plv12_avg(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-2</span>*channel_number);</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>);imagesc(plv1_avg);caxis([<span class="built_in">min</span>(plv12_avg) <span class="built_in">max</span>(plv12_avg)]);colorbar;</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>);imagesc(plv2_avg);caxis([<span class="built_in">min</span>(plv12_avg) <span class="built_in">max</span>(plv12_avg)]);colorbar;</span><br><span class="line"></span><br><span class="line"><span class="comment">%%  绘制PLI （解释参考coherence）</span></span><br><span class="line">pli1 = importdata(strcat(measures_path,<span class="string">&#x27;group1_alpha_pli.mat&#x27;</span>));</span><br><span class="line">pli2 = importdata(strcat(measures_path,<span class="string">&#x27;group2_alpha_pli.mat&#x27;</span>));</span><br><span class="line"></span><br><span class="line">pli1_avg = <span class="built_in">mean</span>(pli1,<span class="number">3</span>);</span><br><span class="line">pli2_avg = <span class="built_in">mean</span>(pli2,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">pli12_avg = [pli1_avg;pli2_avg]; </span><br><span class="line">pli12_avg = <span class="built_in">sort</span>(pli12_avg(:),<span class="string">&#x27;descend&#x27;</span>); <span class="comment">%降序排序</span></span><br><span class="line">pli12_avg = pli12_avg(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-2</span>*channel_number); <span class="comment">% 将对角线上的0去掉</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>);imagesc(pli1_avg);caxis([<span class="built_in">min</span>(pli12_avg) <span class="built_in">max</span>(pli12_avg)]);colorbar;</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>);imagesc(pli2_avg);caxis([<span class="built_in">min</span>(pli12_avg) <span class="built_in">max</span>(pli12_avg)]);colorbar;</span><br><span class="line"></span><br><span class="line"><span class="comment">%%  绘制wPLI （解释参考coherence）</span></span><br><span class="line">wpli1 = importdata(strcat(measures_path,<span class="string">&#x27;group1_alpha_wpli.mat&#x27;</span>));</span><br><span class="line">wpli2 = importdata(strcat(measures_path,<span class="string">&#x27;group2_alpha_wpli.mat&#x27;</span>));</span><br><span class="line"></span><br><span class="line">wpli1_avg = <span class="built_in">mean</span>(wpli1,<span class="number">3</span>);</span><br><span class="line">wpli2_avg = <span class="built_in">mean</span>(wpli2,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">wpli12_avg = [wpli1_avg;wpli2_avg]; </span><br><span class="line">wpli12_avg = <span class="built_in">sort</span>(wpli12_avg(:),<span class="string">&#x27;descend&#x27;</span>); <span class="comment">%降序排序</span></span><br><span class="line">wpli12_avg = wpli12_avg(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-2</span>*channel_number); <span class="comment">% 将对角线上的0去掉</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>);imagesc(wpli1_avg);caxis([<span class="built_in">min</span>(wpli12_avg) <span class="built_in">max</span>(wpli12_avg)]);colorbar;</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>);imagesc(wpli2_avg);caxis([<span class="built_in">min</span>(wpli12_avg) <span class="built_in">max</span>(wpli12_avg)]);colorbar;</span><br></pre></td></tr></table></figure>
<h1 id="连边分析">连边分析</h1>
<p>连通图</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 支持双样本T检验 和  配对T 检验</span></span><br><span class="line"></span><br><span class="line">clc;clear all;close all</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 指定相关信息</span></span><br><span class="line">[filename1, pathname1, filterindex] = uigetfile(<span class="string">&#x27;*.mat&#x27;</span>, <span class="string">&#x27;Pick the mat file of measures of one condition (group)&#x27;</span>); <span class="comment">% 指定第一个条件或组别的指标文件</span></span><br><span class="line">[filename2, pathname2, filterindex] = uigetfile(<span class="string">&#x27;*.mat&#x27;</span>, <span class="string">&#x27;Pick the mat file of measures of the other condition (group)&#x27;</span>); <span class="comment">% 指定第二个条件或组别的指标文件</span></span><br><span class="line"></span><br><span class="line">[filename3, pathname3, filterindex] = uigetfile(<span class="string">&#x27;*.set&#x27;</span>, <span class="string">&#x27;Pick an eeglab file used to computed the measures&#x27;</span>); <span class="comment">% 因为要绘制电极与电极间连接图，因此需要知道电极坐标信息；这里随便载入某个被试的脑电数据</span></span><br><span class="line"></span><br><span class="line">test_type = inputdlg(<span class="string">&#x27;Test Type? Paired t-test = 1 Independent t-test = 0&#x27;</span>); <span class="comment">% 指定检验的类型</span></span><br><span class="line">test_type = str2num(test_type&#123;<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">name1 = inputdlg(<span class="string">&#x27;the name of one condition (group)&#x27;</span>); <span class="comment">% 指定第一个条件或者组别的名称</span></span><br><span class="line">name1 = name1&#123;<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">name2 = inputdlg(<span class="string">&#x27;the name of the other condition (group)&#x27;</span>); <span class="comment">% 指定第二个条件或者组别的名称</span></span><br><span class="line">name2 = name2&#123;<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 载入某个eeglab格式脑电数据，获取该实验脑电数据的相关信息</span></span><br><span class="line">EEG = pop_loadset(<span class="string">&#x27;filename&#x27;</span>,filename3,<span class="string">&#x27;filepath&#x27;</span>,pathname3);</span><br><span class="line">chanlocs = EEG.chanlocs; <span class="comment">% 将通道位置信息保存在 chanlocs变量中</span></span><br><span class="line">channel_number = <span class="built_in">size</span>(EEG.data,<span class="number">1</span>); <span class="comment">% 获取电极数目</span></span><br><span class="line">fc_number = channel_number*(channel_number<span class="number">-1</span>)/<span class="number">2</span>; <span class="comment">% 获取电极对的数目</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 确定每个电极对分别对应哪两个电极</span></span><br><span class="line">pairs = <span class="built_in">nchoosek</span>(<span class="number">1</span>:channel_number,<span class="number">2</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">%% 载入两个条件（或组别）的指标</span></span><br><span class="line">A_fc  = importdata(strcat(pathname1,filename1)); <span class="comment">% 载入第一个条件或者第一组被试的功能连接矩阵，维度是电极*电极*被试</span></span><br><span class="line">B_fc  = importdata(strcat(pathname2,filename2)); <span class="comment">% 载入第二个条件或者第二组被试的功能连接矩阵，维度是电极*电极*被试</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 分别绘制两个条件（或组别）的总平均连通图</span></span><br><span class="line">A_fc_avg = <span class="built_in">mean</span>(A_fc,<span class="number">3</span>); <span class="comment">% 对被试维度求平均，得到第一个条件或者组别的组平均水平连接矩阵，维度是电极*电极</span></span><br><span class="line">A_fc_avg2 = <span class="built_in">zeros</span>(fc_number,<span class="number">1</span>); <span class="comment">% 对被试维度求平均，得到第二个条件或者组别的组平均水平连接矩阵，维度是电极*电极</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:fc_number</span><br><span class="line">    A_fc_avg2(<span class="built_in">i</span>,<span class="number">1</span>) = A_fc_avg(pairs(<span class="built_in">i</span>,<span class="number">1</span>),pairs(<span class="built_in">i</span>,<span class="number">2</span>));<span class="comment">% 提取连接矩阵上三角的功能连接值</span></span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"></span><br><span class="line">B_fc_avg = <span class="built_in">mean</span>(B_fc,<span class="number">3</span>);</span><br><span class="line">B_fc_avg2 = <span class="built_in">zeros</span>(fc_number,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:fc_number</span><br><span class="line">    B_fc_avg2(<span class="built_in">i</span>,<span class="number">1</span>) = B_fc_avg(pairs(<span class="built_in">i</span>,<span class="number">1</span>),pairs(<span class="built_in">i</span>,<span class="number">2</span>));</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"></span><br><span class="line">AB_fc_avg2 = [A_fc_avg2; B_fc_avg2];</span><br><span class="line"></span><br><span class="line">ds.chanPairs = pairs;  </span><br><span class="line">ds.connectStrength = A_fc_avg2; </span><br><span class="line">ds.connectStrengthLimits = [<span class="built_in">min</span>(AB_fc_avg2) <span class="built_in">max</span>(AB_fc_avg2)];</span><br><span class="line"><span class="built_in">figure</span>;title(name1);topoplot_connect(ds, chanlocs); </span><br><span class="line"></span><br><span class="line">ds.chanPairs = pairs;  </span><br><span class="line">ds.connectStrength = B_fc_avg2; </span><br><span class="line">ds.connectStrengthLimits = [<span class="built_in">min</span>(AB_fc_avg2) <span class="built_in">max</span>(AB_fc_avg2)];</span><br><span class="line"><span class="built_in">figure</span>;title(name2);topoplot_connect(ds, chanlocs); </span><br><span class="line"></span><br><span class="line"><span class="comment">%% 两个条件（或组别）间统计分析</span></span><br><span class="line"><span class="keyword">for</span>  <span class="built_in">i</span> = <span class="number">1</span>:fc_number   </span><br><span class="line">    A_fc_2(<span class="built_in">i</span>,:) = A_fc(pairs(<span class="built_in">i</span>,<span class="number">1</span>),pairs(<span class="built_in">i</span>,<span class="number">2</span>),:);</span><br><span class="line">    B_fc_2(<span class="built_in">i</span>,:) = B_fc(pairs(<span class="built_in">i</span>,<span class="number">1</span>),pairs(<span class="built_in">i</span>,<span class="number">2</span>),:);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> test_type == <span class="number">1</span> <span class="comment">% paired</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:fc_number </span><br><span class="line">       [~,p_right(<span class="built_in">i</span>,<span class="number">1</span>)] = ttest(A_fc_2(<span class="built_in">i</span>,:),B_fc_2(<span class="built_in">i</span>,:),<span class="number">0.05</span>,<span class="string">&#x27;right&#x27;</span>);</span><br><span class="line">       [~,p_left(<span class="built_in">i</span>,<span class="number">1</span>)] = ttest(A_fc_2(<span class="built_in">i</span>,:),B_fc_2(<span class="built_in">i</span>,:),<span class="number">0.05</span>,<span class="string">&#x27;left&#x27;</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span>  <span class="comment">% indpendent</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:fc_number </span><br><span class="line">       [~,p_right(<span class="built_in">i</span>,<span class="number">1</span>)] = ttest2(A_fc_2(<span class="built_in">i</span>,:),B_fc_2(<span class="built_in">i</span>,:),<span class="number">0.05</span>,<span class="string">&#x27;right&#x27;</span>);</span><br><span class="line">       [~,p_left(<span class="built_in">i</span>,<span class="number">1</span>)] = ttest2(A_fc_2(<span class="built_in">i</span>,:),B_fc_2(<span class="built_in">i</span>,:),<span class="number">0.05</span>,<span class="string">&#x27;left&#x27;</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">[~,h_right] = fdr(p_right,<span class="number">0.05</span>);</span><br><span class="line">idx_right = <span class="built_in">find</span>(h_right == <span class="number">1</span>);</span><br><span class="line">[~,h_left] = fdr(p_left,<span class="number">0.05</span>);</span><br><span class="line">idx_left = <span class="built_in">find</span>(h_left == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">ds.chanPairs = pairs(idx_right,:); </span><br><span class="line">ds.connectStrength = h_right(idx_right,<span class="number">1</span>);</span><br><span class="line">ds.connectStrengthLimits = [<span class="number">0</span> <span class="number">1</span>];</span><br><span class="line"><span class="built_in">figure</span>;title(strcat(<span class="string">&#x27;significant pairs: &#x27;</span>,name1,<span class="string">&#x27;&gt;&#x27;</span>,name2));</span><br><span class="line">topoplot_connect(ds, chanlocs);</span><br><span class="line"></span><br><span class="line">ds.chanPairs = pairs(idx_left,:); </span><br><span class="line">ds.connectStrength = h_left(idx_left,<span class="number">1</span>);</span><br><span class="line">ds.connectStrengthLimits = [<span class="number">0</span> <span class="number">1</span>];</span><br><span class="line"><span class="built_in">figure</span>;title(strcat(<span class="string">&#x27;significant pairs: &#x27;</span>,name1,<span class="string">&#x27;&lt;&#x27;</span>,name2));</span><br><span class="line">topoplot_connect(ds, chanlocs);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/21/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/1-1616237455788.png" alt="1"><figcaption aria-hidden="true">1</figcaption>
</figure>
<figure>
<img src="/2021/03/21/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/2-1616237467594.png" alt="2"><figcaption aria-hidden="true">2</figcaption>
</figure>
<figure>
<img src="/2021/03/21/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/3-1616237472787.png" alt="3"><figcaption aria-hidden="true">3</figcaption>
</figure>
<figure>
<img src="/2021/03/21/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/4.png" alt="4"><figcaption aria-hidden="true">4</figcaption>
</figure>
<h1 id="图论分析">图论分析</h1>
<p>全局</p>
<ul>
<li>网络的平均路径长度(长程)</li>
<li>全局效率</li>
<li>网络平均集群系数(近程)</li>
<li>网络平均局部效率(近程)</li>
<li>小世界属性(远 近)</li>
</ul>
<p>局部</p>
<ul>
<li><p>节点集群系数(近程)</p></li>
<li><p>局部效率（近程）</p></li>
<li><p>节点效率(远程)</p></li>
<li><p>节点度(重要性)</p></li>
<li><p>节点介数(重要性)</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 分段</span></span><br><span class="line">fc_data = importdata(<span class="string">&#x27;D:\MyWorkSpace\Matlab\SiYingPeiXun\25EEG_day4\demo_data\rest_fc\group2_alpha_coh.mat&#x27;</span>);</span><br><span class="line">group = <span class="string">&#x27;group2&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">size</span>(fc_data,<span class="number">3</span>)</span><br><span class="line">    subj_data = fc_data(:,:,<span class="built_in">i</span>);</span><br><span class="line">    save([group, <span class="string">&#x27;_subj&#x27;</span>,num2str(<span class="built_in">i</span>),<span class="string">&#x27;.mat&#x27;</span>], <span class="string">&#x27;subj_data&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>启动 GRETNA</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">gretna</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="任务态功能连通性分析">任务态功能连通性分析</h1>
<p>相位差 —-&gt; PLV</p>
<p><strong>任务态FC测试数据：</strong></p>
<ul>
<li><p>两种条件： go nogo</p></li>
<li><p>采样率 250Hz（4ms采一个数据）</p></li>
<li><p>通道数量：32个</p></li>
<li><p>分段时间范围 ： -1 ~ 1.996s</p></li>
</ul>
<p><strong>问题：</strong></p>
<p>（1）刺激后相对于刺激前，通道之间的连通性有无变化？如有变化，go 、nogo诱发的变化程度是否一致？若不一致，体现在哪些时频区域？</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;clear all; close all;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 指定相关信息</span></span><br><span class="line">Data_Dir = uigetdir([],<span class="string">&#x27;Path of the EEG datasets&#x27;</span>); <span class="comment">% 指定脑电数据所在的路径</span></span><br><span class="line">Output_Dir = uigetdir([],<span class="string">&#x27;Path to store the measures&#x27;</span>); <span class="comment">% 指定生成的指标保存的路径</span></span><br><span class="line"></span><br><span class="line">f_roi = inputdlg(<span class="string">&#x27;the frequencies of interest&#x27;</span>);<span class="comment">% STFT分析的频率点</span></span><br><span class="line">f_roi = str2num(f_roi&#123;<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">winsize = inputdlg(<span class="string">&#x27;the winsize of STFT (in seconds)&#x27;</span>); <span class="comment">% STFT分析的时间窗</span></span><br><span class="line">winsize = str2num(winsize&#123;<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">prefix = inputdlg(<span class="string">&#x27;the prefix of computed measures&#x27;</span>); <span class="comment">% 所要计算的指标的名称前缀；建议是条件名或组别名</span></span><br><span class="line">prefix = prefix&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">%% 计算PLV/PLI/wPLI</span></span><br><span class="line">Dir_Data = dir(fullfile(Data_Dir,<span class="string">&#x27;*.set&#x27;</span>));  </span><br><span class="line">filenames = &#123;Dir_Data.name&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> subj = <span class="number">1</span>:<span class="built_in">length</span>(filenames)</span><br><span class="line">    subj</span><br><span class="line">    EEG = pop_loadset(<span class="string">&#x27;filename&#x27;</span>,filenames&#123;<span class="number">1</span>, subj&#125;,<span class="string">&#x27;filepath&#x27;</span>,Data_Dir);</span><br><span class="line">    EEG = eeg_checkset( EEG );</span><br><span class="line">    <span class="comment">% STFT</span></span><br><span class="line">    Fs = EEG.srate;</span><br><span class="line">    xtimes = EEG.times/<span class="number">1000</span>;</span><br><span class="line">    t = EEG.times/<span class="number">1000</span>;   </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> nch = <span class="number">1</span>:EEG.nbchan</span><br><span class="line">       [S, P, F, U] = sub_stft(<span class="built_in">squeeze</span>(EEG.data(nch,:,:)), xtimes, t, f_roi, Fs, winsize);   <span class="comment">%对某个被试的数据逐个通道进行STFT </span></span><br><span class="line">       S_subject(:,:,:,nch) = S; <span class="comment">% 将该被试STFT后的解析信号赋值给S_subject 维度是频率*时间*试次*通道</span></span><br><span class="line">       clear P S F U</span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line">    <span class="comment">%</span></span><br><span class="line">    angle_subject = <span class="built_in">angle</span>(S_subject); <span class="comment">% 提取相位   </span></span><br><span class="line">    <span class="keyword">for</span> x = <span class="number">1</span>:EEG.nbchan</span><br><span class="line">        <span class="keyword">for</span> y = <span class="number">1</span>:EEG.nbchan</span><br><span class="line">            <span class="keyword">if</span> x &gt;= y <span class="comment">% 因PLV PLI和wPLI均为无向指标，顾这里只是计算电极*电极的连接矩阵的下三角</span></span><br><span class="line">                <span class="comment">% PLV &amp; PLI </span></span><br><span class="line">                tempx = <span class="built_in">squeeze</span>(angle_subject(:,:,:,x));</span><br><span class="line">                tempy = <span class="built_in">squeeze</span>(angle_subject(:,:,:,y));</span><br><span class="line">                relative_phase = tempx - tempy;</span><br><span class="line">                plv(:,:,x,y,subj) = <span class="built_in">abs</span>(sum(<span class="built_in">exp</span>(<span class="number">1</span><span class="built_in">i</span>*relative_phase),<span class="number">3</span>)/<span class="built_in">size</span>(relative_phase,<span class="number">3</span>));</span><br><span class="line">                pli(:,:,x,y,subj) = <span class="built_in">abs</span>(<span class="built_in">mean</span>(<span class="built_in">sign</span>((<span class="built_in">abs</span>(relative_phase)- <span class="built_in">pi</span>).*relative_phase),<span class="number">3</span>));</span><br><span class="line">                <span class="comment">% wPLI               </span></span><br><span class="line">                tempx2 = <span class="built_in">squeeze</span>(S_subject(:,:,:,x));</span><br><span class="line">                tempy2 = <span class="built_in">squeeze</span>(S_subject(:,:,:,y));</span><br><span class="line">                crossspec = tempx2.* <span class="built_in">conj</span>(tempy2);</span><br><span class="line">                crossspec_imag = <span class="built_in">imag</span>(crossspec);</span><br><span class="line">                wpli(:,:,x,y,subj) = <span class="built_in">abs</span>(<span class="built_in">mean</span>(crossspec_imag,<span class="number">3</span>))./<span class="built_in">mean</span>(<span class="built_in">abs</span>(crossspec_imag),<span class="number">3</span>);</span><br><span class="line">           <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line">    clear angle_subject tempx tempy tempx2 tempy2 relative_phase S_subject crossspec crossspec_imag</span><br><span class="line">    </span><br><span class="line">    waitbar(subj/<span class="built_in">length</span>(filenames))   </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">wpli(<span class="built_in">isnan</span>(wpli)) = <span class="number">0</span>;</span><br><span class="line">save(strcat(Output_Dir,<span class="string">&#x27;\&#x27;,prefix,&#x27;</span>_plv.mat&#x27;),<span class="string">&#x27;plv&#x27;</span>);</span><br><span class="line">save(strcat(Output_Dir,<span class="string">&#x27;\&#x27;,prefix,&#x27;</span>_pli.mat&#x27;),<span class="string">&#x27;pli&#x27;</span>);</span><br><span class="line">save(strcat(Output_Dir,<span class="string">&#x27;\&#x27;,prefix,&#x27;</span>_wpli.mat&#x27;),<span class="string">&#x27;wpli&#x27;</span>);             </span><br></pre></td></tr></table></figure>
<p>（2） go /nogo条件诱发的 连通性的变化的差异 主要体现在哪些连边上呢？</p>
<p>tf_fc_test.m</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;clear all;close all</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 指定相关信息</span></span><br><span class="line">channel_pair = inputdlg(<span class="string">&#x27;The channel pair to be test (e.g., [6 5])&#x27;</span>);</span><br><span class="line">channel_pair = str2num(channel_pair&#123;<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">time_axis = inputdlg(<span class="string">&#x27;The time axis of TFR (in ms)&#x27;</span>);</span><br><span class="line">time_axis = str2num(time_axis&#123;<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">f_axis = inputdlg(<span class="string">&#x27;The frequency axis of TFR (in Hz)&#x27;</span>);</span><br><span class="line">f_axis = str2num(f_axis&#123;<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">baseline = inputdlg(<span class="string">&#x27;The baseline limits (in ms)&#x27;</span>);</span><br><span class="line">baseline = str2num(baseline&#123;<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">test_type = inputdlg(<span class="string">&#x27;Test Type? Paired t-test = 1 Independent t-test = 0&#x27;</span>);</span><br><span class="line">test_type = str2num(test_type&#123;<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">name1 = inputdlg(<span class="string">&#x27;the name of one condition (group)&#x27;</span>);</span><br><span class="line">name1 = name1&#123;<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">name2 = inputdlg(<span class="string">&#x27;the name of the other condition (group)&#x27;</span>);</span><br><span class="line">name2 = name2&#123;<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 载入数据</span></span><br><span class="line">[filename1, pathname1, filterindex] = uigetfile(<span class="string">&#x27;*.mat&#x27;</span>, <span class="string">&#x27;Pick the mat file of measures of one condition (group)&#x27;</span>);</span><br><span class="line">[filename2, pathname2, filterindex] = uigetfile(<span class="string">&#x27;*.mat&#x27;</span>, <span class="string">&#x27;Pick the mat file of measures of the other condition (group)&#x27;</span>);</span><br><span class="line">A_fc = importdata(strcat(pathname1,filename1));</span><br><span class="line">B_fc = importdata(strcat(pathname2,filename2));</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 提取感兴趣电极对的数据，并进行基线矫正</span></span><br><span class="line">A_fc_x = <span class="built_in">squeeze</span>(A_fc(:,:,channel_pair(<span class="number">1</span>,<span class="number">1</span>),channel_pair(<span class="number">1</span>,<span class="number">2</span>),:));</span><br><span class="line">B_fc_x = <span class="built_in">squeeze</span>(B_fc(:,:,channel_pair(<span class="number">1</span>,<span class="number">1</span>),channel_pair(<span class="number">1</span>,<span class="number">2</span>),:));</span><br><span class="line">clear A_fc B_fc</span><br><span class="line"></span><br><span class="line">A_fc_x = A_fc_x - <span class="built_in">repmat</span>(<span class="built_in">mean</span>(A_fc_x(:,time_axis &gt;= baseline(<span class="number">1</span>,<span class="number">1</span>) &amp; time_axis &lt;= baseline(<span class="number">1</span>,<span class="number">2</span>),:),<span class="number">2</span>),[<span class="number">1</span> <span class="built_in">length</span>(time_axis) <span class="number">1</span>]);</span><br><span class="line">B_fc_x = B_fc_x - <span class="built_in">repmat</span>(<span class="built_in">mean</span>(B_fc_x(:,time_axis &gt;= baseline(<span class="number">1</span>,<span class="number">1</span>) &amp; time_axis &lt;= baseline(<span class="number">1</span>,<span class="number">2</span>),:),<span class="number">2</span>),[<span class="number">1</span> <span class="built_in">length</span>(time_axis) <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 对逐个时频点进行t检验，并使用FDR矫正</span></span><br><span class="line"><span class="keyword">if</span> test_type == <span class="number">1</span> <span class="comment">% paired</span></span><br><span class="line">    <span class="keyword">for</span> f = <span class="number">1</span>:<span class="built_in">size</span>(A_fc_x,<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> t = <span class="number">1</span>:<span class="built_in">size</span>(A_fc_x,<span class="number">2</span>)</span><br><span class="line">            [~,p(f,t)] = ttest(<span class="built_in">squeeze</span>(A_fc_x(f,t,:)),<span class="built_in">squeeze</span>(B_fc_x(f,t,:)));</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span>  <span class="comment">% indpendent</span></span><br><span class="line">    <span class="keyword">for</span> f = <span class="number">1</span>:<span class="built_in">size</span>(A_fc_x,<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> t = <span class="number">1</span>:<span class="built_in">size</span>(A_fc_x,<span class="number">2</span>)</span><br><span class="line">            [~,p(f,t)] = ttest2(<span class="built_in">squeeze</span>(A_fc_x(f,t,:)),<span class="built_in">squeeze</span>(B_fc_x(f,t,:)));</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>    </span><br><span class="line">    </span><br><span class="line">[~, p_masked] = fdr(p,<span class="number">0.05</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 绘图</span></span><br><span class="line">A_fc_x_mean = <span class="built_in">mean</span>(A_fc_x,<span class="number">3</span>);</span><br><span class="line">B_fc_x_mean = <span class="built_in">mean</span>(B_fc_x,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>); imagesc(time_axis,f_axis,A_fc_x_mean);axis xy; colorbar;title(name1)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>); imagesc(time_axis,f_axis,B_fc_x_mean);axis xy; colorbar;title(name2)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>); imagesc(time_axis,f_axis,p);axis xy; colorbar;title(<span class="string">&#x27;uncorrected p value&#x27;</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>); imagesc(time_axis,f_axis,p_masked);axis xy; colorbar;title(<span class="string">&#x27;significant area after FDR&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>通道 5 6 差异</strong></p>
<figure>
<img src="/2021/03/21/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/1-1616248267478.png" alt="1"><figcaption aria-hidden="true">1</figcaption>
</figure>
<p>未过0.05 FDR校正 矫正次数 30*750 （大）</p>
<p>tf_roi_fc_test.m</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;clear all;close all</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 指定相关信息</span></span><br><span class="line">time_axis = inputdlg(<span class="string">&#x27;The time axis of TFR (in ms)&#x27;</span>);</span><br><span class="line">time_axis = str2num(time_axis&#123;<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">f_axis = inputdlg(<span class="string">&#x27;The frequency axis of TFR (in Hz)&#x27;</span>);</span><br><span class="line">f_axis = str2num(f_axis&#123;<span class="number">1</span>&#125;);</span><br><span class="line"><span class="comment">% limits  输入上下限</span></span><br><span class="line">baseline = inputdlg(<span class="string">&#x27;The baseline limits (in ms)&#x27;</span>);</span><br><span class="line">baseline = str2num(baseline&#123;<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">t_roi = inputdlg(<span class="string">&#x27;The temporal limits of TF-ROI (in ms)&#x27;</span>);</span><br><span class="line">t_roi = str2num(t_roi&#123;<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">f_roi = inputdlg(<span class="string">&#x27;The spectral limits of TF-ROI (in Hz)&#x27;</span>);</span><br><span class="line">f_roi = str2num(f_roi&#123;<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">test_type = inputdlg(<span class="string">&#x27;Test Type? Paired t-test = 1 Independent t-test = 0&#x27;</span>);</span><br><span class="line">test_type = str2num(test_type&#123;<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">name1 = inputdlg(<span class="string">&#x27;the name of one condition (group)&#x27;</span>);</span><br><span class="line">name1 = name1&#123;<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">name2 = inputdlg(<span class="string">&#x27;the name of the other condition (group)&#x27;</span>);</span><br><span class="line">name2 = name2&#123;<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">[filename3, pathname3, filterindex] = uigetfile(<span class="string">&#x27;*.set&#x27;</span>, <span class="string">&#x27;Pick an eeglab file used to computed the measures&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 载入数据，并提取TF-ROI的指标，并将TF-ROI数据保存在current folder下</span></span><br><span class="line">[filename1, pathname1, filterindex] = uigetfile(<span class="string">&#x27;*.mat&#x27;</span>, <span class="string">&#x27;Pick the mat file of measures of one condition (group)&#x27;</span>);</span><br><span class="line">[filename2, pathname2, filterindex] = uigetfile(<span class="string">&#x27;*.mat&#x27;</span>, <span class="string">&#x27;Pick the mat file of measures of the other condition (group)&#x27;</span>);</span><br><span class="line">A_fc = importdata(strcat(pathname1,filename1));</span><br><span class="line">B_fc = importdata(strcat(pathname2,filename2));</span><br><span class="line"></span><br><span class="line">A_fc = A_fc - <span class="built_in">repmat</span>(<span class="built_in">mean</span>(A_fc(:,time_axis &gt;= baseline(<span class="number">1</span>,<span class="number">1</span>) &amp; time_axis &lt;= baseline(<span class="number">1</span>,<span class="number">2</span>),:,:,:),<span class="number">2</span>),[<span class="number">1</span> <span class="built_in">length</span>(time_axis) <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]);</span><br><span class="line">B_fc = B_fc - <span class="built_in">repmat</span>(<span class="built_in">mean</span>(B_fc(:,time_axis &gt;= baseline(<span class="number">1</span>,<span class="number">1</span>) &amp; time_axis &lt;= baseline(<span class="number">1</span>,<span class="number">2</span>),:,:,:),<span class="number">2</span>),[<span class="number">1</span> <span class="built_in">length</span>(time_axis) <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">A_fc_roi = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(<span class="built_in">mean</span>(A_fc(f_axis &gt;= f_roi(<span class="number">1</span>,<span class="number">1</span>) &amp; f_axis &lt;= f_roi(<span class="number">1</span>,<span class="number">2</span>),time_axis &gt;= t_roi(<span class="number">1</span>,<span class="number">1</span>) &amp; time_axis &lt;= t_roi(<span class="number">1</span>,<span class="number">2</span>),:,:,:),<span class="number">1</span>),<span class="number">2</span>));</span><br><span class="line">B_fc_roi = <span class="built_in">squeeze</span>(<span class="built_in">mean</span>(<span class="built_in">mean</span>(B_fc(f_axis &gt;= f_roi(<span class="number">1</span>,<span class="number">1</span>) &amp; f_axis &lt;= f_roi(<span class="number">1</span>,<span class="number">2</span>),time_axis &gt;= t_roi(<span class="number">1</span>,<span class="number">1</span>) &amp; time_axis &lt;= t_roi(<span class="number">1</span>,<span class="number">2</span>),:,:,:),<span class="number">1</span>),<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">fc_roi&#123;<span class="number">1</span>,<span class="number">1</span>&#125; = A_fc_roi;</span><br><span class="line">fc_roi&#123;<span class="number">1</span>,<span class="number">2</span>&#125; = B_fc_roi;</span><br><span class="line">save fc_roi.mat fc_roi  t_roi f_roi</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 载入某个eeglab格式脑电数据，获取该实验脑电数据的相关信息</span></span><br><span class="line">EEG = pop_loadset(<span class="string">&#x27;filename&#x27;</span>,filename3,<span class="string">&#x27;filepath&#x27;</span>,pathname3);</span><br><span class="line">chanlocs = EEG.chanlocs;</span><br><span class="line">channel_number = <span class="built_in">size</span>(EEG.data,<span class="number">1</span>);</span><br><span class="line">fc_number = channel_number*(channel_number<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 确定每个电极对分别对应哪两个电极</span></span><br><span class="line">pairs = <span class="built_in">nchoosek</span>(<span class="number">1</span>:channel_number,<span class="number">2</span>); </span><br><span class="line">pairs = pairs(:,[<span class="number">2</span> <span class="number">1</span>]); <span class="comment">% 因PS_computation计算的是下三角（行数值大于列数值），但是pairs是第一列小于第二列数值（行数值小于列数字），顾这里将第一列和第二列置换 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 分别绘制两个条件（或组别）的总平均连通图</span></span><br><span class="line">A_avg = <span class="built_in">mean</span>(A_fc_roi,<span class="number">3</span>);</span><br><span class="line">A_avg2 = <span class="built_in">zeros</span>(fc_number,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:fc_number</span><br><span class="line">    A_avg2(<span class="built_in">i</span>,<span class="number">1</span>) = A_avg(pairs(<span class="built_in">i</span>,<span class="number">1</span>),pairs(<span class="built_in">i</span>,<span class="number">2</span>));</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"></span><br><span class="line">B_avg = <span class="built_in">mean</span>(B_fc_roi,<span class="number">3</span>);</span><br><span class="line">B_avg2 = <span class="built_in">zeros</span>(fc_number,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:fc_number</span><br><span class="line">    B_avg2(<span class="built_in">i</span>,<span class="number">1</span>) = B_avg(pairs(<span class="built_in">i</span>,<span class="number">1</span>),pairs(<span class="built_in">i</span>,<span class="number">2</span>));</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"></span><br><span class="line">AB_avg2 = [A_avg2; B_avg2];</span><br><span class="line"></span><br><span class="line">ds.chanPairs = pairs;  </span><br><span class="line">ds.connectStrength = A_avg2; </span><br><span class="line">ds.connectStrengthLimits = [<span class="built_in">min</span>(AB_avg2) <span class="built_in">max</span>(AB_avg2)];</span><br><span class="line"><span class="built_in">figure</span>;title(name1);topoplot_connect(ds, chanlocs); </span><br><span class="line"></span><br><span class="line">ds.chanPairs = pairs;  </span><br><span class="line">ds.connectStrength = B_avg2; </span><br><span class="line">ds.connectStrengthLimits = [<span class="built_in">min</span>(AB_avg2) <span class="built_in">max</span>(AB_avg2)];</span><br><span class="line"><span class="built_in">figure</span>;title(name2);topoplot_connect(ds, chanlocs);  </span><br><span class="line"><span class="comment">%% 两个条件（或组别）间统计分析</span></span><br><span class="line"><span class="keyword">for</span>  <span class="built_in">i</span> = <span class="number">1</span>:fc_number   </span><br><span class="line">    A_fc_roi_2(<span class="built_in">i</span>,:) = A_fc_roi(pairs(<span class="built_in">i</span>,<span class="number">1</span>),pairs(<span class="built_in">i</span>,<span class="number">2</span>),:);</span><br><span class="line">    B_fc_roi_2(<span class="built_in">i</span>,:) = B_fc_roi(pairs(<span class="built_in">i</span>,<span class="number">1</span>),pairs(<span class="built_in">i</span>,<span class="number">2</span>),:);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> test_type == <span class="number">1</span> <span class="comment">% paired</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:fc_number </span><br><span class="line">       [~,p_right(<span class="built_in">i</span>,<span class="number">1</span>)] = ttest(A_fc_roi_2(<span class="built_in">i</span>,:),B_fc_roi_2(<span class="built_in">i</span>,:),<span class="number">0.05</span>,<span class="string">&#x27;right&#x27;</span>);</span><br><span class="line">       [~,p_left(<span class="built_in">i</span>,<span class="number">1</span>)] = ttest(A_fc_roi_2(<span class="built_in">i</span>,:),B_fc_roi_2(<span class="built_in">i</span>,:),<span class="number">0.05</span>,<span class="string">&#x27;left&#x27;</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span>  <span class="comment">% indpendent</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:fc_number </span><br><span class="line">       [~,p_right(<span class="built_in">i</span>,<span class="number">1</span>)] = ttest2(A_fc_roi_2(<span class="built_in">i</span>,:),B_fc_roi_2(<span class="built_in">i</span>,:),<span class="number">0.05</span>,<span class="string">&#x27;right&#x27;</span>);</span><br><span class="line">       [~,p_left(<span class="built_in">i</span>,<span class="number">1</span>)] = ttest2(A_fc_roi_2(<span class="built_in">i</span>,:),B_fc_roi_2(<span class="built_in">i</span>,:),<span class="number">0.05</span>,<span class="string">&#x27;left&#x27;</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">[~,h_right] = fdr(p_right,<span class="number">0.05</span>);</span><br><span class="line">idx_right = <span class="built_in">find</span>(h_right == <span class="number">1</span>);</span><br><span class="line">[~,h_left] = fdr(p_left,<span class="number">0.05</span>);</span><br><span class="line">idx_left = <span class="built_in">find</span>(h_left == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">ds.chanPairs = pairs(idx_right,:); </span><br><span class="line">ds.connectStrength = h_right(idx_right,<span class="number">1</span>);</span><br><span class="line">ds.connectStrengthLimits = [<span class="number">0</span> <span class="number">1</span>];</span><br><span class="line"><span class="built_in">figure</span>;title(strcat(<span class="string">&#x27;significant pairs: &#x27;</span>,name1,<span class="string">&#x27;&gt;&#x27;</span>,name2));topoplot_connect(ds, chanlocs);</span><br><span class="line"></span><br><span class="line">ds.chanPairs = pairs(idx_left,:); </span><br><span class="line">ds.connectStrength = h_left(idx_left,<span class="number">1</span>);</span><br><span class="line">ds.connectStrengthLimits = [<span class="number">0</span> <span class="number">1</span>];</span><br><span class="line"><span class="built_in">figure</span>;title(strcat(<span class="string">&#x27;significant pairs: &#x27;</span>,name1,<span class="string">&#x27;&lt;&#x27;</span>,name2));topoplot_connect(ds, chanlocs);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/21/Day4%E5%8A%9F%E8%83%BD%E8%BF%9E%E6%8E%A5/image-20210320220603717.png" alt="image-20210320220603717"><figcaption aria-hidden="true">image-20210320220603717</figcaption>
</figure>
<p><strong>空间滤波</strong></p>
<p>过滤切向电流</p>
<p>(可选操作)</p>
<p>compute_CSDdata.m</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;clear all;close all</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 指定需要计算CSD的EEGLAB格式文件所在的路径及CSD输出的路径（输出路径中保存的EEGLAB格式文件保存的是CSD而非EEG）</span></span><br><span class="line">Data_Dir = uigetdir([],<span class="string">&#x27;Path of the EEG datasets&#x27;</span>); <span class="comment">% 弹出对话框要求制定数据所在路径</span></span><br><span class="line">Output_Dir = uigetdir([],<span class="string">&#x27;Path of the computed CSD datasets&#x27;</span>); <span class="comment">% 弹出对话框要求制定生成的CSD数据集所在的路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 获取电极排布信息（空间坐标）</span></span><br><span class="line">Dir_Data = dir(fullfile(Data_Dir,<span class="string">&#x27;*.set&#x27;</span>));  <span class="comment">% 在Dir_Data变量中存储脑电数据文件夹中所有set文件的信息</span></span><br><span class="line">filenames = &#123;Dir_Data.name&#125;; <span class="comment">% 将数据文件夹中所有set文件的名称返回给filenames变量 </span></span><br><span class="line">EEG = pop_loadset(<span class="string">&#x27;filename&#x27;</span>,filenames&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,<span class="string">&#x27;filepath&#x27;</span>,Data_Dir);<span class="comment">% 因我们需要知道数据中有哪些电极，顾载入上述set文件中的第一个（其实随便一个文件都行）</span></span><br><span class="line">electrodes = &#123;EEG.chanlocs.labels&#125;&#x27;; <span class="comment">% 将上述载入的脑电数据中电极的名称返回给electrodes变量</span></span><br><span class="line">Montage = ExtractMontage(<span class="string">&#x27;10-5-System_Mastoids_EGI129.csd&#x27;</span>,electrodes); </span><br><span class="line"><span class="comment">% 在10-5-System_Mastoids_EGI129.csd文件中，检索前述所有电极的坐标。</span></span><br><span class="line"><span class="comment">% 顾应该在使用本脚本前查阅该文件确定自己的数据各个电极是否可以在此文件中找到坐标。如找不到应该事先将该电极删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 计算 G 和 H 矩阵</span></span><br><span class="line">[G,H] = GetGH(Montage);</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 对每个数据计算CSD</span></span><br><span class="line"><span class="keyword">for</span> f = <span class="number">1</span>:<span class="built_in">length</span>(filenames)</span><br><span class="line">    EEG = pop_loadset(<span class="string">&#x27;filename&#x27;</span>,filenames&#123;<span class="number">1</span>,f&#125;,<span class="string">&#x27;filepath&#x27;</span>,Data_Dir); <span class="comment">% 载入待转换的脑电数据</span></span><br><span class="line">    EEG = eeg_checkset( EEG );     </span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">size</span>(EEG.data,<span class="number">3</span>)</span><br><span class="line">        D = <span class="built_in">squeeze</span>(EEG.data(:,:,<span class="built_in">i</span>));</span><br><span class="line">        X = CSD (D, G, H); <span class="comment">% 每个分段分别进行转换得到CSD</span></span><br><span class="line">        CSDdata(:,:,<span class="built_in">i</span>) = X;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    EEG.data = CSDdata; <span class="comment">% 将转换后生成的CSD赋值给EEG变量的域data</span></span><br><span class="line">    EEG = eeg_checkset( EEG );</span><br><span class="line">    EEG = pop_saveset(EEG,<span class="string">&#x27;filename&#x27;</span>,filenames&#123;<span class="number">1</span>,f&#125;,<span class="string">&#x27;filepath&#x27;</span>,Output_Dir);<span class="comment">%保存CSD；此时CSD以set文件保存</span></span><br><span class="line">    clear CSDdata</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>脑电</category>
      </categories>
  </entry>
  <entry>
    <title>Day1C++</title>
    <url>/2021/03/26/Day1C/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="c基础入门">C++基础入门</h1>
<h2 id="c初识">1 C++初识</h2>
<h3 id="第一个c程序">1.1 第一个C++程序</h3>
<p>编写一个C++程序总共分为4个步骤</p>
<ul>
<li>创建项目</li>
<li>创建文件</li>
<li>编写代码</li>
<li>运行程序</li>
</ul>
<h4 id="创建项目">1.1.1 创建项目</h4>
<pre><code>Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</code></pre>
<figure>
<img src="/2021/03/26/Day1C/1541383178746.png" alt="1541383178746"><figcaption aria-hidden="true">1541383178746</figcaption>
</figure>
<figure>
<img src="/2021/03/26/Day1C/1541384366413.png" alt="1541384366413"><figcaption aria-hidden="true">1541384366413</figcaption>
</figure>
<h4 id="创建文件">1.1.2 创建文件</h4>
<p>右键源文件，选择添加-&gt;新建项</p>
<figure>
<img src="/2021/03/26/Day1C/1541383817248.png" alt="1541383817248"><figcaption aria-hidden="true">1541383817248</figcaption>
</figure>
<p>给C++文件起个名称，然后点击添加即可。</p>
<figure>
<img src="/2021/03/26/Day1C/1541384140042.png" alt="1541384140042"><figcaption aria-hidden="true">1541384140042</figcaption>
</figure>
<h4 id="编写代码">1.1.3 编写代码</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="运行程序">1.1.4 运行程序</h4>
<figure>
<img src="/2021/03/26/Day1C/1541384818688.png" alt="1541384818688"><figcaption aria-hidden="true">1541384818688</figcaption>
</figure>
<h3 id="注释">1.2 注释</h3>
<p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p>
<p><strong>两种格式</strong></p>
<ol type="1">
<li><strong>单行注释</strong>：<code>// 描述信息</code>
<ul>
<li>通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==</li>
</ul></li>
<li><strong>多行注释</strong>： <code>/* 描述信息 */</code>
<ul>
<li>通常放在一段代码的上方，==对该段代码做整体说明==</li>
</ul></li>
</ol>
<blockquote>
<p>提示：编译器在编译代码时，会忽略注释的内容</p>
</blockquote>
<h3 id="变量">1.3 变量</h3>
<p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p>
<p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//变量的定义</span></span><br><span class="line">	<span class="comment">//语法：数据类型  变量名 = 初始值</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p>
</blockquote>
<h3 id="常量">1.4 常量</h3>
<p><strong>作用</strong>：用于记录程序中不可更改的数据</p>
<p>C++定义常量两种方式</p>
<ol type="1">
<li><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code>
<ul>
<li>==通常在文件上方定义==，表示一个常量</li>
</ul></li>
<li><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code>
<ul>
<li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li>
</ul></li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、宏常量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> day 7</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;一周里总共有 &quot;</span> &lt;&lt; day &lt;&lt; <span class="string">&quot; 天&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//day = 8;  //报错，宏常量不可以修改</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、const修饰变量</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> month = <span class="number">12</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;一年里总共有 &quot;</span> &lt;&lt; month &lt;&lt; <span class="string">&quot; 个月份&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//month = 24; //报错，常量是不可以修改的</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="关键字">1.5 关键字</h3>
<p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p>
<ul>
<li><strong>在定义变量或者常量时候，不要用关键字</strong></li>
</ul>
<p>C++关键字如下：</p>
<table>
<thead>
<tr class="header">
<th>asm</th>
<th>do</th>
<th>if</th>
<th>return</th>
<th>typedef</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>auto</td>
<td>double</td>
<td>inline</td>
<td>short</td>
<td>typeid</td>
</tr>
<tr class="even">
<td>bool</td>
<td>dynamic_cast</td>
<td>int</td>
<td>signed</td>
<td>typename</td>
</tr>
<tr class="odd">
<td>break</td>
<td>else</td>
<td>long</td>
<td>sizeof</td>
<td>union</td>
</tr>
<tr class="even">
<td>case</td>
<td>enum</td>
<td>mutable</td>
<td>static</td>
<td>unsigned</td>
</tr>
<tr class="odd">
<td>catch</td>
<td>explicit</td>
<td>namespace</td>
<td>static_cast</td>
<td>using</td>
</tr>
<tr class="even">
<td>char</td>
<td>export</td>
<td>new</td>
<td>struct</td>
<td>virtual</td>
</tr>
<tr class="odd">
<td>class</td>
<td>extern</td>
<td>operator</td>
<td>switch</td>
<td>void</td>
</tr>
<tr class="even">
<td>const</td>
<td>false</td>
<td>private</td>
<td>template</td>
<td>volatile</td>
</tr>
<tr class="odd">
<td>const_cast</td>
<td>float</td>
<td>protected</td>
<td>this</td>
<td>wchar_t</td>
</tr>
<tr class="even">
<td>continue</td>
<td>for</td>
<td>public</td>
<td>throw</td>
<td>while</td>
</tr>
<tr class="odd">
<td>default</td>
<td>friend</td>
<td>register</td>
<td>true</td>
<td></td>
</tr>
<tr class="even">
<td>delete</td>
<td>goto</td>
<td>reinterpret_cast</td>
<td>try</td>
<td></td>
</tr>
</tbody>
</table>
<p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p>
<h3 id="标识符命名规则">1.6 标识符命名规则</h3>
<p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p>
<ul>
<li>标识符不能是关键字</li>
<li>标识符只能由字母、数字、下划线组成</li>
<li>第一个字符必须为字母或下划线</li>
<li>标识符中字母区分大小写</li>
</ul>
<blockquote>
<p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p>
</blockquote>
<h2 id="数据类型">2 数据类型</h2>
<p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p>
<h3 id="整型">2.1 整型</h3>
<p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p>
<p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p>
<table>
<thead>
<tr class="header">
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th>取值范围</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>short(短整型)</td>
<td>2字节</td>
<td>(-2^15 ~ 2^15-1)</td>
</tr>
<tr class="even">
<td>int(整型)</td>
<td>4字节</td>
<td>(-2^31 ~ 2^31-1)</td>
</tr>
<tr class="odd">
<td>long(长整形)</td>
<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>
<td>(-2^31 ~ 2^31-1)</td>
</tr>
<tr class="even">
<td>long long(长长整形)</td>
<td>8字节</td>
<td>(-2^63 ~ 2^63-1)</td>
</tr>
</tbody>
</table>
<h3 id="sizeof关键字">2.2 sizeof关键字</h3>
<p><strong>作用：</strong>利用sizeof关键字可以==统计数据类型所占内存大小==</p>
<p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;short 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">short</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;int 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;long long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">long</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= long long==</p>
</blockquote>
<h3 id="实型浮点型">2.3 实型（浮点型）</h3>
<p><strong>作用</strong>：用于==表示小数==</p>
<p>浮点型变量分为两种：</p>
<ol type="1">
<li>单精度float</li>
<li>双精度double</li>
</ol>
<p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p>
<table>
<thead>
<tr class="header">
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th><strong>有效数字范围</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>float</td>
<td>4字节</td>
<td>7位有效数字</td>
</tr>
<tr class="even">
<td>double</td>
<td>8字节</td>
<td>15～16位有效数字</td>
</tr>
</tbody>
</table>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> f1 = <span class="number">3.14f</span>;</span><br><span class="line">	<span class="keyword">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; f1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; d1&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;float  sizeof = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(f1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;double sizeof = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(d1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//科学计数法</span></span><br><span class="line">	<span class="keyword">float</span> f2 = <span class="number">3e2</span>; <span class="comment">// 3 * 10 ^ 2 </span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;f2 = &quot;</span> &lt;&lt; f2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> f3 = <span class="number">3e-2</span>;  <span class="comment">// 3 * 0.1 ^ 2</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;f3 = &quot;</span> &lt;&lt; f3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字符型">2.4 字符型</h3>
<p><strong>作用：</strong>字符型变量用于显示单个字符</p>
<p><strong>语法：</strong><code>char ch = 'a';</code></p>
<blockquote>
<p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p>
</blockquote>
<blockquote>
<p>注意2：单引号内只能有一个字符，不可以是字符串</p>
</blockquote>
<ul>
<li>C和C++中字符型变量只占用==1个字节==。</li>
<li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li>
</ul>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">char</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//ch = &quot;abcde&quot;; //错误，不可以用双引号</span></span><br><span class="line">	<span class="comment">//ch = &#x27;abcde&#x27;; //错误，单引号内只能引用一个字符</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>)ch &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//查看字符a对应的ASCII码</span></span><br><span class="line">	ch = <span class="number">97</span>; <span class="comment">//可以直接用ASCII给字符型变量赋值</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ASCII码表格：</p>
<table>
<thead>
<tr class="header">
<th><strong>ASCII</strong>值</th>
<th><strong>控制字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>NUT</td>
<td>32</td>
<td>(space)</td>
<td>64</td>
<td>@</td>
<td>96</td>
<td>、</td>
</tr>
<tr class="even">
<td>1</td>
<td>SOH</td>
<td>33</td>
<td>!</td>
<td>65</td>
<td>A</td>
<td>97</td>
<td>a</td>
</tr>
<tr class="odd">
<td>2</td>
<td>STX</td>
<td>34</td>
<td>"</td>
<td>66</td>
<td>B</td>
<td>98</td>
<td>b</td>
</tr>
<tr class="even">
<td>3</td>
<td>ETX</td>
<td>35</td>
<td>#</td>
<td>67</td>
<td>C</td>
<td>99</td>
<td>c</td>
</tr>
<tr class="odd">
<td>4</td>
<td>EOT</td>
<td>36</td>
<td>$</td>
<td>68</td>
<td>D</td>
<td>100</td>
<td>d</td>
</tr>
<tr class="even">
<td>5</td>
<td>ENQ</td>
<td>37</td>
<td>%</td>
<td>69</td>
<td>E</td>
<td>101</td>
<td>e</td>
</tr>
<tr class="odd">
<td>6</td>
<td>ACK</td>
<td>38</td>
<td>&amp;</td>
<td>70</td>
<td>F</td>
<td>102</td>
<td>f</td>
</tr>
<tr class="even">
<td>7</td>
<td>BEL</td>
<td>39</td>
<td>,</td>
<td>71</td>
<td>G</td>
<td>103</td>
<td>g</td>
</tr>
<tr class="odd">
<td>8</td>
<td>BS</td>
<td>40</td>
<td>(</td>
<td>72</td>
<td>H</td>
<td>104</td>
<td>h</td>
</tr>
<tr class="even">
<td>9</td>
<td>HT</td>
<td>41</td>
<td>)</td>
<td>73</td>
<td>I</td>
<td>105</td>
<td>i</td>
</tr>
<tr class="odd">
<td>10</td>
<td>LF</td>
<td>42</td>
<td>*</td>
<td>74</td>
<td>J</td>
<td>106</td>
<td>j</td>
</tr>
<tr class="even">
<td>11</td>
<td>VT</td>
<td>43</td>
<td>+</td>
<td>75</td>
<td>K</td>
<td>107</td>
<td>k</td>
</tr>
<tr class="odd">
<td>12</td>
<td>FF</td>
<td>44</td>
<td>,</td>
<td>76</td>
<td>L</td>
<td>108</td>
<td>l</td>
</tr>
<tr class="even">
<td>13</td>
<td>CR</td>
<td>45</td>
<td>-</td>
<td>77</td>
<td>M</td>
<td>109</td>
<td>m</td>
</tr>
<tr class="odd">
<td>14</td>
<td>SO</td>
<td>46</td>
<td>.</td>
<td>78</td>
<td>N</td>
<td>110</td>
<td>n</td>
</tr>
<tr class="even">
<td>15</td>
<td>SI</td>
<td>47</td>
<td>/</td>
<td>79</td>
<td>O</td>
<td>111</td>
<td>o</td>
</tr>
<tr class="odd">
<td>16</td>
<td>DLE</td>
<td>48</td>
<td>0</td>
<td>80</td>
<td>P</td>
<td>112</td>
<td>p</td>
</tr>
<tr class="even">
<td>17</td>
<td>DCI</td>
<td>49</td>
<td>1</td>
<td>81</td>
<td>Q</td>
<td>113</td>
<td>q</td>
</tr>
<tr class="odd">
<td>18</td>
<td>DC2</td>
<td>50</td>
<td>2</td>
<td>82</td>
<td>R</td>
<td>114</td>
<td>r</td>
</tr>
<tr class="even">
<td>19</td>
<td>DC3</td>
<td>51</td>
<td>3</td>
<td>83</td>
<td>S</td>
<td>115</td>
<td>s</td>
</tr>
<tr class="odd">
<td>20</td>
<td>DC4</td>
<td>52</td>
<td>4</td>
<td>84</td>
<td>T</td>
<td>116</td>
<td>t</td>
</tr>
<tr class="even">
<td>21</td>
<td>NAK</td>
<td>53</td>
<td>5</td>
<td>85</td>
<td>U</td>
<td>117</td>
<td>u</td>
</tr>
<tr class="odd">
<td>22</td>
<td>SYN</td>
<td>54</td>
<td>6</td>
<td>86</td>
<td>V</td>
<td>118</td>
<td>v</td>
</tr>
<tr class="even">
<td>23</td>
<td>TB</td>
<td>55</td>
<td>7</td>
<td>87</td>
<td>W</td>
<td>119</td>
<td>w</td>
</tr>
<tr class="odd">
<td>24</td>
<td>CAN</td>
<td>56</td>
<td>8</td>
<td>88</td>
<td>X</td>
<td>120</td>
<td>x</td>
</tr>
<tr class="even">
<td>25</td>
<td>EM</td>
<td>57</td>
<td>9</td>
<td>89</td>
<td>Y</td>
<td>121</td>
<td>y</td>
</tr>
<tr class="odd">
<td>26</td>
<td>SUB</td>
<td>58</td>
<td>:</td>
<td>90</td>
<td>Z</td>
<td>122</td>
<td>z</td>
</tr>
<tr class="even">
<td>27</td>
<td>ESC</td>
<td>59</td>
<td>;</td>
<td>91</td>
<td>[</td>
<td>123</td>
<td>{</td>
</tr>
<tr class="odd">
<td>28</td>
<td>FS</td>
<td>60</td>
<td>&lt;</td>
<td>92</td>
<td>/</td>
<td>124</td>
<td>|</td>
</tr>
<tr class="even">
<td>29</td>
<td>GS</td>
<td>61</td>
<td>=</td>
<td>93</td>
<td>]</td>
<td>125</td>
<td>}</td>
</tr>
<tr class="odd">
<td>30</td>
<td>RS</td>
<td>62</td>
<td>&gt;</td>
<td>94</td>
<td>^</td>
<td>126</td>
<td>`</td>
</tr>
<tr class="even">
<td>31</td>
<td>US</td>
<td>63</td>
<td>?</td>
<td>95</td>
<td>_</td>
<td>127</td>
<td>DEL</td>
</tr>
</tbody>
</table>
<p>ASCII 码大致由以下<strong>两部分组</strong>成：</p>
<ul>
<li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li>
<li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li>
</ul>
<h3 id="转义字符">2.5 转义字符</h3>
<p><strong>作用：</strong>用于表示一些==不能显示出来的ASCII字符==</p>
<p>现阶段我们常用的转义字符有：<code>\n  \\  \t</code></p>
<table>
<thead>
<tr class="header">
<th><strong>转义字符</strong></th>
<th><strong>含义</strong></th>
<th><strong>ASCII</strong>码值（十进制）</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td>警报</td>
<td>007</td>
</tr>
<tr class="even">
<td> 退格(BS) ，将当前位置移到前一列</td>
<td>008</td>
<td></td>
</tr>
<tr class="odd">
<td> 换页(FF)，将当前位置移到下页开头</td>
<td>012</td>
<td></td>
</tr>
<tr class="even">
<td>***</td>
<td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td>
<td><strong>010</strong></td>
</tr>
<tr class="odd">
<td> 回车(CR) ，将当前位置移到本行开头</td>
<td>013</td>
<td></td>
</tr>
<tr class="even">
<td>**</td>
<td><strong>水平制表(HT) （跳到下一个TAB位置）</strong></td>
<td><strong>009</strong></td>
</tr>
<tr class="odd">
<td> 垂直制表(VT)</td>
<td>011</td>
<td></td>
</tr>
<tr class="even">
<td><strong>\\</strong></td>
<td><strong>代表一个反斜线字符""</strong></td>
<td><strong>092</strong></td>
</tr>
<tr class="odd">
<td>'</td>
<td>代表一个单引号（撇号）字符</td>
<td>039</td>
</tr>
<tr class="even">
<td>"</td>
<td>代表一个双引号字符</td>
<td>034</td>
</tr>
<tr class="odd">
<td>?</td>
<td>代表一个问号</td>
<td>063</td>
</tr>
<tr class="even">
<td>\0</td>
<td>数字0</td>
<td>000</td>
</tr>
<tr class="odd">
<td></td>
<td>8进制转义字符，d范围0~7</td>
<td>3位8进制</td>
</tr>
<tr class="even">
<td></td>
<td>16进制转义字符，h范围0<sub>9，a</sub>f，A~F</td>
<td>3位16进制</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\\&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\tHello&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字符串型">2.6 字符串型</h3>
<p><strong>作用</strong>：用于表示一串字符</p>
<p><strong>两种风格</strong></p>
<ol type="1">
<li><p><strong>C风格字符串</strong>： <code>char 变量名[] = "字符串值"</code></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> str1[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; str1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>注意：C风格的字符串要用双引号括起来</p>
</blockquote>
<ol type="1">
<li><p><strong>C++风格字符串</strong>： <code>string  变量名 = "字符串值"</code></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>注意：C++风格字符串，需要加入头文件==#include&lt;string&gt;==</p>
</blockquote>
<h3 id="布尔类型-bool">2.7 布尔类型 bool</h3>
<p><strong>作用：</strong>布尔数据类型代表真或假的值</p>
<p>bool类型只有两个值：</p>
<ul>
<li>true --- 真（本质是1）</li>
<li>false --- 假（本质是0）</li>
</ul>
<p><strong>bool类型占==1个字节==大小</strong></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	flag = <span class="literal">false</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;size of bool = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">bool</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//1</span></span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数据的输入">2.8 数据的输入</h3>
<p><strong>作用：用于从键盘获取数据</strong></p>
<p><strong>关键字：</strong>cin</p>
<p><strong>语法：</strong> <code>cin &gt;&gt; 变量</code></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//整型输入</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入整型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//浮点型输入</span></span><br><span class="line">	<span class="keyword">double</span> d = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入浮点型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; d;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符型输入</span></span><br><span class="line">	<span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入字符型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符串型输入</span></span><br><span class="line">	<span class="built_in">string</span> str;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入字符串型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//布尔类型输入</span></span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入布尔型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; flag;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运算符">3 运算符</h2>
<p><strong>作用：</strong>用于执行代码的运算</p>
<p>本章我们主要讲解以下几类运算符：</p>
<table>
<thead>
<tr class="header">
<th><strong>运算符类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>算术运算符</td>
<td>用于处理四则运算</td>
</tr>
<tr class="even">
<td>赋值运算符</td>
<td>用于将表达式的值赋给变量</td>
</tr>
<tr class="odd">
<td>比较运算符</td>
<td>用于表达式的比较，并返回一个真值或假值</td>
</tr>
<tr class="even">
<td>逻辑运算符</td>
<td>用于根据表达式的值返回真值或假值</td>
</tr>
</tbody>
</table>
<h3 id="算术运算符">3.1 算术运算符</h3>
<p><strong>作用</strong>：用于处理四则运算</p>
<p>算术运算符包括以下符号：</p>
<table>
<thead>
<tr class="header">
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>+</td>
<td>正号</td>
<td>+3</td>
<td>3</td>
</tr>
<tr class="even">
<td>-</td>
<td>负号</td>
<td>-3</td>
<td>-3</td>
</tr>
<tr class="odd">
<td>+</td>
<td>加</td>
<td>10 + 5</td>
<td>15</td>
</tr>
<tr class="even">
<td>-</td>
<td>减</td>
<td>10 - 5</td>
<td>5</td>
</tr>
<tr class="odd">
<td>*</td>
<td>乘</td>
<td>10 * 5</td>
<td>50</td>
</tr>
<tr class="even">
<td>/</td>
<td>除</td>
<td>10 / 5</td>
<td>2</td>
</tr>
<tr class="odd">
<td>%</td>
<td>取模(取余)</td>
<td>10 % 3</td>
<td>1</td>
</tr>
<tr class="even">
<td>++</td>
<td>前置递增</td>
<td>a=2; b=++a;</td>
<td>a=3; b=3;</td>
</tr>
<tr class="odd">
<td>++</td>
<td>后置递增</td>
<td>a=2; b=a++;</td>
<td>a=3; b=2;</td>
</tr>
<tr class="even">
<td>--</td>
<td>前置递减</td>
<td>a=2; b=--a;</td>
<td>a=1; b=1;</td>
</tr>
<tr class="odd">
<td>--</td>
<td>后置递减</td>
<td>a=2; b=a--;</td>
<td>a=1; b=2;</td>
</tr>
</tbody>
</table>
<p><strong>示例1：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加减乘除</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a1 + b1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a1 - b1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a1 * b1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a1 / b1 &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//两个整数相除结果依然是整数</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b2 = <span class="number">20</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a2 / b2 &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b3 = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//两个小数可以相除</span></span><br><span class="line">	<span class="keyword">double</span> d1 = <span class="number">0.5</span>;</span><br><span class="line">	<span class="keyword">double</span> d2 = <span class="number">0.25</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; d1 / d2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：在除法运算中，除数不能为0</p>
</blockquote>
<p><strong>示例2：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取模</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="number">10</span> % <span class="number">3</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a2 % b2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//两个小数不可以取模</span></span><br><span class="line">	<span class="keyword">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line">	<span class="keyword">double</span> d2 = <span class="number">1.1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; d1 % d2 &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：只有整型变量可以进行取模运算</p>
</blockquote>
<p><strong>示例3：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递增</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置递增</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	a++; <span class="comment">//等价于a = a + 1</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//前置递增</span></span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">	++b;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//区别</span></span><br><span class="line">	<span class="comment">//前置递增先对变量进行++，再计算表达式</span></span><br><span class="line">	<span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b2 = ++a2 * <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; b2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置递增先计算表达式，后对变量进行++</span></span><br><span class="line">	<span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b3 = a3++ * <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; b3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p>
</blockquote>
<h3 id="赋值运算符">3.2 赋值运算符</h3>
<p><strong>作用：</strong>用于将表达式的值赋给变量</p>
<p>赋值运算符包括以下几个符号：</p>
<table>
<thead>
<tr class="header">
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>=</td>
<td>赋值</td>
<td>a=2; b=3;</td>
<td>a=2; b=3;</td>
</tr>
<tr class="even">
<td>+=</td>
<td>加等于</td>
<td>a=0; a+=2;</td>
<td>a=2;</td>
</tr>
<tr class="odd">
<td>-=</td>
<td>减等于</td>
<td>a=5; a-=3;</td>
<td>a=2;</td>
</tr>
<tr class="even">
<td>*=</td>
<td>乘等于</td>
<td>a=2; a*=2;</td>
<td>a=4;</td>
</tr>
<tr class="odd">
<td>/=</td>
<td>除等于</td>
<td>a=4; a/=2;</td>
<td>a=2;</td>
</tr>
<tr class="even">
<td>%=</td>
<td>模等于</td>
<td>a=3; a%2;</td>
<td>a=1;</td>
</tr>
</tbody>
</table>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//赋值运算符</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// =</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	a = <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// +=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a += <span class="number">2</span>; <span class="comment">// a = a + 2;</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// -=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a -= <span class="number">2</span>; <span class="comment">// a = a - 2</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// *=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a *= <span class="number">2</span>; <span class="comment">// a = a * 2</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// /=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a /= <span class="number">2</span>;  <span class="comment">// a = a / 2;</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// %=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a %= <span class="number">2</span>;  <span class="comment">// a = a % 2;</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="比较运算符">3.3 比较运算符</h3>
<p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p>
<p>比较运算符有以下符号：</p>
<table>
<thead>
<tr class="header">
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>==</td>
<td>相等于</td>
<td>4 == 3</td>
<td>0</td>
</tr>
<tr class="even">
<td>!=</td>
<td>不等于</td>
<td>4 != 3</td>
<td>1</td>
</tr>
<tr class="odd">
<td>&lt;</td>
<td>小于</td>
<td>4 &lt; 3</td>
<td>0</td>
</tr>
<tr class="even">
<td>&gt;</td>
<td>大于</td>
<td>4 &gt; 3</td>
<td>1</td>
</tr>
<tr class="odd">
<td>&lt;=</td>
<td>小于等于</td>
<td>4 &lt;= 3</td>
<td>0</td>
</tr>
<tr class="even">
<td>&gt;=</td>
<td>大于等于</td>
<td>4 &gt;= 1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a == b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a != b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &gt; b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &lt; b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &gt;= b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &lt;= b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示， “假”用数字“0”来表示。==</p>
</blockquote>
<h3 id="逻辑运算符">3.4 逻辑运算符</h3>
<p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p>
<p>逻辑运算符有以下符号：</p>
<table>
<thead>
<tr class="header">
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>!</td>
<td>非</td>
<td>!a</td>
<td>如果a为假，则!a为真； 如果a为真，则!a为假。</td>
</tr>
<tr class="even">
<td>&amp;&amp;</td>
<td>与</td>
<td>a &amp;&amp; b</td>
<td>如果a和b都为真，则结果为真，否则为假。</td>
</tr>
<tr class="odd">
<td>||</td>
<td>或</td>
<td>a || b</td>
<td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td>
</tr>
</tbody>
</table>
<p><strong>示例1：</strong>逻辑非</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 非</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; !a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; !!a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结： 真变假，假变真</p>
</blockquote>
<p><strong>示例2：</strong>逻辑与</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 与</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">0</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：逻辑==与==运算符总结： ==同真为真，其余为假==</p>
</blockquote>
<p><strong>示例3：</strong>逻辑或</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 或</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 1 </span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">0</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>逻辑==或==运算符总结： ==同假为假，其余为真==</p>
</blockquote>
<h2 id="程序流程结构">4 程序流程结构</h2>
<p>C/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==</p>
<ul>
<li>顺序结构：程序按顺序执行，不发生跳转</li>
<li>选择结构：依据条件是否满足，有选择的执行相应功能</li>
<li>循环结构：依据条件是否满足，循环多次执行某段代码</li>
</ul>
<h3 id="选择结构">4.1 选择结构</h3>
<h4 id="if语句">4.1.1 if语句</h4>
<p><strong>作用：</strong>执行满足条件的语句</p>
<p>if语句的三种形式</p>
<ul>
<li><p>单行格式if语句</p></li>
<li><p>多行格式if语句</p></li>
<li><p>多条件的if语句</p></li>
</ul>
<ol type="1">
<li><p>单行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p>
<figure>
<img src="/2021/03/26/Day1C/clip_image002.png" alt="img"><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//选择结构-单行if语句</span></span><br><span class="line">	<span class="comment">//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入一个分数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您输入的分数为： &quot;</span> &lt;&lt; score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//if语句</span></span><br><span class="line">	<span class="comment">//注意事项，在if判断语句后面，不要加分号</span></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了一本大学！！！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>注意：if条件表达式后不要加分号</p>
</blockquote>
<ol start="2" type="1">
<li>多行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li>
</ol>
<figure>
<img src="/2021/03/26/Day1C/clip_image002-1541662519170.png" alt="img"><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		e</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我未考上一本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>多条件的if语句：<code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li>
</ol>
<figure>
<img src="/2021/03/26/Day1C/clip_image002-1541662566808.png" alt="img"><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">500</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了二本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">400</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了三本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我未考上本科&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p>
<p>案例需求：</p>
<ul>
<li>提示用户输入一个高考考试分数，根据分数做如下判断</li>
<li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li>
<li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span> (score &gt; <span class="number">700</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了北大&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">650</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了清华&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了人大&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">500</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了二本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">400</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了三本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我未考上本科&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>练习案例：</strong> 三只小猪称体重</p>
<p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？<img src="/2021/03/26/Day1C/三只小猪.jpg" alt="三只小猪"></p>
<h4 id="三目运算符">4.1.2 三目运算符</h4>
<p><strong>作用：</strong> 通过三目运算符实现简单的判断</p>
<p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p>
<p><strong>解释：</strong></p>
<p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p>
<p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">	<span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	c = a &gt; b ? a : b;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//C++中三目运算符返回的是变量,可以继续赋值</span></span><br><span class="line"></span><br><span class="line">	(a &gt; b ? a : b) = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p>
</blockquote>
<h4 id="switch语句">4.1.3 switch语句</h4>
<p><strong>作用：</strong>执行多条件分支语句</p>
<p><strong>语法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> 结果<span class="number">1</span>：执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> 结果<span class="number">2</span>：执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="keyword">default</span>:执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//请给电影评分 </span></span><br><span class="line">	<span class="comment">//10 ~ 9   经典   </span></span><br><span class="line">	<span class="comment">// 8 ~ 7   非常好</span></span><br><span class="line">	<span class="comment">// 6 ~ 5   一般</span></span><br><span class="line">	<span class="comment">// 5分以下 烂片</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请给电影打分&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (score)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;经典&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;非常好&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;一般&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;烂片&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意1：switch语句中表达式类型只能是整型或者字符型</p>
</blockquote>
<blockquote>
<p>注意2：case里如果没有break，那么程序会一直向下执行</p>
</blockquote>
<blockquote>
<p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p>
</blockquote>
<h3 id="循环结构">4.2 循环结构</h3>
<h4 id="while循环语句">4.2.1 while循环语句</h4>
<p><strong>作用：</strong>满足循环条件，执行循环语句</p>
<p><strong>语法：</strong><code>while(循环条件)&#123; 循环语句 &#125;</code></p>
<p><strong>解释：</strong>==只要循环条件的结果为真，就执行循环语句==</p>
<figure>
<img src="/2021/03/26/Day1C/clip_image002-1541668640382.png" alt="img"><figcaption aria-hidden="true">img</figcaption>
</figure>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (num &lt; <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		num++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p>
</blockquote>
<p><strong>while循环练习案例：</strong>==猜数字==</p>
<p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p>
<figure>
<img src="/2021/03/26/Day1C/猜数字.jpg" alt="猜数字"><figcaption aria-hidden="true">猜数字</figcaption>
</figure>
<h4 id="do...while循环语句">4.2.2 do...while循环语句</h4>
<p><strong>作用：</strong> 满足循环条件，执行循环语句</p>
<p><strong>语法：</strong> <code>do&#123; 循环语句 &#125; while(循环条件);</code></p>
<p><strong>注意：</strong>与while的区别在于==do...while会先执行一次循环语句==，再判断循环条件</p>
<figure>
<img src="/2021/03/26/Day1C/clip_image002-1541671163478.png" alt="img"><figcaption aria-hidden="true">img</figcaption>
</figure>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		num++;</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">while</span> (num &lt; <span class="number">10</span>);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：与while循环区别在于，do...while先执行一次循环语句，再判断循环条件</p>
</blockquote>
<p><strong>练习案例：水仙花数</strong></p>
<p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p>
<p>例如：1^3 + 5^3+ 3^3 = 153</p>
<p>请利用do...while语句，求出所有3位数中的水仙花数</p>
<h4 id="for循环语句">4.2.3 for循环语句</h4>
<p><strong>作用：</strong> 满足循环条件，执行循环语句</p>
<p><strong>语法：</strong><code>for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>详解：</strong></p>
<figure>
<img src="/2021/03/26/Day1C/1541673704101.png" alt="1541673704101"><figcaption aria-hidden="true">1541673704101</figcaption>
</figure>
<blockquote>
<p>注意：for循环中的表达式，要用分号进行分隔</p>
</blockquote>
<blockquote>
<p>总结：while , do...while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p>
</blockquote>
<p><strong>练习案例：敲桌子</strong></p>
<p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p>
<figure>
<img src="/2021/03/26/Day1C/timg.gif" alt="timg"><figcaption aria-hidden="true">timg</figcaption>
</figure>
<h4 id="嵌套循环">4.2.4 嵌套循环</h4>
<p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p>
<p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p>
<figure>
<img src="/2021/03/26/Day1C/1541676003486.png" alt="1541676003486"><figcaption aria-hidden="true">1541676003486</figcaption>
</figure>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//外层循环执行1次，内层循环执行1轮</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>练习案例：</strong>乘法口诀表</p>
<p>案例描述：利用嵌套循环，实现九九乘法表</p>
<figure>
<img src="/2021/03/26/Day1C/0006018857256120_b.jpg" alt="0006018857256120_b"><figcaption aria-hidden="true">0006018857256120_b</figcaption>
</figure>
<h3 id="跳转语句">4.3 跳转语句</h3>
<h4 id="break语句">4.3.1 break语句</h4>
<p><strong>作用:</strong> 用于跳出==选择结构==或者==循环结构==</p>
<p>break使用的时机：</p>
<ul>
<li>出现在switch条件语句中，作用是终止case并跳出switch</li>
<li>出现在循环语句中，作用是跳出当前的循环语句</li>
<li>出现在嵌套循环中，跳出最近的内层循环语句</li>
</ul>
<p><strong>示例1：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1、在switch 语句中使用break</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择您挑战副本的难度：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1、普通&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2、中等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3、困难&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (num)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您选择的是普通难度&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您选择的是中等难度&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您选择的是困难难度&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例2：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//2、在循环语句中用break</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>; <span class="comment">//跳出循环语句</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例3：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//在嵌套循环语句中使用break，退出内层循环</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (j == <span class="number">5</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="continue语句">4.3.2 continue语句</h4>
<p><strong>作用：</strong>在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：continue并没有使整个循环终止，而break会跳出循环</p>
</blockquote>
<h4 id="goto语句">4.3.3 goto语句</h4>
<p><strong>作用：</strong>可以无条件跳转语句</p>
<p><strong>语法：</strong> <code>goto 标记;</code></p>
<p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">goto</span> FLAG;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;4&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	FLAG:</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;5&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p>
</blockquote>
<h2 id="数组">5 数组</h2>
<h3 id="概述">5.1 概述</h3>
<p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p>
<p><strong>特点1：</strong>数组中的每个==数据元素都是相同的数据类型==</p>
<p><strong>特点2：</strong>数组是由==连续的内存==位置组成的</p>
<figure>
<img src="/2021/03/26/Day1C/1541748375356.png" alt="1541748375356"><figcaption aria-hidden="true">1541748375356</figcaption>
</figure>
<h3 id="一维数组">5.2 一维数组</h3>
<h4 id="一维数组定义方式">5.2.1 一维数组定义方式</h4>
<p>一维数组定义的三种方式：</p>
<ol type="1">
<li><code>数据类型  数组名[ 数组长度 ];</code></li>
<li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li>
<li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li>
</ol>
<p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义方式1</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[元素个数];</span></span><br><span class="line">	<span class="keyword">int</span> score[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//利用下标赋值</span></span><br><span class="line">	score[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">	score[<span class="number">1</span>] = <span class="number">99</span>;</span><br><span class="line">	score[<span class="number">2</span>] = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//利用下标输出</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; score[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; score[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; score[<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//第二种定义方式</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class="line">	<span class="comment">//如果&#123;&#125;内不足10个数据，剩余数据用0补全</span></span><br><span class="line">	<span class="keyword">int</span> score2[<span class="number">10</span>] = &#123; <span class="number">100</span>, <span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> &#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//逐个输出</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; score2[0] &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; score2[1] &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//一个一个输出太麻烦，因此可以利用循环进行输出</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; score2[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义方式3</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class="line">	<span class="keyword">int</span> score3[] = &#123; <span class="number">100</span>,<span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; score3[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p>
</blockquote>
<blockquote>
<p>总结2：数组中下标是从0开始索引</p>
</blockquote>
<h4 id="一维数组数组名">5.2.2 一维数组数组名</h4>
<p>一维数组名称的<strong>用途</strong>：</p>
<ol type="1">
<li>可以统计整个数组在内存中的长度</li>
<li>可以获取数组在内存中的首地址</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//数组名用途</span></span><br><span class="line">	<span class="comment">//1、可以获取整个数组占用内存空间大小</span></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;整个数组所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;每个元素所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组的元素个数为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、可以通过数组名获取到数组首地址</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组首地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)arr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组中第一个元素地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组中第二个元素地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;arr[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//arr = 100; 错误，数组名是常量，因此不可以赋值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：数组名是常量，不可以赋值</p>
</blockquote>
<blockquote>
<p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p>
</blockquote>
<blockquote>
<p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p>
</blockquote>
<p><strong>练习案例1</strong>：五只小猪称体重</p>
<p><strong>案例描述：</strong></p>
<p>在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};</p>
<p>找出并打印最重的小猪体重。</p>
<p><strong>练习案例2：</strong>数组元素逆置</p>
<p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p>
<p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p>
<h4 id="冒泡排序">5.2.3 冒泡排序</h4>
<p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p>
<ol type="1">
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li>
<li>重复以上的步骤，每次比较次数-1，直到不需要比较</li>
</ol>
<figure>
<img src="/2021/03/26/Day1C/1541905327273.png" alt="1541905327273"><figcaption aria-hidden="true">1541905327273</figcaption>
</figure>
<p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">9</span>] = &#123; <span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span> - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span> - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二维数组">5.3 二维数组</h3>
<p>二维数组就是在一维数组上，多加一个维度。</p>
<figure>
<img src="/2021/03/26/Day1C/1541905559138.png" alt="1541905559138"><figcaption aria-hidden="true">1541905559138</figcaption>
</figure>
<h4 id="二维数组定义方式">5.3.1 二维数组定义方式</h4>
<p>二维数组定义的四种方式：</p>
<ol type="1">
<li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li>
<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li>
<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>
<li><code>数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>
</ol>
<blockquote>
<p>建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==</p>
</blockquote>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式1  </span></span><br><span class="line">	<span class="comment">//数组类型 数组名 [行数][列数]</span></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; arr[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式2 </span></span><br><span class="line">	<span class="comment">//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</span></span><br><span class="line">	<span class="keyword">int</span> arr2[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式3</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class="line">	<span class="keyword">int</span> arr3[<span class="number">2</span>][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;; </span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式4 </span></span><br><span class="line">	<span class="comment">//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class="line">	<span class="keyword">int</span> arr4[][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p>
</blockquote>
<h4 id="二维数组数组名">5.3.2 二维数组数组名</h4>
<ul>
<li>查看二维数组所占内存空间</li>
<li>获取二维数组首地址</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//二维数组数组名</span></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组大小： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组一行大小： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组元素大小： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组行数： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组列数： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//地址</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组首地址：&quot;</span> &lt;&lt; arr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第一行地址：&quot;</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第二行地址：&quot;</span> &lt;&lt; arr[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第一个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第二个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结1：二维数组名就是这个数组的首地址</p>
</blockquote>
<blockquote>
<p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p>
</blockquote>
<h4 id="二维数组应用案例"><strong>5.3.3 二维数组应用案例</strong></h4>
<p><strong>考试成绩统计：</strong></p>
<p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p>
<table>
<thead>
<tr class="header">
<th></th>
<th>语文</th>
<th>数学</th>
<th>英语</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>张三</td>
<td>100</td>
<td>100</td>
<td>100</td>
</tr>
<tr class="even">
<td>李四</td>
<td>90</td>
<td>50</td>
<td>100</td>
</tr>
<tr class="odd">
<td>王五</td>
<td>60</td>
<td>70</td>
<td>80</td>
</tr>
</tbody>
</table>
<p><strong>参考答案：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> scores[<span class="number">3</span>][<span class="number">3</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>&#125;,</span><br><span class="line">		&#123;<span class="number">90</span>,<span class="number">50</span>,<span class="number">100</span>&#125;,</span><br><span class="line">		&#123;<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>&#125;,</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> names[<span class="number">3</span>] = &#123; <span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			sum += scores[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; names[i] &lt;&lt; <span class="string">&quot;同学总成绩为： &quot;</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="函数">6 函数</h2>
<h3 id="概述-1">6.1 概述</h3>
<p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p>
<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>
<h3 id="函数的定义">6.2 函数的定义</h3>
<p>函数的定义一般主要有5个步骤：</p>
<p>1、返回值类型</p>
<p>2、函数名</p>
<p>3、参数表列</p>
<p>4、函数体语句</p>
<p>5、return 表达式</p>
<p><strong>语法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">返回值类型 函数名 （参数列表）</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">       函数体语句</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span>表达式</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li>
<li>函数名：给函数起个名称</li>
<li>参数列表：使用该函数时，传入的数据</li>
<li>函数体语句：花括号内的代码，函数内需要执行的语句</li>
<li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li>
</ul>
<p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum = num1 + num2;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数的调用">6.3 函数的调用</h3>
<p><strong>功能：</strong>使用定义好的函数</p>
<p><strong>语法：</strong><code>函数名（参数）</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> <span class="comment">//定义中的num1,num2称为形式参数，简称形参</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum = num1 + num2;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">	<span class="comment">//调用add函数</span></span><br><span class="line">	<span class="keyword">int</span> sum = add(a, b);<span class="comment">//调用时的a，b称为实际参数，简称实参</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	a = <span class="number">100</span>;</span><br><span class="line">	b = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	sum = add(a, b);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p>
</blockquote>
<h3 id="值传递">6.4 值传递</h3>
<ul>
<li>所谓值传递，就是函数调用时实参将数值传入给形参</li>
<li>值传递时，==如果形参发生，并不会影响实参==</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换前：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> temp = num1;</span><br><span class="line">	num1 = num2;</span><br><span class="line">	num2 = temp;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换后：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//return ; 当函数声明时候，不需要返回值，可以不写return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	swap(a, b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mian中的 a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mian中的 b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结： 值传递时，形参是修饰不了实参的</p>
</blockquote>
<h3 id="函数的常见样式"><strong>6.5 函数的常见样式</strong></h3>
<p>常见的函数样式有4种</p>
<ol type="1">
<li>无参无返</li>
<li>有参无返</li>
<li>无参有返</li>
<li>有参有返</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数常见样式</span></span><br><span class="line"><span class="comment">//1、 无参无返</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//void a = 10; //无类型不可以创建变量,原因无法分配内存</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is test01&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//test01(); 函数调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、 有参无返</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is test02&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、无参有返</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is test03 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、有参有返</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test04</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is test04 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">int</span> sum = a + b;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数的声明">6.6 函数的声明</h3>
<p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>
<ul>
<li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明可以多次，定义只能一次</span></span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; max(a, b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数的分文件编写">6.7 函数的分文件编写</h3>
<p><strong>作用：</strong>让代码结构更加清晰</p>
<p>函数分文件编写一般有4个步骤</p>
<ol type="1">
<li>创建后缀名为.h的头文件<br>
</li>
<li>创建后缀名为.cpp的源文件</li>
<li>在头文件中写函数的声明</li>
<li>在源文件中写函数的定义</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swap.h文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现两个数字交换的函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swap.cpp文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;swap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main函数文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;swap.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line">	swap(a, b);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="指针">7 指针</h2>
<h3 id="指针的基本概念">7.1 指针的基本概念</h3>
<p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p>
<ul>
<li>内存编号是从0开始记录的，一般用十六进制数字表示</li>
<li>可以利用指针变量保存地址</li>
</ul>
<h3 id="指针变量的定义和使用">7.2 指针变量的定义和使用</h3>
<p>指针变量定义语法： <code>数据类型 * 变量名；</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1、指针的定义</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">//定义整型变量a</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//指针定义语法： 数据类型 * 变量名 ;</span></span><br><span class="line">	<span class="keyword">int</span> * p;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量赋值</span></span><br><span class="line">	p = &amp;a; <span class="comment">//指针指向变量a的地址</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; &amp;a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//打印数据a的地址</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//打印指针变量p</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、指针的使用</span></span><br><span class="line">	<span class="comment">//通过*操作指针变量指向的内存</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*p = &quot;</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指针变量和普通变量的区别</p>
<ul>
<li>普通变量存放的是数据,指针变量存放的是地址</li>
<li>指针变量可以通过" * "操作符，操作指针变量指向的内存空间，这个过程称为解引用</li>
</ul>
<blockquote>
<p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p>
</blockquote>
<blockquote>
<p>总结2：利用指针可以记录地址</p>
</blockquote>
<blockquote>
<p>总结3：对指针变量解引用，可以操作指针指向的内存</p>
</blockquote>
<h3 id="指针所占内存空间">7.3 指针所占内存空间</h3>
<p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> * p;</span><br><span class="line">	p = &amp;a; <span class="comment">//指针指向数据a的地址</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//* 解引用</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(p) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">char</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">float</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">double</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：所有指针类型在32位操作系统下是4个字节</p>
</blockquote>
<h3 id="空指针和野指针">7.4 空指针和野指针</h3>
<p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p>
<p><strong>用途：</strong>初始化指针变量</p>
<p><strong>注意：</strong>空指针指向的内存是不可以访问的</p>
<p><strong>示例1：空指针</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量p指向内存地址编号为0的空间</span></span><br><span class="line">	<span class="keyword">int</span> * p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//访问空指针报错 </span></span><br><span class="line">	<span class="comment">//内存编号0 ~255为系统占用内存，不允许用户访问</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>
<p><strong>示例2：野指针</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量p指向内存地址编号为0x1100的空间</span></span><br><span class="line">	<span class="keyword">int</span> * p = (<span class="keyword">int</span> *)<span class="number">0x1100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//访问野指针报错 </span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p>
</blockquote>
<h3 id="const修饰指针">7.5 const修饰指针</h3>
<p>const修饰指针有三种情况</p>
<ol type="1">
<li>const修饰指针 --- 常量指针</li>
<li>const修饰常量 --- 指针常量</li>
<li>const即修饰指针，又修饰常量</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> * p1 = &amp;a; </span><br><span class="line">	p1 = &amp;b; <span class="comment">//正确</span></span><br><span class="line">	<span class="comment">//*p1 = 100;  报错</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span></span><br><span class="line">	<span class="keyword">int</span> * <span class="keyword">const</span> p2 = &amp;a;</span><br><span class="line">	<span class="comment">//p2 = &amp;b; //错误</span></span><br><span class="line">	*p2 = <span class="number">100</span>; <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//const既修饰指针又修饰常量</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p3 = &amp;a;</span><br><span class="line">	<span class="comment">//p3 = &amp;b; //错误</span></span><br><span class="line">	<span class="comment">//*p3 = 100; //错误</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p>
</blockquote>
<h3 id="指针和数组">7.6 指针和数组</h3>
<p><strong>作用：</strong>利用指针访问数组中元素</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> * p = arr;  <span class="comment">//指向数组的指针</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第一个元素： &quot;</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;指针访问第一个元素： &quot;</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//利用指针遍历数组</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		p++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="指针和函数">7.7 指针和函数</h3>
<p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap1</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b; </span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap2</span><span class="params">(<span class="keyword">int</span> * p1, <span class="keyword">int</span> *p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = *p1;</span><br><span class="line">	*p1 = *p2;</span><br><span class="line">	*p2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">	swap1(a, b); <span class="comment">// 值传递不会改变实参</span></span><br><span class="line"></span><br><span class="line">	swap2(&amp;a, &amp;b); <span class="comment">//地址传递会改变实参</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p>
</blockquote>
<h3 id="指针数组函数">7.8 指针、数组、函数</h3>
<p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>
<p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> * arr, <span class="keyword">int</span> len)</span>  <span class="comment">//int * arr 也可以写为int arr[]</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印数组函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line">	bubbleSort(arr, len);</span><br><span class="line"></span><br><span class="line">	printArray(arr, len);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p>
</blockquote>
<h2 id="结构体">8 结构体</h2>
<h3 id="结构体基本概念">8.1 结构体基本概念</h3>
<p>结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型</p>
<h3 id="结构体定义和使用">8.2 结构体定义和使用</h3>
<p><strong>语法：</strong><code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p>
<p>通过结构体创建变量的方式有三种：</p>
<ul>
<li>struct 结构体名 变量名</li>
<li>struct 结构体名 变量名 = { 成员1值 ， 成员2值...}</li>
<li>定义结构体时顺便创建变量</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;stu3; <span class="comment">//结构体变量创建方式3 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//结构体变量创建方式1</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu1</span>;</span> <span class="comment">//struct 关键字可以省略</span></span><br><span class="line"></span><br><span class="line">	stu1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">	stu1.age = <span class="number">18</span>;</span><br><span class="line">	stu1.score = <span class="number">100</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu1.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu1.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu1.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//结构体变量创建方式2</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu2</span> =</span> &#123; <span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu2.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu2.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu2.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	stu3.name = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line">	stu3.age = <span class="number">18</span>;</span><br><span class="line">	stu3.score = <span class="number">80</span>;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu3.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu3.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu3.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结1：定义结构体时的关键字是struct，不可省略</p>
</blockquote>
<blockquote>
<p>总结2：创建结构体变量时，关键字struct可以省略</p>
</blockquote>
<blockquote>
<p>总结3：结构体变量利用操作符 ''.'' 访问成员</p>
</blockquote>
<h3 id="结构体数组">8.3 结构体数组</h3>
<p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p>
<p><strong>语法：</strong><code>struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//结构体数组</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">arr</span>[3]=</span></span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">80</span> &#125;,</span><br><span class="line">		&#123;<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;,</span><br><span class="line">		&#123;<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>,<span class="number">70</span> &#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; arr[i].age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; arr[i].score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结构体指针">8.4 结构体指针</h3>
<p><strong>作用：</strong>通过指针访问结构体中的成员</p>
<ul>
<li>利用操作符 <code>-&gt;</code>可以通过结构体指针访问结构体属性</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span> =</span> &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span>, &#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> * <span class="title">p</span> =</span> &amp;stu;</span><br><span class="line">	</span><br><span class="line">	p-&gt;score = <span class="number">80</span>; <span class="comment">//指针通过 -&gt; 操作符可以访问成员</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p>
</blockquote>
<h3 id="结构体嵌套结构体">8.5 结构体嵌套结构体</h3>
<p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p>
<p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//教师结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//成员列表</span></span><br><span class="line">	<span class="keyword">int</span> id; <span class="comment">//职工编号</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//教师姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;   <span class="comment">//教师年龄</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>;</span> <span class="comment">//子结构体 学生</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> <span class="title">t1</span>;</span></span><br><span class="line">	t1.id = <span class="number">10000</span>;</span><br><span class="line">	t1.name = <span class="string">&quot;老王&quot;</span>;</span><br><span class="line">	t1.age = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">	t1.stu.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">	t1.stu.age = <span class="number">18</span>;</span><br><span class="line">	t1.stu.score = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;教师 职工编号： &quot;</span> &lt;&lt; t1.id &lt;&lt; <span class="string">&quot; 姓名： &quot;</span> &lt;&lt; t1.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; t1.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;辅导学员 姓名： &quot;</span> &lt;&lt; t1.stu.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; t1.stu.age &lt;&lt; <span class="string">&quot; 考试分数： &quot;</span> &lt;&lt; t1.stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p>
<h3 id="结构体做函数参数">8.6 结构体做函数参数</h3>
<p><strong>作用：</strong>将结构体作为参数向函数中传递</p>
<p>传递方式有两种：</p>
<ul>
<li>值传递</li>
<li>地址传递</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(student stu )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stu.age = <span class="number">28</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent2</span><span class="params">(student *stu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stu-&gt;age = <span class="number">28</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu-&gt;age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	student stu = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span>&#125;;</span><br><span class="line">	<span class="comment">//值传递</span></span><br><span class="line">	printStudent(stu);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//地址传递</span></span><br><span class="line">	printStudent2(&amp;stu);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p>
</blockquote>
<h3 id="结构体中-const使用场景">8.7 结构体中 const使用场景</h3>
<p><strong>作用：</strong>用const来防止误操作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const使用场景</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(<span class="keyword">const</span> student *stu)</span> <span class="comment">//加const防止函数体中的误操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//stu-&gt;age = 100; //操作失败，因为加了const修饰</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu-&gt;age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	student stu = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span> &#125;;</span><br><span class="line"></span><br><span class="line">	printStudent(&amp;stu);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结构体案例">8.8 结构体案例</h3>
<h4 id="案例1">8.8.1 案例1</h4>
<p><strong>案例描述：</strong></p>
<p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p>
<p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p>
<p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p>
<p>最终打印出老师数据以及老师所带的学生数据。</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	Student sArray[<span class="number">5</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">allocateSpace</span><span class="params">(Teacher tArray[] , <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> tName = <span class="string">&quot;教师&quot;</span>;</span><br><span class="line">	<span class="built_in">string</span> sName = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">	<span class="built_in">string</span> nameSeed = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		tArray[i].name = tName + nameSeed[i];</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			tArray[i].sArray[j].name = sName + nameSeed[j];</span><br><span class="line">			tArray[i].sArray[j].score = rand() % <span class="number">61</span> + <span class="number">40</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTeachers</span><span class="params">(Teacher tArray[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; tArray[i].name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; tArray[i].sArray[j].name &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; tArray[i].sArray[j].score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>)); <span class="comment">//随机数种子 头文件 #include &lt;ctime&gt;</span></span><br><span class="line"></span><br><span class="line">	Teacher tArray[<span class="number">3</span>]; <span class="comment">//老师数组</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> len = <span class="keyword">sizeof</span>(tArray) / <span class="keyword">sizeof</span>(Teacher);</span><br><span class="line"></span><br><span class="line">	allocateSpace(tArray, len); <span class="comment">//创建数据</span></span><br><span class="line"></span><br><span class="line">	printTeachers(tArray, len); <span class="comment">//打印数据</span></span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="案例2">8.8.2 案例2</h4>
<p><strong>案例描述：</strong></p>
<p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p>
<p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p>
<p>五名英雄信息如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span>&#125;,</span><br></pre></td></tr></table></figure>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//英雄结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hero</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="built_in">string</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(hero arr[] , <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j].age &gt; arr[j + <span class="number">1</span>].age)</span><br><span class="line">			&#123;</span><br><span class="line">				hero temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHeros</span><span class="params">(hero arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">&quot; 性别： &quot;</span> &lt;&lt; arr[i].sex &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; arr[i].age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hero</span> <span class="title">arr</span>[5] =</span></span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span>&#125;,</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(hero); <span class="comment">//获取数组元素个数</span></span><br><span class="line"></span><br><span class="line">	bubbleSort(arr, len); <span class="comment">//排序</span></span><br><span class="line"></span><br><span class="line">	printHeros(arr, len); <span class="comment">//打印</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
</search>
